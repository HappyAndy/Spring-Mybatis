-- phpMyAdmin SQL Dump
-- version 4.3.4
-- http://www.phpmyadmin.net
--
-- Host: localhost
-- Generation Time: 2016-12-12 16:20:27
-- 服务器版本： 5.5.40
-- PHP Version: 5.5.19

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `wordpress`
--

-- --------------------------------------------------------

--
-- 表的结构 `wp_posts`
--

CREATE TABLE IF NOT EXISTS `wp_posts` (
  `ID` bigint(20) unsigned NOT NULL,
  `post_author` bigint(20) unsigned NOT NULL DEFAULT '0',
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_title` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_excerpt` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'open',
  `post_password` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `post_name` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `to_ping` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `pinged` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `guid` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT '0',
  `post_type` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT '0'
) ENGINE=InnoDB AUTO_INCREMENT=304 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- 转存表中的数据 `wp_posts`
--

INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(2, 1, '2015-09-22 02:19:22', '2015-09-22 02:19:22', '作者是一名普通得不能再普通的程序猿，没啥事的时候就喜欢瞎搞搞，目前暂居海口，家里人要求我会成都，希望有人看到后，能叫我去他们公司面试，么么哒！<a href="http://acheng1314.cn/?p=99" rel="attachment wp-att-6">Android应用开发工程师_庞程_个人简历</a>', '关于作者', '', 'publish', 'open', 'open', '', 'sample-page', '', '', '2016-03-15 01:38:16', '2016-03-14 17:38:16', '', 0, 'http://115.28.161.133/?page_id=2', 0, 'page', '', 0),
(5, 1, '2015-09-22 16:26:29', '2015-09-22 08:26:29', '作者是一名普通得不能再普通的程序猿，没啥事的时候就喜欢瞎搞搞，目前暂居海口，家里人要求我会成都，希望有人看到后，能叫我去他们公司面试，么么哒！', '关于作者', '', 'inherit', 'closed', 'closed', '', '2-autosave-v1', '', '', '2015-09-22 16:26:29', '2015-09-22 08:26:29', '', 2, 'http://115.28.161.133/?p=5', 0, 'revision', '', 0),
(7, 1, '2015-09-22 16:31:06', '2015-09-22 08:31:06', '作者是一名普通得不能再普通的程序猿，没啥事的时候就喜欢瞎搞搞，目前暂居海口，家里人要求我会成都，希望有人看到后，能叫我去他们公司面试，么么哒！<a href="http://115.28.161.133/?attachment_id=6" rel="attachment wp-att-6">Android应用开发工程师_庞程_个人简历</a>', '关于作者', '', 'inherit', 'closed', 'closed', '', '2-revision-v1', '', '', '2015-09-22 16:31:06', '2015-09-22 08:31:06', '', 2, 'http://115.28.161.133/?p=7', 0, 'revision', '', 0),
(9, 1, '2015-09-22 16:44:48', '2015-09-22 08:44:48', '1、产品需求规格说明书\r\n\r\n2、软件需求说明书\r\n\r\n3、数据要求说明书\r\n\r\n4、概要设计说明书\r\n\r\n5、数据库设计说明书\r\n\r\n6、详细设计说明书\r\n\r\n7、软件配置管理计划\r\n\r\n8、模块开发卷宗\r\n\r\n9、开发进度月表\r\n\r\n10、测试计划\r\n\r\n11、测试分析报告\r\n\r\n12、软件质量保证计划\r\n\r\n13、操作手册\r\n\r\n14、用户手册\r\n\r\n15、项目开发总结报告', 'IT产品文档列表', '', 'publish', 'open', 'open', '', 'it%e4%ba%a7%e5%93%81%e6%96%87%e6%a1%a3%e5%88%97%e8%a1%a8', '', '', '2015-09-22 16:44:48', '2015-09-22 08:44:48', '', 0, 'http://115.28.161.133/?p=9', 0, 'post', '', 0),
(10, 1, '2015-09-22 16:44:48', '2015-09-22 08:44:48', '1、产品需求规格说明书\r\n\r\n2、软件需求说明书\r\n\r\n3、数据要求说明书\r\n\r\n4、概要设计说明书\r\n\r\n5、数据库设计说明书\r\n\r\n6、详细设计说明书\r\n\r\n7、软件配置管理计划\r\n\r\n8、模块开发卷宗\r\n\r\n9、开发进度月表\r\n\r\n10、测试计划\r\n\r\n11、测试分析报告\r\n\r\n12、软件质量保证计划\r\n\r\n13、操作手册\r\n\r\n14、用户手册\r\n\r\n15、项目开发总结报告', 'IT产品文档列表', '', 'inherit', 'closed', 'closed', '', '9-revision-v1', '', '', '2015-09-22 16:44:48', '2015-09-22 08:44:48', '', 9, 'http://115.28.161.133/?p=10', 0, 'revision', '', 0),
(11, 1, '2015-09-22 16:45:32', '2015-09-22 08:45:32', '一直都是使用java现在搞一个个人博客，用了PHP，对于一个菜鸟而言这是很难受的事情，但是与时俱进才是程序员的本职，let''s go！！！', '建站伊始，一切从头再来，本站用wordpress搭建，基于PHP。', '', 'publish', 'open', 'open', '', '%e5%bb%ba%e7%ab%99%e4%bc%8a%e5%a7%8b%ef%bc%8c%e4%b8%80%e5%88%87%e4%bb%8e%e5%a4%b4%e5%86%8d%e6%9d%a5%ef%bc%8c%e6%9c%ac%e7%ab%99%e7%94%a8wordpress%e6%90%ad%e5%bb%ba%ef%bc%8c%e5%9f%ba%e4%ba%8ephp', '', '', '2015-09-22 16:45:32', '2015-09-22 08:45:32', '', 0, 'http://115.28.161.133/?p=11', 0, 'post', '', 1),
(12, 1, '2015-09-22 16:45:32', '2015-09-22 08:45:32', '一直都是使用java现在搞一个个人博客，用了PHP，对于一个菜鸟而言这是很难受的事情，但是与时俱进才是程序员的本职，let''s go！！！', '建站伊始，一切从头再来，本站用wordpress搭建，基于PHP。', '', 'inherit', 'closed', 'closed', '', '11-revision-v1', '', '', '2015-09-22 16:45:32', '2015-09-22 08:45:32', '', 11, 'http://115.28.161.133/?p=12', 0, 'revision', '', 0),
(16, 1, '2015-09-26 14:45:31', '2015-09-26 06:45:31', '如题，这是安卓内部页签生成的第三方开源项目。在github.com上面可以直接搜索到。\r\n\r\n官方解释为：ViewPager指针项目，在使用ViewPager的时候能够指示ViewPager所在的位置，就像Google Play中切换的效果一样，还能使用在应用初始化的介绍页面。\r\n\r\n<a href="https://github.com/JakeWharton/ViewPagerIndicator">点击这里进入后，点击右边的按钮（DownLoad ZIP）进行下载</a>', '安卓页面内部页签第三方包Android-ViewPagerIndicator', '', 'publish', 'open', 'open', '', '%e5%ae%89%e5%8d%93%e9%a1%b5%e9%9d%a2%e5%86%85%e9%83%a8%e9%a1%b5%e7%ad%be%e7%ac%ac%e4%b8%89%e6%96%b9%e5%8c%85android-viewpagerindicator', '', '', '2015-09-26 14:46:46', '2015-09-26 06:46:46', '', 0, 'http://115.28.161.133/?p=16', 0, 'post', '', 0),
(17, 1, '2015-09-26 14:45:31', '2015-09-26 06:45:31', '如题，这是安卓内部页签生成的第三方开源项目。在github.com上面可以直接搜索到。\r\n\r\n官方解释为：ViewPager指针项目，在使用ViewPager的时候能够指示ViewPager所在的位置，就像Google Play中切换的效果一样，还能使用在应用初始化的介绍页面。\r\n\r\n<a href="https://github.com/JakeWharton/ViewPagerIndicator">点击这里进入后，点击右边的按钮（DownLoad ZIP）进行下载</a>', '安卓页面内部页签第三方包Android-ViewPagerIndicator', '', 'inherit', 'closed', 'closed', '', '16-revision-v1', '', '', '2015-09-26 14:45:31', '2015-09-26 06:45:31', '', 16, 'http://115.28.161.133/?p=17', 0, 'revision', '', 0),
(18, 1, '2015-09-26 14:49:58', '2015-09-26 06:49:58', '', '猫爷', '', 'inherit', 'open', 'closed', '', 'ed6c66e6d50bf543c1a95109f8ac04d9', '', '', '2015-09-28 00:00:57', '2015-09-27 16:00:57', '', 0, 'http://115.28.161.133/wp-content/uploads/2015/09/ed6c66e6d50bf543c1a95109f8ac04d9.jpg', 0, 'attachment', 'image/jpeg', 0),
(19, 1, '2015-09-26 22:56:30', '2015-09-26 14:56:30', '最近在做电子商城APP，看到天猫有个分类浏览界面，故先仿造一个。\r\n\r\n首先，天猫的分类界面如图所示：\r\n\r\n[caption id="attachment_20" align="alignleft" width="193"]<a href="http://115.28.161.133/wp-content/uploads/2015/09/FB93DC16-C912-449A-9029-80A4E766E704.jpg"><img class="size-medium wp-image-20" src="http://115.28.161.133/wp-content/uploads/2015/09/FB93DC16-C912-449A-9029-80A4E766E704-193x300.jpg" alt="天猫商城APP分类界面" width="193" height="300" /></a> 天猫商城APP分类界面[/caption]\r\n\r\n首先我们分析，我们有个顶部栏，里面有三块，一个是返回键，一个是下拉菜单，剩下一个是中间的搜索+二维码扫描（为什么把这两个加在一起？其实很重要，每次点击搜索的时候都是打开一个搜索页面，所以我们可以大胆怀疑是一个按钮！为什么显示成这样子呢？其实把按钮的background设定为“@null”，然后给按钮依附的LinearLayout设定一个背景图片类似一个边框，就能把这里包裹住了。）\r\n\r\n但是上面说了那么多，都不是我们要提的重点，我们这里是为了设定listview能被选中。话不多说看天猫APP的分类图，他的左边我们大胆的认为就是一个listview，那么问题来了，如何设定出来类似的效果呢？步骤如下：先设定布局文件中有listview，接着在类中注册listview，给listview设定Adapter。\r\n\r\n&nbsp;\r\n\r\n大家可能觉得，对啊，我的listview也是这么写的嘛！为啥没效果呢？其实标题就已经点明了，那就是加入状态选择器！\r\n\r\n首先看看布局文件：\r\n<blockquote>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"\r\nxmlns:tools="http://schemas.android.com/tools"\r\nandroid:layout_width="match_parent"\r\nandroid:layout_height="match_parent"\r\nandroid:orientation="horizontal"&gt;\r\n\r\n&lt;ListView\r\nandroid:id="@+id/sortList"\r\nandroid:layout_width="fill_parent"\r\nandroid:layout_height="fill_parent"\r\nandroid:layout_weight="4"&gt;\r\n\r\n&lt;/ListView&gt;\r\n\r\n&lt;WebView\r\nandroid:id="@+id/sortWebView"\r\nandroid:layout_width="fill_parent"\r\nandroid:layout_height="fill_parent"\r\nandroid:layout_weight="1"&gt;\r\n\r\n&lt;/WebView&gt;\r\n&lt;/LinearLayout&gt;</blockquote>\r\n[caption id="attachment_21" align="alignleft" width="200"]<a href="http://115.28.161.133/wp-content/uploads/2015/09/01AAF2C4-58A2-46BD-9A24-EFE2751AA677.jpg"><img class="size-medium wp-image-21" src="http://115.28.161.133/wp-content/uploads/2015/09/01AAF2C4-58A2-46BD-9A24-EFE2751AA677-200x300.jpg" alt="仿照天猫商城分类界面布局" width="200" height="300" /></a> 仿照天猫商城分类界面布局[/caption]\r\n\r\n&nbsp;\r\n\r\n这是我们的布局，现在我们需要注册一个继承自Activity的类，并绑定布局文件，获得listview控件（这里的代码省略，一会贴上完整代码）。\r\n\r\n当拿到listview控件后，我们需要把listview显示出来，那么必须填充数据，所以，我先定义了一个数组\r\n<blockquote>private String[] mlistStr = {"头条", "房产", "另一面", "女人",\r\n"财经", "数码", "情感", "科技", "12313", "12313", "12313", "12313", "12313"};</blockquote>\r\n&nbsp;\r\n\r\n然后给listview设定适配器，适配器继承BaseAdapter，我们给它起名“MListViewAdapter”，默认添加四个继承自BaseAdapter的方法：getCount()、getItem()、getItemId()、getView()。这里解释下每个方法的意义依次是：获取item总数、获取item对象、获取item的Id、获取整个listview的构造。\r\n\r\n整个MListViewAdapter的代码如下：\r\n<blockquote>class MListViewAdapter extends BaseAdapter {\r\n\r\nprivate int selectedPosition = -1;// 选中的位置\r\n\r\n@Override\r\npublic int getCount() {\r\nreturn mlistStr.length;\r\n}\r\n\r\n@Override\r\npublic Object getItem(int position) {\r\nreturn mlistStr[position];\r\n}\r\n\r\n@Override\r\npublic long getItemId(int position) {\r\nreturn position;\r\n}\r\n\r\n/**\r\n* 自定义方法，设定item点击状态保持\r\n*\r\n* @param position\r\n*/\r\npublic void setSelectedPosition(int position) {\r\nselectedPosition = position;\r\n}\r\n\r\n@Override\r\npublic View getView(int position, View convertView, ViewGroup parent) {\r\nconvertView = View.inflate(SortActivity.this, R.layout.srot_listview_item, null);\r\nTextView msortListTV1 = (TextView) convertView.findViewById(R.id.sortListTV1);\r\nTextView msortListSortTV = (TextView) convertView.findViewById(R.id.sortListSortTV);\r\nmsortListSortTV.setText(mlistStr[position]);\r\nif (selectedPosition == position) { //设定item被点击后的状态\r\n//被点击了\r\nmsortListTV1.setPressed(true);\r\nmsortListTV1.setSelected(true);\r\n} else {\r\n//选中其他或没被点击\r\nmsortListTV1.setPressed(false);\r\nmsortListTV1.setSelected(false);\r\n}\r\nmsortListTV1.setBackgroundResource(R.drawable.selector_sort_tv1); //设定状态选择器\r\nreturn convertView;\r\n}\r\n}</blockquote>\r\n从上面的代码来开，我们主要的都是没有变化的，唯一变化的是添加了一个自定的方法setSelectedPosition，并且在getView()中添加了一段判断的代码根据我们添加的selectedPosition这个变量来判断，并且在后面设定了textView的状态（按下和选中）。虽然说我们这样子做完了，但是单单是这样也是不能完成我们要的视觉效果的。我们必须设定相应的状态的时候的视觉效果才能完成，所以我们加入了 <strong>msortListTV1.setBackgroundResource(R.drawable.selector_sort_tv1); //设定状态选择器</strong>   这个状态选择器。\r\n<blockquote>状态选择器的代码如下：\r\n\r\n&lt;?xml version="1.0" encoding="utf-8"?&gt;\r\n&lt;selector xmlns:android="http://schemas.android.com/apk/res/android"&gt;\r\n&lt;!-- 状态选择器的文件放到drawable文件夹下--&gt;\r\n&lt;!-- 对应的状态控制都是包含在item内的，根据不同的状态来设定不同的视觉资源--&gt;\r\n&lt;item android:drawable="@color/sort_list_pressed" android:state_pressed="true" /&gt;\r\n&lt;item android:drawable="@color/sort_list_deflut" android:state_pressed="false" /&gt;\r\n&lt;/selector&gt;</blockquote>\r\n根据状态选择器中的代码来看，我们还得有一个颜色控制文件colors.xml，每个项目一般在建立的时候，在资源目录的values目录下都有个colors.xml文件，我们打开它，并添加如下代码：\r\n<blockquote>&lt;color name="sort_list_pressed"&gt;#6DCAF8&lt;/color&gt;\r\n&lt;color name="sort_list_deflut"&gt;#EB9721&lt;/color&gt;</blockquote>\r\n可以看到我们的colors文件夹中的标签，根据内容我们显而易见的可以看明白这个就是用来说明颜色，并且中间是色彩的十六进制代码。<strong>而且综上可以看到我们的状态选择器中设定了色彩的标签名，然后再色彩设定文件中，指定标签名对应的色彩代码，正是符合了封装的思想。</strong>\r\n\r\n当这些设定完成后，我们只需按部就班的跑一下代码 ，就可以看到效果了，如图所示：\r\n\r\n[caption id="attachment_22" align="alignleft" width="113"]<a href="http://115.28.161.133/wp-content/uploads/2015/09/7ADC33AE-37E1-46CD-AF27-AD61C830540B.jpg"><img class="size-medium wp-image-22" src="http://115.28.161.133/wp-content/uploads/2015/09/7ADC33AE-37E1-46CD-AF27-AD61C830540B-113x300.jpg" alt="商品分类界面截图" width="113" height="300" /></a> 商品分类界面截图[/caption]\r\n\r\n具体代码如下（里面还包含了主页、商品详情页面、顶部导航页）：\r\n\r\n<a href="http://115.28.161.133/wp-content/uploads/2015/09/YKT主要界面示例.rar">YKT主要界面示例--源码</a>', '利用状态选择器给listview添加选中状态，item保持按下状态', '', 'publish', 'open', 'open', '', '%e5%88%a9%e7%94%a8%e7%8a%b6%e6%80%81%e9%80%89%e6%8b%a9%e5%99%a8%e7%bb%99listview%e6%b7%bb%e5%8a%a0%e9%80%89%e4%b8%ad%e7%8a%b6%e6%80%81%ef%bc%8citem%e4%bf%9d%e6%8c%81%e6%8c%89%e4%b8%8b%e7%8a%b6', '', '', '2015-09-26 22:56:30', '2015-09-26 14:56:30', '', 0, 'http://115.28.161.133/?p=19', 0, 'post', '', 0),
(20, 1, '2015-09-26 18:18:15', '2015-09-26 10:18:15', '', '天猫商城APP分类界面', '天猫商城APP分类界面', 'inherit', 'open', 'closed', '', 'fb93dc16-c912-449a-9029-80a4e766e704', '', '', '2015-09-26 18:18:49', '2015-09-26 10:18:49', '', 19, 'http://115.28.161.133/wp-content/uploads/2015/09/FB93DC16-C912-449A-9029-80A4E766E704.jpg', 0, 'attachment', 'image/jpeg', 0),
(21, 1, '2015-09-26 18:43:22', '2015-09-26 10:43:22', '', '仿照天猫商城分类界面布局', '仿照天猫商城分类界面布局', 'inherit', 'open', 'closed', '', '01aaf2c4-58a2-46bd-9a24-efe2751aa677', '', '', '2015-09-26 18:44:05', '2015-09-26 10:44:05', '', 19, 'http://115.28.161.133/wp-content/uploads/2015/09/01AAF2C4-58A2-46BD-9A24-EFE2751AA677.jpg', 0, 'attachment', 'image/jpeg', 0),
(22, 1, '2015-09-26 22:51:26', '2015-09-26 14:51:26', '', '商品分类界面截图', '商品分类界面截图', 'inherit', 'open', 'closed', '', '7adc33ae-37e1-46cd-af27-ad61c830540b', '', '', '2015-09-26 22:52:12', '2015-09-26 14:52:12', '', 19, 'http://115.28.161.133/wp-content/uploads/2015/09/7ADC33AE-37E1-46CD-AF27-AD61C830540B.jpg', 0, 'attachment', 'image/jpeg', 0),
(23, 1, '2015-09-26 22:55:30', '2015-09-26 14:55:30', '', 'YKT主要界面示例--源码', 'YKT主要界面示例--源码', 'inherit', 'open', 'closed', '', 'ykt%e4%b8%bb%e8%a6%81%e7%95%8c%e9%9d%a2%e7%a4%ba%e4%be%8b', '', '', '2015-09-26 22:56:10', '2015-09-26 14:56:10', '', 19, 'http://115.28.161.133/wp-content/uploads/2015/09/YKT主要界面示例.rar', 0, 'attachment', 'application/rar', 0),
(24, 1, '2015-09-26 22:56:30', '2015-09-26 14:56:30', '最近在做电子商城APP，看到天猫有个分类浏览界面，故先仿造一个。\r\n\r\n首先，天猫的分类界面如图所示：\r\n\r\n[caption id="attachment_20" align="alignleft" width="193"]<a href="http://115.28.161.133/wp-content/uploads/2015/09/FB93DC16-C912-449A-9029-80A4E766E704.jpg"><img class="size-medium wp-image-20" src="http://115.28.161.133/wp-content/uploads/2015/09/FB93DC16-C912-449A-9029-80A4E766E704-193x300.jpg" alt="天猫商城APP分类界面" width="193" height="300" /></a> 天猫商城APP分类界面[/caption]\r\n\r\n首先我们分析，我们有个顶部栏，里面有三块，一个是返回键，一个是下拉菜单，剩下一个是中间的搜索+二维码扫描（为什么把这两个加在一起？其实很重要，每次点击搜索的时候都是打开一个搜索页面，所以我们可以大胆怀疑是一个按钮！为什么显示成这样子呢？其实把按钮的background设定为“@null”，然后给按钮依附的LinearLayout设定一个背景图片类似一个边框，就能把这里包裹住了。）\r\n\r\n但是上面说了那么多，都不是我们要提的重点，我们这里是为了设定listview能被选中。话不多说看天猫APP的分类图，他的左边我们大胆的认为就是一个listview，那么问题来了，如何设定出来类似的效果呢？步骤如下：先设定布局文件中有listview，接着在类中注册listview，给listview设定Adapter。\r\n\r\n&nbsp;\r\n\r\n大家可能觉得，对啊，我的listview也是这么写的嘛！为啥没效果呢？其实标题就已经点明了，那就是加入状态选择器！\r\n\r\n首先看看布局文件：\r\n<blockquote>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"\r\nxmlns:tools="http://schemas.android.com/tools"\r\nandroid:layout_width="match_parent"\r\nandroid:layout_height="match_parent"\r\nandroid:orientation="horizontal"&gt;\r\n\r\n&lt;ListView\r\nandroid:id="@+id/sortList"\r\nandroid:layout_width="fill_parent"\r\nandroid:layout_height="fill_parent"\r\nandroid:layout_weight="4"&gt;\r\n\r\n&lt;/ListView&gt;\r\n\r\n&lt;WebView\r\nandroid:id="@+id/sortWebView"\r\nandroid:layout_width="fill_parent"\r\nandroid:layout_height="fill_parent"\r\nandroid:layout_weight="1"&gt;\r\n\r\n&lt;/WebView&gt;\r\n&lt;/LinearLayout&gt;</blockquote>\r\n[caption id="attachment_21" align="alignleft" width="200"]<a href="http://115.28.161.133/wp-content/uploads/2015/09/01AAF2C4-58A2-46BD-9A24-EFE2751AA677.jpg"><img class="size-medium wp-image-21" src="http://115.28.161.133/wp-content/uploads/2015/09/01AAF2C4-58A2-46BD-9A24-EFE2751AA677-200x300.jpg" alt="仿照天猫商城分类界面布局" width="200" height="300" /></a> 仿照天猫商城分类界面布局[/caption]\r\n\r\n&nbsp;\r\n\r\n这是我们的布局，现在我们需要注册一个继承自Activity的类，并绑定布局文件，获得listview控件（这里的代码省略，一会贴上完整代码）。\r\n\r\n当拿到listview控件后，我们需要把listview显示出来，那么必须填充数据，所以，我先定义了一个数组\r\n<blockquote>private String[] mlistStr = {"头条", "房产", "另一面", "女人",\r\n"财经", "数码", "情感", "科技", "12313", "12313", "12313", "12313", "12313"};</blockquote>\r\n&nbsp;\r\n\r\n然后给listview设定适配器，适配器继承BaseAdapter，我们给它起名“MListViewAdapter”，默认添加四个继承自BaseAdapter的方法：getCount()、getItem()、getItemId()、getView()。这里解释下每个方法的意义依次是：获取item总数、获取item对象、获取item的Id、获取整个listview的构造。\r\n\r\n整个MListViewAdapter的代码如下：\r\n<blockquote>class MListViewAdapter extends BaseAdapter {\r\n\r\nprivate int selectedPosition = -1;// 选中的位置\r\n\r\n@Override\r\npublic int getCount() {\r\nreturn mlistStr.length;\r\n}\r\n\r\n@Override\r\npublic Object getItem(int position) {\r\nreturn mlistStr[position];\r\n}\r\n\r\n@Override\r\npublic long getItemId(int position) {\r\nreturn position;\r\n}\r\n\r\n/**\r\n* 自定义方法，设定item点击状态保持\r\n*\r\n* @param position\r\n*/\r\npublic void setSelectedPosition(int position) {\r\nselectedPosition = position;\r\n}\r\n\r\n@Override\r\npublic View getView(int position, View convertView, ViewGroup parent) {\r\nconvertView = View.inflate(SortActivity.this, R.layout.srot_listview_item, null);\r\nTextView msortListTV1 = (TextView) convertView.findViewById(R.id.sortListTV1);\r\nTextView msortListSortTV = (TextView) convertView.findViewById(R.id.sortListSortTV);\r\nmsortListSortTV.setText(mlistStr[position]);\r\nif (selectedPosition == position) { //设定item被点击后的状态\r\n//被点击了\r\nmsortListTV1.setPressed(true);\r\nmsortListTV1.setSelected(true);\r\n} else {\r\n//选中其他或没被点击\r\nmsortListTV1.setPressed(false);\r\nmsortListTV1.setSelected(false);\r\n}\r\nmsortListTV1.setBackgroundResource(R.drawable.selector_sort_tv1); //设定状态选择器\r\nreturn convertView;\r\n}\r\n}</blockquote>\r\n从上面的代码来开，我们主要的都是没有变化的，唯一变化的是添加了一个自定的方法setSelectedPosition，并且在getView()中添加了一段判断的代码根据我们添加的selectedPosition这个变量来判断，并且在后面设定了textView的状态（按下和选中）。虽然说我们这样子做完了，但是单单是这样也是不能完成我们要的视觉效果的。我们必须设定相应的状态的时候的视觉效果才能完成，所以我们加入了 <strong>msortListTV1.setBackgroundResource(R.drawable.selector_sort_tv1); //设定状态选择器</strong>   这个状态选择器。\r\n<blockquote>状态选择器的代码如下：\r\n\r\n&lt;?xml version="1.0" encoding="utf-8"?&gt;\r\n&lt;selector xmlns:android="http://schemas.android.com/apk/res/android"&gt;\r\n&lt;!-- 状态选择器的文件放到drawable文件夹下--&gt;\r\n&lt;!-- 对应的状态控制都是包含在item内的，根据不同的状态来设定不同的视觉资源--&gt;\r\n&lt;item android:drawable="@color/sort_list_pressed" android:state_pressed="true" /&gt;\r\n&lt;item android:drawable="@color/sort_list_deflut" android:state_pressed="false" /&gt;\r\n&lt;/selector&gt;</blockquote>\r\n根据状态选择器中的代码来看，我们还得有一个颜色控制文件colors.xml，每个项目一般在建立的时候，在资源目录的values目录下都有个colors.xml文件，我们打开它，并添加如下代码：\r\n<blockquote>&lt;color name="sort_list_pressed"&gt;#6DCAF8&lt;/color&gt;\r\n&lt;color name="sort_list_deflut"&gt;#EB9721&lt;/color&gt;</blockquote>\r\n可以看到我们的colors文件夹中的标签，根据内容我们显而易见的可以看明白这个就是用来说明颜色，并且中间是色彩的十六进制代码。<strong>而且综上可以看到我们的状态选择器中设定了色彩的标签名，然后再色彩设定文件中，指定标签名对应的色彩代码，正是符合了封装的思想。</strong>\r\n\r\n当这些设定完成后，我们只需按部就班的跑一下代码 ，就可以看到效果了，如图所示：\r\n\r\n[caption id="attachment_22" align="alignleft" width="113"]<a href="http://115.28.161.133/wp-content/uploads/2015/09/7ADC33AE-37E1-46CD-AF27-AD61C830540B.jpg"><img class="size-medium wp-image-22" src="http://115.28.161.133/wp-content/uploads/2015/09/7ADC33AE-37E1-46CD-AF27-AD61C830540B-113x300.jpg" alt="商品分类界面截图" width="113" height="300" /></a> 商品分类界面截图[/caption]\r\n\r\n具体代码如下（里面还包含了主页、商品详情页面、顶部导航页）：\r\n\r\n<a href="http://115.28.161.133/wp-content/uploads/2015/09/YKT主要界面示例.rar">YKT主要界面示例--源码</a>', '利用状态选择器给listview添加选中状态，item保持按下状态', '', 'inherit', 'closed', 'closed', '', '19-revision-v1', '', '', '2015-09-26 22:56:30', '2015-09-26 14:56:30', '', 19, 'http://115.28.161.133/?p=24', 0, 'revision', '', 0),
(25, 1, '2015-09-26 23:25:07', '2015-09-26 15:25:07', '1. 同步改异步\r\n这个就不用多讲了，耗时操作放在线程中执行防止占用主线程，一定程度上解决anr。\r\n但需要注意线程和service结合（防止activity被回收后线程也被回收）以及线程的数量\r\n线程池使用可见java的线程池\r\n2. 缓存\r\njava的对象创建需要分配资源较耗费时间，加上创建的对象越多会造成越频繁的gc影响系统响应。主要使用单例模式、缓存(图片缓存、线程池、View缓存、IO缓存、消息缓存、通知栏notification缓存)及其他方式减少对象创建。\r\n(1). 单例模式\r\n对于创建开销较大的类可使用此方法，保证全局一个实例，在程序运行过程中该类不会因新建额外对象产生开销。示例代码如下：\r\n<blockquote>\r\npublic class Singleton {\r\n\r\nprivate static Object obj = new Object();\r\nprivate static Singleton instance = null;\r\n\r\nprivate Singleton(){\r\n}\r\n\r\npublic static Singleton getInstance() {\r\n// if already inited, no need to get lock everytime\r\nif (instance == null) {\r\nsynchronized (obj) {\r\nif (instance == null) {\r\ninstance = new Singleton();\r\n}\r\n}\r\n}\r\n\r\nreturn instance;\r\n}\r\n}</blockquote>\r\n(2). 缓存\r\n程序中用到了图片缓存、线程池、View缓存、IO缓存、消息缓存、通知栏notification缓存等。\r\na. 图片缓存：见ImageCache和ImageSdCache\r\nb. 线程池：使用Java的Executors类，通过newCachedThreadPool、newFixedThreadPool、newSingleThreadExecutor、newScheduledThreadPool提供四种不同类型的线程池\r\nc. View缓存：\r\n可见ListView缓存机制\r\n\r\nlistView的getView缓存\r\n通过convertView是否为null减少layout inflate次数，通过静态的ViewHolder减少findViewById的次数，这两个函数尤其是inflate是相当费时间的\r\n\r\nd. IO缓存：\r\n使用具有缓存策略的输入流，BufferedInputStream替代InputStream，BufferedReader替代Reader，BufferedReader替代BufferedInputStream.对文件、网络IO皆适用。\r\n\r\ne. 消息缓存：通过 Handler 的 obtainMessage 回收 Message 对象，减少 Message 对象的创建开销\r\nhandler.sendMessage(handler.obtainMessage(1));\r\n\r\nf. 通知栏notification缓存：下载中需要不断改变通知栏进度条状态，如果不断新建Notification会导致通知栏很卡。这里我们可以使用最简单的缓存\r\nMap&lt;String, Notification&gt; notificationMap = new HashMap&lt;String, Notification&gt;();如果notificationMap中不存在，则新建notification并且put into map.\r\n\r\n(3). 其他\r\n能创建基类解决问题就不用具体子类：除需要设置优先级的线程使用new Thread创建外，其余线程创建使用new Runnable。因为子类会有自己的属性创建需要更多开销。\r\n控制最大并发数量：使用Java的Executors类，通过Executors.newFixedThreadPool(nThreads)控制线程池最大线程并发\r\n对于http请求增加timeout\r\n\r\n3. Layout优化\r\n使用抽象布局标签(include, viewstub, merge)、去除不必要的嵌套和View节点、减少不必要的infalte及其他Layout方面可调优点，顺带提及布局调优相关工具(hierarchy viewer和lint)。具体可见性能优化之布局优化\r\nTextView属性优化：TextView的android:ellipsize=”marquee”%%灯效果极耗性能，具体原因还在深入源码中\r\n\r\n4. 数据库优化\r\n主要包括索引和事务及针对Sqlite的优化。具体可见性能优化之数据库优化\r\n\r\n5. 算法优化\r\n这个就是个博大精深的话题了，只介绍本应用中使用的。\r\n使用hashMap代替arrayList，时间复杂度降低一个数量级\r\n\r\n6. 延迟执行\r\n对于很多耗时逻辑没必要立即执行，这时候我们可以将其延迟执行。\r\n线程延迟执行 ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(10);\r\n消息延迟发送 handler.sendMessageDelayed(handler.obtainMessage(0), 1000);\r\n\r\n本文转载自：<a href="http://www.bdqn.cn/news/201508/17381.shtml" target="_blank">Android 性能调优点</a>', 'Android性能调优关键点', '', 'publish', 'open', 'open', '', 'android%e6%80%a7%e8%83%bd%e8%b0%83%e4%bc%98%e5%85%b3%e9%94%ae%e7%82%b9', '', '', '2015-09-26 23:27:43', '2015-09-26 15:27:43', '', 0, 'http://115.28.161.133/?p=25', 0, 'post', '', 2),
(26, 1, '2015-09-26 23:25:07', '2015-09-26 15:25:07', '1. 同步改异步\r\n这个就不用多讲了，耗时操作放在线程中执行防止占用主线程，一定程度上解决anr。\r\n但需要注意线程和service结合（防止activity被回收后线程也被回收）以及线程的数量\r\n线程池使用可见java的线程池\r\n2. 缓存\r\njava的对象创建需要分配资源较耗费时间，加上创建的对象越多会造成越频繁的gc影响系统响应。主要使用单例模式、缓存(图片缓存、线程池、View缓存、IO缓存、消息缓存、通知栏notification缓存)及其他方式减少对象创建。\r\n(1). 单例模式\r\n对于创建开销较大的类可使用此方法，保证全局一个实例，在程序运行过程中该类不会因新建额外对象产生开销。示例代码如下：\r\n&lt;font face="宋体" size="3"&gt;public class Singleton {\r\n\r\nprivate static Object obj = new Object();\r\nprivate static Singleton instance = null;\r\n\r\nprivate Singleton(){\r\n}\r\n\r\npublic static Singleton getInstance() {\r\n// if already inited, no need to get lock everytime\r\nif (instance == null) {\r\nsynchronized (obj) {\r\nif (instance == null) {\r\ninstance = new Singleton();\r\n}\r\n}\r\n}\r\n\r\nreturn instance;\r\n}\r\n} &lt;/font&gt;\r\n(2). 缓存\r\n程序中用到了图片缓存、线程池、View缓存、IO缓存、消息缓存、通知栏notification缓存等。\r\na. 图片缓存：见ImageCache和ImageSdCache\r\nb. 线程池：使用Java的Executors类，通过newCachedThreadPool、newFixedThreadPool、newSingleThreadExecutor、newScheduledThreadPool提供四种不同类型的线程池\r\nc. View缓存：\r\n可见ListView缓存机制\r\n\r\nlistView的getView缓存\r\n通过convertView是否为null减少layout inflate次数，通过静态的ViewHolder减少findViewById的次数，这两个函数尤其是inflate是相当费时间的\r\n\r\nd. IO缓存：\r\n使用具有缓存策略的输入流，BufferedInputStream替代InputStream，BufferedReader替代Reader，BufferedReader替代BufferedInputStream.对文件、网络IO皆适用。\r\n\r\ne. 消息缓存：通过 Handler 的 obtainMessage 回收 Message 对象，减少 Message 对象的创建开销\r\nhandler.sendMessage(handler.obtainMessage(1));\r\n\r\nf. 通知栏notification缓存：下载中需要不断改变通知栏进度条状态，如果不断新建Notification会导致通知栏很卡。这里我们可以使用最简单的缓存\r\nMap&lt;String, Notification&gt; notificationMap = new HashMap&lt;String, Notification&gt;();如果notificationMap中不存在，则新建notification并且put into map.\r\n\r\n(3). 其他\r\n能创建基类解决问题就不用具体子类：除需要设置优先级的线程使用new Thread创建外，其余线程创建使用new Runnable。因为子类会有自己的属性创建需要更多开销。\r\n控制最大并发数量：使用Java的Executors类，通过Executors.newFixedThreadPool(nThreads)控制线程池最大线程并发\r\n对于http请求增加timeout\r\n\r\n3. Layout优化\r\n使用抽象布局标签(include, viewstub, merge)、去除不必要的嵌套和View节点、减少不必要的infalte及其他Layout方面可调优点，顺带提及布局调优相关工具(hierarchy viewer和lint)。具体可见性能优化之布局优化\r\nTextView属性优化：TextView的android:ellipsize=”marquee”%%灯效果极耗性能，具体原因还在深入源码中\r\n\r\n4. 数据库优化\r\n主要包括索引和事务及针对Sqlite的优化。具体可见性能优化之数据库优化\r\n\r\n5. 算法优化\r\n这个就是个博大精深的话题了，只介绍本应用中使用的。\r\n使用hashMap代替arrayList，时间复杂度降低一个数量级\r\n\r\n6. 延迟执行\r\n对于很多耗时逻辑没必要立即执行，这时候我们可以将其延迟执行。\r\n线程延迟执行 ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(10);\r\n消息延迟发送 handler.sendMessageDelayed(handler.obtainMessage(0), 1000);', 'Android性能调优关键点', '', 'inherit', 'closed', 'closed', '', '25-revision-v1', '', '', '2015-09-26 23:25:07', '2015-09-26 15:25:07', '', 25, 'http://115.28.161.133/?p=26', 0, 'revision', '', 0),
(27, 1, '2015-09-26 23:27:23', '2015-09-26 15:27:23', '1. 同步改异步\n这个就不用多讲了，耗时操作放在线程中执行防止占用主线程，一定程度上解决anr。\n但需要注意线程和service结合（防止activity被回收后线程也被回收）以及线程的数量\n线程池使用可见java的线程池\n2. 缓存\njava的对象创建需要分配资源较耗费时间，加上创建的对象越多会造成越频繁的gc影响系统响应。主要使用单例模式、缓存(图片缓存、线程池、View缓存、IO缓存、消息缓存、通知栏notification缓存)及其他方式减少对象创建。\n(1). 单例模式\n对于创建开销较大的类可使用此方法，保证全局一个实例，在程序运行过程中该类不会因新建额外对象产生开销。示例代码如下：\n<blockquote>\npublic class Singleton {\n\nprivate static Object obj = new Object();\nprivate static Singleton instance = null;\n\nprivate Singleton(){\n}\n\npublic static Singleton getInstance() {\n// if already inited, no need to get lock everytime\nif (instance == null) {\nsynchronized (obj) {\nif (instance == null) {\ninstance = new Singleton();\n}\n}\n}\n\nreturn instance;\n}\n}</blockquote>\n(2). 缓存\n程序中用到了图片缓存、线程池、View缓存、IO缓存、消息缓存、通知栏notification缓存等。\na. 图片缓存：见ImageCache和ImageSdCache\nb. 线程池：使用Java的Executors类，通过newCachedThreadPool、newFixedThreadPool、newSingleThreadExecutor、newScheduledThreadPool提供四种不同类型的线程池\nc. View缓存：\n可见ListView缓存机制\n\nlistView的getView缓存\n通过convertView是否为null减少layout inflate次数，通过静态的ViewHolder减少findViewById的次数，这两个函数尤其是inflate是相当费时间的\n\nd. IO缓存：\n使用具有缓存策略的输入流，BufferedInputStream替代InputStream，BufferedReader替代Reader，BufferedReader替代BufferedInputStream.对文件、网络IO皆适用。\n\ne. 消息缓存：通过 Handler 的 obtainMessage 回收 Message 对象，减少 Message 对象的创建开销\nhandler.sendMessage(handler.obtainMessage(1));\n\nf. 通知栏notification缓存：下载中需要不断改变通知栏进度条状态，如果不断新建Notification会导致通知栏很卡。这里我们可以使用最简单的缓存\nMap&lt;String, Notification&gt; notificationMap = new HashMap&lt;String, Notification&gt;();如果notificationMap中不存在，则新建notification并且put into map.\n\n(3). 其他\n能创建基类解决问题就不用具体子类：除需要设置优先级的线程使用new Thread创建外，其余线程创建使用new Runnable。因为子类会有自己的属性创建需要更多开销。\n控制最大并发数量：使用Java的Executors类，通过Executors.newFixedThreadPool(nThreads)控制线程池最大线程并发\n对于http请求增加timeout\n\n3. Layout优化\n使用抽象布局标签(include, viewstub, merge)、去除不必要的嵌套和View节点、减少不必要的infalte及其他Layout方面可调优点，顺带提及布局调优相关工具(hierarchy viewer和lint)。具体可见性能优化之布局优化\nTextView属性优化：TextView的android:ellipsize=”marquee”%%灯效果极耗性能，具体原因还在深入源码中\n\n4. 数据库优化\n主要包括索引和事务及针对Sqlite的优化。具体可见性能优化之数据库优化\n\n5. 算法优化\n这个就是个博大精深的话题了，只介绍本应用中使用的。\n使用hashMap代替arrayList，时间复杂度降低一个数量级\n\n6. 延迟执行\n对于很多耗时逻辑没必要立即执行，这时候我们可以将其延迟执行。\n线程延迟执行 ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(10);\n消息延迟发送 handler.sendMessageDelayed(handler.obtainMessage(0), 1000);\n\n本文转载自：', 'Android性能调优关键点', '', 'inherit', 'closed', 'closed', '', '25-autosave-v1', '', '', '2015-09-26 23:27:23', '2015-09-26 15:27:23', '', 25, 'http://115.28.161.133/?p=27', 0, 'revision', '', 0),
(28, 1, '2015-09-26 23:27:43', '2015-09-26 15:27:43', '1. 同步改异步\r\n这个就不用多讲了，耗时操作放在线程中执行防止占用主线程，一定程度上解决anr。\r\n但需要注意线程和service结合（防止activity被回收后线程也被回收）以及线程的数量\r\n线程池使用可见java的线程池\r\n2. 缓存\r\njava的对象创建需要分配资源较耗费时间，加上创建的对象越多会造成越频繁的gc影响系统响应。主要使用单例模式、缓存(图片缓存、线程池、View缓存、IO缓存、消息缓存、通知栏notification缓存)及其他方式减少对象创建。\r\n(1). 单例模式\r\n对于创建开销较大的类可使用此方法，保证全局一个实例，在程序运行过程中该类不会因新建额外对象产生开销。示例代码如下：\r\n<blockquote>\r\npublic class Singleton {\r\n\r\nprivate static Object obj = new Object();\r\nprivate static Singleton instance = null;\r\n\r\nprivate Singleton(){\r\n}\r\n\r\npublic static Singleton getInstance() {\r\n// if already inited, no need to get lock everytime\r\nif (instance == null) {\r\nsynchronized (obj) {\r\nif (instance == null) {\r\ninstance = new Singleton();\r\n}\r\n}\r\n}\r\n\r\nreturn instance;\r\n}\r\n}</blockquote>\r\n(2). 缓存\r\n程序中用到了图片缓存、线程池、View缓存、IO缓存、消息缓存、通知栏notification缓存等。\r\na. 图片缓存：见ImageCache和ImageSdCache\r\nb. 线程池：使用Java的Executors类，通过newCachedThreadPool、newFixedThreadPool、newSingleThreadExecutor、newScheduledThreadPool提供四种不同类型的线程池\r\nc. View缓存：\r\n可见ListView缓存机制\r\n\r\nlistView的getView缓存\r\n通过convertView是否为null减少layout inflate次数，通过静态的ViewHolder减少findViewById的次数，这两个函数尤其是inflate是相当费时间的\r\n\r\nd. IO缓存：\r\n使用具有缓存策略的输入流，BufferedInputStream替代InputStream，BufferedReader替代Reader，BufferedReader替代BufferedInputStream.对文件、网络IO皆适用。\r\n\r\ne. 消息缓存：通过 Handler 的 obtainMessage 回收 Message 对象，减少 Message 对象的创建开销\r\nhandler.sendMessage(handler.obtainMessage(1));\r\n\r\nf. 通知栏notification缓存：下载中需要不断改变通知栏进度条状态，如果不断新建Notification会导致通知栏很卡。这里我们可以使用最简单的缓存\r\nMap&lt;String, Notification&gt; notificationMap = new HashMap&lt;String, Notification&gt;();如果notificationMap中不存在，则新建notification并且put into map.\r\n\r\n(3). 其他\r\n能创建基类解决问题就不用具体子类：除需要设置优先级的线程使用new Thread创建外，其余线程创建使用new Runnable。因为子类会有自己的属性创建需要更多开销。\r\n控制最大并发数量：使用Java的Executors类，通过Executors.newFixedThreadPool(nThreads)控制线程池最大线程并发\r\n对于http请求增加timeout\r\n\r\n3. Layout优化\r\n使用抽象布局标签(include, viewstub, merge)、去除不必要的嵌套和View节点、减少不必要的infalte及其他Layout方面可调优点，顺带提及布局调优相关工具(hierarchy viewer和lint)。具体可见性能优化之布局优化\r\nTextView属性优化：TextView的android:ellipsize=”marquee”%%灯效果极耗性能，具体原因还在深入源码中\r\n\r\n4. 数据库优化\r\n主要包括索引和事务及针对Sqlite的优化。具体可见性能优化之数据库优化\r\n\r\n5. 算法优化\r\n这个就是个博大精深的话题了，只介绍本应用中使用的。\r\n使用hashMap代替arrayList，时间复杂度降低一个数量级\r\n\r\n6. 延迟执行\r\n对于很多耗时逻辑没必要立即执行，这时候我们可以将其延迟执行。\r\n线程延迟执行 ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(10);\r\n消息延迟发送 handler.sendMessageDelayed(handler.obtainMessage(0), 1000);\r\n\r\n本文转载自：<a href="http://www.bdqn.cn/news/201508/17381.shtml" target="_blank">Android 性能调优点</a>', 'Android性能调优关键点', '', 'inherit', 'closed', 'closed', '', '25-revision-v1', '', '', '2015-09-26 23:27:43', '2015-09-26 15:27:43', '', 25, 'http://115.28.161.133/?p=28', 0, 'revision', '', 0),
(29, 1, '2015-09-27 21:07:07', '2015-09-27 13:07:07', '现在无论什么程序猿，要是你说不会设计模式，那么别人一般会对你另眼相待。而程序猿的进步也是跟这些东西离不开的。\r\n\r\n对于安卓程序员，一般来说，常用的设计模式有以下八种：<strong>单例、工厂、观察者、代理、命令、适配器、合成、访问者</strong>。\r\n\r\n<strong>单例模式</strong>：目的是为了让系统中只有一个调用对象，缺点是单例使其他程序过分依赖它，而且不同单例运行在不同进程中，使得维护困难；\r\n\r\n<strong>工厂模式</strong>：生产固定的一些东西，如抽象类，缺点是产品修改麻烦；如喜欢动作片和爱情片的人分别向服务器发出同一个请求，就可以得到他们想看的影片集，相当于不同对象进行同一请求，需求均得到满足。\r\n\r\n<strong>观察者模式</strong>：就是多个对象对一个对象进行监控，如缓存；\r\n\r\n<strong>代理模式</strong>：自己的事交给别人去做，分别返回结果即可，如异步线程；\r\n\r\n<strong>命令模式</strong>：调用对象与作用对象之间分离，由中间件来协调两者之间的工作，如控制器；\r\n\r\n<strong>适配器模式</strong>：将一个接口变成用户所需要的接口，如baseadapter可以适配listview和spinner，因为它们有相同的接口\r\n\r\n<strong>合成模式</strong>：将一对多的关系转换成一对整体的关系，如listview与适配器；\r\n\r\n<strong>访问者模式</strong>：对不同的对象采取不同的处理，如instanceof。\r\n\r\n下面是网友对设计模式的理解，比较生动和形象，先分享出来一起看看。\r\n\r\n创建型模式\r\n\r\n1、FACTORY—追MM少不了请吃饭了，麦当劳的鸡翅和肯德基的鸡翅都是MM爱吃的东西，虽然口味有所不同，但不管你带MM去麦当劳或肯德基，只管向服务员说“来四个鸡翅”就行了。麦当劳和肯德基就是生产鸡翅的Factory\r\n\r\n工厂模式：客户类和工厂类分开。消费者任何时候需要某种产品，只需向工厂请求即可。消费者无须修改就可以接纳新产品。缺点是当产品修改时，工厂类也要做相应的修改。如：如何创建及如何向客户端提供。\r\n\r\n2、BUILDER—MM最爱听的就是“我爱你”这句话了，见到不同地方的MM,要能够用她们的方言跟她说这句话哦，我有一个多种语言翻译机，上面每种语言都有一个按键，见到MM我只要按对应的键，它就能够用相应的语言说出“我爱你”这句话了，国外的MM也可以轻松搞掂，这就是我的“我爱你”builder。（这一定比美军在伊拉克用的翻译机好卖）\r\n\r\n建造模式：将产品的内部表象和产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。建造模式使得产品内部表象可以独立的变化，客户不必知道产品内部组成的细节。建造模式可以强制实行一种分步骤进行的建造过程。\r\n\r\n3、FACTORY METHOD—请MM去麦当劳吃汉堡，不同的MM有不同的口味，要每个都记住是一件烦人的事情，我一般采用Factory Method模式，带着MM到服务员那儿，说“要一个汉堡”，具体要什么样的汉堡呢，让MM直接跟服务员说就行了。\r\n\r\n工厂方法模式：核心工厂类不再负责所有产品的创建，而是将具体创建的工作交给子类去做，成为一个抽象工厂角色，仅负责给出具体工厂类必须实现的接口，而不接触哪一个产品类应当被实例化这种细节。\r\n\r\n4、PROTOTYPE—跟MM用QQ聊天，一定要说些深情的话语了，我搜集了好多肉麻的情话，需要时只要copy出来放到QQ里面就行了，这就是我的情话prototype了。（100块钱一份，你要不要）\r\n\r\n原始模型模式：通过给出一个原型对象来指明所要创建的对象的类型，然后用复制这个原型对象的方法创建出更多同类型的对象。原始模型模式允许动态的增加或减少产品类，产品类不需要非得有任何事先确定的等级结构，原始模型模式适用于任何的等级结构。缺点是每一个类都必须配备一个克隆方法。\r\n\r\n5、SINGLETON—俺有6个漂亮的老婆，她们的老公都是我，我就是我们家里的老公Sigleton，她们只要说道“老公”，都是指的同一个人，那就是我(刚才做了个梦啦，哪有这么好的事)\r\n\r\n单例模式：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例单例模式。单例模式只应在有真正的“单一实例”的需求时才可使用。\r\n\r\n结构型模式\r\n\r\n6、ADAPTER—在朋友聚会上碰到了一个美女Sarah，从香港来的，可我不会说粤语，她不会说普通话，只好求助于我的朋友kent了，他作为我和Sarah之间的Adapter，让我和Sarah可以相互交谈了(也不知道他会不会耍我)\r\n\r\n适配器（变压器）模式：把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口原因不匹配而无法一起工作的两个类能够一起工作。适配类可以根据参数返还一个合适的实例给客户端。\r\n\r\n7、BRIDGE—早上碰到MM，要说早上好，晚上碰到MM，要说晚上好；碰到MM穿了件新衣服，要说你的衣服好漂亮哦，碰到MM新做的发型，要说你的头发好漂亮哦。不要问我“早上碰到MM新做了个发型怎么说”这种问题，自己用BRIDGE组合一下不就行了\r\n\r\n桥梁模式：将抽象化与实现化脱耦，使得二者可以独立的变化，也就是说将他们之间的强关联变成弱关联，也就是指在一个软件系统的抽象化和实现化之间使用组合/聚合关系而不是继承关系，从而使两者可以独立的变化。\r\n\r\n8、COMPOSITE—Mary今天过生日。“我过生日，你要送我一件礼物。”“嗯，好吧，去商店，你自己挑。”“这件T恤挺漂亮，买，这条裙子好看，买，这个包也不错，买。”“喂，买了三件了呀，我只答应送一件礼物的哦。”“什么呀，T恤加裙子加包包，正好配成一套呀，MM，麻烦你包起来。”“……”，MM都会用Composite模式了，你会了没有？\r\n\r\n合成模式：合成模式将对象组织到树结构中，可以用来描述整体与部分的关系。合成模式就是一个处理对象的树结构的模式。合成模式把部分与整体的关系用树结构表示出来。合成模式使得客户端把一个个单独的成分对象和由他们复合而成的合成对象同等看待。\r\n\r\n9、DECORATOR—Mary过完轮到Sarly过生日，还是不要叫她自己挑了，不然这个月伙食费肯定玩完，拿出我去年在华山顶上照的照片，在背面写上“最好的的礼物，就是爱你的Fita”，再到街上礼品店买了个像框（卖礼品的MM也很漂亮哦），再找隔壁搞美术设计的Mike设计了一个漂亮的盒子装起来……，我们都是Decorator，最终都在修饰我这个人呀，怎么样，看懂了吗？\r\n\r\n装饰模式：装饰模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案，提供比继承更多的灵活性。动态给一个对象增加功能，这些功能可以再动态的撤消。增加由一些基本功能的排列组合而产生的非常大量的功能。\r\n\r\n10、FACADE—我有一个专业的Nikon相机，我就喜欢自己手动调光圈、快门，这样照出来的照片才专业，但MM可不懂这些，教了半天也不会。幸好相机有Facade设计模式，把相机调整到自动档，只要对准目标按快门就行了，一切由相机自动调整，这样MM也可以用这个相机给我拍张照片了。\r\n\r\n门面模式：外部与一个子系统的通信必须通过一个统一的门面对象进行。门面模式提供一个高层次的接口，使得子系统更易于使用。每一个子系统只有一个门面类，而且此门面类只有一个实例，也就是说它是一个单例模式。但整个系统可以有多个门面类。\r\n\r\n11、FLYWEIGHT—每天跟MM发短信，手指都累死了，最近买了个新手机，可以把一些常用的句子存在手机里，要用的时候，直接拿出来，在前面加上MM的名字就可以发送了，再不用一个字一个字敲了。共享的句子就是Flyweight，MM的名字就是提取出来的外部特征，根据上下文情况使用。\r\n\r\n享元模式：FLYWEIGHT在拳击比赛中指最轻量级。享元模式以共享的方式高效的支持大量的细粒度对象。享元模式能做到共享的关键是区分内蕴状态和外蕴状态。内蕴状态存储在享元内部，不会随环境的改变而有所不同。外蕴状态是随环境的改变而改变的。外蕴状态不能影响内蕴状态，它们是相互独立的。将可以共享的状态和不可以共享的状态从常规类中区分开来，将不可以共享的状态从类里剔除出去。客户端不可以直接创建被共享的对象，而应当使用一个工厂对象负责创建被共享的对象。享元模式大幅度的降低内存中对象的数量。\r\n\r\n12、PROXY—跟MM在网上聊天，一开头总是“hi,你好”,“你从哪儿来呀？”“你多大了？”“身高多少呀？”这些话，真烦人，写个程序做为我的Proxy吧，凡是接收到这些话都设置好了自动的回答，接收到其他的话时再通知我回答，怎么样，酷吧。\r\n\r\n代理模式：代理模式给某一个对象提供一个代理对象，并由代理对象控制对源对象的引用。代理就是一个人或一个机构代表另一个人或者一个机构采取行动。某些情况下，客户不想或者不能够直接引用一个对象，代理对象可以在客户和目标对象直接起到中介的作用。客户端分辨不出代理主题对象与真实主题对象。代理模式可以并不知道真正的被代理对象，而仅仅持有一个被代理对象的接口，这时候代理对象不能够创建被代理对象，被代理对象必须有系统的其他角色代为创建并传入。\r\n\r\n行为模式\r\n\r\n13、CHAIN OF RESPONSIBLEITY—晚上去上英语课，为了好开溜坐到了最后一排，哇，前面坐了好几个漂亮的MM哎，找张纸条，写上“Hi,可以做我的女朋友吗？如果不愿意请向前传”，纸条就一个接一个的传上去了，糟糕，传到第一排的MM把纸条传给老师了，听说是个老处女呀，快跑!\r\n\r\n责任链模式：在责任链模式中，很多对象由每一个对象对其下家的引用而接\r\n\r\n起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。客户并不知道链上的哪一个对象最终处理这个请求，系统可以在不影响客户端的情况下动态的重新组织链和分配责任。处理者有两个选择：承担责任或者把责任推给下家。一个请求可以最终不被任何接收端对象所接受。\r\n\r\n14、COMMAND—俺有一个MM家里管得特别严，没法见面，只好借助于她弟弟在我们俩之间传送信息，她对我有什么指示，就写一张纸条让她弟弟带给我。这不，她弟弟又传送过来一个COMMAND，为了感谢他，我请他吃了碗杂酱面，哪知道他说：“我同时给我姐姐三个男朋友送COMMAND，就数你最小气，才请我吃面。”，:-(\r\n\r\n命令模式：命令模式把一个请求或者操作封装到一个对象中。命令模式把发出命令的责任和执行命令的责任分割开，委派给不同的对象。命令模式允许请求的一方和发送的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否执行，何时被执行以及是怎么被执行的。系统支持命令的撤消。\r\n\r\n15、INTERPRETER—俺有一个《泡MM真经》，上面有各种泡MM的攻略，比如说去吃西餐的步骤、去看电影的方法等等，跟MM约会时，只要做一个Interpreter，照着上面的脚本执行就可以了。\r\n\r\n解释器模式：给定一个语言后，解释器模式可以定义出其文法的一种表示，并同时提供一个解释器。客户端可以使用这个解释器来解释这个语言中的句子。解释器模式将描述怎样在有了一个简单的文法后，使用模式设计解释这些语句。在解释器模式里面提到的语言是指任何解释器对象能够解释的任何组合。在解释器模式中需要定义一个代表文法的命令类的等级结构，也就是一系列的组合规则。每一个命令对象都有一个解释方法，代表对命令对象的解释。命令对象的等级结构中的对象的任何排列组合都是一个语言。\r\n\r\n16、ITERATOR—我爱上了Mary，不顾一切的向她求婚。\r\n\r\nMary：“想要我跟你结婚，得答应我的条件”\r\n\r\n我：“什么条件我都答应，你说吧”\r\n\r\nMary：“我看上了那个一克拉的钻石”\r\n\r\n我：“我买，我买，还有吗？”\r\n\r\nMary：“我看上了湖边的那栋别墅”\r\n\r\n我：“我买，我买，还有吗？”\r\n\r\nMary：“你的小弟弟必须要有50cm长”\r\n\r\n我脑袋嗡的一声，坐在椅子上，一咬牙：“我剪，我剪，还有吗？”\r\n\r\n……\r\n\r\n迭代子模式：迭代子模式可以顺序访问一个聚集中的元素而不必暴露聚集的内部表象。多个对象聚在一起形成的总体称之为聚集，聚集对象是能够包容一组对象的容器对象。迭代子模式将迭代逻辑封装到一个独立的子对象中，从而与聚集本身隔开。迭代子模式简化了聚集的界面。每一个聚集对象都可以有一个或一个以上的迭代子对象，每一个迭代子的迭代状态可以是彼此独立的。迭代算法可以独立于聚集角色变化。\r\n\r\n17、MEDIATOR—四个MM打麻将，相互之间谁应该给谁多少钱算不清楚了，幸亏当时我在旁边，按照各自的筹码数算钱，赚了钱的从我这里拿，赔了钱的也付给我，一切就OK啦，俺得到了四个MM的电话。\r\n\r\n调停者模式：调停者模式包装了一系列对象相互作用的方式，使得这些对象不必相互明显作用。从而使他们可以松散偶合。当某些对象之间的作用发生改变时，不会立即影响其他的一些对象之间的作用。保证这些作用可以彼此独立的变化。调停者模式将多对多的相互作用转化为一对多的相互作用。调停者模式将对象的行为和协作抽象化，把对象在小尺度的行为上与其他对象的相互作用分开处理。\r\n\r\n18、MEMENTO—同时跟几个MM聊天时，一定要记清楚刚才跟MM说了些什么话，不然MM发现了会不高兴的哦，幸亏我有个备忘录，刚才与哪个MM说了什么话我都拷贝一份放到备忘录里面保存，这样可以随时察看以前的记录啦。\r\n\r\n备忘录模式：备忘录对象是一个用来存储另外一个对象内部状态的快照的对象。备忘录模式的用意是在不破坏封装的条件下，将一个对象的状态捉住，并外部化，存储起来，从而可以在将来合适的时候把这个对象还原到存储起来的状态。\r\n\r\n19、OBSERVER—想知道咱们公司最新MM情报吗？加入公司的MM情报邮件组就行了，tom负责搜集情报，他发现的新情报不用一个一个通知我们，直接发布给邮件组，我们作为订阅者（观察者）就可以及时收到情报啦\r\n\r\n观察者模式：观察者模式定义了一种一队多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使他们能够自动更新自己。\r\n\r\n20、STATE—跟MM交往时，一定要注意她的状态哦，在不同的状态时她的行为会有不同，比如你约她今天晚上去看电影，对你没兴趣的MM就会说“有事情啦”，对你不讨厌但还没喜欢上的MM就会说“好啊，不过可以带上我同事么？”，已经喜欢上你的MM就会说“几点钟？看完电影再去泡吧怎么样？”，当然你看电影过程中表现良好的话，也可以把MM的状态从不讨厌不喜欢变成喜欢哦。\r\n\r\n状态模式：状态模式允许一个对象在其内部状态改变的时候改变行为。这个对象看上去象是改变了它的类一样。状态模式把所研究的对象的行为包装在不同的状态对象里，每一个状态对象都属于一个抽象状态类的一个子类。状态模式的意图是让一个对象在其内部状态改变的时候，其行为也随之改变。状态模式需要对每一个系统可能取得的状态创立一个状态类的子类。当系统的状态变化时，系统便改变所选的子类。\r\n\r\n21、STRATEGY—跟不同类型的MM约会，要用不同的策略，有的请电影比较好，有的则去吃小吃效果不错，有的去海边浪漫最合适，单目的都是为了得到MM的芳心，我的追MM锦囊中有好多Strategy哦。\r\n\r\n策略模式：策略模式针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换。策略模式使得算法可以在不影响到客户端的情况下发生变化。策略模式把行为和环境分开。环境类负责维持和查询行为类，各种算法在具体的策略类中提供。由于算法和环境独立开来，算法的增减，修改都不会影响到环境和客户端。\r\n\r\n22、TEMPLATE METHOD——看过《如何说服女生上床》这部经典文章吗？女生从认识到上床的不变的步骤分为巧遇、打破僵局、展开追求、接吻、前戏、动手、爱抚、进去八大步骤(Template method)，但每个步骤针对不同的情况，都有不一样的做法，这就要看你随机应变啦(具体实现)；\r\n\r\n模板方法模式：模板方法模式准备一个抽象类，将部分逻辑以具体方法以及具体构造子的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。先制定一个顶级逻辑框架，而将逻辑的细节留给具体的子类去实现。\r\n\r\n23、VISITOR—情人节到了，要给每个MM送一束鲜花和一张卡片，可是每个MM送的花都要针对她个人的特点，每张卡片也要根据个人的特点来挑，我一个人哪搞得清楚，还是找花店老板和礼品店老板做一下Visitor，让花店老板根据MM的特点选一束花，让礼品店老板也根据每个人特点选一张卡，这样就轻松多了；\r\n\r\n访问者模式：访问者模式的目的是封装一些施加于某种数据结构元素之上的操作。一旦这些操作需要修改的话，接受这个操作的数据结构可以保持不变。访问者模式适用于数据结构相对未定的系统，它把数据结构和作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由的演化。访问者模式使得增加新的操作变的很容易，就是增加一个新的访问者类。访问者模式将有关的行为集中到一个访问者对象中，而不是分散到一个个的节点类中。当使用访问者模式时，要将尽可能多的对象浏览逻辑放在访问者类中，而不是放到它的子类中。访问者模式可以跨过几个类的等级结构访问属于不同的等级结构的成员类。', 'Android进阶之设计模式', '', 'publish', 'open', 'open', '', 'android%e8%bf%9b%e9%98%b6%e4%b9%8b%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f', '', '', '2015-09-27 21:07:34', '2015-09-27 13:07:34', '', 0, 'http://115.28.161.133/?p=29', 0, 'post', '', 0),
(30, 1, '2015-09-27 21:07:07', '2015-09-27 13:07:07', '现在无论什么程序猿，要是你说不会设计模式，那么别人一般会对你另眼相待。而程序猿的进步也是跟这些东西离不开的。\r\n\r\n对于安卓程序员，一般来说，常用的设计模式有以下八种：<strong>单例、工厂、观察者、代理、命令、适配器、合成、访问者</strong>。\r\n\r\n<strong>单例模式</strong>：目的是为了让系统中只有一个调用对象，缺点是单例使其他程序过分依赖它，而且不同单例运行在不同进程中，使得维护困难；\r\n\r\n<strong>工厂模式</strong>：生产固定的一些东西，如抽象类，缺点是产品修改麻烦；如喜欢动作片和爱情片的人分别向服务器发出同一个请求，就可以得到他们想看的影片集，相当于不同对象进行同一请求，需求均得到满足。\r\n\r\n<strong>观察者模式</strong>：就是多个对象对一个对象进行监控，如缓存；\r\n\r\n<strong>代理模式</strong>：自己的事交给别人去做，分别返回结果即可，如异步线程；\r\n\r\n<strong>命令模式</strong>：调用对象与作用对象之间分离，由中间件来协调两者之间的工作，如控制器；\r\n\r\n<strong>适配器模式</strong>：将一个接口变成用户所需要的接口，如baseadapter可以适配listview和spinner，因为它们有相同的接口\r\n\r\n<strong>合成模式</strong>：将一对多的关系转换成一对整体的关系，如listview与适配器；\r\n\r\n<strong>访问者模式</strong>：对不同的对象采取不同的处理，如instanceof。\r\n\r\n下面是网友对设计模式的理解，比较生动和形象，先分享出来一起看看。\r\n\r\n创建型模式\r\n\r\n1、FACTORY—追MM少不了请吃饭了，麦当劳的鸡翅和肯德基的鸡翅都是MM爱吃的东西，虽然口味有所不同，但不管你带MM去麦当劳或肯德基，只管向服务员说“来四个鸡翅”就行了。麦当劳和肯德基就是生产鸡翅的Factory\r\n\r\n工厂模式：客户类和工厂类分开。消费者任何时候需要某种产品，只需向工厂请求即可。消费者无须修改就可以接纳新产品。缺点是当产品修改时，工厂类也要做相应的修改。如：如何创建及如何向客户端提供。\r\n\r\n2、BUILDER—MM最爱听的就是“我爱你”这句话了，见到不同地方的MM,要能够用她们的方言跟她说这句话哦，我有一个多种语言翻译机，上面每种语言都有一个按键，见到MM我只要按对应的键，它就能够用相应的语言说出“我爱你”这句话了，国外的MM也可以轻松搞掂，这就是我的“我爱你”builder。（这一定比美军在伊拉克用的翻译机好卖）\r\n\r\n建造模式：将产品的内部表象和产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。建造模式使得产品内部表象可以独立的变化，客户不必知道产品内部组成的细节。建造模式可以强制实行一种分步骤进行的建造过程。\r\n\r\n3、FACTORY METHOD—请MM去麦当劳吃汉堡，不同的MM有不同的口味，要每个都记住是一件烦人的事情，我一般采用Factory Method模式，带着MM到服务员那儿，说“要一个汉堡”，具体要什么样的汉堡呢，让MM直接跟服务员说就行了。\r\n\r\n工厂方法模式：核心工厂类不再负责所有产品的创建，而是将具体创建的工作交给子类去做，成为一个抽象工厂角色，仅负责给出具体工厂类必须实现的接口，而不接触哪一个产品类应当被实例化这种细节。\r\n\r\n4、PROTOTYPE—跟MM用QQ聊天，一定要说些深情的话语了，我搜集了好多肉麻的情话，需要时只要copy出来放到QQ里面就行了，这就是我的情话prototype了。（100块钱一份，你要不要）\r\n\r\n原始模型模式：通过给出一个原型对象来指明所要创建的对象的类型，然后用复制这个原型对象的方法创建出更多同类型的对象。原始模型模式允许动态的增加或减少产品类，产品类不需要非得有任何事先确定的等级结构，原始模型模式适用于任何的等级结构。缺点是每一个类都必须配备一个克隆方法。\r\n\r\n5、SINGLETON—俺有6个漂亮的老婆，她们的老公都是我，我就是我们家里的老公Sigleton，她们只要说道“老公”，都是指的同一个人，那就是我(刚才做了个梦啦，哪有这么好的事)\r\n\r\n单例模式：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例单例模式。单例模式只应在有真正的“单一实例”的需求时才可使用。\r\n\r\n结构型模式\r\n\r\n6、ADAPTER—在朋友聚会上碰到了一个美女Sarah，从香港来的，可我不会说粤语，她不会说普通话，只好求助于我的朋友kent了，他作为我和Sarah之间的Adapter，让我和Sarah可以相互交谈了(也不知道他会不会耍我)\r\n\r\n适配器（变压器）模式：把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口原因不匹配而无法一起工作的两个类能够一起工作。适配类可以根据参数返还一个合适的实例给客户端。\r\n\r\n7、BRIDGE—早上碰到MM，要说早上好，晚上碰到MM，要说晚上好；碰到MM穿了件新衣服，要说你的衣服好漂亮哦，碰到MM新做的发型，要说你的头发好漂亮哦。不要问我“早上碰到MM新做了个发型怎么说”这种问题，自己用BRIDGE组合一下不就行了\r\n\r\n桥梁模式：将抽象化与实现化脱耦，使得二者可以独立的变化，也就是说将他们之间的强关联变成弱关联，也就是指在一个软件系统的抽象化和实现化之间使用组合/聚合关系而不是继承关系，从而使两者可以独立的变化。\r\n\r\n8、COMPOSITE—Mary今天过生日。“我过生日，你要送我一件礼物。”“嗯，好吧，去商店，你自己挑。”“这件T恤挺漂亮，买，这条裙子好看，买，这个包也不错，买。”“喂，买了三件了呀，我只答应送一件礼物的哦。”“什么呀，T恤加裙子加包包，正好配成一套呀，MM，麻烦你包起来。”“……”，MM都会用Composite模式了，你会了没有？\r\n\r\n合成模式：合成模式将对象组织到树结构中，可以用来描述整体与部分的关系。合成模式就是一个处理对象的树结构的模式。合成模式把部分与整体的关系用树结构表示出来。合成模式使得客户端把一个个单独的成分对象和由他们复合而成的合成对象同等看待。\r\n\r\n9、DECORATOR—Mary过完轮到Sarly过生日，还是不要叫她自己挑了，不然这个月伙食费肯定玩完，拿出我去年在华山顶上照的照片，在背面写上“最好的的礼物，就是爱你的Fita”，再到街上礼品店买了个像框（卖礼品的MM也很漂亮哦），再找隔壁搞美术设计的Mike设计了一个漂亮的盒子装起来……，我们都是Decorator，最终都在修饰我这个人呀，怎么样，看懂了吗？\r\n\r\n装饰模式：装饰模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案，提供比继承更多的灵活性。动态给一个对象增加功能，这些功能可以再动态的撤消。增加由一些基本功能的排列组合而产生的非常大量的功能。\r\n\r\n10、FACADE—我有一个专业的Nikon相机，我就喜欢自己手动调光圈、快门，这样照出来的照片才专业，但MM可不懂这些，教了半天也不会。幸好相机有Facade设计模式，把相机调整到自动档，只要对准目标按快门就行了，一切由相机自动调整，这样MM也可以用这个相机给我拍张照片了。\r\n\r\n门面模式：外部与一个子系统的通信必须通过一个统一的门面对象进行。门面模式提供一个高层次的接口，使得子系统更易于使用。每一个子系统只有一个门面类，而且此门面类只有一个实例，也就是说它是一个单例模式。但整个系统可以有多个门面类。\r\n\r\n11、FLYWEIGHT—每天跟MM发短信，手指都累死了，最近买了个新手机，可以把一些常用的句子存在手机里，要用的时候，直接拿出来，在前面加上MM的名字就可以发送了，再不用一个字一个字敲了。共享的句子就是Flyweight，MM的名字就是提取出来的外部特征，根据上下文情况使用。\r\n\r\n享元模式：FLYWEIGHT在拳击比赛中指最轻量级。享元模式以共享的方式高效的支持大量的细粒度对象。享元模式能做到共享的关键是区分内蕴状态和外蕴状态。内蕴状态存储在享元内部，不会随环境的改变而有所不同。外蕴状态是随环境的改变而改变的。外蕴状态不能影响内蕴状态，它们是相互独立的。将可以共享的状态和不可以共享的状态从常规类中区分开来，将不可以共享的状态从类里剔除出去。客户端不可以直接创建被共享的对象，而应当使用一个工厂对象负责创建被共享的对象。享元模式大幅度的降低内存中对象的数量。\r\n\r\n12、PROXY—跟MM在网上聊天，一开头总是“hi,你好”,“你从哪儿来呀？”“你多大了？”“身高多少呀？”这些话，真烦人，写个程序做为我的Proxy吧，凡是接收到这些话都设置好了自动的回答，接收到其他的话时再通知我回答，怎么样，酷吧。\r\n\r\n代理模式：代理模式给某一个对象提供一个代理对象，并由代理对象控制对源对象的引用。代理就是一个人或一个机构代表另一个人或者一个机构采取行动。某些情况下，客户不想或者不能够直接引用一个对象，代理对象可以在客户和目标对象直接起到中介的作用。客户端分辨不出代理主题对象与真实主题对象。代理模式可以并不知道真正的被代理对象，而仅仅持有一个被代理对象的接口，这时候代理对象不能够创建被代理对象，被代理对象必须有系统的其他角色代为创建并传入。\r\n\r\n行为模式\r\n\r\n13、CHAIN OF RESPONSIBLEITY—晚上去上英语课，为了好开溜坐到了最后一排，哇，前面坐了好几个漂亮的MM哎，找张纸条，写上“Hi,可以做我的女朋友吗？如果不愿意请向前传”，纸条就一个接一个的传上去了，糟糕，传到第一排的MM把纸条传给老师了，听说是个老处女呀，快跑!\r\n\r\n责任链模式：在责任链模式中，很多对象由每一个对象对其下家的引用而接\r\n\r\n起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。客户并不知道链上的哪一个对象最终处理这个请求，系统可以在不影响客户端的情况下动态的重新组织链和分配责任。处理者有两个选择：承担责任或者把责任推给下家。一个请求可以最终不被任何接收端对象所接受。\r\n\r\n14、COMMAND—俺有一个MM家里管得特别严，没法见面，只好借助于她弟弟在我们俩之间传送信息，她对我有什么指示，就写一张纸条让她弟弟带给我。这不，她弟弟又传送过来一个COMMAND，为了感谢他，我请他吃了碗杂酱面，哪知道他说：“我同时给我姐姐三个男朋友送COMMAND，就数你最小气，才请我吃面。”，:-(\r\n\r\n命令模式：命令模式把一个请求或者操作封装到一个对象中。命令模式把发出命令的责任和执行命令的责任分割开，委派给不同的对象。命令模式允许请求的一方和发送的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否执行，何时被执行以及是怎么被执行的。系统支持命令的撤消。\r\n\r\n15、INTERPRETER—俺有一个《泡MM真经》，上面有各种泡MM的攻略，比如说去吃西餐的步骤、去看电影的方法等等，跟MM约会时，只要做一个Interpreter，照着上面的脚本执行就可以了。\r\n\r\n解释器模式：给定一个语言后，解释器模式可以定义出其文法的一种表示，并同时提供一个解释器。客户端可以使用这个解释器来解释这个语言中的句子。解释器模式将描述怎样在有了一个简单的文法后，使用模式设计解释这些语句。在解释器模式里面提到的语言是指任何解释器对象能够解释的任何组合。在解释器模式中需要定义一个代表文法的命令类的等级结构，也就是一系列的组合规则。每一个命令对象都有一个解释方法，代表对命令对象的解释。命令对象的等级结构中的对象的任何排列组合都是一个语言。\r\n\r\n16、ITERATOR—我爱上了Mary，不顾一切的向她求婚。\r\n\r\nMary：“想要我跟你结婚，得答应我的条件”\r\n\r\n我：“什么条件我都答应，你说吧”\r\n\r\nMary：“我看上了那个一克拉的钻石”\r\n\r\n我：“我买，我买，还有吗？”\r\n\r\nMary：“我看上了湖边的那栋别墅”\r\n\r\n我：“我买，我买，还有吗？”\r\n\r\nMary：“你的小弟弟必须要有50cm长”\r\n\r\n我脑袋嗡的一声，坐在椅子上，一咬牙：“我剪，我剪，还有吗？”\r\n\r\n……\r\n\r\n迭代子模式：迭代子模式可以顺序访问一个聚集中的元素而不必暴露聚集的内部表象。多个对象聚在一起形成的总体称之为聚集，聚集对象是能够包容一组对象的容器对象。迭代子模式将迭代逻辑封装到一个独立的子对象中，从而与聚集本身隔开。迭代子模式简化了聚集的界面。每一个聚集对象都可以有一个或一个以上的迭代子对象，每一个迭代子的迭代状态可以是彼此独立的。迭代算法可以独立于聚集角色变化。\r\n\r\n17、MEDIATOR—四个MM打麻将，相互之间谁应该给谁多少钱算不清楚了，幸亏当时我在旁边，按照各自的筹码数算钱，赚了钱的从我这里拿，赔了钱的也付给我，一切就OK啦，俺得到了四个MM的电话。\r\n\r\n调停者模式：调停者模式包装了一系列对象相互作用的方式，使得这些对象不必相互明显作用。从而使他们可以松散偶合。当某些对象之间的作用发生改变时，不会立即影响其他的一些对象之间的作用。保证这些作用可以彼此独立的变化。调停者模式将多对多的相互作用转化为一对多的相互作用。调停者模式将对象的行为和协作抽象化，把对象在小尺度的行为上与其他对象的相互作用分开处理。\r\n\r\n18、MEMENTO—同时跟几个MM聊天时，一定要记清楚刚才跟MM说了些什么话，不然MM发现了会不高兴的哦，幸亏我有个备忘录，刚才与哪个MM说了什么话我都拷贝一份放到备忘录里面保存，这样可以随时察看以前的记录啦。\r\n\r\n备忘录模式：备忘录对象是一个用来存储另外一个对象内部状态的快照的对象。备忘录模式的用意是在不破坏封装的条件下，将一个对象的状态捉住，并外部化，存储起来，从而可以在将来合适的时候把这个对象还原到存储起来的状态。\r\n\r\n19、OBSERVER—想知道咱们公司最新MM情报吗？加入公司的MM情报邮件组就行了，tom负责搜集情报，他发现的新情报不用一个一个通知我们，直接发布给邮件组，我们作为订阅者（观察者）就可以及时收到情报啦\r\n\r\n观察者模式：观察者模式定义了一种一队多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使他们能够自动更新自己。\r\n\r\n20、STATE—跟MM交往时，一定要注意她的状态哦，在不同的状态时她的行为会有不同，比如你约她今天晚上去看电影，对你没兴趣的MM就会说“有事情啦”，对你不讨厌但还没喜欢上的MM就会说“好啊，不过可以带上我同事么？”，已经喜欢上你的MM就会说“几点钟？看完电影再去泡吧怎么样？”，当然你看电影过程中表现良好的话，也可以把MM的状态从不讨厌不喜欢变成喜欢哦。\r\n\r\n状态模式：状态模式允许一个对象在其内部状态改变的时候改变行为。这个对象看上去象是改变了它的类一样。状态模式把所研究的对象的行为包装在不同的状态对象里，每一个状态对象都属于一个抽象状态类的一个子类。状态模式的意图是让一个对象在其内部状态改变的时候，其行为也随之改变。状态模式需要对每一个系统可能取得的状态创立一个状态类的子类。当系统的状态变化时，系统便改变所选的子类。\r\n\r\n21、STRATEGY—跟不同类型的MM约会，要用不同的策略，有的请电影比较好，有的则去吃小吃效果不错，有的去海边浪漫最合适，单目的都是为了得到MM的芳心，我的追MM锦囊中有好多Strategy哦。\r\n\r\n策略模式：策略模式针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换。策略模式使得算法可以在不影响到客户端的情况下发生变化。策略模式把行为和环境分开。环境类负责维持和查询行为类，各种算法在具体的策略类中提供。由于算法和环境独立开来，算法的增减，修改都不会影响到环境和客户端。\r\n\r\n22、TEMPLATE METHOD——看过《如何说服女生上床》这部经典文章吗？女生从认识到上床的不变的步骤分为巧遇、打破僵局、展开追求、接吻、前戏、动手、爱抚、进去八大步骤(Template method)，但每个步骤针对不同的情况，都有不一样的做法，这就要看你随机应变啦(具体实现)；\r\n\r\n模板方法模式：模板方法模式准备一个抽象类，将部分逻辑以具体方法以及具体构造子的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。先制定一个顶级逻辑框架，而将逻辑的细节留给具体的子类去实现。\r\n\r\n23、VISITOR—情人节到了，要给每个MM送一束鲜花和一张卡片，可是每个MM送的花都要针对她个人的特点，每张卡片也要根据个人的特点来挑，我一个人哪搞得清楚，还是找花店老板和礼品店老板做一下Visitor，让花店老板根据MM的特点选一束花，让礼品店老板也根据每个人特点选一张卡，这样就轻松多了；\r\n\r\n访问者模式：访问者模式的目的是封装一些施加于某种数据结构元素之上的操作。一旦这些操作需要修改的话，接受这个操作的数据结构可以保持不变。访问者模式适用于数据结构相对未定的系统，它把数据结构和作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由的演化。访问者模式使得增加新的操作变的很容易，就是增加一个新的访问者类。访问者模式将有关的行为集中到一个访问者对象中，而不是分散到一个个的节点类中。当使用访问者模式时，要将尽可能多的对象浏览逻辑放在访问者类中，而不是放到它的子类中。访问者模式可以跨过几个类的等级结构访问属于不同的等级结构的成员类。', 'Android进阶之设计模式', '', 'inherit', 'closed', 'closed', '', '29-revision-v1', '', '', '2015-09-27 21:07:07', '2015-09-27 13:07:07', '', 29, 'http://115.28.161.133/?p=30', 0, 'revision', '', 0),
(31, 1, '2015-09-28 00:01:07', '2015-09-27 16:01:07', 'http://115.28.161.133/wp-content/uploads/2015/09/cropped-ed6c66e6d50bf543c1a95109f8ac04d9.jpg', 'cropped-ed6c66e6d50bf543c1a95109f8ac04d9.jpg', '', 'inherit', 'open', 'closed', '', 'cropped-ed6c66e6d50bf543c1a95109f8ac04d9-jpg', '', '', '2015-09-28 00:01:07', '2015-09-27 16:01:07', '', 0, 'http://115.28.161.133/wp-content/uploads/2015/09/cropped-ed6c66e6d50bf543c1a95109f8ac04d9.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(32, 1, '2015-09-28 19:01:39', '2015-09-28 11:01:39', '&nbsp;\r\n\r\n<strong><a href="http://www.csdn.net/article/2015-09-22/2825768">原文链接：</a></strong>\r\n\r\n标准来源于目标\r\n\r\n前文说过，评价架构好坏是一个很主观的东西。既然大家写出来的程序都能跑，凭什么就说你架构好，我的架构差？拿出来大家评评理，张三说好，李四说不行，王五说将就……究竟谁说了算？现在已经不是一个迷信权威的时代了，所以不管你多少光环加持，你都得说出子丑寅卯来，都得服众才行。\r\n\r\n我觉得，这种现象的产生，抛开“同行相轻”和“流派之争”之类无厘头的东西，一个很重要的原因就是没有明确判断标准。所以在网上，常常就出现这样一种很热闹很奇葩很无奈的现象：我和你说性能，你跟我说安全；我跟你说安全，你跟我说扩展；我跟你说扩展，你跟我说维护；我跟你说维护，你跟我说成本……\r\n\r\n这是一个很简单的道理，没有标准，就无法进行评判！所以，如果不能统一一个评判架构优劣的标准，我们永远无法达成一致。你说有标准啊，性能安全可扩展……但这样还是不行，标准过多，一样等同于没有标准。假设以100分为满分，性能占多少分？安全占多少分？可扩展又占多少分？因为要想提高性能，就可能就要牺牲可扩展性；要想安全，就会牺牲性能；要想……就会……；哪一方面更重要，哪一些可以牺牲？如果不是胸有成竹的话，最后还是会左支右绌手忙脚乱，乱成一锅粥。\r\n\r\n所以我再提出一个观点：以是否实现架构师的设计目标为标准。如果说一个系统的架构，最终实现了架构师的设计目标，我们就可以说这是一个好架构；如果说没有能实现架构师的目标，这就是一个不那么好的架构。\r\n\r\n“等一下等一下”，你要是反应够敏锐的话，肯定会跳起来，“这是不是太主观（儿戏）了？我随便一堆烂代码，然后告诉你，‘是啊，我设计的目的就是让它烂，越难越好’，按你的逻辑，这样也行？”(⊙_⊙)，嗯，你要是这样玩儿我还真没办法。但是话又说回来，要让一堆代码能跑又还够“烂”，也还不是一件容易的事，你觉得呢？\r\n\r\n总之，我希望大家能明白我的意思：架构师开始一个新项目，应当设立一个适当的设计目标；然后通过架构，努力实现其预定目标。如果最终系统的运行，符合其设计预期，我们就可以说：这个架构不错还行！反正，架构就出了问题。\r\n\r\n我们的目标\r\n\r\n软件行业有各种各样的系统，每一种系统的开发都可能会有不同的目标。比如导弹发射的系统，我们可以想象，目标（甚至是基本要求）肯定是：1、稳定（绝对不能走火）；2、迅速反应（不允许按下发射按钮后一分钟导弹才开始发射）。你可能觉得这种要求很好啊！任何系统不都是应该满足这样要求的吗？比如我在淘宝买T恤，结果给我发一条丁字裤，这怎么行？一个网页半天打不开还有理了？我还真得答一句，它就是有理了。“存在即合理”，这里的合理，合理在成本。我们目前日常使用到的绝大部分软件，都是有bug的，而且是一堆的bug，但我们仍然在使用它们。如果你想使用像“导弹发射”一样稳定精确迅捷的软件，可能最后的结果只有一个：你用不起。（请自行脑补）\r\n\r\n所以，其实我们是做了一个妥协，“便宜点，将就用吧”。我们为了达到我们的基本目的，牺牲掉一些“无关紧要”的东西。对于很多追求卓越的程序员来说，这种牺牲妥协是难以接受的。“白玉微瑕，你让我怎么能够接受？”——但很多时候，你必须接受。这个问题这个观点，我们会在整个系列中不断的提及。请试着接受；如果你暂时还不能接受，请牢记：没有牺牲，就没有胜利！\r\n\r\n那么，我们的策略是：特色突出、整体均衡。说得更直白一点：有亮点，没硬伤。这就够了！而我们的亮点就是：可维护性。（注意：不是可扩展，可维护性包含可扩展，但不仅仅是可扩展）\r\n\r\n为什么是可维护性\r\n\r\n幸或者不幸，我进入软件行业之后，绝大部分的工作是几乎所有程序员都不齿厌恶的维护。我曾经维护过一个有十年历史的、糅合了C、VB、java、C#各种语言在内的一个物流系统的部件。我在那家公司工作了一年多，说实话，直到我离职，对整个系统，我连边都没摸到——这个系统太大了，而且连我们公司都只是其主营公司众多外包公司中的一个。\r\n\r\n在我花了两周的时间找到一个bug的位置之后，我以为我终于明白了为什么会说：“维护和开发的花费比是80:20”。但这只是我以为——现实更加残忍：差不多一个月后，我又花了一个星期的时间，找到了另外一个bug的根源，正是我fix前一个bug所产生的。我泪流满面，有没有？脑子里一下就蹦出个词：“按下了葫芦浮起了瓢”！总之，如果fix前一个bug就会导致后一个bug；如果fix后一个bug，就会导致前面的bug。我忘了最后是怎么处理这个问题的，依稀记得是让项目经理去和稀泥去了。因为这不是一个很关键很常用的功能，所以最后大概是不了了之吧。\r\n\r\n后来我了解到，很多的开发项目，是这样一个流程：一群人根据文档开始开发，几个月后通过验收上线；然后开发团队解散，留下一两个项目组里最菜的菜鸟做“维护”。Game Over！皆大欢喜。这种现象，在各种外包团队（尤其是以项目计价的廉价外包团队）中更加的突出（这或许也是大家普遍歧视外包公司的一个原因？）\r\n\r\n既然是这样一种开发模式，很多开发人员根本体会不到维护的痛苦。在他们看来，“维护嘛，修修补补，加一两个if...else而已，让我们开发人员做更高大上的工作吧！”但他们也不是总这么幸运，有时候，他们会被抓去“填坑”。据说最通常的做法，就是在“老坑”周围再挖一堆“新坑”，填平之前的老坑即可。周而复始，直到有一天，“受不了啦！我们重写吧！”——等等，为什么不重构？呵呵，好问题，你觉得呢？\r\n\r\n需求变更\r\n\r\n很多程序员把这种困境归咎于“需求变更”。如果不是那些傻逼客户一天到晚的改需求，我一定会做出一个完美的作品！\r\n\r\n或许是因为我是半路出家的原因，和很多程序员相反，我觉得：不是需求变更驱动着软件的不断更改，而是“软件可以随意更改”的这种特性刺激了不断的需求变更。你装修好的房子，是不是住一段时间之后就会觉得这里那里不合适？这里少了一个插座，阳台上该加一个龙头，橱柜用着不顺手……“要是能改改就更好了！”，只是这样的改动太费力，所以大多数时间我们都还是算了。但软件可以！理论上怎么改都可以。想想软件真的是一种很特殊的商品——它是可以交付“半成品”的。你先用着，如果有问题我再改改，有新需求我再改改，一直可以改到面目全非。没有在其他传统行业里待过的程序员无法理解，“可以随意更改”是一种多么出色的特质。这意味着产品可以自我进化，应对各种变化，可以永生！想象这样一台“汽车”，开始可以在马路上跑，过段时间改一下就可以在水里游，再拆装一下可以当摩托拉风，堵车的时候展开翅膀……这是什么样一种屌爆天的体验啊？\r\n\r\n所以，“拥抱变化”绝不是一句口号，这是一种胸怀。\r\n\r\n作为示例的这两个系统，我是希望能用他们一辈子的。但我甚至无法想象一年之后他们会是什么样子——他们需要接受市场的检验，应对技术的升级换代，会有各种想象不到的变化。所以，可维护性无疑是必须放到首位的。\r\n\r\n为了可维护\r\n\r\n明确了架构的首要目标，我们就可以做一些基础的选择了。比如开发语言，可是是面向对象的C#，不需要“性能卓越”的C。\r\n\r\n说道“面向对象”，可能有些同学就会比较high，脑子里就会冒出“抽象”、“封装”、“设计模式”等各种高大上的东西出来。但我不得不提醒你们：首先，这些都是微观层面考虑的东西，而架构是宏观的；然后，这些都不是架构，而是润滑黏合支持架构的东西；最后，在其他条件不变的情况下，系统中这些东西用得越少，说明架构越好。\r\n\r\n我们以“设计模式”为例。大家在学习设计模式的过程中有没有这样一种困惑，“这样继承封装多态乱七八糟的绕来绕去的干嘛？”我花了很长一段时间才明白，要理解设计模式，必须要明白三个字：“不得已”。是迫不得已，才用设计模式来解决一些特定的问题，而不是说正常的代码就应该这样写！这种迫不得已，有很多种原因。个人觉得最容易理解的就是“适配器模式”，因为出现了接口的冲突，所以我们不得不进行适配。但一个很自然的问题就是：为什么不直接改接口让他们自然融洽呢？这不是一种更自然更直观的解决方案吗？答案很有可能就是因为架构——大的架构已经确立，局部必须服从整体。那么，如果一个完全理想化的架构，是不是根本就不应该出现这种问题接口冲突的问题，因而根本就不需要这种设计模式？\r\n\r\n所以，我说设计模式之类的东西是润滑剂是黏合剂，他们的作用是弥补架构的局部缺陷，更好的支撑架构。更极端的一种说法可以送给痴迷于设计模式的同学：设计模式是药，没病就不要吃药！\r\n\r\n那么，为了可维护性，架构中究竟应该注意些什么？这是一个很大的话题，开篇我们只说一点。\r\n\r\n模块划分\r\n\r\n模块有大有小，大可以是一个分层一个项目，小可以是一个方法一个类。我们通常的做法是由大到小，逐步细分。\r\n\r\n模块的划分是相当的考验架构能力的。良好的模块划分，能够让我们方便的安排人手、合理的组织项目进度、迅速的定位代码……各种好处说都说不完。所以还是说说不好的模块划分有什么问题更容易一些，嗯，这个好像根本就不要说，想想你在一堆乱七八糟的代码里不断的F11的情形吧！\r\n\r\n我个人认为，模块划分的难度在于“整齐”和“灵活”之间取舍。通常来说，大的模块我们都是“一刀切”，着重强调的是“整齐”，比如口熟能详的UI层、BLL层和DAL层，但这种“一刀切”的做法，更多的是一种无奈。我们的人类的思维局限决定了我们在考虑复杂问题时无法深入到每一个细节，所以只能先“大而化之”的把一个复杂问题先进行简单化。这样带来的一个严重的副作用就是，限制了代码的灵活性；而灵活性，正是应对复杂变化的有效武器。所以，在更小一些的模块（比如说：类）里，我们引入了丰富多彩的抽象继承设计模式等一系列充满各种灵活性的机制，以弥合“一刀切”造成的问题。这一松一紧一张一弛中“度”的掌握，就只能说是一种艺术了。\r\n\r\n模块划分，笼统的说教用处不大，我们将在后面的文章中结合具体情况逐一说明。但我希望大家能够明白：模块划分是必须的——这种必须，是一种无可奈何的选择。所以，喜欢从页面直接写sql到数据库的同学，老大让你把你的代码拆成几段放到不同地方的时候，不要嫌麻烦；喜欢把一个简单项目切成七层的同学，先仔细想不想这样做是不是真的有必要。\r\n\r\n代码之外\r\n\r\n为了代码能够长期有效的维护，我们还需要做很多工作，比如良好的文档、完善的项目管理流程。但我想说的，还是不是这个，而是代码之外的因素对项目架构的影响。比如开发团队的背景能力偏好，一群C#程序员，你一定要整个node.js，这纯粹是给自己找不痛快。除了这些稍稍用脑袋想一想就能明白的东西，有一件事，很多程序员并没有意识到。\r\n\r\n架构的一个天然目的就是：让代码更智能让程序员更傻瓜。换一张说法就是，架构要“创造便利，让程序员更关注业务”。\r\n\r\n这可能是一个让程序员感到悲哀的事实。正如机械师不停的发明，让机器变得越来越聪明，取代流水线上的工人，最终取代了他们自己。从某种意义上说，我们都是自掘坟墓的人。一个良好的架构，就应该是让每一个普通开发人员，都是一个个尽量廉价随时可以替换的螺丝钉，这样才能保证系统永远健康正常的运行下去。告诉你这个事实可能让你一整天都不开心，但接受这个事实之后能帮助你在工作中变得更加的“心平气和”。螺丝钉就要有螺丝钉的觉悟；更何况，当好一颗螺丝钉也不是一件很容易的事。', '【转载】架构之路（一）：目标', '', 'publish', 'open', 'open', '', '%e3%80%90%e8%bd%ac%e8%bd%bd%e3%80%91%e6%9e%b6%e6%9e%84%e4%b9%8b%e8%b7%af%ef%bc%88%e4%b8%80%ef%bc%89%ef%bc%9a%e7%9b%ae%e6%a0%87', '', '', '2015-09-28 19:01:39', '2015-09-28 11:01:39', '', 0, 'http://115.28.161.133/?p=32', 0, 'post', '', 0),
(33, 1, '2015-09-28 19:01:39', '2015-09-28 11:01:39', '&nbsp;\r\n\r\n<strong><a href="http://www.csdn.net/article/2015-09-22/2825768">原文链接：</a></strong>\r\n\r\n标准来源于目标\r\n\r\n前文说过，评价架构好坏是一个很主观的东西。既然大家写出来的程序都能跑，凭什么就说你架构好，我的架构差？拿出来大家评评理，张三说好，李四说不行，王五说将就……究竟谁说了算？现在已经不是一个迷信权威的时代了，所以不管你多少光环加持，你都得说出子丑寅卯来，都得服众才行。\r\n\r\n我觉得，这种现象的产生，抛开“同行相轻”和“流派之争”之类无厘头的东西，一个很重要的原因就是没有明确判断标准。所以在网上，常常就出现这样一种很热闹很奇葩很无奈的现象：我和你说性能，你跟我说安全；我跟你说安全，你跟我说扩展；我跟你说扩展，你跟我说维护；我跟你说维护，你跟我说成本……\r\n\r\n这是一个很简单的道理，没有标准，就无法进行评判！所以，如果不能统一一个评判架构优劣的标准，我们永远无法达成一致。你说有标准啊，性能安全可扩展……但这样还是不行，标准过多，一样等同于没有标准。假设以100分为满分，性能占多少分？安全占多少分？可扩展又占多少分？因为要想提高性能，就可能就要牺牲可扩展性；要想安全，就会牺牲性能；要想……就会……；哪一方面更重要，哪一些可以牺牲？如果不是胸有成竹的话，最后还是会左支右绌手忙脚乱，乱成一锅粥。\r\n\r\n所以我再提出一个观点：以是否实现架构师的设计目标为标准。如果说一个系统的架构，最终实现了架构师的设计目标，我们就可以说这是一个好架构；如果说没有能实现架构师的目标，这就是一个不那么好的架构。\r\n\r\n“等一下等一下”，你要是反应够敏锐的话，肯定会跳起来，“这是不是太主观（儿戏）了？我随便一堆烂代码，然后告诉你，‘是啊，我设计的目的就是让它烂，越难越好’，按你的逻辑，这样也行？”(⊙_⊙)，嗯，你要是这样玩儿我还真没办法。但是话又说回来，要让一堆代码能跑又还够“烂”，也还不是一件容易的事，你觉得呢？\r\n\r\n总之，我希望大家能明白我的意思：架构师开始一个新项目，应当设立一个适当的设计目标；然后通过架构，努力实现其预定目标。如果最终系统的运行，符合其设计预期，我们就可以说：这个架构不错还行！反正，架构就出了问题。\r\n\r\n我们的目标\r\n\r\n软件行业有各种各样的系统，每一种系统的开发都可能会有不同的目标。比如导弹发射的系统，我们可以想象，目标（甚至是基本要求）肯定是：1、稳定（绝对不能走火）；2、迅速反应（不允许按下发射按钮后一分钟导弹才开始发射）。你可能觉得这种要求很好啊！任何系统不都是应该满足这样要求的吗？比如我在淘宝买T恤，结果给我发一条丁字裤，这怎么行？一个网页半天打不开还有理了？我还真得答一句，它就是有理了。“存在即合理”，这里的合理，合理在成本。我们目前日常使用到的绝大部分软件，都是有bug的，而且是一堆的bug，但我们仍然在使用它们。如果你想使用像“导弹发射”一样稳定精确迅捷的软件，可能最后的结果只有一个：你用不起。（请自行脑补）\r\n\r\n所以，其实我们是做了一个妥协，“便宜点，将就用吧”。我们为了达到我们的基本目的，牺牲掉一些“无关紧要”的东西。对于很多追求卓越的程序员来说，这种牺牲妥协是难以接受的。“白玉微瑕，你让我怎么能够接受？”——但很多时候，你必须接受。这个问题这个观点，我们会在整个系列中不断的提及。请试着接受；如果你暂时还不能接受，请牢记：没有牺牲，就没有胜利！\r\n\r\n那么，我们的策略是：特色突出、整体均衡。说得更直白一点：有亮点，没硬伤。这就够了！而我们的亮点就是：可维护性。（注意：不是可扩展，可维护性包含可扩展，但不仅仅是可扩展）\r\n\r\n为什么是可维护性\r\n\r\n幸或者不幸，我进入软件行业之后，绝大部分的工作是几乎所有程序员都不齿厌恶的维护。我曾经维护过一个有十年历史的、糅合了C、VB、java、C#各种语言在内的一个物流系统的部件。我在那家公司工作了一年多，说实话，直到我离职，对整个系统，我连边都没摸到——这个系统太大了，而且连我们公司都只是其主营公司众多外包公司中的一个。\r\n\r\n在我花了两周的时间找到一个bug的位置之后，我以为我终于明白了为什么会说：“维护和开发的花费比是80:20”。但这只是我以为——现实更加残忍：差不多一个月后，我又花了一个星期的时间，找到了另外一个bug的根源，正是我fix前一个bug所产生的。我泪流满面，有没有？脑子里一下就蹦出个词：“按下了葫芦浮起了瓢”！总之，如果fix前一个bug就会导致后一个bug；如果fix后一个bug，就会导致前面的bug。我忘了最后是怎么处理这个问题的，依稀记得是让项目经理去和稀泥去了。因为这不是一个很关键很常用的功能，所以最后大概是不了了之吧。\r\n\r\n后来我了解到，很多的开发项目，是这样一个流程：一群人根据文档开始开发，几个月后通过验收上线；然后开发团队解散，留下一两个项目组里最菜的菜鸟做“维护”。Game Over！皆大欢喜。这种现象，在各种外包团队（尤其是以项目计价的廉价外包团队）中更加的突出（这或许也是大家普遍歧视外包公司的一个原因？）\r\n\r\n既然是这样一种开发模式，很多开发人员根本体会不到维护的痛苦。在他们看来，“维护嘛，修修补补，加一两个if...else而已，让我们开发人员做更高大上的工作吧！”但他们也不是总这么幸运，有时候，他们会被抓去“填坑”。据说最通常的做法，就是在“老坑”周围再挖一堆“新坑”，填平之前的老坑即可。周而复始，直到有一天，“受不了啦！我们重写吧！”——等等，为什么不重构？呵呵，好问题，你觉得呢？\r\n\r\n需求变更\r\n\r\n很多程序员把这种困境归咎于“需求变更”。如果不是那些傻逼客户一天到晚的改需求，我一定会做出一个完美的作品！\r\n\r\n或许是因为我是半路出家的原因，和很多程序员相反，我觉得：不是需求变更驱动着软件的不断更改，而是“软件可以随意更改”的这种特性刺激了不断的需求变更。你装修好的房子，是不是住一段时间之后就会觉得这里那里不合适？这里少了一个插座，阳台上该加一个龙头，橱柜用着不顺手……“要是能改改就更好了！”，只是这样的改动太费力，所以大多数时间我们都还是算了。但软件可以！理论上怎么改都可以。想想软件真的是一种很特殊的商品——它是可以交付“半成品”的。你先用着，如果有问题我再改改，有新需求我再改改，一直可以改到面目全非。没有在其他传统行业里待过的程序员无法理解，“可以随意更改”是一种多么出色的特质。这意味着产品可以自我进化，应对各种变化，可以永生！想象这样一台“汽车”，开始可以在马路上跑，过段时间改一下就可以在水里游，再拆装一下可以当摩托拉风，堵车的时候展开翅膀……这是什么样一种屌爆天的体验啊？\r\n\r\n所以，“拥抱变化”绝不是一句口号，这是一种胸怀。\r\n\r\n作为示例的这两个系统，我是希望能用他们一辈子的。但我甚至无法想象一年之后他们会是什么样子——他们需要接受市场的检验，应对技术的升级换代，会有各种想象不到的变化。所以，可维护性无疑是必须放到首位的。\r\n\r\n为了可维护\r\n\r\n明确了架构的首要目标，我们就可以做一些基础的选择了。比如开发语言，可是是面向对象的C#，不需要“性能卓越”的C。\r\n\r\n说道“面向对象”，可能有些同学就会比较high，脑子里就会冒出“抽象”、“封装”、“设计模式”等各种高大上的东西出来。但我不得不提醒你们：首先，这些都是微观层面考虑的东西，而架构是宏观的；然后，这些都不是架构，而是润滑黏合支持架构的东西；最后，在其他条件不变的情况下，系统中这些东西用得越少，说明架构越好。\r\n\r\n我们以“设计模式”为例。大家在学习设计模式的过程中有没有这样一种困惑，“这样继承封装多态乱七八糟的绕来绕去的干嘛？”我花了很长一段时间才明白，要理解设计模式，必须要明白三个字：“不得已”。是迫不得已，才用设计模式来解决一些特定的问题，而不是说正常的代码就应该这样写！这种迫不得已，有很多种原因。个人觉得最容易理解的就是“适配器模式”，因为出现了接口的冲突，所以我们不得不进行适配。但一个很自然的问题就是：为什么不直接改接口让他们自然融洽呢？这不是一种更自然更直观的解决方案吗？答案很有可能就是因为架构——大的架构已经确立，局部必须服从整体。那么，如果一个完全理想化的架构，是不是根本就不应该出现这种问题接口冲突的问题，因而根本就不需要这种设计模式？\r\n\r\n所以，我说设计模式之类的东西是润滑剂是黏合剂，他们的作用是弥补架构的局部缺陷，更好的支撑架构。更极端的一种说法可以送给痴迷于设计模式的同学：设计模式是药，没病就不要吃药！\r\n\r\n那么，为了可维护性，架构中究竟应该注意些什么？这是一个很大的话题，开篇我们只说一点。\r\n\r\n模块划分\r\n\r\n模块有大有小，大可以是一个分层一个项目，小可以是一个方法一个类。我们通常的做法是由大到小，逐步细分。\r\n\r\n模块的划分是相当的考验架构能力的。良好的模块划分，能够让我们方便的安排人手、合理的组织项目进度、迅速的定位代码……各种好处说都说不完。所以还是说说不好的模块划分有什么问题更容易一些，嗯，这个好像根本就不要说，想想你在一堆乱七八糟的代码里不断的F11的情形吧！\r\n\r\n我个人认为，模块划分的难度在于“整齐”和“灵活”之间取舍。通常来说，大的模块我们都是“一刀切”，着重强调的是“整齐”，比如口熟能详的UI层、BLL层和DAL层，但这种“一刀切”的做法，更多的是一种无奈。我们的人类的思维局限决定了我们在考虑复杂问题时无法深入到每一个细节，所以只能先“大而化之”的把一个复杂问题先进行简单化。这样带来的一个严重的副作用就是，限制了代码的灵活性；而灵活性，正是应对复杂变化的有效武器。所以，在更小一些的模块（比如说：类）里，我们引入了丰富多彩的抽象继承设计模式等一系列充满各种灵活性的机制，以弥合“一刀切”造成的问题。这一松一紧一张一弛中“度”的掌握，就只能说是一种艺术了。\r\n\r\n模块划分，笼统的说教用处不大，我们将在后面的文章中结合具体情况逐一说明。但我希望大家能够明白：模块划分是必须的——这种必须，是一种无可奈何的选择。所以，喜欢从页面直接写sql到数据库的同学，老大让你把你的代码拆成几段放到不同地方的时候，不要嫌麻烦；喜欢把一个简单项目切成七层的同学，先仔细想不想这样做是不是真的有必要。\r\n\r\n代码之外\r\n\r\n为了代码能够长期有效的维护，我们还需要做很多工作，比如良好的文档、完善的项目管理流程。但我想说的，还是不是这个，而是代码之外的因素对项目架构的影响。比如开发团队的背景能力偏好，一群C#程序员，你一定要整个node.js，这纯粹是给自己找不痛快。除了这些稍稍用脑袋想一想就能明白的东西，有一件事，很多程序员并没有意识到。\r\n\r\n架构的一个天然目的就是：让代码更智能让程序员更傻瓜。换一张说法就是，架构要“创造便利，让程序员更关注业务”。\r\n\r\n这可能是一个让程序员感到悲哀的事实。正如机械师不停的发明，让机器变得越来越聪明，取代流水线上的工人，最终取代了他们自己。从某种意义上说，我们都是自掘坟墓的人。一个良好的架构，就应该是让每一个普通开发人员，都是一个个尽量廉价随时可以替换的螺丝钉，这样才能保证系统永远健康正常的运行下去。告诉你这个事实可能让你一整天都不开心，但接受这个事实之后能帮助你在工作中变得更加的“心平气和”。螺丝钉就要有螺丝钉的觉悟；更何况，当好一颗螺丝钉也不是一件很容易的事。', '【转载】架构之路（一）：目标', '', 'inherit', 'closed', 'closed', '', '32-revision-v1', '', '', '2015-09-28 19:01:39', '2015-09-28 11:01:39', '', 32, 'http://115.28.161.133/?p=33', 0, 'revision', '', 0),
(34, 1, '2015-09-28 19:11:01', '2015-09-28 11:11:01', '&nbsp;\r\n\r\n<a href="http://www.csdn.net/article/2015-09-22/2825773">原文链接：</a>\r\n\r\n我们在 <a href="http://www.csdn.net/article/2015-09-22/2825768">上一篇</a>博客中设定了架构的目标，只有一个，就是可维护性。完全没有提性能，这是故意的。\r\n\r\n似乎程序员都是急性子，或许是被windows冗长的开机时间折磨够了，有可能是因为提升性能的效果是最显而易见的……总之，我发现，绝大部分程序员对性能的关注和热情是无与伦比的！\r\n\r\nC#刚刚推出的时候，就有人摇头晃脑的说，“嗯，自动垃圾回收，性能不行吧？”\r\nDataSet横空出世，马上有很多人写代码，在DataSet里插入几百万条数据，证明DataSet的性能问题\r\nLinq当然更要被骂了，尼玛用反射？反射是什么，同学们知道么？性能大老虎呀！更不用说那些自动生成的sql了，有我手写的高效么？\r\n……\r\n所以直到今天，我仍然看到很多程序员无怨无悔的用存储过程来构建他们的系统，一个存储过程可以有几千行！然后，他们很无辜的问，“业务层有什么用？究竟能干些什么呢？”\r\n\r\n在带团队的时候，我最怕讲的就是性能有关的问题。你要是不谈性能呢，那代码有时候 真心看不下去；你要是强调性能呢，不知道他会给你整出什么幺蛾子出来。其实这就是一个“度”的掌握，所以非常难以用语言予以表示清楚。所以无数次挫败之 后，我只好咬牙切齿的说，“你的代码，只有一个评判标准，可维护性。性能的问题先不管！”这个答案似乎并不能服众——尤其是对有上进心的程序员而言。\r\n\r\n所以，我先专篇讲性能，希望能帮助大家更清楚的认识这个问题。\r\n\r\n性能不是不重要，而是他没有可维护性重要。要理解这一点，首先要理解可维护性的重要（请再读 上一篇我花数周找bug的段子）；然后要明白：解决性能问题，我们可以有很多代码以外行之有效的方法，而可维护性基本上就只能靠代码了；最后，还是要牢记：没有牺牲，就没有胜利！\r\n所以，在绝大多数情况下，当性能和可维护性相冲突的时候，性能让位于可维护性。我们采用其他办法来弥补代码性能不够高的问题。\r\n空洞的说教没有意义。我们还是举例来说明吧！\r\n\r\n破坏可读性\r\n\r\n前段时间我review代码的时候发现，这个程序员用Linq之后老是用 First()而不是Single()，我就奇怪了，按业务逻辑，返回的值就应该是一个，难道可能会是多个，多个应报异常，不应该取First()就完事 了呀？想了一会儿，问这个程序员，他的回答让我瞬间一种无力感，“First()性能更高呀！”以下为对话实录：\r\n\r\n“你怎么知道First()性能更高呢？”我问。\r\n\r\n“First()嘛，取了第一个合格的值就返回，就不会继续查下去了；Single()的话，就会一直查，查出所有数据，然后再取其中的一个。”\r\n\r\n“你确定？你知道有一种东西叫做索引不？”\r\n\r\n“啊？……”\r\n\r\n然后我简单的告诉他，索引是一种树状结构，可以让查询更快等等。\r\n\r\n“但我还是觉得应该用First()”，他想了一会儿，还是很坚定。\r\n\r\n“为什么？”，我不明白了。\r\n\r\n“就算有索引加快了查询速度，但用First()在加快了速度上更快呀！更快总是没错的吧？”\r\n\r\n“……”，我真不知道该怎么说了，最后突然灵光一闪，“好吧，那你说说，微软为什么要搞一个Single()方法出来呢？就为了搞出来误导你们？让用First()的产生优越感，嘲笑用Single()的？”\r\n\r\n他陷入了沉思。\r\n\r\n评论里还在纠结Single()/First()的同学，请大声的吼三遍：可读性！可读性！！可读性！！！\r\n\r\n发现同学们还在纠结这个细节。好吧，再解释一下：\r\n\r\n你怎么知道数据库用的就是MSSQL呢？你怎么知道就是用的关系数据库呢？NoSQL不行么？所以，你怎么就知道Single()/First()具体是怎么执行的呢？比如我就要写个Linq实现，把所有的数据全取出来，然后再在内存里排序，最后取First呢？\r\n这里我们考虑可读性，意思是：读代码时，看到Single()就能瞬间知道coder的意思是取唯一的一个；看到First()就知道coder的意思是要取第一个。和性能没关系，如果一定要纠缠性能，那好：你要确定唯一性，当然要做检查（包括不唯一时抛异常），这个性能损失是应该的呀；你要取第一个，当然要进行排序，排序也会有性能损失呀！\r\n我刚入行的时候，还很是收藏了几篇文章，比如《高性能编程的十大准则》之类的，里 面的内容大致就是，“总是使用StringBuilder，不要使用‘+’；总是使用……，不要使用……”。这类文章下面总是有一堆人叫好，“不错！”， “谢谢分享！”但慢慢的，我就对这些文章产生了怀疑（也应该感谢园子里的老赵，csdn里面的sp1234之类的大神）；直到很后来，我才明白为什么这种说法是肤浅的；而只有通过上面的对话，我才能清晰的把我的理解说出来。\r\n\r\n所有这些牺牲性能的简单封装，都是有其目的的；而其中一个很重要的目的，就是为了提高可读性。你为了性能，故意不使用这些现成的封装，通常，丧失的就是可读性。\r\n\r\n想当然\r\n\r\n继续上面这个例子。最开始的时候，这个程序员关于性能的考虑其实是想当然的。这种想当然的情形很多，大致有这几种：\r\n\r\n自己的理解完全就是错的\r\n自己的理解不能算错，但实际上底层已经对该问题做了优化\r\n自己的理解没错，底层也没优化\r\n第1、2种比较好理解，第3种为什么也说他“想当然”呢？因为没有和硬件环境相契合。\r\n最简单的例子就是“缓存”。比如面试的时候，问你一个问题，“缓存能不能提高性 能？”请注意，这是一个陷阱。答案应该是：“不一定”。几乎所有的人都认为，缓存可以迅速改善性能，是因为今天计算机的CPU和磁盘运行速度，远跟不上内 存的发展。但即使如此，无节制的缓存，一样可以拖垮整个系统。\r\n\r\n类似的例子还有很多。你沾沾自喜，我节约了一次磁盘读写的时候，你同时增加了CPU的负荷；你优化了算法，减少了CPU的运算，但其实增加了内存的压力……天下没有免费的午餐。同样的代码，随着数据的增加，硬件的改变，会呈现出截然不同的性能表现。\r\n\r\n所以，开发过程中，很多的“优化”，其实只是你的想当然。与其这样想当然的优化， 不如在拿到性能测试结果之后再有的放矢的进行优化。这时候，又回到了我们之前说的，是不是代码的可读性更重要？这样你才能迅速的找到该优化的瓶颈啊！否则，一堆乱七八糟看都看不懂的代码，你怎么去优化，你连该优化的点都找不到。\r\n\r\n难以维护\r\n\r\n另一个搞笑的例子是关于我自己的。 创业家园项 目里有一个功能：显示博客正文的同时提供一个上一页下一页的链接。惯常的做法就是直接在数据库里查就是了，但我总觉得不对，这样做两次查询有必要么？能不 能优化？于是我想到了一个“绝妙”的点子：为什么不直接在博客里存储上一篇和下一篇的Id呢？这样我一次性数据往返就能取到所有数据了嘛！各位同学是不是 觉得我这个主意很棒？\r\n\r\n噩梦由此开始了。\r\n\r\n首先，我们是想在发布博客的时候，设置他的上一篇和下一篇。但是，上一篇好设置，下一篇呢？还没有啊！怎么弄，就只好在博客发布的时候，设置他的前一篇，同时设置他前一篇的后一篇。\r\n\r\n然后，我们新添加了一个功能，除了上一篇下一篇以外，还需要在当前博客所在分类中 的上一篇和下一篇。怎么办？再加字段呗。所以，博客里就有了Previous, PreviousInCategory, Next, NextInCategory。这时候，就感觉到有点不妥，但还可以接受。\r\n\r\n接着，出现了一个问题，上一篇下一篇博客被删除了，怎么办？这个过程，就相当于从一个双向链表里移出一个节点一样麻烦。头开始有点大了。\r\n\r\n再接着，博客除了发布删除以外，还有各种其他状态，比如被屏蔽。而且被屏蔽之后， 能否显示和当前用户又有关系。当前用户是普通用户，不能阅读；当前用户是作者自己，就能够阅读。怎么办？首先，屏蔽的时候，要设置上一篇下一篇；屏蔽取消 的时候，还是要设置上一篇下一篇。然后，上一篇下一篇得根据当前用户不同变化的这个问题，基本上就傻眼了……\r\n\r\n最后流着泪把辛辛苦苦折腾了好久的代码全改回来，就通过数据库查呗，多么清晰简洁的逻辑啊！性能问题？首先，这样做造成了性能问题么？然后，就算有问题，用一个缓存能解决不？\r\n\r\n合理浪费堆硬件\r\n\r\n说了这么多，不知道有没有引起同学们的反思。可能大家还是过不去心里那道坎：明明有一种性能更高的方法我们为什么不用？\r\n\r\n因为浪费呗！\r\n\r\n什么？你有没有搞错？我的代码，至少省了一块内存条！那是你还没从“穷学生”的角色里转换过来。你花一周的时间对代码进行了优化（就先不考虑你的优化带来的维护成本增加了），为老板省下了一块内存条的钱。你以为老板会拍着你的肩膀表扬你么？老板打不死你！\r\n\r\n兄弟，账不是你那样算的。当你是学生的时候，你的时间成本是0；但你进入工作岗位，每一天都是要发工资的。\r\n\r\n通过代码来调高性能，是一种无奈——对硬件性能不够的妥协（参考： 80年代游戏开发者的辛苦困境。这样写性能就高，但为什么现在没有谁再这么写代码了？）。否则，绝大多数情况下，堆硬件比优化代码的效果好得多，而且便宜得多。硬件的成本按摩尔定律往下降，我们程序员的工资也能按摩尔定律减么？\r\n\r\n明明window 10 比window 95更耗性能，为什么今天没人用window 95？为什么VS 2013要10G的空间我们都还屁颠屁颠的赶紧装上？为什么现在大家都用C#，没人用汇编？我们站在人类文明积累的今天，就应该理所当然的享受这一切成 果。有打火机你不用，你要钻木取火。如果你是因为要学贝爷荒野求生装逼，可以理解；如果你说你是因为怕浪费天然气，我……我……我怎么说你呢？“给做打火 机的一条活路，行不？”同样的，程序员大神同学，你就当做好事，给下面写底层做硬件的一条活路吧！你的代码都是 010001000010000001010101……了，你让其他人怎么活啊？\r\n\r\n最后，我突然想到的一个程序员为什么对性能如此敏感疯狂，对可维护性毫不在意的一个可能原因：\r\n\r\n性能很好理解，卡得要死和跑得飞快；可维护性很不好理解，至少得跑个两三年才能体现，那时候，谁知道爷在哪里偷着乐呢\r\n性能上不来，程序员只有羞愧的低着头，都是我的错；需求有变更，开口就骂，“哪个SB又要改……”；\r\n大家觉得是不是这样的？所以，愿意把代码百炼成钢绕指柔的人少。想来，是一种莫名的悲哀和凄凉。\r\n\r\n最后最后，有一些我能想到的名言警句供大家参详：\r\n\r\n过早的优化是万恶之源\r\n优化首先需要找到性能“瓶颈”。否则，任何人都可以随手一指，“这段代码需要优化”。\r\n可读性更强的代码总是更好优化\r\n硬件永远比软件便宜', '【转载】架构之路（二）：性能', '', 'publish', 'open', 'open', '', '%e3%80%90%e8%bd%ac%e8%bd%bd%e3%80%91%e6%9e%b6%e6%9e%84%e4%b9%8b%e8%b7%af%ef%bc%88%e4%ba%8c%ef%bc%89%ef%bc%9a%e6%80%a7%e8%83%bd', '', '', '2015-09-28 19:11:01', '2015-09-28 11:11:01', '', 0, 'http://115.28.161.133/?p=34', 0, 'post', '', 0),
(35, 1, '2015-09-28 19:11:01', '2015-09-28 11:11:01', '&nbsp;\r\n\r\n<a href="http://www.csdn.net/article/2015-09-22/2825773">原文链接：</a>\r\n\r\n我们在 <a href="http://www.csdn.net/article/2015-09-22/2825768">上一篇</a>博客中设定了架构的目标，只有一个，就是可维护性。完全没有提性能，这是故意的。\r\n\r\n似乎程序员都是急性子，或许是被windows冗长的开机时间折磨够了，有可能是因为提升性能的效果是最显而易见的……总之，我发现，绝大部分程序员对性能的关注和热情是无与伦比的！\r\n\r\nC#刚刚推出的时候，就有人摇头晃脑的说，“嗯，自动垃圾回收，性能不行吧？”\r\nDataSet横空出世，马上有很多人写代码，在DataSet里插入几百万条数据，证明DataSet的性能问题\r\nLinq当然更要被骂了，尼玛用反射？反射是什么，同学们知道么？性能大老虎呀！更不用说那些自动生成的sql了，有我手写的高效么？\r\n……\r\n所以直到今天，我仍然看到很多程序员无怨无悔的用存储过程来构建他们的系统，一个存储过程可以有几千行！然后，他们很无辜的问，“业务层有什么用？究竟能干些什么呢？”\r\n\r\n在带团队的时候，我最怕讲的就是性能有关的问题。你要是不谈性能呢，那代码有时候 真心看不下去；你要是强调性能呢，不知道他会给你整出什么幺蛾子出来。其实这就是一个“度”的掌握，所以非常难以用语言予以表示清楚。所以无数次挫败之 后，我只好咬牙切齿的说，“你的代码，只有一个评判标准，可维护性。性能的问题先不管！”这个答案似乎并不能服众——尤其是对有上进心的程序员而言。\r\n\r\n所以，我先专篇讲性能，希望能帮助大家更清楚的认识这个问题。\r\n\r\n性能不是不重要，而是他没有可维护性重要。要理解这一点，首先要理解可维护性的重要（请再读 上一篇我花数周找bug的段子）；然后要明白：解决性能问题，我们可以有很多代码以外行之有效的方法，而可维护性基本上就只能靠代码了；最后，还是要牢记：没有牺牲，就没有胜利！\r\n所以，在绝大多数情况下，当性能和可维护性相冲突的时候，性能让位于可维护性。我们采用其他办法来弥补代码性能不够高的问题。\r\n空洞的说教没有意义。我们还是举例来说明吧！\r\n\r\n破坏可读性\r\n\r\n前段时间我review代码的时候发现，这个程序员用Linq之后老是用 First()而不是Single()，我就奇怪了，按业务逻辑，返回的值就应该是一个，难道可能会是多个，多个应报异常，不应该取First()就完事 了呀？想了一会儿，问这个程序员，他的回答让我瞬间一种无力感，“First()性能更高呀！”以下为对话实录：\r\n\r\n“你怎么知道First()性能更高呢？”我问。\r\n\r\n“First()嘛，取了第一个合格的值就返回，就不会继续查下去了；Single()的话，就会一直查，查出所有数据，然后再取其中的一个。”\r\n\r\n“你确定？你知道有一种东西叫做索引不？”\r\n\r\n“啊？……”\r\n\r\n然后我简单的告诉他，索引是一种树状结构，可以让查询更快等等。\r\n\r\n“但我还是觉得应该用First()”，他想了一会儿，还是很坚定。\r\n\r\n“为什么？”，我不明白了。\r\n\r\n“就算有索引加快了查询速度，但用First()在加快了速度上更快呀！更快总是没错的吧？”\r\n\r\n“……”，我真不知道该怎么说了，最后突然灵光一闪，“好吧，那你说说，微软为什么要搞一个Single()方法出来呢？就为了搞出来误导你们？让用First()的产生优越感，嘲笑用Single()的？”\r\n\r\n他陷入了沉思。\r\n\r\n评论里还在纠结Single()/First()的同学，请大声的吼三遍：可读性！可读性！！可读性！！！\r\n\r\n发现同学们还在纠结这个细节。好吧，再解释一下：\r\n\r\n你怎么知道数据库用的就是MSSQL呢？你怎么知道就是用的关系数据库呢？NoSQL不行么？所以，你怎么就知道Single()/First()具体是怎么执行的呢？比如我就要写个Linq实现，把所有的数据全取出来，然后再在内存里排序，最后取First呢？\r\n这里我们考虑可读性，意思是：读代码时，看到Single()就能瞬间知道coder的意思是取唯一的一个；看到First()就知道coder的意思是要取第一个。和性能没关系，如果一定要纠缠性能，那好：你要确定唯一性，当然要做检查（包括不唯一时抛异常），这个性能损失是应该的呀；你要取第一个，当然要进行排序，排序也会有性能损失呀！\r\n我刚入行的时候，还很是收藏了几篇文章，比如《高性能编程的十大准则》之类的，里 面的内容大致就是，“总是使用StringBuilder，不要使用‘+’；总是使用……，不要使用……”。这类文章下面总是有一堆人叫好，“不错！”， “谢谢分享！”但慢慢的，我就对这些文章产生了怀疑（也应该感谢园子里的老赵，csdn里面的sp1234之类的大神）；直到很后来，我才明白为什么这种说法是肤浅的；而只有通过上面的对话，我才能清晰的把我的理解说出来。\r\n\r\n所有这些牺牲性能的简单封装，都是有其目的的；而其中一个很重要的目的，就是为了提高可读性。你为了性能，故意不使用这些现成的封装，通常，丧失的就是可读性。\r\n\r\n想当然\r\n\r\n继续上面这个例子。最开始的时候，这个程序员关于性能的考虑其实是想当然的。这种想当然的情形很多，大致有这几种：\r\n\r\n自己的理解完全就是错的\r\n自己的理解不能算错，但实际上底层已经对该问题做了优化\r\n自己的理解没错，底层也没优化\r\n第1、2种比较好理解，第3种为什么也说他“想当然”呢？因为没有和硬件环境相契合。\r\n最简单的例子就是“缓存”。比如面试的时候，问你一个问题，“缓存能不能提高性 能？”请注意，这是一个陷阱。答案应该是：“不一定”。几乎所有的人都认为，缓存可以迅速改善性能，是因为今天计算机的CPU和磁盘运行速度，远跟不上内 存的发展。但即使如此，无节制的缓存，一样可以拖垮整个系统。\r\n\r\n类似的例子还有很多。你沾沾自喜，我节约了一次磁盘读写的时候，你同时增加了CPU的负荷；你优化了算法，减少了CPU的运算，但其实增加了内存的压力……天下没有免费的午餐。同样的代码，随着数据的增加，硬件的改变，会呈现出截然不同的性能表现。\r\n\r\n所以，开发过程中，很多的“优化”，其实只是你的想当然。与其这样想当然的优化， 不如在拿到性能测试结果之后再有的放矢的进行优化。这时候，又回到了我们之前说的，是不是代码的可读性更重要？这样你才能迅速的找到该优化的瓶颈啊！否则，一堆乱七八糟看都看不懂的代码，你怎么去优化，你连该优化的点都找不到。\r\n\r\n难以维护\r\n\r\n另一个搞笑的例子是关于我自己的。 创业家园项 目里有一个功能：显示博客正文的同时提供一个上一页下一页的链接。惯常的做法就是直接在数据库里查就是了，但我总觉得不对，这样做两次查询有必要么？能不 能优化？于是我想到了一个“绝妙”的点子：为什么不直接在博客里存储上一篇和下一篇的Id呢？这样我一次性数据往返就能取到所有数据了嘛！各位同学是不是 觉得我这个主意很棒？\r\n\r\n噩梦由此开始了。\r\n\r\n首先，我们是想在发布博客的时候，设置他的上一篇和下一篇。但是，上一篇好设置，下一篇呢？还没有啊！怎么弄，就只好在博客发布的时候，设置他的前一篇，同时设置他前一篇的后一篇。\r\n\r\n然后，我们新添加了一个功能，除了上一篇下一篇以外，还需要在当前博客所在分类中 的上一篇和下一篇。怎么办？再加字段呗。所以，博客里就有了Previous, PreviousInCategory, Next, NextInCategory。这时候，就感觉到有点不妥，但还可以接受。\r\n\r\n接着，出现了一个问题，上一篇下一篇博客被删除了，怎么办？这个过程，就相当于从一个双向链表里移出一个节点一样麻烦。头开始有点大了。\r\n\r\n再接着，博客除了发布删除以外，还有各种其他状态，比如被屏蔽。而且被屏蔽之后， 能否显示和当前用户又有关系。当前用户是普通用户，不能阅读；当前用户是作者自己，就能够阅读。怎么办？首先，屏蔽的时候，要设置上一篇下一篇；屏蔽取消 的时候，还是要设置上一篇下一篇。然后，上一篇下一篇得根据当前用户不同变化的这个问题，基本上就傻眼了……\r\n\r\n最后流着泪把辛辛苦苦折腾了好久的代码全改回来，就通过数据库查呗，多么清晰简洁的逻辑啊！性能问题？首先，这样做造成了性能问题么？然后，就算有问题，用一个缓存能解决不？\r\n\r\n合理浪费堆硬件\r\n\r\n说了这么多，不知道有没有引起同学们的反思。可能大家还是过不去心里那道坎：明明有一种性能更高的方法我们为什么不用？\r\n\r\n因为浪费呗！\r\n\r\n什么？你有没有搞错？我的代码，至少省了一块内存条！那是你还没从“穷学生”的角色里转换过来。你花一周的时间对代码进行了优化（就先不考虑你的优化带来的维护成本增加了），为老板省下了一块内存条的钱。你以为老板会拍着你的肩膀表扬你么？老板打不死你！\r\n\r\n兄弟，账不是你那样算的。当你是学生的时候，你的时间成本是0；但你进入工作岗位，每一天都是要发工资的。\r\n\r\n通过代码来调高性能，是一种无奈——对硬件性能不够的妥协（参考： 80年代游戏开发者的辛苦困境。这样写性能就高，但为什么现在没有谁再这么写代码了？）。否则，绝大多数情况下，堆硬件比优化代码的效果好得多，而且便宜得多。硬件的成本按摩尔定律往下降，我们程序员的工资也能按摩尔定律减么？\r\n\r\n明明window 10 比window 95更耗性能，为什么今天没人用window 95？为什么VS 2013要10G的空间我们都还屁颠屁颠的赶紧装上？为什么现在大家都用C#，没人用汇编？我们站在人类文明积累的今天，就应该理所当然的享受这一切成 果。有打火机你不用，你要钻木取火。如果你是因为要学贝爷荒野求生装逼，可以理解；如果你说你是因为怕浪费天然气，我……我……我怎么说你呢？“给做打火 机的一条活路，行不？”同样的，程序员大神同学，你就当做好事，给下面写底层做硬件的一条活路吧！你的代码都是 010001000010000001010101……了，你让其他人怎么活啊？\r\n\r\n最后，我突然想到的一个程序员为什么对性能如此敏感疯狂，对可维护性毫不在意的一个可能原因：\r\n\r\n性能很好理解，卡得要死和跑得飞快；可维护性很不好理解，至少得跑个两三年才能体现，那时候，谁知道爷在哪里偷着乐呢\r\n性能上不来，程序员只有羞愧的低着头，都是我的错；需求有变更，开口就骂，“哪个SB又要改……”；\r\n大家觉得是不是这样的？所以，愿意把代码百炼成钢绕指柔的人少。想来，是一种莫名的悲哀和凄凉。\r\n\r\n最后最后，有一些我能想到的名言警句供大家参详：\r\n\r\n过早的优化是万恶之源\r\n优化首先需要找到性能“瓶颈”。否则，任何人都可以随手一指，“这段代码需要优化”。\r\n可读性更强的代码总是更好优化\r\n硬件永远比软件便宜', '【转载】架构之路（二）：性能', '', 'inherit', 'closed', 'closed', '', '34-revision-v1', '', '', '2015-09-28 19:11:01', '2015-09-28 11:11:01', '', 34, 'http://115.28.161.133/?p=35', 0, 'revision', '', 0),
(39, 1, '2015-10-04 19:45:33', '2015-10-04 11:45:33', '<a href="http://www.csdn.net/article/2015-09-22/2825774">原文链接：</a>\r\n\r\n&nbsp;\r\n\r\n实事求是的讲，写《【野生程序员】：优先招聘》的时候，是带着情绪的。其后也有反思，是不是我杞人忧天了？尤其是下面开始的几条评论，如“都是混口饭吃的不容易”，“何以内外之分，中华儿女非山倾河泄而不能一气前指，千年亦是如此”等，让我感觉可能是我过于敏感了。但随后一些人长篇大论，让我明白，这篇博客还是有意义的。\r\n\r\n想一想，招聘启示里，你们要求“计算机专业本科以上学位”，我“无计算机专业相关专业文凭”优先；然后，你们就炸了！我们没有歧视，你这才是歧视！你自卑你愤青你酸你难成大器……我无力反驳，只是想说，每个人的言行都是他心灵的镜子。谢谢你们！\r\n\r\n其实，我没有想挑起科班/非科班之争（虽然可能结果会超出我的预料），我的本意是想给“非科班”的同学鼓气，缓解他们身上的压力，让他们看到希望，给他们力量，让他们相信，完全可以在更艰苦的环境下自学成才，而且结果不会比“科班”的差！但你一定要委下身段踏踏实实的去学，一步一个脚印的去做，自卑自大争吵辩驳都无助于你的成长。请牢记：言语没有力量！\r\n\r\n另外，愿意听一句的“科班”同学，“无计算机专业相关专业文凭”优先，并非完全出于义愤。都是筑基，你是名门大派用资源用丹药堆出来的，他是一路苦修战斗领悟突破的，你觉得谁更有潜力？所以啊，放下那些虚荣骄傲，真正的去战斗吧！毕业三年以后，是没人再看你的学历的。\r\n\r\n另外声明一点，对老赵没有任何意见，除了景仰。他针对的是培训机构我完全明白，但仍然不能赞同。所以我说，“每一次看到这一段文字，我的心里就会有一种难以言表的复杂情绪”，至于如何复杂，不是说了吗？难以言表啊。\r\n\r\n======================\r\n\r\n好，心平气和之后我们继续讨论技术问题。在带队的过程中，性能的问题还比较好解决，最消极的想法，“好啊，多一事不如少一事，你让我不管还不简单？”，但要求写测试代码，那就炸锅了！以我的经历，“测试驱动”是一个最具争议的话题，没有之一。吹捧者和反对者泾渭分明，而且都有大量的论据和证明。记得曾经有一篇文章，大意是：“公司付钱给你不是让你写测试代码的”，下面一片狂赞。\r\n\r\n在我自己的项目开始的时候，我是放弃了测试驱动的（呵呵，还找到了原文），里面总结得很准确，最大的原因是“懒”。但最后让我下定决心开始“测试驱动”实践的，是我一次花了两天一夜都没调出一个Bug，垂头丧气筋疲力尽之后，无可奈何的接受了这个现实：测试还是很有用的——即使是自己写的代码。我之前的系列博客，也已经反复的强调，架构是一种“无奈”，是现实是问题驱使你去做一些其实你本来不想做的事情。你无法理解一些看起来像“脱了裤子放屁”一样的行为，通常只是因为你没有遭遇过那些现实那些问题。（看看，大学能教你这些东西么？）\r\n\r\n即使你没有多少开发经验，你也应该能够想象，单元测试最大的问题，就是它需要花时间花精力去写，那么这个花费是否值得呢？这还是由你架构的目标决定的，或者你的需求决定的。如果系统是一次成型交付使用，此后几乎不会更改的，那么一次性的手工测试就够了；但如果你的系统是会被“千锤百炼”的不断折腾修改的，那么这个测试就是很有必要的。最简单的考虑：每一次更改，我都要手工测试一次；那还不会如我多花点时间，弄个“自动化”的东西出来。单元测试，其实就可以理解为一种自动化的测试工具。\r\n\r\n但是“自动化”的理由还远远不够。因为你马上想到的，每一次需求变更代码调整，测试代码也得相应的改呀？没有测试代码，我就只需要改开发代码；现在有了单元测试，我还得再改测试代码。本来我只维护一套代码，现在我凭空增加了一套代码也需要维护，这不是增加了维护成本，不是和你“可维护性”的架构目标背道而驰了么？是一套代码好维护呢，还是两套代码更好维护？\r\n\r\n这是一个非常好的问题，适用于很多情景（比如分层架构，你说分层解耦，实际上还不是一改就得从UI层改到数据库，每一层都得改？）。我能给出的回答大概有：\r\n\r\n无论有无单元测试，开发代码进行修改之后，是不是都要进行测试？没有单元测试，并不代表你的代码就不需要测试了，只不过是你手工的去测试了一遍而已。切记：你的工作并不只是把代码写出来而已！\r\n进行手工测试，和更改单元测试，两者的耗费比，会根据测试重用的次数而变化。一次手工测试可能需要5分钟跑完，更改单元测试代码可能需要20分钟，但如果这测试会跑100遍，单元测试完胜手工测试。\r\n你说，哪里哟？什么功能会改100遍？我没说你的功能会改100遍，我说的是测试会跑100遍。有区别么？你可能还在犯迷糊，是吧？好吧，我们讲个故事。\r\n有一个小伙子，他很不情愿写测试代码。老板拿他没辙啊，也没那么多精力和他磨牙，于是老板自己写单元测试。这小伙子的代码提交之前要review，老板总能一次次的找出它代码的问题。他改的是登录，老板告诉他积分系统被他改出了问题；他又去改积分，老板又告诉他消息通知系统被他改坏了；他又去改消息系统，老板告诉他登录还是有问题……于是他崩溃了，“这TM什么一个烂系统”？最终他终于回过神来了，为什么老板总能知道这里的改动会影响那里呢？老板的思维有这么严谨？老板躲在一旁偷笑，就不告诉你，“其实我就是跑了一遍单元测试而已”。\r\n\r\n这个老板就是我。我故意的，就不一次性的告诉他所有的问题，就要这样一次次的折磨他，让他的痛苦能刻入骨子里去。最后，我还要问他：\r\n\r\n你现在对你的代码是不是还那么自信？\r\n如果没有我的review（我也是靠单元测试），你能不能发现这些问题？\r\n如果我们的项目已经部署到生产环境，而且你的改动带来的破坏没有被发现就上线了，会带来什么样的后果？\r\n\r\n这一次，他服气了。后来他用NUnit用得麻溜麻溜的。每一次改动，如果有意想不到的未通过test case，他都会很激动的给我张截图，顺便发发牢骚。我微笑不语，那种满屏绿灯通过的踏实，和意外爆出红灯之后的惊喜，没有经历过的人，是无法体会的。\r\n\r\n所以其实当对象间的关系变得越来越错综复杂，像一张密密麻麻的网一样之后，一个局部的改动就很有可能会触发极其复杂的连锁反应。所以为了保险起见，所有可能相关的组件都应该进行测试（所谓的“回归测试”）。这时候如果只有纯粹的手工测试，会面临两个问题：\r\n\r\n难以确定测试的边界（那些部分可能会被影响），这得我们脑袋凭空硬想啊，兄弟！\r\n极大的测试耗费。而且这种耗费是相当的无聊繁琐伤人心的——没人愿意做这种事。据说所知，现在很多公司测试人员的工资已经比开发人员还高了。为什么？简单枯燥无聊，没人愿意做啊！\r\n\r\n好的，我假设你已经认识到了单元测试的重要性，并开始摩拳擦掌，跃跃欲试。接下来我得给你泼一大瓢冷水：单元测试不是那么好写的！从某种程度上讲，写单元测试比写开发代码还难。难得我工作的所有公司，没有一家有过成功的案例。\r\n\r\n大概是几年前，我在公司修bug，老大告诉我，“你这个功能比较核心，跑一下单元测试吧”。\r\n\r\n“哇塞！我们有单元测试？”一种高大上的感觉迅速弥漫全身，终于见到传说中的Unit了！\r\n\r\n捣鼓了一会，能跑了，试试看——我的个妈呀？怎么这么多红灯？我真被吓住了，这都是我的改动造成的？\r\n\r\n老大就是老大，不慌不忙，“数一下有多少个通不过？”\r\n\r\n“啊？”我以为我听错了，数多少个通不过有什么用？得把他们全部弄通过啊？！\r\n\r\n搞了一会儿，才终于弄明白了，把我改动前后的代码分别跑一遍，对照一下通过失败是不是一样的，只要是一样的，就OK了。比如，以前是8个通不过，现在还是8个通不过，这样就可以了！\r\n\r\n我一直不明白，为什么不把那8个通不过的单元测试给弄成通过呢？这样摆着究竟算什么？直到我自己开始写单元测试。坑爹啊！到处都是坑，跳出小坑进大坑，大坑下面还连着小坑，前面是坑后面是坑，一堆一堆的连环坑……\r\n\r\n单元测试写出来容易跑过难！而且跑不过的原因还不是你的开发代码逻辑错了，而是测试环境/数据出问题。要测试，一定要有数据，这个数据的构建，完全不是我们所想象的那么简单。以我们创业家园项目里的积分系统为例，假设一个简单的需求：博客被点赞，博客的作者应该获得一定积分，该积分数量是由点赞人目前所有的可用币转换而得来的（已简化，具体可参考文档：积分）。要准备的数据就有：博客一篇，要有作者，作者已有积分；点赞人一名，有一定数量可用币。如果只是这样，还可以接受，但其实下面会有一堆的问题：\r\n\r\n作者的积分从哪里来？我们的开发代码，出于封装的考虑，用户的积分是只读的，你单元测试怎么设这个值？\r\n要么写代码，模拟作者通过其他行为（发布文章回答问题等）获得积分，这将开启新一轮噩梦；\r\n如果用Mock或者反射强行设置，事实上省略了作者获得积分的历史，所以用户“积分历史”为null，之后对其“加积分”时，就会报异常。\r\n更坑的是，你以为你什么都处理好了的时候，你突然悲哀的发现，这个博客得首先“被发布”，而博客一经发布，其作者就获得了一定数量的积分，所以你以前设置的积分又变了！\r\n……\r\n点赞人的可用币，同样可能遇到类似的问题。可用币怎么设置，设置之后会不会在跑测试时被意外更改？\r\n点赞的行为，被封装成一个方法，运行这个方法，会检查点赞人之前是否已经对该文章点过赞，所以还应该有一个“点赞历史记录”，哪怕是空的，都得new一个，否则就空异常\r\n……\r\n\r\n反正当时是写得我直接摔了鼠标！写得憋屈啊！而且我还是完全隔绝了数据库的，真不知道那些要从数据库里取数据来跑单元测试的，是怎么做的？这时候我一下子就明白了，实际工作中加班赶进度，一个接一个的填坑，连重构的时间都没有，怎么可能还挤得出时间来写单元测试？就算开始雄心勃勃的写了，随着系统日益复杂，维护单元测试的成本也与日俱增，甚至复杂度更甚开发，所以放弃也就成了绝大多数项目的唯一选择。\r\n\r\n在公司上班么，大多数人都是这样的，能推就推。我们开发写完了代码，基本上能跑了，就该交给测试人员了呀！天经地义的嘛，是不是？而且测试的时间是不会计算到我的项目开发时间里的，我总算是按时完成了开发任务。累坏了，休息一下，让测试的忙活去吧，哈哈……\r\n\r\n但我是个光杆司令，我没测试人员啊！曾经有那么一两个时候，我真准备招一两个测试人员的。但好在我天生的节俭美德（也就是“抠”啦）让我冷静下来。我就想啊：测试只能告诉你出了bug，不能告诉你根源啊。没有单元测试，我单步调试，不也折腾了两天了么？这是系统本身的复杂性，或者代码组织的不合理造成的，不能归咎于单元测试。不还是有这么多开源代码都有详尽的单元测试么？他们是怎么做到的呢？在单元测试上的付出，最终一定会获得超值回报！想想没有单元测试的公司，那超级庞大的测试团队，或者四处冒烟的系统，你愿意走这么一条路么？\r\n\r\n所以我不断的告诫自己，不要着急，冷静细致。终于一步步抽丝剥茧，把这一团乱麻一点点的归纳整理，最终还真被我找到了一条路子，一个个的单元测试都慢慢完成通过了，开发代码里潜在的一些问题也浮出水面，被我一个个的消灭。最后再跑一遍单元测试，一路绿灯，哈哈！更奇迹的是，困扰我两天的bug不知道什么时候消失了？\r\n\r\n后来，我看到这样一种说法：可测试的代码不一定是好代码，但坏代码几乎是不可能被测试的。深以为然！深度耦合的代码，写他们的单元测试，难于上青天；但反过来，我们可以以可测试为标准，不断的完善重构开发代码，只要这样坚持下来，最终代码的质量怎么都不会差到哪里去。\r\n\r\n所以，于我而言，单元测试是否有价值的争论可以休矣！不如换个角度，想一想，怎样才能把单元测试坚持下去。\r\n\r\n最后，如果有心的同学就会注意到，我一直用的是“单元测试”，而不是“测试驱动”。因为测试驱动是一个更广阔的概念，是一个更崭新的天地！单元测试只是其中的一小部分，在下一篇博客，我会讲解我是如何试着将测试驱动的概念运用到项目开发管理中去的。这里，需要强调的一点：先写测试。\r\n\r\n一上手就写开发代码，写完了才写单元测试。这是很多开发人员的习惯，我也经常犯这样的毛病，一不留神就忘了。这样做最大的问题就是，没有真正实现“测试驱动”。你实际上还是由开发在驱动，那么很自然的，测试照着开发的if...else...写一遍，有什么意义呢？这样做下去，就会不断的强化“测试无用累赘”的印象，因为测试就是简单的把开发代码重写一遍而已。我开的药方是：\r\n\r\n单元测试代码和开发代码由不同的人员编写\r\n如果做不到上面一点，先写单元测试\r\n如果连上面一点也做不到，直到出了bug了再写单元测试\r\n\r\n第三条可能有同学无法理解，不是说单元测试很重要么？为什么要等到出了bug才写？答案是：偷懒呗！记住，我们程序员是世界上最懒的人，没意义的事从来不做！你先写开发代码再写测试真的没意义，没意义就干脆不要做了。但你可以开启“乐观模式”（或者“Lazy模式”？），先乐观的认为，我的代码没问题，或许真的就没问题呢，是吧？如果真出了问题，做一个补救，这个时候就应该用单元测试把这个问题表现出来，因为他根据墨菲定律，它这里出了问题，以后就很有可能继续出问题。这个时候，就不要再偷懒了。', '【转载】架构之路（三）：单元测试', '', 'publish', 'open', 'open', '', '%e3%80%90%e8%bd%ac%e8%bd%bd%e3%80%91%e6%9e%b6%e6%9e%84%e4%b9%8b%e8%b7%af%ef%bc%88%e4%b8%89%ef%bc%89%ef%bc%9a%e5%8d%95%e5%85%83%e6%b5%8b%e8%af%95', '', '', '2015-10-04 19:45:33', '2015-10-04 11:45:33', '', 0, 'http://acheng1314.cn/?p=39', 0, 'post', '', 3),
(40, 1, '2015-10-04 19:45:33', '2015-10-04 11:45:33', '<a href="http://www.csdn.net/article/2015-09-22/2825774">原文链接：</a>\r\n\r\n&nbsp;\r\n\r\n实事求是的讲，写《【野生程序员】：优先招聘》的时候，是带着情绪的。其后也有反思，是不是我杞人忧天了？尤其是下面开始的几条评论，如“都是混口饭吃的不容易”，“何以内外之分，中华儿女非山倾河泄而不能一气前指，千年亦是如此”等，让我感觉可能是我过于敏感了。但随后一些人长篇大论，让我明白，这篇博客还是有意义的。\r\n\r\n想一想，招聘启示里，你们要求“计算机专业本科以上学位”，我“无计算机专业相关专业文凭”优先；然后，你们就炸了！我们没有歧视，你这才是歧视！你自卑你愤青你酸你难成大器……我无力反驳，只是想说，每个人的言行都是他心灵的镜子。谢谢你们！\r\n\r\n其实，我没有想挑起科班/非科班之争（虽然可能结果会超出我的预料），我的本意是想给“非科班”的同学鼓气，缓解他们身上的压力，让他们看到希望，给他们力量，让他们相信，完全可以在更艰苦的环境下自学成才，而且结果不会比“科班”的差！但你一定要委下身段踏踏实实的去学，一步一个脚印的去做，自卑自大争吵辩驳都无助于你的成长。请牢记：言语没有力量！\r\n\r\n另外，愿意听一句的“科班”同学，“无计算机专业相关专业文凭”优先，并非完全出于义愤。都是筑基，你是名门大派用资源用丹药堆出来的，他是一路苦修战斗领悟突破的，你觉得谁更有潜力？所以啊，放下那些虚荣骄傲，真正的去战斗吧！毕业三年以后，是没人再看你的学历的。\r\n\r\n另外声明一点，对老赵没有任何意见，除了景仰。他针对的是培训机构我完全明白，但仍然不能赞同。所以我说，“每一次看到这一段文字，我的心里就会有一种难以言表的复杂情绪”，至于如何复杂，不是说了吗？难以言表啊。\r\n\r\n======================\r\n\r\n好，心平气和之后我们继续讨论技术问题。在带队的过程中，性能的问题还比较好解决，最消极的想法，“好啊，多一事不如少一事，你让我不管还不简单？”，但要求写测试代码，那就炸锅了！以我的经历，“测试驱动”是一个最具争议的话题，没有之一。吹捧者和反对者泾渭分明，而且都有大量的论据和证明。记得曾经有一篇文章，大意是：“公司付钱给你不是让你写测试代码的”，下面一片狂赞。\r\n\r\n在我自己的项目开始的时候，我是放弃了测试驱动的（呵呵，还找到了原文），里面总结得很准确，最大的原因是“懒”。但最后让我下定决心开始“测试驱动”实践的，是我一次花了两天一夜都没调出一个Bug，垂头丧气筋疲力尽之后，无可奈何的接受了这个现实：测试还是很有用的——即使是自己写的代码。我之前的系列博客，也已经反复的强调，架构是一种“无奈”，是现实是问题驱使你去做一些其实你本来不想做的事情。你无法理解一些看起来像“脱了裤子放屁”一样的行为，通常只是因为你没有遭遇过那些现实那些问题。（看看，大学能教你这些东西么？）\r\n\r\n即使你没有多少开发经验，你也应该能够想象，单元测试最大的问题，就是它需要花时间花精力去写，那么这个花费是否值得呢？这还是由你架构的目标决定的，或者你的需求决定的。如果系统是一次成型交付使用，此后几乎不会更改的，那么一次性的手工测试就够了；但如果你的系统是会被“千锤百炼”的不断折腾修改的，那么这个测试就是很有必要的。最简单的考虑：每一次更改，我都要手工测试一次；那还不会如我多花点时间，弄个“自动化”的东西出来。单元测试，其实就可以理解为一种自动化的测试工具。\r\n\r\n但是“自动化”的理由还远远不够。因为你马上想到的，每一次需求变更代码调整，测试代码也得相应的改呀？没有测试代码，我就只需要改开发代码；现在有了单元测试，我还得再改测试代码。本来我只维护一套代码，现在我凭空增加了一套代码也需要维护，这不是增加了维护成本，不是和你“可维护性”的架构目标背道而驰了么？是一套代码好维护呢，还是两套代码更好维护？\r\n\r\n这是一个非常好的问题，适用于很多情景（比如分层架构，你说分层解耦，实际上还不是一改就得从UI层改到数据库，每一层都得改？）。我能给出的回答大概有：\r\n\r\n无论有无单元测试，开发代码进行修改之后，是不是都要进行测试？没有单元测试，并不代表你的代码就不需要测试了，只不过是你手工的去测试了一遍而已。切记：你的工作并不只是把代码写出来而已！\r\n进行手工测试，和更改单元测试，两者的耗费比，会根据测试重用的次数而变化。一次手工测试可能需要5分钟跑完，更改单元测试代码可能需要20分钟，但如果这测试会跑100遍，单元测试完胜手工测试。\r\n你说，哪里哟？什么功能会改100遍？我没说你的功能会改100遍，我说的是测试会跑100遍。有区别么？你可能还在犯迷糊，是吧？好吧，我们讲个故事。\r\n有一个小伙子，他很不情愿写测试代码。老板拿他没辙啊，也没那么多精力和他磨牙，于是老板自己写单元测试。这小伙子的代码提交之前要review，老板总能一次次的找出它代码的问题。他改的是登录，老板告诉他积分系统被他改出了问题；他又去改积分，老板又告诉他消息通知系统被他改坏了；他又去改消息系统，老板告诉他登录还是有问题……于是他崩溃了，“这TM什么一个烂系统”？最终他终于回过神来了，为什么老板总能知道这里的改动会影响那里呢？老板的思维有这么严谨？老板躲在一旁偷笑，就不告诉你，“其实我就是跑了一遍单元测试而已”。\r\n\r\n这个老板就是我。我故意的，就不一次性的告诉他所有的问题，就要这样一次次的折磨他，让他的痛苦能刻入骨子里去。最后，我还要问他：\r\n\r\n你现在对你的代码是不是还那么自信？\r\n如果没有我的review（我也是靠单元测试），你能不能发现这些问题？\r\n如果我们的项目已经部署到生产环境，而且你的改动带来的破坏没有被发现就上线了，会带来什么样的后果？\r\n\r\n这一次，他服气了。后来他用NUnit用得麻溜麻溜的。每一次改动，如果有意想不到的未通过test case，他都会很激动的给我张截图，顺便发发牢骚。我微笑不语，那种满屏绿灯通过的踏实，和意外爆出红灯之后的惊喜，没有经历过的人，是无法体会的。\r\n\r\n所以其实当对象间的关系变得越来越错综复杂，像一张密密麻麻的网一样之后，一个局部的改动就很有可能会触发极其复杂的连锁反应。所以为了保险起见，所有可能相关的组件都应该进行测试（所谓的“回归测试”）。这时候如果只有纯粹的手工测试，会面临两个问题：\r\n\r\n难以确定测试的边界（那些部分可能会被影响），这得我们脑袋凭空硬想啊，兄弟！\r\n极大的测试耗费。而且这种耗费是相当的无聊繁琐伤人心的——没人愿意做这种事。据说所知，现在很多公司测试人员的工资已经比开发人员还高了。为什么？简单枯燥无聊，没人愿意做啊！\r\n\r\n好的，我假设你已经认识到了单元测试的重要性，并开始摩拳擦掌，跃跃欲试。接下来我得给你泼一大瓢冷水：单元测试不是那么好写的！从某种程度上讲，写单元测试比写开发代码还难。难得我工作的所有公司，没有一家有过成功的案例。\r\n\r\n大概是几年前，我在公司修bug，老大告诉我，“你这个功能比较核心，跑一下单元测试吧”。\r\n\r\n“哇塞！我们有单元测试？”一种高大上的感觉迅速弥漫全身，终于见到传说中的Unit了！\r\n\r\n捣鼓了一会，能跑了，试试看——我的个妈呀？怎么这么多红灯？我真被吓住了，这都是我的改动造成的？\r\n\r\n老大就是老大，不慌不忙，“数一下有多少个通不过？”\r\n\r\n“啊？”我以为我听错了，数多少个通不过有什么用？得把他们全部弄通过啊？！\r\n\r\n搞了一会儿，才终于弄明白了，把我改动前后的代码分别跑一遍，对照一下通过失败是不是一样的，只要是一样的，就OK了。比如，以前是8个通不过，现在还是8个通不过，这样就可以了！\r\n\r\n我一直不明白，为什么不把那8个通不过的单元测试给弄成通过呢？这样摆着究竟算什么？直到我自己开始写单元测试。坑爹啊！到处都是坑，跳出小坑进大坑，大坑下面还连着小坑，前面是坑后面是坑，一堆一堆的连环坑……\r\n\r\n单元测试写出来容易跑过难！而且跑不过的原因还不是你的开发代码逻辑错了，而是测试环境/数据出问题。要测试，一定要有数据，这个数据的构建，完全不是我们所想象的那么简单。以我们创业家园项目里的积分系统为例，假设一个简单的需求：博客被点赞，博客的作者应该获得一定积分，该积分数量是由点赞人目前所有的可用币转换而得来的（已简化，具体可参考文档：积分）。要准备的数据就有：博客一篇，要有作者，作者已有积分；点赞人一名，有一定数量可用币。如果只是这样，还可以接受，但其实下面会有一堆的问题：\r\n\r\n作者的积分从哪里来？我们的开发代码，出于封装的考虑，用户的积分是只读的，你单元测试怎么设这个值？\r\n要么写代码，模拟作者通过其他行为（发布文章回答问题等）获得积分，这将开启新一轮噩梦；\r\n如果用Mock或者反射强行设置，事实上省略了作者获得积分的历史，所以用户“积分历史”为null，之后对其“加积分”时，就会报异常。\r\n更坑的是，你以为你什么都处理好了的时候，你突然悲哀的发现，这个博客得首先“被发布”，而博客一经发布，其作者就获得了一定数量的积分，所以你以前设置的积分又变了！\r\n……\r\n点赞人的可用币，同样可能遇到类似的问题。可用币怎么设置，设置之后会不会在跑测试时被意外更改？\r\n点赞的行为，被封装成一个方法，运行这个方法，会检查点赞人之前是否已经对该文章点过赞，所以还应该有一个“点赞历史记录”，哪怕是空的，都得new一个，否则就空异常\r\n……\r\n\r\n反正当时是写得我直接摔了鼠标！写得憋屈啊！而且我还是完全隔绝了数据库的，真不知道那些要从数据库里取数据来跑单元测试的，是怎么做的？这时候我一下子就明白了，实际工作中加班赶进度，一个接一个的填坑，连重构的时间都没有，怎么可能还挤得出时间来写单元测试？就算开始雄心勃勃的写了，随着系统日益复杂，维护单元测试的成本也与日俱增，甚至复杂度更甚开发，所以放弃也就成了绝大多数项目的唯一选择。\r\n\r\n在公司上班么，大多数人都是这样的，能推就推。我们开发写完了代码，基本上能跑了，就该交给测试人员了呀！天经地义的嘛，是不是？而且测试的时间是不会计算到我的项目开发时间里的，我总算是按时完成了开发任务。累坏了，休息一下，让测试的忙活去吧，哈哈……\r\n\r\n但我是个光杆司令，我没测试人员啊！曾经有那么一两个时候，我真准备招一两个测试人员的。但好在我天生的节俭美德（也就是“抠”啦）让我冷静下来。我就想啊：测试只能告诉你出了bug，不能告诉你根源啊。没有单元测试，我单步调试，不也折腾了两天了么？这是系统本身的复杂性，或者代码组织的不合理造成的，不能归咎于单元测试。不还是有这么多开源代码都有详尽的单元测试么？他们是怎么做到的呢？在单元测试上的付出，最终一定会获得超值回报！想想没有单元测试的公司，那超级庞大的测试团队，或者四处冒烟的系统，你愿意走这么一条路么？\r\n\r\n所以我不断的告诫自己，不要着急，冷静细致。终于一步步抽丝剥茧，把这一团乱麻一点点的归纳整理，最终还真被我找到了一条路子，一个个的单元测试都慢慢完成通过了，开发代码里潜在的一些问题也浮出水面，被我一个个的消灭。最后再跑一遍单元测试，一路绿灯，哈哈！更奇迹的是，困扰我两天的bug不知道什么时候消失了？\r\n\r\n后来，我看到这样一种说法：可测试的代码不一定是好代码，但坏代码几乎是不可能被测试的。深以为然！深度耦合的代码，写他们的单元测试，难于上青天；但反过来，我们可以以可测试为标准，不断的完善重构开发代码，只要这样坚持下来，最终代码的质量怎么都不会差到哪里去。\r\n\r\n所以，于我而言，单元测试是否有价值的争论可以休矣！不如换个角度，想一想，怎样才能把单元测试坚持下去。\r\n\r\n最后，如果有心的同学就会注意到，我一直用的是“单元测试”，而不是“测试驱动”。因为测试驱动是一个更广阔的概念，是一个更崭新的天地！单元测试只是其中的一小部分，在下一篇博客，我会讲解我是如何试着将测试驱动的概念运用到项目开发管理中去的。这里，需要强调的一点：先写测试。\r\n\r\n一上手就写开发代码，写完了才写单元测试。这是很多开发人员的习惯，我也经常犯这样的毛病，一不留神就忘了。这样做最大的问题就是，没有真正实现“测试驱动”。你实际上还是由开发在驱动，那么很自然的，测试照着开发的if...else...写一遍，有什么意义呢？这样做下去，就会不断的强化“测试无用累赘”的印象，因为测试就是简单的把开发代码重写一遍而已。我开的药方是：\r\n\r\n单元测试代码和开发代码由不同的人员编写\r\n如果做不到上面一点，先写单元测试\r\n如果连上面一点也做不到，直到出了bug了再写单元测试\r\n\r\n第三条可能有同学无法理解，不是说单元测试很重要么？为什么要等到出了bug才写？答案是：偷懒呗！记住，我们程序员是世界上最懒的人，没意义的事从来不做！你先写开发代码再写测试真的没意义，没意义就干脆不要做了。但你可以开启“乐观模式”（或者“Lazy模式”？），先乐观的认为，我的代码没问题，或许真的就没问题呢，是吧？如果真出了问题，做一个补救，这个时候就应该用单元测试把这个问题表现出来，因为他根据墨菲定律，它这里出了问题，以后就很有可能继续出问题。这个时候，就不要再偷懒了。', '【转载】架构之路（三）：单元测试', '', 'inherit', 'closed', 'closed', '', '39-revision-v1', '', '', '2015-10-04 19:45:33', '2015-10-04 11:45:33', '', 39, 'http://acheng1314.cn/?p=40', 0, 'revision', '', 0),
(41, 1, '2015-10-04 19:53:01', '2015-10-04 11:53:01', '<a href="http://blog.csdn.net/zhang_xinxiu/article/details/24230071">原文地址：</a>\r\n\r\n&nbsp;\r\n\r\n<span style="font-family: Simsun;">这几天一直在学习使用</span><span lang="en-US">SSH2</span><span lang="zh-CN">框架，对于框架本身的使用并不是很困难，相信经过多锻炼就能够熟练的掌握框架的使用，让我匪夷所思的是在使用框架的时候感觉很熟悉，好像在哪里用过似得。就在某次查看代码的时候突然闪现了一个想法，</span><span lang="en-US">SSH</span><span lang="zh-CN">2框架和经典三层很相似，当然经过翻阅资料发现我的想法还是有理论依据的，接下来将会证实该猜想。</span>\r\n<h1><a name="t0"></a><span lang="zh-CN">一、SSH2初识</span></h1>\r\n<span lang="zh-CN"> 我们通常所说的SSH2框架其实是有三种框架集成的，它们分别是基于</span><span lang="en-US">MVC</span><span lang="zh-CN">模式的</span><span lang="en-US">Struts2</span><span lang="zh-CN">框架和基于</span><span lang="en-US">IoC</span><span lang="zh-CN">模式的</span><span lang="en-US"> Spring</span><span lang="zh-CN">框架以及对象</span><span lang="en-US">/</span><span lang="zh-CN">关系映射框架</span><span lang="en-US">Hibernate，之所以会产生这么框架是因为J2EE的诟病，因为J2EE的多层结构过于复杂，想要更加效率的开发大型的J2EE项目就必须运用其它的框架和设计模式来整合这种多层结构提高软件的质量。</span>\r\n\r\n<strong> Note:框架一般具有即插即用的可重用性、成熟的稳定性以及良好的团队协作性。</strong>\r\n\r\n想要深入了解SSH框架就必须来看看它的框架图，从它的框架图上来讨论分析它的执行过程。如下图为SSH框架的基本结构图。\r\n<p align="center"><img src="http://img.blog.csdn.net/20140421093126125?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhhbmdfeGlueGl1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" /></p>\r\n系统的基本业务流程：在表示层中，首先通过JSP页面实现交互界面，负责接收请求(Request)和传送响应(Response)，然后Struts根据配置文件(struts-config.xml)将ActionServlet接收到的Request委派给相应的Action处理。在业务层中，管理服务组件的Spring IoC容器负责向Action提供业务模型(Model)组件和该组件的协作对象数据处理(DAO)组件完成业务逻辑，并提供事务处理、缓冲池等容器组件以提升系统性能和保证数据的完整性。而在持久层中，则依赖于Hibernate的对象化映射和数据库交互，处理DAO组件请求的数据，并返回处理结果。 具体的内部框架的请求过程会在下篇博客中详细讨论。\r\n<h1><a name="t1"></a>二、SSH2 Vs 经典三层</h1>\r\n<span lang="zh-CN"> 先来回顾下经典的三层架构，在开发时为了实现程序解耦的目的，我们把程序分成了三个层次，分别是显示层（</span><span lang="en-US">User Show Layer</span><span lang="zh-CN">）、业务逻辑层（</span><span lang="en-US">Business Logic Layer</span><span lang="zh-CN">）、数据持久层（</span><span lang="en-US">Data Access Layer</span><span lang="zh-CN">）。这是最基础的开发架构，也就是将程序按照我们通常理解的那样拆分开，每一层只专注一种事物，这样每一层只要实现相应的接口就能很好的降低了程序集之间的耦合。</span>\r\n\r\n<span lang="en-US"> <strong>Note</strong></span><strong>：在有的教程中三层架构可能会有实体层（Entity Layer），其实它是三层中的参数，各层之间进行参数传递时需要采用的即为实体层中的表实体。</strong>\r\n<p align="center"><span lang="zh-CN"><img src="http://img.blog.csdn.net/20140421093402750?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhhbmdfeGlueGl1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" />\r\n</span></p>\r\n联系经典的三层我们不难看出SSH2框架的实现其实就是经典的三层结构，只不过在三层结构中的每一层中集成的是单独的框架，尤其是在表示层中采用的是基于MVC模式的Struts2来配置，当页面进行请求后Struts会根据配置文件（Struts2中为Struts2.xml）将ActionServlet接收到的Request请求委托给相应的Action处理。然后在业务层中，管理服务组件的Spring IoC负责向Action提供业务模型（Model）组件等来完成业务逻辑。而在持久层中，则依赖于Hibernate的对象化映射和数据库交互，处理DAO组件请求的数据，并返回处理结果。\r\n<h1><a name="t2"></a>结语</h1>\r\n通过上面的对比不难发现其实SSH2框架采用的是经典的三层模式，将J2EE分层结构进行了良好的整合，在开发时很方便。但是对于每个框架的内部执行机制没有做过多的讨论，相信在理解上可能会有很多疑惑，为了解决疑惑，将会在下篇文章中重点讨论Struts、Spring、Hibernate框架的内部执行机制。', '【转载】【SSH2框架（理论篇）】--SSH2 Vs 经典三层', '', 'publish', 'open', 'open', '', '%e3%80%90%e8%bd%ac%e8%bd%bd%e3%80%91%e3%80%90ssh2%e6%a1%86%e6%9e%b6%ef%bc%88%e7%90%86%e8%ae%ba%e7%af%87%ef%bc%89%e3%80%91-ssh2-vs-%e7%bb%8f%e5%85%b8%e4%b8%89%e5%b1%82', '', '', '2015-10-04 19:53:43', '2015-10-04 11:53:43', '', 0, 'http://acheng1314.cn/?p=41', 0, 'post', '', 1),
(42, 1, '2015-10-04 19:53:01', '2015-10-04 11:53:01', '<span style="font-family: Simsun;">这几天一直在学习使用</span><span lang="en-US">SSH2</span><span lang="zh-CN">框架，对于框架本身的使用并不是很困难，相信经过多锻炼就能够熟练的掌握框架的使用，让我匪夷所思的是在使用框架的时候感觉很熟悉，好像在哪里用过似得。就在某次查看代码的时候突然闪现了一个想法，</span><span lang="en-US">SSH</span><span lang="zh-CN">2框架和经典三层很相似，当然经过翻阅资料发现我的想法还是有理论依据的，接下来将会证实该猜想。</span>\r\n<h1><a name="t0"></a><span lang="zh-CN">一、SSH2初识</span></h1>\r\n<span lang="zh-CN"> 我们通常所说的SSH2框架其实是有三种框架集成的，它们分别是基于</span><span lang="en-US">MVC</span><span lang="zh-CN">模式的</span><span lang="en-US">Struts2</span><span lang="zh-CN">框架和基于</span><span lang="en-US">IoC</span><span lang="zh-CN">模式的</span><span lang="en-US"> Spring</span><span lang="zh-CN">框架以及对象</span><span lang="en-US">/</span><span lang="zh-CN">关系映射框架</span><span lang="en-US">Hibernate，之所以会产生这么框架是因为J2EE的诟病，因为J2EE的多层结构过于复杂，想要更加效率的开发大型的J2EE项目就必须运用其它的框架和设计模式来整合这种多层结构提高软件的质量。</span>\r\n\r\n<strong> Note:框架一般具有即插即用的可重用性、成熟的稳定性以及良好的团队协作性。</strong>\r\n\r\n想要深入了解SSH框架就必须来看看它的框架图，从它的框架图上来讨论分析它的执行过程。如下图为SSH框架的基本结构图。\r\n<p align="center"><img src="http://img.blog.csdn.net/20140421093126125?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhhbmdfeGlueGl1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" /></p>\r\n系统的基本业务流程：在表示层中，首先通过JSP页面实现交互界面，负责接收请求(Request)和传送响应(Response)，然后Struts根据配置文件(struts-config.xml)将ActionServlet接收到的Request委派给相应的Action处理。在业务层中，管理服务组件的Spring IoC容器负责向Action提供业务模型(Model)组件和该组件的协作对象数据处理(DAO)组件完成业务逻辑，并提供事务处理、缓冲池等容器组件以提升系统性能和保证数据的完整性。而在持久层中，则依赖于Hibernate的对象化映射和数据库交互，处理DAO组件请求的数据，并返回处理结果。 具体的内部框架的请求过程会在下篇博客中详细讨论。\r\n<h1><a name="t1"></a>二、SSH2 Vs 经典三层</h1>\r\n<span lang="zh-CN"> 先来回顾下经典的三层架构，在开发时为了实现程序解耦的目的，我们把程序分成了三个层次，分别是显示层（</span><span lang="en-US">User Show Layer</span><span lang="zh-CN">）、业务逻辑层（</span><span lang="en-US">Business Logic Layer</span><span lang="zh-CN">）、数据持久层（</span><span lang="en-US">Data Access Layer</span><span lang="zh-CN">）。这是最基础的开发架构，也就是将程序按照我们通常理解的那样拆分开，每一层只专注一种事物，这样每一层只要实现相应的接口就能很好的降低了程序集之间的耦合。</span>\r\n\r\n<span lang="en-US"> <strong>Note</strong></span><strong>：在有的教程中三层架构可能会有实体层（Entity Layer），其实它是三层中的参数，各层之间进行参数传递时需要采用的即为实体层中的表实体。</strong>\r\n<p align="center"><span lang="zh-CN"><img src="http://img.blog.csdn.net/20140421093402750?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhhbmdfeGlueGl1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" />\r\n</span></p>\r\n联系经典的三层我们不难看出SSH2框架的实现其实就是经典的三层结构，只不过在三层结构中的每一层中集成的是单独的框架，尤其是在表示层中采用的是基于MVC模式的Struts2来配置，当页面进行请求后Struts会根据配置文件（Struts2中为Struts2.xml）将ActionServlet接收到的Request请求委托给相应的Action处理。然后在业务层中，管理服务组件的Spring IoC负责向Action提供业务模型（Model）组件等来完成业务逻辑。而在持久层中，则依赖于Hibernate的对象化映射和数据库交互，处理DAO组件请求的数据，并返回处理结果。\r\n<h1><a name="t2"></a>结语</h1>\r\n通过上面的对比不难发现其实SSH2框架采用的是经典的三层模式，将J2EE分层结构进行了良好的整合，在开发时很方便。但是对于每个框架的内部执行机制没有做过多的讨论，相信在理解上可能会有很多疑惑，为了解决疑惑，将会在下篇文章中重点讨论Struts、Spring、Hibernate框架的内部执行机制。', '【转载】【SSH2框架（理论篇）】--SSH2 Vs 经典三层', '', 'inherit', 'closed', 'closed', '', '41-revision-v1', '', '', '2015-10-04 19:53:01', '2015-10-04 11:53:01', '', 41, 'http://acheng1314.cn/?p=42', 0, 'revision', '', 0),
(43, 1, '2015-10-04 19:53:43', '2015-10-04 11:53:43', '<a href="http://blog.csdn.net/zhang_xinxiu/article/details/24230071">原文地址：</a>\r\n\r\n&nbsp;\r\n\r\n<span style="font-family: Simsun;">这几天一直在学习使用</span><span lang="en-US">SSH2</span><span lang="zh-CN">框架，对于框架本身的使用并不是很困难，相信经过多锻炼就能够熟练的掌握框架的使用，让我匪夷所思的是在使用框架的时候感觉很熟悉，好像在哪里用过似得。就在某次查看代码的时候突然闪现了一个想法，</span><span lang="en-US">SSH</span><span lang="zh-CN">2框架和经典三层很相似，当然经过翻阅资料发现我的想法还是有理论依据的，接下来将会证实该猜想。</span>\r\n<h1><a name="t0"></a><span lang="zh-CN">一、SSH2初识</span></h1>\r\n<span lang="zh-CN"> 我们通常所说的SSH2框架其实是有三种框架集成的，它们分别是基于</span><span lang="en-US">MVC</span><span lang="zh-CN">模式的</span><span lang="en-US">Struts2</span><span lang="zh-CN">框架和基于</span><span lang="en-US">IoC</span><span lang="zh-CN">模式的</span><span lang="en-US"> Spring</span><span lang="zh-CN">框架以及对象</span><span lang="en-US">/</span><span lang="zh-CN">关系映射框架</span><span lang="en-US">Hibernate，之所以会产生这么框架是因为J2EE的诟病，因为J2EE的多层结构过于复杂，想要更加效率的开发大型的J2EE项目就必须运用其它的框架和设计模式来整合这种多层结构提高软件的质量。</span>\r\n\r\n<strong> Note:框架一般具有即插即用的可重用性、成熟的稳定性以及良好的团队协作性。</strong>\r\n\r\n想要深入了解SSH框架就必须来看看它的框架图，从它的框架图上来讨论分析它的执行过程。如下图为SSH框架的基本结构图。\r\n<p align="center"><img src="http://img.blog.csdn.net/20140421093126125?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhhbmdfeGlueGl1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" /></p>\r\n系统的基本业务流程：在表示层中，首先通过JSP页面实现交互界面，负责接收请求(Request)和传送响应(Response)，然后Struts根据配置文件(struts-config.xml)将ActionServlet接收到的Request委派给相应的Action处理。在业务层中，管理服务组件的Spring IoC容器负责向Action提供业务模型(Model)组件和该组件的协作对象数据处理(DAO)组件完成业务逻辑，并提供事务处理、缓冲池等容器组件以提升系统性能和保证数据的完整性。而在持久层中，则依赖于Hibernate的对象化映射和数据库交互，处理DAO组件请求的数据，并返回处理结果。 具体的内部框架的请求过程会在下篇博客中详细讨论。\r\n<h1><a name="t1"></a>二、SSH2 Vs 经典三层</h1>\r\n<span lang="zh-CN"> 先来回顾下经典的三层架构，在开发时为了实现程序解耦的目的，我们把程序分成了三个层次，分别是显示层（</span><span lang="en-US">User Show Layer</span><span lang="zh-CN">）、业务逻辑层（</span><span lang="en-US">Business Logic Layer</span><span lang="zh-CN">）、数据持久层（</span><span lang="en-US">Data Access Layer</span><span lang="zh-CN">）。这是最基础的开发架构，也就是将程序按照我们通常理解的那样拆分开，每一层只专注一种事物，这样每一层只要实现相应的接口就能很好的降低了程序集之间的耦合。</span>\r\n\r\n<span lang="en-US"> <strong>Note</strong></span><strong>：在有的教程中三层架构可能会有实体层（Entity Layer），其实它是三层中的参数，各层之间进行参数传递时需要采用的即为实体层中的表实体。</strong>\r\n<p align="center"><span lang="zh-CN"><img src="http://img.blog.csdn.net/20140421093402750?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhhbmdfeGlueGl1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" />\r\n</span></p>\r\n联系经典的三层我们不难看出SSH2框架的实现其实就是经典的三层结构，只不过在三层结构中的每一层中集成的是单独的框架，尤其是在表示层中采用的是基于MVC模式的Struts2来配置，当页面进行请求后Struts会根据配置文件（Struts2中为Struts2.xml）将ActionServlet接收到的Request请求委托给相应的Action处理。然后在业务层中，管理服务组件的Spring IoC负责向Action提供业务模型（Model）组件等来完成业务逻辑。而在持久层中，则依赖于Hibernate的对象化映射和数据库交互，处理DAO组件请求的数据，并返回处理结果。\r\n<h1><a name="t2"></a>结语</h1>\r\n通过上面的对比不难发现其实SSH2框架采用的是经典的三层模式，将J2EE分层结构进行了良好的整合，在开发时很方便。但是对于每个框架的内部执行机制没有做过多的讨论，相信在理解上可能会有很多疑惑，为了解决疑惑，将会在下篇文章中重点讨论Struts、Spring、Hibernate框架的内部执行机制。', '【转载】【SSH2框架（理论篇）】--SSH2 Vs 经典三层', '', 'inherit', 'closed', 'closed', '', '41-revision-v1', '', '', '2015-10-04 19:53:43', '2015-10-04 11:53:43', '', 41, 'http://acheng1314.cn/?p=43', 0, 'revision', '', 0),
(45, 1, '2015-10-08 19:59:39', '2015-10-08 11:59:39', 'http://115.28.161.133/wp-content/uploads/2015/09/cropped-ed6c66e6d50bf543c1a95109f8ac04d91.jpg', 'cropped-ed6c66e6d50bf543c1a95109f8ac04d91.jpg', '', 'inherit', 'open', 'closed', '', 'cropped-ed6c66e6d50bf543c1a95109f8ac04d91-jpg', '', '', '2015-10-08 19:59:39', '2015-10-08 11:59:39', '', 0, 'http://115.28.161.133/wp-content/uploads/2015/09/cropped-ed6c66e6d50bf543c1a95109f8ac04d91.jpg', 0, 'attachment', 'image/jpeg', 0),
(46, 1, '2015-10-15 10:25:48', '2015-10-15 02:25:48', '详情请跳转至我以前的博客：<a href="http://blog.csdn.net/qq_22603017/article/details/48504955">http://blog.csdn.net/qq_22603017/article/details/48504955</a>', '【安卓】首页切换ViewPager+Fragment', '', 'publish', 'open', 'open', '', '%e3%80%90%e5%ae%89%e5%8d%93%e3%80%91%e9%a6%96%e9%a1%b5%e5%88%87%e6%8d%a2viewpagerfragment', '', '', '2015-10-15 10:25:48', '2015-10-15 02:25:48', '', 0, 'http://acheng1314.cn/?p=46', 0, 'post', '', 1),
(47, 1, '2015-10-15 10:25:48', '2015-10-15 02:25:48', '详情请跳转至我以前的博客：<a href="http://blog.csdn.net/qq_22603017/article/details/48504955">http://blog.csdn.net/qq_22603017/article/details/48504955</a>', '【安卓】首页切换ViewPager+Fragment', '', 'inherit', 'closed', 'closed', '', '46-revision-v1', '', '', '2015-10-15 10:25:48', '2015-10-15 02:25:48', '', 46, 'http://acheng1314.cn/?p=47', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(48, 1, '2015-10-15 14:11:49', '2015-10-15 06:11:49', '原文：<a href="http://ink.csdn.net/articles/show/55ec359bd076e95f4f672646">点击这里</a>\r\n\r\n不觉间已经工作六年，回想第一天实习的场景历历在目、恍若昨日。六年已 足以令许多人转管理、转产品、转测试、转行，也一定有人还在坚守着编码，只因热爱。遇到过形形色色的经理、架构师、运维、性能工程师等等，还是觉得写代码 的才是最厉害的！在这里分享一些这些年来修习到的个人心得。也许并不适用于其他人，但对于我却都是最珍贵的“宝藏”。也谨以此文纪念在代码堆里度过的青 春~ 看到这些点点滴滴的收获，就会感到所有逝去的光阴和挥洒的汗水都是值得的。\r\n<h3>1.启动：得心应手的工具</h3>\r\n<h2 id="11-全能ide">1.1 全能IDE</h2>\r\n关于IDE，目前我使用Intellj IDEA和Sublime Text来应对各种语言的开发。\r\n\r\n在大学期间初学Java时曾使用过MyEclipse，后来职业生涯的前期很自然的过渡到了更加灵活的Eclipse。但两年前经过不断的试用丢弃 再试用，最终我成功从Eclipse转投到了Intellij IDEA阵营。在那之后就一发不可收拾，不仅重度使用Intellij，而且还短暂试用过JetBrains旗下的各种产 品，Phpstorm，Pycharm，RubyMine包括最新的Clion。Google也选择Intellij作为其Android Studio的基础。<b>作为Java开发者，当然最钟爱的还是Intellij，其智能程度实在是太震撼了！</b>强烈建议还在观望的同学们去<a href="https://www.jetbrains.com/idea/" target="_blank">官网</a>上看一下介绍它的各种操作的小动图。\r\n\r\n好像很容易地，Intellj IDEA就成了我Java开发的不二选择。然而对于其他语言，尤其是C/C++却一直没找到合适的IDE。从Vim+各种插件打造IDE到Emacs到 Visual Studio和CodeBlocks，一直没有令我满意的，直到碰见了Sublime Text。现在它不仅是我除了Java外所有语言的IDE，还是我的博客编写工具和代码库，在后面的<a href="http://blog.csdn.net/dc_726/article/details/47427791#32-codebase" target="_blank">3.2 Codebase</a>一节你将会看到。详见<a href="http://blog.csdn.net/dc_726/article/details/45749805" target="_blank">《Sublime Text 3下C/C++开发环境搭建》</a>。\r\n<h2 id="12-uml和设计">1.2 UML和设计</h2>\r\nUML领域中的好软件不少，如Rose、EA，大多是商业付费软件。在开源免费软件中，StarUML比较不错，2.0版相比1.0做了不少改进， 尤其是整体外观漂亮多了。配合Visio和Power Designer等补充UML以外的设计图，如业务泳道图、流程图、拓扑图、ER关系图等，几乎可以满足大部分日常需求。\r\n<h2 id="13-shell">1.3 Shell</h2>\r\n日常工作中免不了要使用Unix/Linux命令，或者直接连接到远程的服务器上做一些操作。在Windows上模拟Unix/Linux命令当然 要用Cygwin，在Windows上使用那些实用的Unix命令可以大幅度提升效率，特别是你经常需要处理文本时。而SSH客户端一般就用SSH Secure Shell或XShell，前者比较简单，后者更强大但文件传输功能却要装另外的软件XFtp。\r\n\r\n当然，如果直接使用Linux做个人桌面那最好不过了，在Linux上开发和在Windows上不仅是工具多了顺手了，简直就是思维方式上的剧变！详见<a href="http://blog.csdn.net/dc_726/article/details/45399457" target="_blank">《Linux Mint 17一周使用体验》</a>。\r\n<h2 id="14-虚拟环境">1.4 虚拟环境</h2>\r\nVirtualBox是个不错的小巧快速的虚拟机软件，VMWare也许更加强大，但是有些太重型了。用VirtualBox装一些常用的操作系统 和软件，以及测试环境和测试数据，然后做成快照留作以后反复使用，可以免去很多做环境的麻烦。而且在虚拟机里怎么折腾都行，降低了使用实体机的风险。这方 面，目前后起之秀应该是Docker吧，造福了广大的开发者。因为还没有研究过所以先不做评论了。\r\n<h3>2.加速：简单有效的方法论</h3>\r\n<h2 id="21-动手前先思考">2.1 动手前先思考</h2>\r\n作为一名程序员，拿到任务后就有要立即编码的冲动很正常，但为了减少走弯路，我们要克制这种冲动。大到大型产品和项目的开发，小到一个算法的实现， 都少不了先行设计和思考。大项目要做高层次架构设计，提前识别出那些“坑”，可以有效地降低风险，避免返工。小算法要证明其正确性，避免一些逻辑思维上的 漏洞。关于一段代码的正确性，详见<a href="http://blog.csdn.net/dc_726/article/details/44785395" target="_blank">《程序员修炼之路-(1)基础(下)：正确性证明》</a>。\r\n\r\n<b>关于思考的程度也要掌握一个“度”，不然就可能出现“过度设计”的问题</b>。这个“度”感觉很难掌握，只能靠时间和经验不断培养判断和直觉，一点点地就学会了评估哪些设计现在做很费时应该放后，哪些设计现在做不麻烦但要是不做以后改起来就很费时。\r\n<h2 id="22-简洁的代码">2.2 简洁的代码</h2>\r\n说到简洁和干净，就不得不提一些经典书籍对我的巨大影响。在大学时入手了《Code Complete》（代码大全，听了这狗血的中译名真以为是各种代码的百科全书），很幸运地能在正式入行前就看到这本书，它让我少走了很多弯路，甚至养成 了一些代码“洁癖”，有时甚至起个类名都要想半天，但时间证明一切都是值得的。\r\n\r\n后来又看到了《Clean Code》，不仅讲述了简洁代码方方面面的技巧，还将写出简洁的代码上升到了职业宣言的高度。详情见<a href="http://blog.csdn.net/dc_726/article/details/8739587" target="_blank">《代码整洁之道》读书笔记</a>。\r\n<blockquote>《Clean Code》中结尾的一段话令人印象深刻，至今难忘：\r\n“2005年，Elisabeth递给我一条绿色腕带，上面写着Test Obsessed沉迷测试的字样，我高兴地带上。我发现自己无法取下腕带，不仅是因为腕带很紧，而且那也是精神上的紧箍咒。那腕带就是我职业道德的宣告， 也是我承诺尽己所能写出最好代码的提示。写代码时，我用余光瞟见它。它一直<b>提醒我，我做了写出整洁代码的承诺。”</b></blockquote>\r\n<h2 id="23-重构">2.3 重构</h2>\r\n个人虽然没有深入接触过敏捷开发，但潜移默化中还是接触到了不少敏捷开发中好的思想和方法，比如接下来要说的重构。\r\n\r\n重构的技巧有很多，可能不知不觉中我们就已经用到了。从最简单的重命名、成员变量提取，到类提取、继承层次中的上下移动等等。MF的那本《重构：改 善既有代码的设计》配上侯捷的翻译非常经典！这里再次强烈推荐Intellij IDEA，因为它的重构功能实在太强大了，可以节省很多时间，大幅度提升我们的开发效率。\r\n<h2 id="24-单元测试与tdd">2.4 单元测试与TDD</h2>\r\n测试驱动开发(TDD)的方法和技巧其实很简单，随之而来的好处却很多。一是对于很复杂的功能可以先实现最简单功能，再逐步完善；二是有了单元测 试，可以通过失败的用例直接找到对应出问题的代码；三是通过TDD不断迭代出的代码，设计比较合理，后期更加容易维护。任何技术都不可避免的有两面 性，TDD也不例外，详见<a href="http://blog.csdn.net/dc_726/article/details/23258769" target="_blank">《TDD实践感悟》</a>。\r\n\r\n关于其他测试，如集成测试，使用Selenium还可以将测试自动化。录制好的测试脚本可以自动播放，鼠标键盘就像“无人自动驾驶”一样。\r\n<h2 id="25-持续集成">2.5 持续集成</h2>\r\n<b>持续集成(CI)被誉为项目的心跳</b>。善加利用的话，不仅能统一大家开发的步调，集成上各种有用的插件，例如 JCoverage、FindBugs、CheckStyle和各种打包部署脚本，就能有效地提高代码质量和开发测试速度。CI配合上UAT环境能让客户 尽早地看到目前的产品是否是自己想要的那个样子，避免越到后期越是不好修改，尽早暴露问题。Java世界里最流行的开源CI服务器应该就是Jenkins 了吧，参考<a href="http://blog.csdn.net/dc_726/article/details/9069457" target="_blank">《Jenkins持续集成环境搭建》</a>。\r\n<h2 id="26-代码审查">2.6 代码审查</h2>\r\n尽管TDD和CI能自动化一部分工作，帮助我们提升代码质量和开发效率，但人工的代码审查还是少不了的。自查、互查、一起查，就像结对编程一样，这也是像高手“取经”的好机会！\r\n<h2 id="27-领域模型">2.7 领域模型</h2>\r\n一套准确而稳定的模型层的价值是难以估量的，这对于当前业务代码以及未来升级版本都是具有很大作用的。这也是面向对象分析设计(OOAD)、领域驱 动设计(DDD)等方法论的“战场”。虽然对DDD没有太多的实践经验，但还是推荐一下，不是要全盘接收，而是从中汲取最精华的思想。<a href="http://dddsample.sourceforge.net/" target="_blank">DDD Sample Application</a>是不错的上手学习资料。此外，配合领域模型定制领域语言(DSL)也是个趋势，值得关注。\r\n<h3>3.增压：持续的知识积累</h3>\r\n<h2 id="31-知识体系">3.1 知识体系</h2>\r\n前两部分已经介绍了工具和方法论，能让我们迅速地加速到百公里。然而这些知识大部分是谁都可以从网上获得的。像工具谁都能安装，除非你有“私房”插 件，像方法论也都有很多著作可以学习。要想彪到二百迈，唯有厚积薄发，形成个人风格和套路。因此，一定要有自己的长期计划，并坚定地实行，毕竟慢工出细 活。这是我的长期计划<a href="http://blog.csdn.net/dc_726/article/details/44785453" target="_blank">《程序员修炼之路》</a>：\r\n\r\n计算机数学：离散数学与具体数学。\r\n\r\n算法分析设计：常用设计技巧和数据结构。\r\n\r\n系统平台：体系结构、操作系统、网络、编译原理和数据库。\r\n\r\n代码设计：架构设计、设计模式、方法论。\r\n\r\n代码实现：开发工具和主流编程语言。\r\n\r\n测试验证：单元测试、性能测试和优化。\r\n<h2 id="32-codebase">3.2 Codebase</h2>\r\n<b>传说每个高手都有自己的一套代码库</b>。为了成为高手，我也再不断积累自己的代码库。我的代码库主要来自工作中的项目实践和业务时间的编程练习。对应最常用的两种开发工具，我的代码库也分为两大部分：Java代码和LinuxC系统编程代码。\r\n\r\n首先来看一下我个人Java库的编排，经过多次修改定为如下结构：cs算法/编译原理等计算机科学基础、java基础API、framework主 流框架、mobile移动开发、bigdata大数据hadoop/缓存/机器学习等、ui用户界面、architecture架构设计、project 业余和开源项目代码、verification测试验证代码等。依赖管理方面使用了最顺手的Maven。\r\n<pre class="hljs cpp">$ tree -I <span class="hljs-string">"target|*.iml|pom.xml"</span> -L <span class="hljs-number">1</span> codebase/\r\ncodebase/\r\n|-- <span class="hljs-number">01</span>-cs\r\n|-- <span class="hljs-number">02</span>-java\r\n|-- <span class="hljs-number">03</span>-framework\r\n|-- <span class="hljs-number">04</span>-mobile\r\n|-- <span class="hljs-number">05</span>-bigdata\r\n|-- <span class="hljs-number">06</span>-ui\r\n|-- <span class="hljs-number">07</span>-architecture\r\n|-- <span class="hljs-number">08</span>-project\r\n|-- <span class="hljs-number">09</span>-verification\r\n|-- autobak.sh\r\n`-- README.md</pre>\r\n目前我使用Sublime Text管理Java领域外的各种知识和代码，其编排主要按照系统由底层向上分为：汇编语言、C语言(基础、算法、系统、实践、开源软件)、脚本(批处理、Shell脚本、Cheatsheet)、其他语言(Golang和Python等等)。\r\n<pre class="hljs sql">$ tree -L 2 syspace\r\nsyspace\r\n|<span class="hljs-comment">-- 1-assembly</span>\r\n|<span class="hljs-comment">-- 2-ccpp</span>\r\n|   |<span class="hljs-comment">-- 21-basic</span>\r\n|   |<span class="hljs-comment">-- 22-algorithm</span>\r\n|   |<span class="hljs-comment">-- 23-system</span>\r\n|   |<span class="hljs-comment">-- 24-pragmatic</span>\r\n|   `<span class="hljs-comment">-- 25-opensource</span>\r\n|<span class="hljs-comment">-- 3-batch</span>\r\n|   |<span class="hljs-comment">-- 31-bat</span>\r\n|   |<span class="hljs-comment">-- 32-shell</span>\r\n|   `<span class="hljs-comment">-- 33-cheatsheet</span>\r\n|<span class="hljs-comment">-- 4-lang</span>\r\n|   |<span class="hljs-comment">-- 41-golang</span>\r\n|   |<span class="hljs-comment">-- 42-python</span>\r\n|   `<span class="hljs-comment">-- 43-php</span>\r\n|<span class="hljs-comment">-- autobak.sh</span>\r\n`<span class="hljs-comment">-- index.md</span></pre>\r\n此外，不仅要整理自己的代码，还可以收集一些小巧精悍的开源软件来学习，比如通过Nginx代码学习网络编程，通过Redis学习C语言和数据结构，通过Lua学习编译解释原理，通过libevent学习并发编程。\r\n<blockquote>Linus说过：RTFSC(Read The F***ing Source Code)。实习时在OpenJPA源码里寻寻觅觅，因为找不到一个功能的扩展点而改了源码并替到Jar包里，最后还真好使了。然后就一发不可收拾，沉浸 在了Spring源码的海洋。有时一马平川地，从上到下看到底，如当时OSGi有个开源的小内核Felix。有时也会碰壁而半途而废，记得有次看 Derby，一直看到存储层，记得好像用antrl生成的SQL解释器吧，因为功力不够而搁浅了。现在不管是C、Java还是其他主流编程语言的开源代 码，不能说毫不费力，但是很快速地就都能看出个大概流程，不得不说也是不断阅读的结果。总而言之，阅读优秀源码的收获之大是无法用语言形容的。</blockquote>\r\n<h2 id="33-cheatsheet">3.3 Cheatsheet</h2>\r\nCheatsheet小抄，也就是一些来自日常工作常用操作的速查表，主要由常用配置、命令、快捷键等组成。我目前分为数据库、IDE、各种语言、 中间件、操作系统等。网上有一些现成的在线Cheatsheet，不过还是自己整理的比较熟悉。实际工作中它也帮助我节约了大量的重复查询工作和宝贵时 间。\r\n<pre class="hljs sql">$ tree 33-cheatsheet/\r\n33-cheatsheet/\r\n|<span class="hljs-comment">-- db</span>\r\n|<span class="hljs-comment">-- ide</span>\r\n|<span class="hljs-comment">-- lang</span>\r\n|<span class="hljs-comment">-- midware</span>\r\n|<span class="hljs-comment">-- os</span>\r\n`<span class="hljs-comment">-- revctl</span></pre>\r\n关于这一部分，每个人可能都会攒了一些实用的小脚本。但要注意的是，有些工作是不适合或者说不值得用脚本自动化的。<b>《卓有成效的程序员》里说过：“别让自动化的努力变成剪牦牛毛”</b>。剪牦牛毛是一件很危险的事，它会吃掉你大把的时间，得到的却只是一个不实用、只能用几次或者隐患很大的脚本工具。\r\n<h2 id="34-脚手架">3.4 脚手架</h2>\r\n脚手架(Scaffold)是个好东西，它可以帮助我们自动生成代码的“骨架”。之后利用我们代码库的积累对骨架做微调，不断在上面添加功能就能快 速地形成一个可用的应用程序。Maven提供的Archetype插件是个不错的脚手架，很多项目都基于它提供了代码模板。当然如果想要定制自己的模板也 很简单，具体参照<a href="http://blog.csdn.net/dc_726/article/details/13676207" target="_blank">《Maven原型骨架及常见问题》</a>。\r\n\r\n除了Maven这种构建工具外，IDE一般也提供了各种小脚手架来生成小段代码。最常见的就是IDE里的代码模板和补全功能，如果觉得不过瘾可以编写自己的模板和IDE扩展插件，就像RubyMine对Rails的脚手架的支持一样。详情见<a href="http://blog.csdn.net/dc_726/article/details/14139155" target="_blank">《Intellij IDEA插件开发入门》</a>。\r\n<h2 id="35-blog">3.5 Blog</h2>\r\n写博客的作用可不容小觑！没做过总结的知识那只是别人的知识，没做过读书笔记的书不久后就变得跟没读过一样。当碰到了总结整理过的知识时，搜索你的Blog会给你最快速的答案。<b>不要以为这跟用谷歌搜索一样，一遍遍翻看你自己用心写的东西和看别人的东西是完全不同的概念！</b>而且中文技术文章里有太多的粗制滥造的内容、乱七八糟的排版和无数不注明出处的转发。所以看完书的一章或做完什么有用的练习后，一定要趁热打铁赶紧总结一下！\r\n\r\n那么用什么写呢？之前试用过Emacs下的Orgmode，之前接触过轻量级标记语言，配合Emcas感觉挺惊艳的！后来遇到了Sublime后连写博客都迁到它上面了，因为它的Markdown插件实在是太好用了。详见<a href="http://blog.csdn.net/dc_726/article/details/45749869" target="_blank">《Markdown语法及SublimeText下使用技巧》</a>。\r\n<h2 id="36-多元化">3.6 多元化</h2>\r\n随着写代码的时间长了、见识多了，解决问题的手段就会多元化起来。什么样的编程语言适合用什么样的项目，什么样的架构设计适合什么样的场景。编程语 言多元化，架构设计的多元化，开发工具的多元化，最终才能促成我们解决现实问题的思维的多元化。Thoughtworks维护了一个<a href="http://www.thoughtworks.com/radar" target="_blank">技术雷达</a>，定期会更新技术、平台、工具等方面的技术趋势。\r\n<h3>4.狂暴：专注与抗干扰</h3>\r\n尽管有了上面各种辅助，但是如果不能静下心来编码一切都白费了。要么看会这儿看会那儿，要么就是在嘈杂的环境中无法集中注意力。尽管不起眼，这却是提高效率的“最后一公里”。\r\n<h2 id="41-免分心模式">4.1 免分心模式</h2>\r\n各种IDE一般都提供了全屏模式，像Sublime Text还额外提供了”Distraction Free Mode”抗干扰模式，让你专心地投入到一个打开文件的编辑工作。\r\n<h2 id="42-虚拟桌面">4.2 虚拟桌面</h2>\r\n用过Linux桌面版的都知道，很多Linux分发版都提供了4个独立的桌面工作区。一个工作区可以做交流用，像收发邮件、即时通讯等，一个工作区 用来访问远程服务器或FTP环境，一个工作区则专心编码不受干扰。Windows下也有如Dexpot这样可以实现虚拟桌面的软件，不妨试用一下。\r\n<h2 id="43-盲打与打字速度">4.3 盲打与打字速度</h2>\r\n一般大家经常网上聊天的话，打字速度应该不成问题。但除了盲打26个字母外，像常用的标点符号分号括号引号、数字1-3和8-0、功能键F1和F2、Ctrl/Alt/Shift等最好也能熟悉其位置，这样敲起来才能快如风。\r\n\r\n此外，不管用什么IDE和工具，掌握快捷键，让双手留在键盘脱离鼠标是基本功。不然空有快如风的盲打速度也是不行的。关于我最常使用的IDE的快捷键介绍请参考<a href="http://blog.csdn.net/dc_726/article/details/42784275" target="_blank">《十大Intellij IDEA快捷键》</a>。关于这一部分的积累，别忘了保存到自己的Cheatsheet里。\r\n<h2 id="44-音乐">4.4 音乐</h2>\r\n关于为什么编程时要听音乐有不少<a href="http://blog.jobbole.com/73772/" target="_blank">研究</a>，还都挺有意思的，说是不仅抗干扰还能促兴奋。万能的知乎上还真有这个问题，以及一份推荐的榜单，见<a href="http://www.zhihu.com/question/22059151" target="_blank">有哪些适合编程时听的音乐？</a>。甚至还有个专门的网站<a href="http://musicforprogramming.net/" target="_blank">http://musicforprogramming.net/</a>。这方面因人而异，我个人还是比较习惯这种“抗噪”方式的，最近在听刚看完两季的《Silicon Valley》的OST。\r\n<h2 id="45-面包屑">4.5 面包屑</h2>\r\n当然，被别人干扰和打断在所难免。在离开手头工作之前，一定留下一些线索，比如关键点、思考到哪了等，这就是“面包屑”。这样等继续时就能稍微快一些恢复出“现场”，就像进程的上下文切换一样。\r\n<h3>5.高效编程=工具+方法+体系+专注</h3>\r\n前面根据个人的经验，分享了一些提高编程效率的个人心得。每个人的经历经验不尽相同，相信其实每个人心中都有一份自己的清单。但最最重要的是坚持投入，不断地练习、练习、练习、练习、练习……\r\n\r\n这里引用最近看到的名言自我勉励一下，来自Bruce Lee李小龙：\r\n\r\n“I fear not the man who has practiced 10,000 kicks once, but I fear the man who has practiced one kick 10,000 times.”\r\n我不惧怕把一万种踢法都练一次的人，但我害怕把一种踢法练一万次的人。\r\n\r\n“There are many paths you can follow to reach your destination. However, you’ll never reach the end if you keep changing paths along the way.”\r\n到达目的地的途径有多种。但如果你沿途不断变换路线，你是永远不会到达终点的。\r\n\r\n李笑来老师在《把时间当作朋友》曾说过：“所有学习上的成功，都只靠两件事：策略和坚持，<b>而坚持本身就应该是最重要的策略之一</b>。”水滴石穿，绳锯木断。不要害怕走弯路，只要专注地一直走就一定会到终点！祝福大家都能抵达梦想的彼岸，成为自己心中最厉害的那个人！', '【转载】高效程序员的狂暴之路', '', 'publish', 'open', 'open', '', '%e3%80%90%e8%bd%ac%e8%bd%bd%e3%80%91%e9%ab%98%e6%95%88%e7%a8%8b%e5%ba%8f%e5%91%98%e7%9a%84%e7%8b%82%e6%9a%b4%e4%b9%8b%e8%b7%af', '', '', '2015-10-15 14:11:49', '2015-10-15 06:11:49', '', 0, 'http://acheng1314.cn/?p=48', 0, 'post', '', 1),
(49, 1, '2015-10-15 14:11:49', '2015-10-15 06:11:49', '原文：<a href="http://ink.csdn.net/articles/show/55ec359bd076e95f4f672646">点击这里</a>\r\n\r\n不觉间已经工作六年，回想第一天实习的场景历历在目、恍若昨日。六年已 足以令许多人转管理、转产品、转测试、转行，也一定有人还在坚守着编码，只因热爱。遇到过形形色色的经理、架构师、运维、性能工程师等等，还是觉得写代码 的才是最厉害的！在这里分享一些这些年来修习到的个人心得。也许并不适用于其他人，但对于我却都是最珍贵的“宝藏”。也谨以此文纪念在代码堆里度过的青 春~ 看到这些点点滴滴的收获，就会感到所有逝去的光阴和挥洒的汗水都是值得的。\r\n<h3>1.启动：得心应手的工具</h3>\r\n<h2 id="11-全能ide">1.1 全能IDE</h2>\r\n关于IDE，目前我使用Intellj IDEA和Sublime Text来应对各种语言的开发。\r\n\r\n在大学期间初学Java时曾使用过MyEclipse，后来职业生涯的前期很自然的过渡到了更加灵活的Eclipse。但两年前经过不断的试用丢弃 再试用，最终我成功从Eclipse转投到了Intellij IDEA阵营。在那之后就一发不可收拾，不仅重度使用Intellij，而且还短暂试用过JetBrains旗下的各种产 品，Phpstorm，Pycharm，RubyMine包括最新的Clion。Google也选择Intellij作为其Android Studio的基础。<b>作为Java开发者，当然最钟爱的还是Intellij，其智能程度实在是太震撼了！</b>强烈建议还在观望的同学们去<a href="https://www.jetbrains.com/idea/" target="_blank">官网</a>上看一下介绍它的各种操作的小动图。\r\n\r\n好像很容易地，Intellj IDEA就成了我Java开发的不二选择。然而对于其他语言，尤其是C/C++却一直没找到合适的IDE。从Vim+各种插件打造IDE到Emacs到 Visual Studio和CodeBlocks，一直没有令我满意的，直到碰见了Sublime Text。现在它不仅是我除了Java外所有语言的IDE，还是我的博客编写工具和代码库，在后面的<a href="http://blog.csdn.net/dc_726/article/details/47427791#32-codebase" target="_blank">3.2 Codebase</a>一节你将会看到。详见<a href="http://blog.csdn.net/dc_726/article/details/45749805" target="_blank">《Sublime Text 3下C/C++开发环境搭建》</a>。\r\n<h2 id="12-uml和设计">1.2 UML和设计</h2>\r\nUML领域中的好软件不少，如Rose、EA，大多是商业付费软件。在开源免费软件中，StarUML比较不错，2.0版相比1.0做了不少改进， 尤其是整体外观漂亮多了。配合Visio和Power Designer等补充UML以外的设计图，如业务泳道图、流程图、拓扑图、ER关系图等，几乎可以满足大部分日常需求。\r\n<h2 id="13-shell">1.3 Shell</h2>\r\n日常工作中免不了要使用Unix/Linux命令，或者直接连接到远程的服务器上做一些操作。在Windows上模拟Unix/Linux命令当然 要用Cygwin，在Windows上使用那些实用的Unix命令可以大幅度提升效率，特别是你经常需要处理文本时。而SSH客户端一般就用SSH Secure Shell或XShell，前者比较简单，后者更强大但文件传输功能却要装另外的软件XFtp。\r\n\r\n当然，如果直接使用Linux做个人桌面那最好不过了，在Linux上开发和在Windows上不仅是工具多了顺手了，简直就是思维方式上的剧变！详见<a href="http://blog.csdn.net/dc_726/article/details/45399457" target="_blank">《Linux Mint 17一周使用体验》</a>。\r\n<h2 id="14-虚拟环境">1.4 虚拟环境</h2>\r\nVirtualBox是个不错的小巧快速的虚拟机软件，VMWare也许更加强大，但是有些太重型了。用VirtualBox装一些常用的操作系统 和软件，以及测试环境和测试数据，然后做成快照留作以后反复使用，可以免去很多做环境的麻烦。而且在虚拟机里怎么折腾都行，降低了使用实体机的风险。这方 面，目前后起之秀应该是Docker吧，造福了广大的开发者。因为还没有研究过所以先不做评论了。\r\n<h3>2.加速：简单有效的方法论</h3>\r\n<h2 id="21-动手前先思考">2.1 动手前先思考</h2>\r\n作为一名程序员，拿到任务后就有要立即编码的冲动很正常，但为了减少走弯路，我们要克制这种冲动。大到大型产品和项目的开发，小到一个算法的实现， 都少不了先行设计和思考。大项目要做高层次架构设计，提前识别出那些“坑”，可以有效地降低风险，避免返工。小算法要证明其正确性，避免一些逻辑思维上的 漏洞。关于一段代码的正确性，详见<a href="http://blog.csdn.net/dc_726/article/details/44785395" target="_blank">《程序员修炼之路-(1)基础(下)：正确性证明》</a>。\r\n\r\n<b>关于思考的程度也要掌握一个“度”，不然就可能出现“过度设计”的问题</b>。这个“度”感觉很难掌握，只能靠时间和经验不断培养判断和直觉，一点点地就学会了评估哪些设计现在做很费时应该放后，哪些设计现在做不麻烦但要是不做以后改起来就很费时。\r\n<h2 id="22-简洁的代码">2.2 简洁的代码</h2>\r\n说到简洁和干净，就不得不提一些经典书籍对我的巨大影响。在大学时入手了《Code Complete》（代码大全，听了这狗血的中译名真以为是各种代码的百科全书），很幸运地能在正式入行前就看到这本书，它让我少走了很多弯路，甚至养成 了一些代码“洁癖”，有时甚至起个类名都要想半天，但时间证明一切都是值得的。\r\n\r\n后来又看到了《Clean Code》，不仅讲述了简洁代码方方面面的技巧，还将写出简洁的代码上升到了职业宣言的高度。详情见<a href="http://blog.csdn.net/dc_726/article/details/8739587" target="_blank">《代码整洁之道》读书笔记</a>。\r\n<blockquote>《Clean Code》中结尾的一段话令人印象深刻，至今难忘：\r\n“2005年，Elisabeth递给我一条绿色腕带，上面写着Test Obsessed沉迷测试的字样，我高兴地带上。我发现自己无法取下腕带，不仅是因为腕带很紧，而且那也是精神上的紧箍咒。那腕带就是我职业道德的宣告， 也是我承诺尽己所能写出最好代码的提示。写代码时，我用余光瞟见它。它一直<b>提醒我，我做了写出整洁代码的承诺。”</b></blockquote>\r\n<h2 id="23-重构">2.3 重构</h2>\r\n个人虽然没有深入接触过敏捷开发，但潜移默化中还是接触到了不少敏捷开发中好的思想和方法，比如接下来要说的重构。\r\n\r\n重构的技巧有很多，可能不知不觉中我们就已经用到了。从最简单的重命名、成员变量提取，到类提取、继承层次中的上下移动等等。MF的那本《重构：改 善既有代码的设计》配上侯捷的翻译非常经典！这里再次强烈推荐Intellij IDEA，因为它的重构功能实在太强大了，可以节省很多时间，大幅度提升我们的开发效率。\r\n<h2 id="24-单元测试与tdd">2.4 单元测试与TDD</h2>\r\n测试驱动开发(TDD)的方法和技巧其实很简单，随之而来的好处却很多。一是对于很复杂的功能可以先实现最简单功能，再逐步完善；二是有了单元测 试，可以通过失败的用例直接找到对应出问题的代码；三是通过TDD不断迭代出的代码，设计比较合理，后期更加容易维护。任何技术都不可避免的有两面 性，TDD也不例外，详见<a href="http://blog.csdn.net/dc_726/article/details/23258769" target="_blank">《TDD实践感悟》</a>。\r\n\r\n关于其他测试，如集成测试，使用Selenium还可以将测试自动化。录制好的测试脚本可以自动播放，鼠标键盘就像“无人自动驾驶”一样。\r\n<h2 id="25-持续集成">2.5 持续集成</h2>\r\n<b>持续集成(CI)被誉为项目的心跳</b>。善加利用的话，不仅能统一大家开发的步调，集成上各种有用的插件，例如 JCoverage、FindBugs、CheckStyle和各种打包部署脚本，就能有效地提高代码质量和开发测试速度。CI配合上UAT环境能让客户 尽早地看到目前的产品是否是自己想要的那个样子，避免越到后期越是不好修改，尽早暴露问题。Java世界里最流行的开源CI服务器应该就是Jenkins 了吧，参考<a href="http://blog.csdn.net/dc_726/article/details/9069457" target="_blank">《Jenkins持续集成环境搭建》</a>。\r\n<h2 id="26-代码审查">2.6 代码审查</h2>\r\n尽管TDD和CI能自动化一部分工作，帮助我们提升代码质量和开发效率，但人工的代码审查还是少不了的。自查、互查、一起查，就像结对编程一样，这也是像高手“取经”的好机会！\r\n<h2 id="27-领域模型">2.7 领域模型</h2>\r\n一套准确而稳定的模型层的价值是难以估量的，这对于当前业务代码以及未来升级版本都是具有很大作用的。这也是面向对象分析设计(OOAD)、领域驱 动设计(DDD)等方法论的“战场”。虽然对DDD没有太多的实践经验，但还是推荐一下，不是要全盘接收，而是从中汲取最精华的思想。<a href="http://dddsample.sourceforge.net/" target="_blank">DDD Sample Application</a>是不错的上手学习资料。此外，配合领域模型定制领域语言(DSL)也是个趋势，值得关注。\r\n<h3>3.增压：持续的知识积累</h3>\r\n<h2 id="31-知识体系">3.1 知识体系</h2>\r\n前两部分已经介绍了工具和方法论，能让我们迅速地加速到百公里。然而这些知识大部分是谁都可以从网上获得的。像工具谁都能安装，除非你有“私房”插 件，像方法论也都有很多著作可以学习。要想彪到二百迈，唯有厚积薄发，形成个人风格和套路。因此，一定要有自己的长期计划，并坚定地实行，毕竟慢工出细 活。这是我的长期计划<a href="http://blog.csdn.net/dc_726/article/details/44785453" target="_blank">《程序员修炼之路》</a>：\r\n\r\n计算机数学：离散数学与具体数学。\r\n\r\n算法分析设计：常用设计技巧和数据结构。\r\n\r\n系统平台：体系结构、操作系统、网络、编译原理和数据库。\r\n\r\n代码设计：架构设计、设计模式、方法论。\r\n\r\n代码实现：开发工具和主流编程语言。\r\n\r\n测试验证：单元测试、性能测试和优化。\r\n<h2 id="32-codebase">3.2 Codebase</h2>\r\n<b>传说每个高手都有自己的一套代码库</b>。为了成为高手，我也再不断积累自己的代码库。我的代码库主要来自工作中的项目实践和业务时间的编程练习。对应最常用的两种开发工具，我的代码库也分为两大部分：Java代码和LinuxC系统编程代码。\r\n\r\n首先来看一下我个人Java库的编排，经过多次修改定为如下结构：cs算法/编译原理等计算机科学基础、java基础API、framework主 流框架、mobile移动开发、bigdata大数据hadoop/缓存/机器学习等、ui用户界面、architecture架构设计、project 业余和开源项目代码、verification测试验证代码等。依赖管理方面使用了最顺手的Maven。\r\n<pre class="hljs cpp">$ tree -I <span class="hljs-string">"target|*.iml|pom.xml"</span> -L <span class="hljs-number">1</span> codebase/\r\ncodebase/\r\n|-- <span class="hljs-number">01</span>-cs\r\n|-- <span class="hljs-number">02</span>-java\r\n|-- <span class="hljs-number">03</span>-framework\r\n|-- <span class="hljs-number">04</span>-mobile\r\n|-- <span class="hljs-number">05</span>-bigdata\r\n|-- <span class="hljs-number">06</span>-ui\r\n|-- <span class="hljs-number">07</span>-architecture\r\n|-- <span class="hljs-number">08</span>-project\r\n|-- <span class="hljs-number">09</span>-verification\r\n|-- autobak.sh\r\n`-- README.md</pre>\r\n目前我使用Sublime Text管理Java领域外的各种知识和代码，其编排主要按照系统由底层向上分为：汇编语言、C语言(基础、算法、系统、实践、开源软件)、脚本(批处理、Shell脚本、Cheatsheet)、其他语言(Golang和Python等等)。\r\n<pre class="hljs sql">$ tree -L 2 syspace\r\nsyspace\r\n|<span class="hljs-comment">-- 1-assembly</span>\r\n|<span class="hljs-comment">-- 2-ccpp</span>\r\n|   |<span class="hljs-comment">-- 21-basic</span>\r\n|   |<span class="hljs-comment">-- 22-algorithm</span>\r\n|   |<span class="hljs-comment">-- 23-system</span>\r\n|   |<span class="hljs-comment">-- 24-pragmatic</span>\r\n|   `<span class="hljs-comment">-- 25-opensource</span>\r\n|<span class="hljs-comment">-- 3-batch</span>\r\n|   |<span class="hljs-comment">-- 31-bat</span>\r\n|   |<span class="hljs-comment">-- 32-shell</span>\r\n|   `<span class="hljs-comment">-- 33-cheatsheet</span>\r\n|<span class="hljs-comment">-- 4-lang</span>\r\n|   |<span class="hljs-comment">-- 41-golang</span>\r\n|   |<span class="hljs-comment">-- 42-python</span>\r\n|   `<span class="hljs-comment">-- 43-php</span>\r\n|<span class="hljs-comment">-- autobak.sh</span>\r\n`<span class="hljs-comment">-- index.md</span></pre>\r\n此外，不仅要整理自己的代码，还可以收集一些小巧精悍的开源软件来学习，比如通过Nginx代码学习网络编程，通过Redis学习C语言和数据结构，通过Lua学习编译解释原理，通过libevent学习并发编程。\r\n<blockquote>Linus说过：RTFSC(Read The F***ing Source Code)。实习时在OpenJPA源码里寻寻觅觅，因为找不到一个功能的扩展点而改了源码并替到Jar包里，最后还真好使了。然后就一发不可收拾，沉浸 在了Spring源码的海洋。有时一马平川地，从上到下看到底，如当时OSGi有个开源的小内核Felix。有时也会碰壁而半途而废，记得有次看 Derby，一直看到存储层，记得好像用antrl生成的SQL解释器吧，因为功力不够而搁浅了。现在不管是C、Java还是其他主流编程语言的开源代 码，不能说毫不费力，但是很快速地就都能看出个大概流程，不得不说也是不断阅读的结果。总而言之，阅读优秀源码的收获之大是无法用语言形容的。</blockquote>\r\n<h2 id="33-cheatsheet">3.3 Cheatsheet</h2>\r\nCheatsheet小抄，也就是一些来自日常工作常用操作的速查表，主要由常用配置、命令、快捷键等组成。我目前分为数据库、IDE、各种语言、 中间件、操作系统等。网上有一些现成的在线Cheatsheet，不过还是自己整理的比较熟悉。实际工作中它也帮助我节约了大量的重复查询工作和宝贵时 间。\r\n<pre class="hljs sql">$ tree 33-cheatsheet/\r\n33-cheatsheet/\r\n|<span class="hljs-comment">-- db</span>\r\n|<span class="hljs-comment">-- ide</span>\r\n|<span class="hljs-comment">-- lang</span>\r\n|<span class="hljs-comment">-- midware</span>\r\n|<span class="hljs-comment">-- os</span>\r\n`<span class="hljs-comment">-- revctl</span></pre>\r\n关于这一部分，每个人可能都会攒了一些实用的小脚本。但要注意的是，有些工作是不适合或者说不值得用脚本自动化的。<b>《卓有成效的程序员》里说过：“别让自动化的努力变成剪牦牛毛”</b>。剪牦牛毛是一件很危险的事，它会吃掉你大把的时间，得到的却只是一个不实用、只能用几次或者隐患很大的脚本工具。\r\n<h2 id="34-脚手架">3.4 脚手架</h2>\r\n脚手架(Scaffold)是个好东西，它可以帮助我们自动生成代码的“骨架”。之后利用我们代码库的积累对骨架做微调，不断在上面添加功能就能快 速地形成一个可用的应用程序。Maven提供的Archetype插件是个不错的脚手架，很多项目都基于它提供了代码模板。当然如果想要定制自己的模板也 很简单，具体参照<a href="http://blog.csdn.net/dc_726/article/details/13676207" target="_blank">《Maven原型骨架及常见问题》</a>。\r\n\r\n除了Maven这种构建工具外，IDE一般也提供了各种小脚手架来生成小段代码。最常见的就是IDE里的代码模板和补全功能，如果觉得不过瘾可以编写自己的模板和IDE扩展插件，就像RubyMine对Rails的脚手架的支持一样。详情见<a href="http://blog.csdn.net/dc_726/article/details/14139155" target="_blank">《Intellij IDEA插件开发入门》</a>。\r\n<h2 id="35-blog">3.5 Blog</h2>\r\n写博客的作用可不容小觑！没做过总结的知识那只是别人的知识，没做过读书笔记的书不久后就变得跟没读过一样。当碰到了总结整理过的知识时，搜索你的Blog会给你最快速的答案。<b>不要以为这跟用谷歌搜索一样，一遍遍翻看你自己用心写的东西和看别人的东西是完全不同的概念！</b>而且中文技术文章里有太多的粗制滥造的内容、乱七八糟的排版和无数不注明出处的转发。所以看完书的一章或做完什么有用的练习后，一定要趁热打铁赶紧总结一下！\r\n\r\n那么用什么写呢？之前试用过Emacs下的Orgmode，之前接触过轻量级标记语言，配合Emcas感觉挺惊艳的！后来遇到了Sublime后连写博客都迁到它上面了，因为它的Markdown插件实在是太好用了。详见<a href="http://blog.csdn.net/dc_726/article/details/45749869" target="_blank">《Markdown语法及SublimeText下使用技巧》</a>。\r\n<h2 id="36-多元化">3.6 多元化</h2>\r\n随着写代码的时间长了、见识多了，解决问题的手段就会多元化起来。什么样的编程语言适合用什么样的项目，什么样的架构设计适合什么样的场景。编程语 言多元化，架构设计的多元化，开发工具的多元化，最终才能促成我们解决现实问题的思维的多元化。Thoughtworks维护了一个<a href="http://www.thoughtworks.com/radar" target="_blank">技术雷达</a>，定期会更新技术、平台、工具等方面的技术趋势。\r\n<h3>4.狂暴：专注与抗干扰</h3>\r\n尽管有了上面各种辅助，但是如果不能静下心来编码一切都白费了。要么看会这儿看会那儿，要么就是在嘈杂的环境中无法集中注意力。尽管不起眼，这却是提高效率的“最后一公里”。\r\n<h2 id="41-免分心模式">4.1 免分心模式</h2>\r\n各种IDE一般都提供了全屏模式，像Sublime Text还额外提供了”Distraction Free Mode”抗干扰模式，让你专心地投入到一个打开文件的编辑工作。\r\n<h2 id="42-虚拟桌面">4.2 虚拟桌面</h2>\r\n用过Linux桌面版的都知道，很多Linux分发版都提供了4个独立的桌面工作区。一个工作区可以做交流用，像收发邮件、即时通讯等，一个工作区 用来访问远程服务器或FTP环境，一个工作区则专心编码不受干扰。Windows下也有如Dexpot这样可以实现虚拟桌面的软件，不妨试用一下。\r\n<h2 id="43-盲打与打字速度">4.3 盲打与打字速度</h2>\r\n一般大家经常网上聊天的话，打字速度应该不成问题。但除了盲打26个字母外，像常用的标点符号分号括号引号、数字1-3和8-0、功能键F1和F2、Ctrl/Alt/Shift等最好也能熟悉其位置，这样敲起来才能快如风。\r\n\r\n此外，不管用什么IDE和工具，掌握快捷键，让双手留在键盘脱离鼠标是基本功。不然空有快如风的盲打速度也是不行的。关于我最常使用的IDE的快捷键介绍请参考<a href="http://blog.csdn.net/dc_726/article/details/42784275" target="_blank">《十大Intellij IDEA快捷键》</a>。关于这一部分的积累，别忘了保存到自己的Cheatsheet里。\r\n<h2 id="44-音乐">4.4 音乐</h2>\r\n关于为什么编程时要听音乐有不少<a href="http://blog.jobbole.com/73772/" target="_blank">研究</a>，还都挺有意思的，说是不仅抗干扰还能促兴奋。万能的知乎上还真有这个问题，以及一份推荐的榜单，见<a href="http://www.zhihu.com/question/22059151" target="_blank">有哪些适合编程时听的音乐？</a>。甚至还有个专门的网站<a href="http://musicforprogramming.net/" target="_blank">http://musicforprogramming.net/</a>。这方面因人而异，我个人还是比较习惯这种“抗噪”方式的，最近在听刚看完两季的《Silicon Valley》的OST。\r\n<h2 id="45-面包屑">4.5 面包屑</h2>\r\n当然，被别人干扰和打断在所难免。在离开手头工作之前，一定留下一些线索，比如关键点、思考到哪了等，这就是“面包屑”。这样等继续时就能稍微快一些恢复出“现场”，就像进程的上下文切换一样。\r\n<h3>5.高效编程=工具+方法+体系+专注</h3>\r\n前面根据个人的经验，分享了一些提高编程效率的个人心得。每个人的经历经验不尽相同，相信其实每个人心中都有一份自己的清单。但最最重要的是坚持投入，不断地练习、练习、练习、练习、练习……\r\n\r\n这里引用最近看到的名言自我勉励一下，来自Bruce Lee李小龙：\r\n\r\n“I fear not the man who has practiced 10,000 kicks once, but I fear the man who has practiced one kick 10,000 times.”\r\n我不惧怕把一万种踢法都练一次的人，但我害怕把一种踢法练一万次的人。\r\n\r\n“There are many paths you can follow to reach your destination. However, you’ll never reach the end if you keep changing paths along the way.”\r\n到达目的地的途径有多种。但如果你沿途不断变换路线，你是永远不会到达终点的。\r\n\r\n李笑来老师在《把时间当作朋友》曾说过：“所有学习上的成功，都只靠两件事：策略和坚持，<b>而坚持本身就应该是最重要的策略之一</b>。”水滴石穿，绳锯木断。不要害怕走弯路，只要专注地一直走就一定会到终点！祝福大家都能抵达梦想的彼岸，成为自己心中最厉害的那个人！', '【转载】高效程序员的狂暴之路', '', 'inherit', 'closed', 'closed', '', '48-revision-v1', '', '', '2015-10-15 14:11:49', '2015-10-15 06:11:49', '', 48, 'http://acheng1314.cn/?p=49', 0, 'revision', '', 0),
(51, 1, '2015-10-21 16:57:00', '0000-00-00 00:00:00', '首先对文章中会出现的错别字等说声抱歉，但是一般都是不会影响阅读体验的。现在互联网上很火的红衣教主，也是每次都先说抱歉，所以我也先报歉一下\n\n接着来介绍下什么是ActionBar。官方原文介绍是这样：The action bar is one of the most important design elements you can implement for your app''s activities.（ActionBar是在你的Activity上面你能实现的最重要的设计基础之一。）', '[安卓]安卓开发之ActionBar', '', 'draft', 'open', 'open', '', '', '', '', '2015-10-21 16:57:00', '2015-10-21 08:57:00', '', 0, 'http://acheng1314.cn/?p=51', 0, 'post', '', 0),
(52, 1, '2015-10-25 07:00:20', '2015-10-24 23:00:20', '目前我们手机上面常见的电子商城有：淘宝、天猫、京东等，具体多少我们就不一一列举了。\r\n\r\n这些商城类的APP，首先要简洁、快捷、大方等特性，同时要做到一个完整的APP，我们要有很多人员参与，如：产品经理、项目经理、架构师、程序员、美工、测试等等人员参与，程序员负责编码，具体功能转换成电脑能识别的、能实现的功能性编码，也就是我们常说的“代码”。至于其他职业，感兴趣的请自行搜索。\r\n\r\n假定现在我们什么都有了，只剩下程序员编码了，首先我们要先根据项目经理提出的产品来分析我们能否将他的功能转换成“代码”，接着根据我能实现的东西来分析采用何种方式实现，关于“代码优化”这个东西，我们要根据实际要求来做，而且原则是不变的“计算机资源是有限的，合理的资源分配，才是我们所谓的优化”。\r\n\r\n开篇我们先说了这么多题外话，现在我们具体根据项目来分析。\r\n\r\n电子商城APP常用的功能模块：闪屏页面（欢迎界面）、引导页（新手引导）、主页、搜索页、设置页、商品详情页、商品分类页（品牌、功能等分类）、购物车、付款页等等。\r\n\r\n打开APP要做的事情的业务流程如下：\r\n\r\n&nbsp;\r\n\r\n[caption id="attachment_53" align="alignleft" width="226"]<a href="http://acheng1314.cn/wp-content/uploads/2015/10/打开APP的流程图.png"><img class="size-medium wp-image-53" src="http://acheng1314.cn/wp-content/uploads/2015/10/打开APP的流程图-226x300.png" alt="打开APP流程图" width="226" height="300" /></a> 打开APP流程图[/caption]\r\n\r\n当然，进入首页后，我们的操作就很多了，可以直接根据现实的信息来选择感兴趣的商品浏览，也可以登陆个人账号进行个人操作，或者还可以搜索商品来浏览商品，甚至修改APP设置和登出个人账号等等操作。具体的我们后面再细说。\r\n\r\n当然光有这个是不够的，首先，我们要根据产品原型来定下页面架构，常见的首页结构有：tabHost、FragmentTabHost、Fragment+Viewpager（前面我的CSDN博客上面有介绍）等等，花样虽然多，但是我们主要是为了方便用户操作而设计的类似选项卡（底部导航）的操作。\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n因为工作的调动，后面电子商城主要讲一下各个模块和界面架构，至于具体一些的其他东西，可以给我QQ：859107393留言一起讨论。', '【安卓】打造电子商城APP之01--介绍', '', 'publish', 'open', 'open', '', '%e3%80%90%e5%ae%89%e5%8d%93%e3%80%91%e6%89%93%e9%80%a0%e7%94%b5%e5%ad%90%e5%95%86%e5%9f%8eapp%e4%b9%8b01-%e4%bb%8b%e7%bb%8d', '', '', '2015-10-28 23:54:41', '2015-10-28 15:54:41', '', 0, 'http://acheng1314.cn/?p=52', 0, 'post', '', 1),
(53, 1, '2015-10-25 06:47:15', '2015-10-24 22:47:15', '', '打开APP的流程图', '打开APP流程图', 'inherit', 'open', 'closed', '', '%e6%89%93%e5%bc%80app%e7%9a%84%e6%b5%81%e7%a8%8b%e5%9b%be', '', '', '2015-10-25 06:48:06', '2015-10-24 22:48:06', '', 52, 'http://acheng1314.cn/wp-content/uploads/2015/10/打开APP的流程图.png', 0, 'attachment', 'image/png', 0),
(54, 1, '2015-10-25 07:00:20', '2015-10-24 23:00:20', '目前我们手机上面常见的电子商城有：淘宝、天猫、京东等，具体多少我们就不一一列举了。\r\n\r\n这些商城类的APP，首先要简洁、快捷、大方等特性，同时要做到一个完整的APP，我们要有很多人员参与，如：产品经理、项目经理、架构师、程序员、美工、测试等等人员参与，程序员负责编码，具体功能转换成电脑能识别的、能实现的功能性编码，也就是我们常说的“代码”。至于其他职业，感兴趣的请自行搜索。\r\n\r\n假定现在我们什么都有了，只剩下程序员编码了，首先我们要先根据项目经理提出的产品来分析我们能否将他的功能转换成“代码”，接着根据我能实现的东西来分析采用何种方式实现，关于“代码优化”这个东西，我们要根据实际要求来做，而且原则是不变的“计算机资源是有限的，合理的资源分配，才是我们所谓的优化”。\r\n\r\n开篇我们先说了这么多题外话，现在我们具体根据项目来分析。\r\n\r\n电子商城APP常用的功能模块：闪屏页面（欢迎界面）、引导页（新手引导）、主页、搜索页、设置页、商品详情页、商品分类页（品牌、功能等分类）、购物车、付款页等等。\r\n\r\n打开APP要做的事情的业务流程如下：\r\n\r\n&nbsp;\r\n\r\n[caption id="attachment_53" align="alignleft" width="226"]<a href="http://acheng1314.cn/wp-content/uploads/2015/10/打开APP的流程图.png"><img class="size-medium wp-image-53" src="http://acheng1314.cn/wp-content/uploads/2015/10/打开APP的流程图-226x300.png" alt="打开APP流程图" width="226" height="300" /></a> 打开APP流程图[/caption]\r\n\r\n当然，进入首页后，我们的操作就很多了，可以直接根据现实的信息来选择感兴趣的商品浏览，也可以登陆个人账号进行个人操作，或者还可以搜索商品来浏览商品，甚至修改APP设置和登出个人账号等等操作。具体的我们后面再细说。\r\n\r\n当然光有这个是不够的，首先，我们要根据产品原型来定下页面架构，常见的首页结构有：tabHost、FragmentTabHost、Fragment+Viewpager（前面我的CSDN博客上面有介绍）等等，花样虽然多，但是我们主要是为了方便用户操作而设计的类似选项卡的操作。\r\n\r\n暂时先介绍到这里，有事外出。', '【安卓】打造电子商城APP之01--介绍', '', 'inherit', 'closed', 'closed', '', '52-revision-v1', '', '', '2015-10-25 07:00:20', '2015-10-24 23:00:20', '', 52, 'http://acheng1314.cn/?p=54', 0, 'revision', '', 0),
(55, 1, '2015-10-28 23:54:29', '2015-10-28 15:54:29', '目前我们手机上面常见的电子商城有：淘宝、天猫、京东等，具体多少我们就不一一列举了。\n\n这些商城类的APP，首先要简洁、快捷、大方等特性，同时要做到一个完整的APP，我们要有很多人员参与，如：产品经理、项目经理、架构师、程序员、美工、测试等等人员参与，程序员负责编码，具体功能转换成电脑能识别的、能实现的功能性编码，也就是我们常说的“代码”。至于其他职业，感兴趣的请自行搜索。\n\n假定现在我们什么都有了，只剩下程序员编码了，首先我们要先根据项目经理提出的产品来分析我们能否将他的功能转换成“代码”，接着根据我能实现的东西来分析采用何种方式实现，关于“代码优化”这个东西，我们要根据实际要求来做，而且原则是不变的“计算机资源是有限的，合理的资源分配，才是我们所谓的优化”。\n\n开篇我们先说了这么多题外话，现在我们具体根据项目来分析。\n\n电子商城APP常用的功能模块：闪屏页面（欢迎界面）、引导页（新手引导）、主页、搜索页、设置页、商品详情页、商品分类页（品牌、功能等分类）、购物车、付款页等等。\n\n打开APP要做的事情的业务流程如下：\n\n&nbsp;\n\n[caption id="attachment_53" align="alignleft" width="226"]<a href="http://acheng1314.cn/wp-content/uploads/2015/10/打开APP的流程图.png"><img class="size-medium wp-image-53" src="http://acheng1314.cn/wp-content/uploads/2015/10/打开APP的流程图-226x300.png" alt="打开APP流程图" width="226" height="300" /></a> 打开APP流程图[/caption]\n\n当然，进入首页后，我们的操作就很多了，可以直接根据现实的信息来选择感兴趣的商品浏览，也可以登陆个人账号进行个人操作，或者还可以搜索商品来浏览商品，甚至修改APP设置和登出个人账号等等操作。具体的我们后面再细说。\n\n当然光有这个是不够的，首先，我们要根据产品原型来定下页面架构，常见的首页结构有：tabHost、FragmentTabHost、Fragment+Viewpager（前面我的CSDN博客上面有介绍）等等，花样虽然多，但是我们主要是为了方便用户操作而设计的类似选项卡（底部导航）的操作。\n\n&nbsp;\n\n&nbsp;\n\n因为工作的调动，后面电子商城主要讲一下各个模块和界面架构，至于具体一些的其他东西，可以给我QQ留言一起讨论。', '【安卓】打造电子商城APP之01--介绍', '', 'inherit', 'closed', 'closed', '', '52-autosave-v1', '', '', '2015-10-28 23:54:29', '2015-10-28 15:54:29', '', 52, 'http://acheng1314.cn/?p=55', 0, 'revision', '', 0),
(56, 1, '2015-10-25 15:34:14', '2015-10-25 07:34:14', '目前我们手机上面常见的电子商城有：淘宝、天猫、京东等，具体多少我们就不一一列举了。\r\n\r\n这些商城类的APP，首先要简洁、快捷、大方等特性，同时要做到一个完整的APP，我们要有很多人员参与，如：产品经理、项目经理、架构师、程序员、美工、测试等等人员参与，程序员负责编码，具体功能转换成电脑能识别的、能实现的功能性编码，也就是我们常说的“代码”。至于其他职业，感兴趣的请自行搜索。\r\n\r\n假定现在我们什么都有了，只剩下程序员编码了，首先我们要先根据项目经理提出的产品来分析我们能否将他的功能转换成“代码”，接着根据我能实现的东西来分析采用何种方式实现，关于“代码优化”这个东西，我们要根据实际要求来做，而且原则是不变的“计算机资源是有限的，合理的资源分配，才是我们所谓的优化”。\r\n\r\n开篇我们先说了这么多题外话，现在我们具体根据项目来分析。\r\n\r\n电子商城APP常用的功能模块：闪屏页面（欢迎界面）、引导页（新手引导）、主页、搜索页、设置页、商品详情页、商品分类页（品牌、功能等分类）、购物车、付款页等等。\r\n\r\n打开APP要做的事情的业务流程如下：\r\n\r\n&nbsp;\r\n\r\n[caption id="attachment_53" align="alignleft" width="226"]<a href="http://acheng1314.cn/wp-content/uploads/2015/10/打开APP的流程图.png"><img class="size-medium wp-image-53" src="http://acheng1314.cn/wp-content/uploads/2015/10/打开APP的流程图-226x300.png" alt="打开APP流程图" width="226" height="300" /></a> 打开APP流程图[/caption]\r\n\r\n当然，进入首页后，我们的操作就很多了，可以直接根据现实的信息来选择感兴趣的商品浏览，也可以登陆个人账号进行个人操作，或者还可以搜索商品来浏览商品，甚至修改APP设置和登出个人账号等等操作。具体的我们后面再细说。\r\n\r\n当然光有这个是不够的，首先，我们要根据产品原型来定下页面架构，常见的首页结构有：tabHost、FragmentTabHost、Fragment+Viewpager（前面我的CSDN博客上面有介绍）等等，花样虽然多，但是我们主要是为了方便用户操作而设计的类似选项卡（底部导航）的操作。\r\n\r\n&nbsp;', '【安卓】打造电子商城APP之01--介绍', '', 'inherit', 'closed', 'closed', '', '52-revision-v1', '', '', '2015-10-25 15:34:14', '2015-10-25 07:34:14', '', 52, 'http://acheng1314.cn/?p=56', 0, 'revision', '', 0),
(57, 1, '2015-10-28 23:54:41', '2015-10-28 15:54:41', '目前我们手机上面常见的电子商城有：淘宝、天猫、京东等，具体多少我们就不一一列举了。\r\n\r\n这些商城类的APP，首先要简洁、快捷、大方等特性，同时要做到一个完整的APP，我们要有很多人员参与，如：产品经理、项目经理、架构师、程序员、美工、测试等等人员参与，程序员负责编码，具体功能转换成电脑能识别的、能实现的功能性编码，也就是我们常说的“代码”。至于其他职业，感兴趣的请自行搜索。\r\n\r\n假定现在我们什么都有了，只剩下程序员编码了，首先我们要先根据项目经理提出的产品来分析我们能否将他的功能转换成“代码”，接着根据我能实现的东西来分析采用何种方式实现，关于“代码优化”这个东西，我们要根据实际要求来做，而且原则是不变的“计算机资源是有限的，合理的资源分配，才是我们所谓的优化”。\r\n\r\n开篇我们先说了这么多题外话，现在我们具体根据项目来分析。\r\n\r\n电子商城APP常用的功能模块：闪屏页面（欢迎界面）、引导页（新手引导）、主页、搜索页、设置页、商品详情页、商品分类页（品牌、功能等分类）、购物车、付款页等等。\r\n\r\n打开APP要做的事情的业务流程如下：\r\n\r\n&nbsp;\r\n\r\n[caption id="attachment_53" align="alignleft" width="226"]<a href="http://acheng1314.cn/wp-content/uploads/2015/10/打开APP的流程图.png"><img class="size-medium wp-image-53" src="http://acheng1314.cn/wp-content/uploads/2015/10/打开APP的流程图-226x300.png" alt="打开APP流程图" width="226" height="300" /></a> 打开APP流程图[/caption]\r\n\r\n当然，进入首页后，我们的操作就很多了，可以直接根据现实的信息来选择感兴趣的商品浏览，也可以登陆个人账号进行个人操作，或者还可以搜索商品来浏览商品，甚至修改APP设置和登出个人账号等等操作。具体的我们后面再细说。\r\n\r\n当然光有这个是不够的，首先，我们要根据产品原型来定下页面架构，常见的首页结构有：tabHost、FragmentTabHost、Fragment+Viewpager（前面我的CSDN博客上面有介绍）等等，花样虽然多，但是我们主要是为了方便用户操作而设计的类似选项卡（底部导航）的操作。\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n因为工作的调动，后面电子商城主要讲一下各个模块和界面架构，至于具体一些的其他东西，可以给我QQ：859107393留言一起讨论。', '【安卓】打造电子商城APP之01--介绍', '', 'inherit', 'closed', 'closed', '', '52-revision-v1', '', '', '2015-10-28 23:54:41', '2015-10-28 15:54:41', '', 52, 'http://acheng1314.cn/?p=57', 0, 'revision', '', 0),
(58, 1, '2016-11-27 12:59:51', '2016-11-27 04:59:51', '', '【生活感言】第一次跳槽总结', '', 'private', 'open', 'open', '', '%e3%80%90%e7%94%9f%e6%b4%bb%e6%84%9f%e8%a8%80%e3%80%91%e7%ac%ac%e4%b8%80%e6%ac%a1%e8%b7%b3%e6%a7%bd%e6%80%bb%e7%bb%93', '', '', '2016-11-27 12:59:51', '2016-11-27 04:59:51', '', 0, 'http://acheng1314.cn/?p=58', 0, 'post', '', 0),
(59, 1, '2015-11-10 11:02:08', '0000-00-00 00:00:00', '布局文件中控件的src属性在代码中用setImageResource来解决', '安卓开发小细节', '', 'draft', 'open', 'open', '', '', '', '', '2015-11-10 11:02:08', '2015-11-10 03:02:08', '', 0, 'http://acheng1314.cn/?p=59', 0, 'post', '', 0),
(62, 1, '2015-11-09 19:52:53', '2015-11-09 11:52:53', '<blockquote>wx.scanQRCode({\r\n\r\ndesc:''scanQRCode desc'',\r\n\r\nneedResult:0,//默认为0，扫描结果交给微信处理，1则直接返回结果\r\n\r\nscanType:["qrCode","barCode"],//可以指定扫描二维码还是一维码，默认二者都有\r\n\r\nsyccess:function(res){\r\n\r\nvar result = res.resultStr; //当needRuslt为1时，扫码返回结果\r\n\r\n}\r\n\r\n});</blockquote>', '【微信扫一扫接口调用】', '', 'publish', 'open', 'open', '', '%e3%80%90%e5%be%ae%e4%bf%a1%e6%89%ab%e4%b8%80%e6%89%ab%e6%8e%a5%e5%8f%a3%e8%b0%83%e7%94%a8%e3%80%91', '', '', '2015-11-09 19:52:53', '2015-11-09 11:52:53', '', 0, 'http://acheng1314.cn/?p=62', 0, 'post', '', 0),
(63, 1, '2015-11-09 19:52:53', '2015-11-09 11:52:53', '<blockquote>wx.scanQRCode({\r\n\r\ndesc:''scanQRCode desc'',\r\n\r\nneedResult:0,//默认为0，扫描结果交给微信处理，1则直接返回结果\r\n\r\nscanType:["qrCode","barCode"],//可以指定扫描二维码还是一维码，默认二者都有\r\n\r\nsyccess:function(res){\r\n\r\nvar result = res.resultStr; //当needRuslt为1时，扫码返回结果\r\n\r\n}\r\n\r\n});</blockquote>', '【微信扫一扫接口调用】', '', 'inherit', 'closed', 'closed', '', '62-revision-v1', '', '', '2015-11-09 19:52:53', '2015-11-09 11:52:53', '', 62, 'http://acheng1314.cn/?p=63', 0, 'revision', '', 0),
(65, 1, '2015-11-10 11:02:08', '2015-11-10 03:02:08', '布局文件中控件的src属性在代码中用setImageResource来解决', '安卓开发小细节', '', 'inherit', 'closed', 'closed', '', '59-revision-v1', '', '', '2015-11-10 11:02:08', '2015-11-10 03:02:08', '', 59, 'http://acheng1314.cn/?p=65', 0, 'revision', '', 0),
(67, 1, '2015-11-13 01:43:10', '2015-11-12 17:43:10', '// 得到屏幕的宽度和高度\r\nDisplayMetrics dm=new DisplayMetrics();\r\nthis.getWindowManager().getDefaultDisplay().getMetrics(dm);\r\nscreenWidth = dm.widthPixels;\r\nscreenHeight = dm.heightPixels;', '【安卓获取屏幕宽高，不用过时API】', '', 'publish', 'open', 'open', '', '%e3%80%90%e5%ae%89%e5%8d%93%e8%8e%b7%e5%8f%96%e5%b1%8f%e5%b9%95%e5%ae%bd%e9%ab%98%ef%bc%8c%e4%b8%8d%e7%94%a8%e8%bf%87%e6%97%b6api%e3%80%91', '', '', '2015-11-13 01:43:10', '2015-11-12 17:43:10', '', 0, 'http://acheng1314.cn/?p=67', 0, 'post', '', 0),
(68, 1, '2015-11-13 01:43:10', '2015-11-12 17:43:10', '// 得到屏幕的宽度和高度\r\nDisplayMetrics dm=new DisplayMetrics();\r\nthis.getWindowManager().getDefaultDisplay().getMetrics(dm);\r\nscreenWidth = dm.widthPixels;\r\nscreenHeight = dm.heightPixels;', '【安卓获取屏幕宽高，不用过时API】', '', 'inherit', 'closed', 'closed', '', '67-revision-v1', '', '', '2015-11-13 01:43:10', '2015-11-12 17:43:10', '', 67, 'http://acheng1314.cn/?p=68', 0, 'revision', '', 0),
(69, 1, '2015-11-13 01:52:03', '2015-11-12 17:52:03', '<pre>&lt;?xml version="1.0" encoding="utf-8"?&gt;\r\n&lt;shape xmlns:android="http://schemas.android.com/apk/res/android"&gt;\r\n    &lt;solid android:color="#FF3334" /&gt;\r\n    &lt;corners android:radius="3dp" /&gt;\r\n    &lt;padding\r\n        android:bottom="2dp"\r\n        android:left="2dp"\r\n        android:right="2dp"\r\n        android:top="2dp" /&gt;\r\n&lt;/shape&gt;</pre>', '【TextView背景磨圆角资源文件完成】', '', 'publish', 'open', 'open', '', '%e3%80%90textview%e8%83%8c%e6%99%af%e7%a3%a8%e5%9c%86%e8%a7%92%e8%b5%84%e6%ba%90%e6%96%87%e4%bb%b6%e5%ae%8c%e6%88%90%e3%80%91', '', '', '2015-11-13 01:52:03', '2015-11-12 17:52:03', '', 0, 'http://acheng1314.cn/?p=69', 0, 'post', '', 0),
(70, 1, '2015-11-13 01:52:03', '2015-11-12 17:52:03', '<pre>&lt;?xml version="1.0" encoding="utf-8"?&gt;\r\n&lt;shape xmlns:android="http://schemas.android.com/apk/res/android"&gt;\r\n    &lt;solid android:color="#FF3334" /&gt;\r\n    &lt;corners android:radius="3dp" /&gt;\r\n    &lt;padding\r\n        android:bottom="2dp"\r\n        android:left="2dp"\r\n        android:right="2dp"\r\n        android:top="2dp" /&gt;\r\n&lt;/shape&gt;</pre>', '【TextView背景磨圆角资源文件完成】', '', 'inherit', 'closed', 'closed', '', '69-revision-v1', '', '', '2015-11-13 01:52:03', '2015-11-12 17:52:03', '', 69, 'http://acheng1314.cn/?p=70', 0, 'revision', '', 0),
(71, 1, '2015-11-13 14:04:12', '2015-11-13 06:04:12', '很多人（应该是所有用过DDMS或者是ANDROID自带的任务管理器）玩android细心一点\r\n<div>的就会发现，当打开一个app，进入主页面，跳到登陆画面，登陆之后返回到菜单，</div>\r\n<div>再点击菜单上的任意一个页面，点击了，退回主菜单，看一下ddms，这时的heap used</div>\r\n<div>大约在3.5m左右。</div>\r\n<div></div>\r\n<div>这时候如果再点击一个页面，退回来，再点击同一个，再退回来，</div>\r\n<div>然后无数次（理论上的，呵呵，10次即OK<img title="Android下Activity结束（finish()）之后没有释放内存问题的解决方法初探" src="http://www.sinaimg.cn/uc/myshow/blog/misc/gif/E___7394ZH00SIGG.gif" alt="Android下Activity结束（finish()）之后没有释放内存问题的解决方法初探" />）。一般来说（除了</div>\r\n<div>极个别的app），退回来就是结束当前activity, 也就是使得activity</div>\r\n<div>的生命周期走到最后的一刻destory，之后理论上这个activity被销毁，</div>\r\n<div>与之相关所有的内存被GC，内存还会在3.5m。</div>\r\n<div></div>\r\n<div>结果是，仅仅10次重复打开关闭同一个activity，内存使用变成5.2m了！</div>\r\n<div>而且这多出来的1.7m怎么也去不掉！狂点cause gc？ 不理你！我被抛弃了！</div>\r\n<div>情急之下，我的重要的恋人----java顷刻之间让我感觉那么的陌生，她最</div>\r\n<div>重要，也是和C相比最美丽的地方之一----垃圾回收立即烟消云散，荡然无存。</div>\r\n<div></div>\r\n<div>。。。。。。。</div>\r\n<div>。。。。。。。</div>\r\n<div></div>\r\n<div>痛苦的思索之后，冷静下来，从java的GC机制开始分析。。。。。 <wbr /></div>\r\n<div></div>\r\n<div>我们说<strong>GC（Garbage Collector）</strong>的真正目的是什么？显而易见。</div>\r\n<div><strong>回收没有利用价值的被占用的内存。那么怎样的</strong></div>\r\n<div><strong>内存区域不能被使用或者访问了呢？没有被其他对象</strong></div>\r\n<div><strong>引用到的对象，或者说是引用数为0的对象。 <wbr /></strong></div>\r\n<div><strong> </strong></div>\r\n<div><strong>从以上的分析，可以猜想，对象没被释放，因为有</strong></div>\r\n<div><strong>其他对象在引用它。所以，我们把activity结束掉后</strong></div>\r\n<div><strong>必须释放那些在activity中new出来或者是从其他地方</strong></div>\r\n<div><strong>比如findViewById() getResourceById()这种地方获得</strong></div>\r\n<div><strong>的activity字段。 解决方案显而易见：</strong></div>\r\n<div><strong> </strong></div>\r\n<div><strong>public void onDestory(){</strong></div>\r\n<div><strong> <wbr />  <wbr />  <wbr />textView1 = null;</strong></div>\r\n<div><strong> <wbr />  <wbr />  <wbr />dataList = null;</strong></div>\r\n<div><strong> <wbr />  <wbr />  <wbr />...... <wbr /></strong></div>\r\n<div><strong> <wbr />  <wbr />  <wbr />//etc.</strong></div>\r\n<div>super.onDestory();</div>\r\n<div><strong>} <wbr /></strong></div>\r\n<div><strong> </strong></div>\r\n<div><strong>不出所料，测试结果，反复打开关闭一个页面消耗了1.3m的内存，比</strong></div>\r\n<div><strong>之前1.7m的情况好了30%左右。可是，这依然没有满足需求。</strong></div>\r\n<div><strong> </strong></div>\r\n<div>那么，还有什么地方能提高内存的回收率呢？？</div>\r\n<div></div>\r\n<div>我们再回到前面提到的GC的性质和功能。如果GC不释放一部分内存，那么这一部分</div>\r\n<div>的内存<strong>肯定是还被其他的对象引用。</strong></div>\r\n<div>但是如何去找到关闭了activity而仍然被引用的对象呢？</div>\r\n<div>这里就是问题的关键了。</div>\r\n<div>一般性会写安卓的朋友们都会想起一个方法，就是前面提到的findViewById()</div>\r\n<div></div>\r\n<div>说起这个方法，我们一般都想到把findViewById()的对象赋给自定义Activity的类字段。</div>\r\n<div>比如说，textView = findViewById(R.id.tv1);</div>\r\n<div>在ondestory里把 textView = null加上，在destory的时候activity将不再引用textView</div>\r\n<div>所指的对象实体了。然而，findViewById()是根据id创建一个view，还是返回在onCreate里已经创建的view?</div>\r\n<div></div>\r\n<div>茫茫大海，没有指南针，我们只能迷失在苍苍大海之中。</div>\r\n<div></div>\r\n<div>哎？这就不对了，你说郑和下西洋环游地球最终返回中国，这是一个奇迹。可是，在</div>\r\n<div>没有通讯仪器的古代，加上单打独斗独闯七大洲，没有方向概念克不行啊。。。</div>\r\n<div></div>\r\n<div>所以，为了您的安全，请带好指南针。</div>\r\n<div>话题回来，我们这里有一个类似的东东，那就是在程序的海洋中旅行的人们耳熟能详的，</div>\r\n<div>居家旅行必备的（名字就不用说了，这个大家都应该知道）</div>\r\n<div>http://developer.android.com/reference</div>\r\n<div></div>\r\n<div>那么这个doc告诉了我们什么呢？findViewById的定义。</div>\r\n<div>Finds a view that was identified by the id attribute from the XML that was processed in <wbr /><code><a href="http://developer.android.com/reference/android/app/Activity.html#onCreate(android.os.Bundle)" target="_blank">onCreate(Bundle)</a></code>. <wbr /></div>\r\n<div></div>\r\n<div>很明显，findViewById返回在onCreate已经创建了的view，并且指定的ID与通过setContentView中指定的</div>\r\n<div>xml文件匹配。那么，前面所说的onDestory()里面的置null 方法的作用就很有限了。</div>\r\n<div></div>\r\n<div>我们来看一下setContentView的文档。</div>\r\n<div>Set the activity content from a layout resource. The resource will be inflated, adding all top-level views to the activity.</div>\r\n<div></div>\r\n<div>看到inflate这个词，应该想到另外一种findView之外构建activity页面的方法了。不难理解，inflate就是</div>\r\n<div>建立一个新的android.view.View对象。结合setContentView的定义，activity也是通过setContentView并</div>\r\n<div>传入一个xml来构建整个activity的view对象以及子对象的！</div>\r\n<div></div>\r\n<div>就是说，在onCreate的setContentview 里，有一个contentview = viewInflater.Inflate();或者类似的东东。</div>\r\n<div></div>\r\n<div>所以，我们应该在ondestory把由setContentview创建的contentview置为null，就一劳永逸了。</div>\r\n<div>但是，这句话我们看不到，因为在Activity父类里。</div>\r\n<div>同样，我们也不能在ondestory把contentview = null; 因为是父类的私有字段！</div>\r\n<div></div>\r\n<div>经过一番思考，想出了一种方法，很多人应该也能感觉到，那就是setContentview（null）！</div>\r\n<div>通过这样的方法，改变父类Activity的contentview对象的引用，让oncreate的setContentview创建的</div>\r\n<div>那个view对象失去引用，被GC掉。</div>\r\n<div>然而，编译报错，NullPointerException。于是写了一个空的viewxml，命名view_null。</div>\r\n<div>编译成功，运行正常。结果是，10个打开关闭一共消耗了0.6M的内存。</div>', '【转】activity如何在结束时候释放更多无用资源。', '', 'publish', 'open', 'open', '', '%e3%80%90%e8%bd%ac%e3%80%91activity%e5%a6%82%e4%bd%95%e5%9c%a8%e7%bb%93%e6%9d%9f%e6%97%b6%e5%80%99%e9%87%8a%e6%94%be%e6%9b%b4%e5%a4%9a%e6%97%a0%e7%94%a8%e8%b5%84%e6%ba%90%e3%80%82', '', '', '2015-11-13 14:04:12', '2015-11-13 06:04:12', '', 0, 'http://acheng1314.cn/?p=71', 0, 'post', '', 1),
(72, 1, '2015-11-13 14:04:12', '2015-11-13 06:04:12', '很多人（应该是所有用过DDMS或者是ANDROID自带的任务管理器）玩android细心一点\r\n<div>的就会发现，当打开一个app，进入主页面，跳到登陆画面，登陆之后返回到菜单，</div>\r\n<div>再点击菜单上的任意一个页面，点击了，退回主菜单，看一下ddms，这时的heap used</div>\r\n<div>大约在3.5m左右。</div>\r\n<div></div>\r\n<div>这时候如果再点击一个页面，退回来，再点击同一个，再退回来，</div>\r\n<div>然后无数次（理论上的，呵呵，10次即OK<img title="Android下Activity结束（finish()）之后没有释放内存问题的解决方法初探" src="http://www.sinaimg.cn/uc/myshow/blog/misc/gif/E___7394ZH00SIGG.gif" alt="Android下Activity结束（finish()）之后没有释放内存问题的解决方法初探" />）。一般来说（除了</div>\r\n<div>极个别的app），退回来就是结束当前activity, 也就是使得activity</div>\r\n<div>的生命周期走到最后的一刻destory，之后理论上这个activity被销毁，</div>\r\n<div>与之相关所有的内存被GC，内存还会在3.5m。</div>\r\n<div></div>\r\n<div>结果是，仅仅10次重复打开关闭同一个activity，内存使用变成5.2m了！</div>\r\n<div>而且这多出来的1.7m怎么也去不掉！狂点cause gc？ 不理你！我被抛弃了！</div>\r\n<div>情急之下，我的重要的恋人----java顷刻之间让我感觉那么的陌生，她最</div>\r\n<div>重要，也是和C相比最美丽的地方之一----垃圾回收立即烟消云散，荡然无存。</div>\r\n<div></div>\r\n<div>。。。。。。。</div>\r\n<div>。。。。。。。</div>\r\n<div></div>\r\n<div>痛苦的思索之后，冷静下来，从java的GC机制开始分析。。。。。 <wbr /></div>\r\n<div></div>\r\n<div>我们说<strong>GC（Garbage Collector）</strong>的真正目的是什么？显而易见。</div>\r\n<div><strong>回收没有利用价值的被占用的内存。那么怎样的</strong></div>\r\n<div><strong>内存区域不能被使用或者访问了呢？没有被其他对象</strong></div>\r\n<div><strong>引用到的对象，或者说是引用数为0的对象。 <wbr /></strong></div>\r\n<div><strong> </strong></div>\r\n<div><strong>从以上的分析，可以猜想，对象没被释放，因为有</strong></div>\r\n<div><strong>其他对象在引用它。所以，我们把activity结束掉后</strong></div>\r\n<div><strong>必须释放那些在activity中new出来或者是从其他地方</strong></div>\r\n<div><strong>比如findViewById() getResourceById()这种地方获得</strong></div>\r\n<div><strong>的activity字段。 解决方案显而易见：</strong></div>\r\n<div><strong> </strong></div>\r\n<div><strong>public void onDestory(){</strong></div>\r\n<div><strong> <wbr />  <wbr />  <wbr />textView1 = null;</strong></div>\r\n<div><strong> <wbr />  <wbr />  <wbr />dataList = null;</strong></div>\r\n<div><strong> <wbr />  <wbr />  <wbr />...... <wbr /></strong></div>\r\n<div><strong> <wbr />  <wbr />  <wbr />//etc.</strong></div>\r\n<div>super.onDestory();</div>\r\n<div><strong>} <wbr /></strong></div>\r\n<div><strong> </strong></div>\r\n<div><strong>不出所料，测试结果，反复打开关闭一个页面消耗了1.3m的内存，比</strong></div>\r\n<div><strong>之前1.7m的情况好了30%左右。可是，这依然没有满足需求。</strong></div>\r\n<div><strong> </strong></div>\r\n<div>那么，还有什么地方能提高内存的回收率呢？？</div>\r\n<div></div>\r\n<div>我们再回到前面提到的GC的性质和功能。如果GC不释放一部分内存，那么这一部分</div>\r\n<div>的内存<strong>肯定是还被其他的对象引用。</strong></div>\r\n<div>但是如何去找到关闭了activity而仍然被引用的对象呢？</div>\r\n<div>这里就是问题的关键了。</div>\r\n<div>一般性会写安卓的朋友们都会想起一个方法，就是前面提到的findViewById()</div>\r\n<div></div>\r\n<div>说起这个方法，我们一般都想到把findViewById()的对象赋给自定义Activity的类字段。</div>\r\n<div>比如说，textView = findViewById(R.id.tv1);</div>\r\n<div>在ondestory里把 textView = null加上，在destory的时候activity将不再引用textView</div>\r\n<div>所指的对象实体了。然而，findViewById()是根据id创建一个view，还是返回在onCreate里已经创建的view?</div>\r\n<div></div>\r\n<div>茫茫大海，没有指南针，我们只能迷失在苍苍大海之中。</div>\r\n<div></div>\r\n<div>哎？这就不对了，你说郑和下西洋环游地球最终返回中国，这是一个奇迹。可是，在</div>\r\n<div>没有通讯仪器的古代，加上单打独斗独闯七大洲，没有方向概念克不行啊。。。</div>\r\n<div></div>\r\n<div>所以，为了您的安全，请带好指南针。</div>\r\n<div>话题回来，我们这里有一个类似的东东，那就是在程序的海洋中旅行的人们耳熟能详的，</div>\r\n<div>居家旅行必备的（名字就不用说了，这个大家都应该知道）</div>\r\n<div>http://developer.android.com/reference</div>\r\n<div></div>\r\n<div>那么这个doc告诉了我们什么呢？findViewById的定义。</div>\r\n<div>Finds a view that was identified by the id attribute from the XML that was processed in <wbr /><code><a href="http://developer.android.com/reference/android/app/Activity.html#onCreate(android.os.Bundle)" target="_blank">onCreate(Bundle)</a></code>. <wbr /></div>\r\n<div></div>\r\n<div>很明显，findViewById返回在onCreate已经创建了的view，并且指定的ID与通过setContentView中指定的</div>\r\n<div>xml文件匹配。那么，前面所说的onDestory()里面的置null 方法的作用就很有限了。</div>\r\n<div></div>\r\n<div>我们来看一下setContentView的文档。</div>\r\n<div>Set the activity content from a layout resource. The resource will be inflated, adding all top-level views to the activity.</div>\r\n<div></div>\r\n<div>看到inflate这个词，应该想到另外一种findView之外构建activity页面的方法了。不难理解，inflate就是</div>\r\n<div>建立一个新的android.view.View对象。结合setContentView的定义，activity也是通过setContentView并</div>\r\n<div>传入一个xml来构建整个activity的view对象以及子对象的！</div>\r\n<div></div>\r\n<div>就是说，在onCreate的setContentview 里，有一个contentview = viewInflater.Inflate();或者类似的东东。</div>\r\n<div></div>\r\n<div>所以，我们应该在ondestory把由setContentview创建的contentview置为null，就一劳永逸了。</div>\r\n<div>但是，这句话我们看不到，因为在Activity父类里。</div>\r\n<div>同样，我们也不能在ondestory把contentview = null; 因为是父类的私有字段！</div>\r\n<div></div>\r\n<div>经过一番思考，想出了一种方法，很多人应该也能感觉到，那就是setContentview（null）！</div>\r\n<div>通过这样的方法，改变父类Activity的contentview对象的引用，让oncreate的setContentview创建的</div>\r\n<div>那个view对象失去引用，被GC掉。</div>\r\n<div>然而，编译报错，NullPointerException。于是写了一个空的viewxml，命名view_null。</div>\r\n<div>编译成功，运行正常。结果是，10个打开关闭一共消耗了0.6M的内存。</div>', '【转】activity如何在结束时候释放更多无用资源。', '', 'inherit', 'closed', 'closed', '', '71-revision-v1', '', '', '2015-11-13 14:04:12', '2015-11-13 06:04:12', '', 71, 'http://acheng1314.cn/?p=72', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(73, 1, '2015-11-16 17:42:36', '2015-11-16 09:42:36', '<h1>java中url汉字编码互相转换实例</h1>\r\n<h6>############</h6>\r\n<pre>public class URLtoUTF8 {\r\n    //转换为%E4%BD%A0形式\r\n    public static String toUtf8String(String s) {\r\n        StringBuffer sb = new StringBuffer();\r\n        for (int i = 0; i &lt; s.length(); i++) {\r\n            char c = s.charAt(i);\r\n            if (c &gt;= 0 &amp;&amp; c &lt;= 255) {\r\n                sb.append(c);\r\n            } else {\r\n                byte[] b;\r\n                try {\r\n                    b = String.valueOf(c).getBytes("utf-8");\r\n                } catch (Exception ex) {\r\n                    System.out.println(ex);\r\n                    b = new byte[0];\r\n                }\r\n                for (int j = 0; j &lt; b.length; j++) {\r\n                    int k = b[j];\r\n                    if (k &lt; 0)\r\n                        k += 256;\r\n                    sb.append("%" + Integer.toHexString(k).toUpperCase());\r\n                }\r\n            }\r\n        }\r\n        return sb.toString();\r\n    }\r\n    //将%E4%BD%A0转换为汉字 \r\n    public static String unescape(String s) {\r\n        StringBuffer sbuf = new StringBuffer();\r\n        int l = s.length();\r\n        int ch = -1;\r\n        int b, sumb = 0;\r\n        for (int i = 0, more = -1; i &lt; l; i++) {\r\n            /* Get next byte b from URL segment s */\r\n            switch (ch = s.charAt(i)) {\r\n                case ''%'':\r\n                    ch = s.charAt(++i);\r\n                    int hb = (Character.isDigit((char) ch) ? ch - ''0''\r\n                            : 10 + Character.toLowerCase((char) ch) - ''a'') &amp; 0xF;\r\n                    ch = s.charAt(++i);\r\n                    int lb = (Character.isDigit((char) ch) ? ch - ''0''\r\n                            : 10 + Character.toLowerCase((char) ch) - ''a'') &amp; 0xF;\r\n                    b = (hb &lt;&lt; 4) | lb;\r\n                    break;\r\n                case ''+'':\r\n                    b = '' '';\r\n                    break;\r\n                default:\r\n                    b = ch;\r\n            }\r\n            /* Decode byte b as UTF-8, sumb collects incomplete chars */\r\n            if ((b &amp; 0xc0) == 0x80) { // 10xxxxxx (continuation byte)   \r\n                sumb = (sumb &lt;&lt; 6) | (b &amp; 0x3f); // Add 6 bits to sumb   \r\n                if (--more == 0)\r\n                    sbuf.append((char) sumb); // Add char to sbuf   \r\n            } else if ((b &amp; 0x80) == 0x00) { // 0xxxxxxx (yields 7 bits)   \r\n                sbuf.append((char) b); // Store in sbuf   \r\n            } else if ((b &amp; 0xe0) == 0xc0) { // 110xxxxx (yields 5 bits)   \r\n                sumb = b &amp; 0x1f;\r\n                more = 1; // Expect 1 more byte   \r\n            } else if ((b &amp; 0xf0) == 0xe0) { // 1110xxxx (yields 4 bits)   \r\n                sumb = b &amp; 0x0f;\r\n                more = 2; // Expect 2 more bytes   \r\n            } else if ((b &amp; 0xf8) == 0xf0) { // 11110xxx (yields 3 bits)   \r\n                sumb = b &amp; 0x07;\r\n                more = 3; // Expect 3 more bytes   \r\n            } else if ((b &amp; 0xfc) == 0xf8) { // 111110xx (yields 2 bits)   \r\n                sumb = b &amp; 0x03;\r\n                more = 4; // Expect 4 more bytes   \r\n            } else /*if ((b &amp; 0xfe) == 0xfc)*/{ // 1111110x (yields 1 bit)   \r\n                sumb = b &amp; 0x01;\r\n                more = 5; // Expect 5 more bytes   \r\n            }\r\n            /* We don''t test if the UTF-8 encoding is well-formed */\r\n        }\r\n        return sbuf.toString();\r\n    }\r\n\r\n    public static void main(String[] args){\r\n        System.out.println(URLtoUTF8.toUtf8String("你"));\r\n        System.out.println(URLtoUTF8.unescape("%E4%BD%A0%20%E5%A5%BD"));\r\n\r\n    }\r\n}\r\n\r\n############\r\n运行结果：\r\n%E4%BD%A0\r\n你 好</pre>\r\n&nbsp;\r\n<pre>\r\n\r\n</pre>\r\n&nbsp;', 'java中url汉字编码互相转换实例', '', 'publish', 'open', 'open', '', 'java%e4%b8%adurl%e6%b1%89%e5%ad%97%e7%bc%96%e7%a0%81%e4%ba%92%e7%9b%b8%e8%bd%ac%e6%8d%a2%e5%ae%9e%e4%be%8b', '', '', '2015-11-16 17:42:36', '2015-11-16 09:42:36', '', 0, 'http://acheng1314.cn/?p=73', 0, 'post', '', 2),
(74, 1, '2015-11-16 17:42:36', '2015-11-16 09:42:36', '<h1>java中url汉字编码互相转换实例</h1>\r\n<h6>############</h6>\r\n<pre>public class URLtoUTF8 {\r\n    //转换为%E4%BD%A0形式\r\n    public static String toUtf8String(String s) {\r\n        StringBuffer sb = new StringBuffer();\r\n        for (int i = 0; i &lt; s.length(); i++) {\r\n            char c = s.charAt(i);\r\n            if (c &gt;= 0 &amp;&amp; c &lt;= 255) {\r\n                sb.append(c);\r\n            } else {\r\n                byte[] b;\r\n                try {\r\n                    b = String.valueOf(c).getBytes("utf-8");\r\n                } catch (Exception ex) {\r\n                    System.out.println(ex);\r\n                    b = new byte[0];\r\n                }\r\n                for (int j = 0; j &lt; b.length; j++) {\r\n                    int k = b[j];\r\n                    if (k &lt; 0)\r\n                        k += 256;\r\n                    sb.append("%" + Integer.toHexString(k).toUpperCase());\r\n                }\r\n            }\r\n        }\r\n        return sb.toString();\r\n    }\r\n    //将%E4%BD%A0转换为汉字 \r\n    public static String unescape(String s) {\r\n        StringBuffer sbuf = new StringBuffer();\r\n        int l = s.length();\r\n        int ch = -1;\r\n        int b, sumb = 0;\r\n        for (int i = 0, more = -1; i &lt; l; i++) {\r\n            /* Get next byte b from URL segment s */\r\n            switch (ch = s.charAt(i)) {\r\n                case ''%'':\r\n                    ch = s.charAt(++i);\r\n                    int hb = (Character.isDigit((char) ch) ? ch - ''0''\r\n                            : 10 + Character.toLowerCase((char) ch) - ''a'') &amp; 0xF;\r\n                    ch = s.charAt(++i);\r\n                    int lb = (Character.isDigit((char) ch) ? ch - ''0''\r\n                            : 10 + Character.toLowerCase((char) ch) - ''a'') &amp; 0xF;\r\n                    b = (hb &lt;&lt; 4) | lb;\r\n                    break;\r\n                case ''+'':\r\n                    b = '' '';\r\n                    break;\r\n                default:\r\n                    b = ch;\r\n            }\r\n            /* Decode byte b as UTF-8, sumb collects incomplete chars */\r\n            if ((b &amp; 0xc0) == 0x80) { // 10xxxxxx (continuation byte)   \r\n                sumb = (sumb &lt;&lt; 6) | (b &amp; 0x3f); // Add 6 bits to sumb   \r\n                if (--more == 0)\r\n                    sbuf.append((char) sumb); // Add char to sbuf   \r\n            } else if ((b &amp; 0x80) == 0x00) { // 0xxxxxxx (yields 7 bits)   \r\n                sbuf.append((char) b); // Store in sbuf   \r\n            } else if ((b &amp; 0xe0) == 0xc0) { // 110xxxxx (yields 5 bits)   \r\n                sumb = b &amp; 0x1f;\r\n                more = 1; // Expect 1 more byte   \r\n            } else if ((b &amp; 0xf0) == 0xe0) { // 1110xxxx (yields 4 bits)   \r\n                sumb = b &amp; 0x0f;\r\n                more = 2; // Expect 2 more bytes   \r\n            } else if ((b &amp; 0xf8) == 0xf0) { // 11110xxx (yields 3 bits)   \r\n                sumb = b &amp; 0x07;\r\n                more = 3; // Expect 3 more bytes   \r\n            } else if ((b &amp; 0xfc) == 0xf8) { // 111110xx (yields 2 bits)   \r\n                sumb = b &amp; 0x03;\r\n                more = 4; // Expect 4 more bytes   \r\n            } else /*if ((b &amp; 0xfe) == 0xfc)*/{ // 1111110x (yields 1 bit)   \r\n                sumb = b &amp; 0x01;\r\n                more = 5; // Expect 5 more bytes   \r\n            }\r\n            /* We don''t test if the UTF-8 encoding is well-formed */\r\n        }\r\n        return sbuf.toString();\r\n    }\r\n\r\n    public static void main(String[] args){\r\n        System.out.println(URLtoUTF8.toUtf8String("你"));\r\n        System.out.println(URLtoUTF8.unescape("%E4%BD%A0%20%E5%A5%BD"));\r\n\r\n    }\r\n}\r\n\r\n############\r\n运行结果：\r\n%E4%BD%A0\r\n你 好</pre>\r\n&nbsp;\r\n<pre>\r\n\r\n</pre>\r\n&nbsp;', 'java中url汉字编码互相转换实例', '', 'inherit', 'closed', 'closed', '', '73-revision-v1', '', '', '2015-11-16 17:42:36', '2015-11-16 09:42:36', '', 73, 'http://acheng1314.cn/?p=74', 0, 'revision', '', 0),
(75, 1, '2015-11-16 18:05:00', '2015-11-16 10:05:00', '<pre>1、startHanlder  创建消息队列\r\n\r\n2、getData4Net   从网络获取数据\r\n\r\n3、initView   初始化布局\r\n\r\n4、initEvent  初始化UI的事件\r\n\r\n5、initData  传入数据\r\n\r\n6、 private class dataThread extends Thread{}  在getData4Net中实例化本类并且start()。\r\n再通过handler来调用initData</pre>', '【安卓开发细节】activity创建流程', '', 'publish', 'open', 'open', '', '%e3%80%90%e5%ae%89%e5%8d%93%e5%bc%80%e5%8f%91%e7%bb%86%e8%8a%82%e3%80%91activity%e5%88%9b%e5%bb%ba%e6%b5%81%e7%a8%8b', '', '', '2015-11-16 18:05:00', '2015-11-16 10:05:00', '', 0, 'http://acheng1314.cn/?p=75', 0, 'post', '', 0),
(76, 1, '2015-11-16 18:05:00', '2015-11-16 10:05:00', '<pre>1、startHanlder  创建消息队列\r\n\r\n2、getData4Net   从网络获取数据\r\n\r\n3、initView   初始化布局\r\n\r\n4、initEvent  初始化UI的事件\r\n\r\n5、initData  传入数据\r\n\r\n6、 private class dataThread extends Thread{}  在getData4Net中实例化本类并且start()。\r\n再通过handler来调用initData</pre>', '【安卓开发细节】activity创建流程', '', 'inherit', 'closed', 'closed', '', '75-revision-v1', '', '', '2015-11-16 18:05:00', '2015-11-16 10:05:00', '', 75, 'http://acheng1314.cn/?p=76', 0, 'revision', '', 0),
(77, 1, '2015-11-20 00:20:19', '2015-11-19 16:20:19', '<h2>一条语句的timertask</h2>\r\n<ul>\r\n	<li>\r\n<pre>new Timer().schedule(new TimerTask() {\r\n    public void run() {\r\n        Message msg = new Message();\r\n        msg.what = R.id.dialogsetCanCancelable;\r\n        handler.sendMessage(msg);\r\n    }\r\n}, 3500);</pre>\r\n代码拆解如下：</li>\r\n	<li>Timer timer = new Timer();</li>\r\n	<li>TimerTask timerTask = new TimerTask(){\r\n<ul>\r\n	<li>public void run() {\r\n<ul>\r\n	<li>Message msg = new Message();</li>\r\n	<li>msg.what = R.id.dialogsetCanCancelable;</li>\r\n	<li>handler.sendMessage(msg);</li>\r\n</ul>\r\n</li>\r\n	<li>}</li>\r\n</ul>\r\n</li>\r\n	<li>};</li>\r\n	<li>timer.schedule(timerTask,3500);</li>\r\n</ul>', '一条语句的timertask', '', 'publish', 'open', 'open', '', '%e4%b8%80%e6%9d%a1%e8%af%ad%e5%8f%a5%e7%9a%84timertask', '', '', '2015-11-20 00:20:19', '2015-11-19 16:20:19', '', 0, 'http://acheng1314.cn/?p=77', 0, 'post', '', 2),
(78, 1, '2015-11-20 00:20:19', '2015-11-19 16:20:19', '<h2>一条语句的timertask</h2>\r\n<ul>\r\n	<li>\r\n<pre>new Timer().schedule(new TimerTask() {\r\n    public void run() {\r\n        Message msg = new Message();\r\n        msg.what = R.id.dialogsetCanCancelable;\r\n        handler.sendMessage(msg);\r\n    }\r\n}, 3500);</pre>\r\n代码拆解如下：</li>\r\n	<li>Timer timer = new Timer();</li>\r\n	<li>TimerTask timerTask = new TimerTask(){\r\n<ul>\r\n	<li>public void run() {\r\n<ul>\r\n	<li>Message msg = new Message();</li>\r\n	<li>msg.what = R.id.dialogsetCanCancelable;</li>\r\n	<li>handler.sendMessage(msg);</li>\r\n</ul>\r\n</li>\r\n	<li>}</li>\r\n</ul>\r\n</li>\r\n	<li>};</li>\r\n	<li>timer.schedule(timerTask,3500);</li>\r\n</ul>', '一条语句的timertask', '', 'inherit', 'closed', 'closed', '', '77-revision-v1', '', '', '2015-11-20 00:20:19', '2015-11-19 16:20:19', '', 77, 'http://acheng1314.cn/?p=78', 0, 'revision', '', 0),
(80, 1, '2015-11-24 17:02:33', '2015-11-24 09:02:33', '<h2>解决安卓连续操作引起的错误</h2>\r\n<ul>\r\n	<li>import android.app.Activity;\r\nimport android.view.MotionEvent;\r\n\r\n/**\r\n* Created by acheng on 2015/11/24.\r\n*/\r\npublic class MyBaseActivity extends Activity {\r\nprivate long downTime = 0;\r\n\r\n@Override\r\npublic boolean dispatchTouchEvent(MotionEvent ev) {\r\n\r\nif (ev.getAction() == MotionEvent.ACTION_DOWN) {\r\nif ((System.currentTimeMillis() - downTime) &gt; 1500) {\r\ndownTime = System.currentTimeMillis();\r\n} else {\r\nreturn true;\r\n}\r\n}\r\nreturn super.dispatchTouchEvent(ev);\r\n}\r\n}</li>\r\n	<li>以上代码解决屏蔽点击</li>\r\n</ul>\r\n&nbsp;\r\n\r\n&nbsp;', '解决安卓开发中的连续点击引起的误操作', '', 'publish', 'open', 'open', '', '%e8%a7%a3%e5%86%b3%e5%ae%89%e5%8d%93%e5%bc%80%e5%8f%91%e4%b8%ad%e7%9a%84%e8%bf%9e%e7%bb%ad%e7%82%b9%e5%87%bb%e5%bc%95%e8%b5%b7%e7%9a%84%e8%af%af%e6%93%8d%e4%bd%9c', '', '', '2015-11-24 17:02:33', '2015-11-24 09:02:33', '', 0, 'http://acheng1314.cn/?p=80', 0, 'post', '', 7),
(81, 1, '2015-11-24 17:02:33', '2015-11-24 09:02:33', '<h2>解决安卓连续操作引起的错误</h2>\r\n<ul>\r\n	<li>import android.app.Activity;\r\nimport android.view.MotionEvent;\r\n\r\n/**\r\n* Created by acheng on 2015/11/24.\r\n*/\r\npublic class MyBaseActivity extends Activity {\r\nprivate long downTime = 0;\r\n\r\n@Override\r\npublic boolean dispatchTouchEvent(MotionEvent ev) {\r\n\r\nif (ev.getAction() == MotionEvent.ACTION_DOWN) {\r\nif ((System.currentTimeMillis() - downTime) &gt; 1500) {\r\ndownTime = System.currentTimeMillis();\r\n} else {\r\nreturn true;\r\n}\r\n}\r\nreturn super.dispatchTouchEvent(ev);\r\n}\r\n}</li>\r\n	<li>以上代码解决屏蔽点击</li>\r\n</ul>\r\n&nbsp;\r\n\r\n&nbsp;', '解决安卓开发中的连续点击引起的误操作', '', 'inherit', 'closed', 'closed', '', '80-revision-v1', '', '', '2015-11-24 17:02:33', '2015-11-24 09:02:33', '', 80, 'http://acheng1314.cn/?p=81', 0, 'revision', '', 0),
(83, 1, '2015-12-20 16:48:48', '2015-12-20 08:48:48', '数据库游标从“一”开始\r\n\r\n如果说项目访问数据库乱码，将中文转换成%UTF-8这种编码的可以解决问题\r\n\r\n也可以在请求后面加上\r\n<blockquote>?useUnicode=true&amp;characterEncoding=UTF-8&amp;useFastDateParsing=false</blockquote>\r\n为了防止数据库注入，我们采用预编译sql语句来解决问题（PreparedStatement）。\r\n\r\n数据库表字段的数据类型对应的java数据类型\r\n\r\n<a href="http://acheng1314.cn/wp-content/uploads/2015/12/0D5B@JJZPWPYUKOY.png"><img class="alignleft size-medium wp-image-84" src="http://acheng1314.cn/wp-content/uploads/2015/12/0D5B@JJZPWPYUKOY-300x187.png" alt="数据库数据类型对应的java数据类型" width="300" height="187" /></a>', '数据库细节', '', 'publish', 'open', 'open', '', '%e6%95%b0%e6%8d%ae%e5%ba%93%e7%bb%86%e8%8a%82', '', '', '2015-12-20 17:30:16', '2015-12-20 09:30:16', '', 0, 'http://acheng1314.cn/?p=83', 0, 'post', '', 0),
(84, 1, '2015-12-20 16:46:18', '2015-12-20 08:46:18', '', '数据库数据类型对应的java数据类型', '', 'inherit', 'open', 'closed', '', '0d5bjjzpwpyukoy', '', '', '2015-12-20 16:46:37', '2015-12-20 08:46:37', '', 83, 'http://acheng1314.cn/wp-content/uploads/2015/12/0D5B@JJZPWPYUKOY.png', 0, 'attachment', 'image/png', 0),
(85, 1, '2015-12-20 16:48:16', '2015-12-20 08:48:16', '数据库游标从1开始\r\n\r\n数据库表字段的数据类型对应的java数据类型\r\n\r\n<a href="http://acheng1314.cn/wp-content/uploads/2015/12/0D5B@JJZPWPYUKOY.png"><img class="alignleft size-medium wp-image-84" src="http://acheng1314.cn/wp-content/uploads/2015/12/0D5B@JJZPWPYUKOY-300x187.png" alt="数据库数据类型对应的java数据类型" width="300" height="187" /></a>', '数据库细节', '', 'inherit', 'closed', 'closed', '', '83-revision-v1', '', '', '2015-12-20 16:48:16', '2015-12-20 08:48:16', '', 83, 'http://acheng1314.cn/?p=85', 0, 'revision', '', 0),
(86, 1, '2015-12-20 16:48:48', '2015-12-20 08:48:48', '数据库游标从“一”开始\r\n\r\n数据库表字段的数据类型对应的java数据类型\r\n\r\n<a href="http://acheng1314.cn/wp-content/uploads/2015/12/0D5B@JJZPWPYUKOY.png"><img class="alignleft size-medium wp-image-84" src="http://acheng1314.cn/wp-content/uploads/2015/12/0D5B@JJZPWPYUKOY-300x187.png" alt="数据库数据类型对应的java数据类型" width="300" height="187" /></a>', '数据库细节', '', 'inherit', 'closed', 'closed', '', '83-revision-v1', '', '', '2015-12-20 16:48:48', '2015-12-20 08:48:48', '', 83, 'http://acheng1314.cn/?p=86', 0, 'revision', '', 0),
(87, 1, '2015-12-20 17:30:04', '2015-12-20 09:30:04', '数据库游标从“一”开始\n\n如果说项目访问数据库乱码，将中文转换成%UTF-8这种编码的可以解决问题\n\n也可以在请求后面加上\n<blockquote>?useUnicode=true&amp;characterEncoding=UTF-8&amp;useFastDateParsing=false</blockquote>\n为了防止数据库注入，我们采用预编译sql语句来解决问题。\n\n数据库表字段的数据类型对应的java数据类型\n\n<a href="http://acheng1314.cn/wp-content/uploads/2015/12/0D5B@JJZPWPYUKOY.png"><img class="alignleft size-medium wp-image-84" src="http://acheng1314.cn/wp-content/uploads/2015/12/0D5B@JJZPWPYUKOY-300x187.png" alt="数据库数据类型对应的java数据类型" width="300" height="187" /></a>', '数据库细节', '', 'inherit', 'closed', 'closed', '', '83-autosave-v1', '', '', '2015-12-20 17:30:04', '2015-12-20 09:30:04', '', 83, 'http://acheng1314.cn/?p=87', 0, 'revision', '', 0),
(88, 1, '2015-12-20 17:27:11', '2015-12-20 09:27:11', '数据库游标从“一”开始\r\n\r\n如果说项目访问数据库乱码，将中文转换成%UTF-8这种编码的可以解决问题\r\n\r\n也可以在请求后面加上\r\n<blockquote>?useUnicode=true&amp;characterEncoding=UTF-8&amp;useFastDateParsing=false</blockquote>\r\n数据库表字段的数据类型对应的java数据类型\r\n\r\n<a href="http://acheng1314.cn/wp-content/uploads/2015/12/0D5B@JJZPWPYUKOY.png"><img class="alignleft size-medium wp-image-84" src="http://acheng1314.cn/wp-content/uploads/2015/12/0D5B@JJZPWPYUKOY-300x187.png" alt="数据库数据类型对应的java数据类型" width="300" height="187" /></a>', '数据库细节', '', 'inherit', 'closed', 'closed', '', '83-revision-v1', '', '', '2015-12-20 17:27:11', '2015-12-20 09:27:11', '', 83, 'http://acheng1314.cn/?p=88', 0, 'revision', '', 0),
(89, 1, '2015-12-20 17:30:16', '2015-12-20 09:30:16', '数据库游标从“一”开始\r\n\r\n如果说项目访问数据库乱码，将中文转换成%UTF-8这种编码的可以解决问题\r\n\r\n也可以在请求后面加上\r\n<blockquote>?useUnicode=true&amp;characterEncoding=UTF-8&amp;useFastDateParsing=false</blockquote>\r\n为了防止数据库注入，我们采用预编译sql语句来解决问题（PreparedStatement）。\r\n\r\n数据库表字段的数据类型对应的java数据类型\r\n\r\n<a href="http://acheng1314.cn/wp-content/uploads/2015/12/0D5B@JJZPWPYUKOY.png"><img class="alignleft size-medium wp-image-84" src="http://acheng1314.cn/wp-content/uploads/2015/12/0D5B@JJZPWPYUKOY-300x187.png" alt="数据库数据类型对应的java数据类型" width="300" height="187" /></a>', '数据库细节', '', 'inherit', 'closed', 'closed', '', '83-revision-v1', '', '', '2015-12-20 17:30:16', '2015-12-20 09:30:16', '', 83, 'http://acheng1314.cn/?p=89', 0, 'revision', '', 0),
(90, 1, '2015-12-23 23:13:53', '2015-12-23 15:13:53', '##电商APP用户版首页优化笔记\r\n\r\n- 首页构成：\r\n* 电商类型APP，用户版首页设计经典模型请参考：手机淘宝、手机天猫、京东商城等。\r\n\r\n* 参考效果图如下：\r\n\r\n<a href="http://acheng1314.cn/wp-content/uploads/2015/12/1-1首页_看图王.jpg"><img class="alignleft wp-image-92 size-large" src="http://acheng1314.cn/wp-content/uploads/2015/12/1-1首页_看图王-313x1024.jpg" alt="(1-1)首页_看图王" width="313" height="1024" /></a>\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n* 首先我们根据上面的效果图可以将首页模块拆分：\r\n* 1、搜索、位置切换\r\n* 2、快捷通道（8宫格导航栏）\r\n* 3、轮播图\r\n* 4、特色推荐\r\n* 5、个性列表\r\n* 6、···等等\r\n- 首页需求分析：\r\n* 1、界面构成\r\n* 界面渲染，分层设计（学过PS的童鞋都知道，底层背景色，UI控件背景色，UI控件图片，UI控件的个数（数量也涉及到渲染效率））\r\n* 自定义toolBar，搜索框其实是一个textView，点击后打开搜索页，地点选择是打开一个popWindow\r\n* 8宫格快捷通道，其实是一个自定义的GridView，通过自定义，可以实现资源更新（无限遐想ing。。。）\r\n* 推荐美食，这里是一个轮播图，通过自定义轮播图实现各种复杂的功能\r\n* 特色推荐，这里根据效果图实现就好了\r\n* 个性列表，这里是一个全撑大的ListView，为什么要全撑大，在ScrollView中默认的ListView是不能完全显示列表的内容的所以需要全撑大，思路重写OnMesure方法\r\n* 注意：界面元素的背景色Background太多会影响屏幕绘制速度，所以越少量的背景色来实现是一个重要的问题\r\n* 2、异常处理\r\n* 无网络处理\r\n* 无SD卡处理\r\n* 程序需要的存储空间不足的处理\r\n* 网络连结缓慢\r\n* 网络数据加载异常\r\n* 3、网络请求\r\n* 网上开源的完善的框架很多，博主常用：KJFramForAndroid里面的KJHttp\r\n* 4、数据缓存\r\n* 思路主要是缓存Json数据\r\n* 5、图片加载\r\n* 一样采用KJFramForAndroid里面的KJBitMap\r\n- 优化：\r\n- 图片加载和网络请求采用单例模式\r\n- 数据缓存放在界面加载后，后者是在闪屏页面完成\r\n- 图片大小根据UI控件大小来自动缩放\r\n- UI精简（快捷通道这里的Item，图片和文字放在同一个TextView中）整个界面的背景色为灰色，GridView为白色背景，item背景色为无，这样简单的处理后减少界面重绘次数\r\n- 控件资源异步加载，通过Handler消息机制实现，主线程不能执行任何耗时操作\r\n- 数据处理和网络请求独立，主界面尽量只用来加载数据展示界面\r\n- 数据加载分主次，然后文字信息先展示，图片资源后加载。', '[原创]电商类APP首页优化', '', 'publish', 'open', 'open', '', '%e5%8e%9f%e5%88%9b%e7%94%b5%e5%95%86%e7%b1%bbapp%e9%a6%96%e9%a1%b5%e4%bc%98%e5%8c%96', '', '', '2016-03-08 09:59:59', '2016-03-08 01:59:59', '', 0, 'http://acheng1314.cn/?p=90', 0, 'post', '', 8),
(91, 1, '2015-12-23 21:11:45', '2015-12-23 13:11:45', '', '[原创]电商类APP首页优化', '', 'inherit', 'closed', 'closed', '', '90-revision-v1', '', '', '2015-12-23 21:11:45', '2015-12-23 13:11:45', '', 90, 'http://acheng1314.cn/?p=91', 0, 'revision', '', 0),
(92, 1, '2015-12-23 21:33:49', '2015-12-23 13:33:49', '', '(1-1)首页_看图王', '', 'inherit', 'open', 'closed', '', '1-1%e9%a6%96%e9%a1%b5_%e7%9c%8b%e5%9b%be%e7%8e%8b', '', '', '2015-12-23 23:16:59', '2015-12-23 15:16:59', '', 90, 'http://acheng1314.cn/wp-content/uploads/2015/12/1-1首页_看图王.jpg', 0, 'attachment', 'image/jpeg', 0),
(93, 1, '2015-12-23 23:13:53', '2015-12-23 15:13:53', '##电商APP用户版首页优化笔记\r\n\r\n- 首页构成：\r\n* 电商类型APP，用户版首页设计经典模型请参考：手机淘宝、手机天猫、京东商城等。\r\n* 参考效果图如下：![](http://acheng1314.cn/wp-content/uploads/2015/12/1-1首页_看图王.jpg)\r\n* 首先我们根据上面的效果图可以将首页模块拆分：\r\n* 1、搜索、位置切换\r\n* 2、快捷通道（8宫格导航栏）\r\n* 3、轮播图\r\n* 4、特色推荐\r\n* 5、个性列表\r\n* 6、···等等\r\n- 首页需求分析：\r\n* 1、界面构成\r\n* 界面渲染，分层设计（学过PS的童鞋都知道，底层背景色，UI控件背景色，UI控件图片，UI控件的个数（数量也涉及到渲染效率））\r\n* 自定义toolBar，搜索框其实是一个textView，点击后打开搜索页，地点选择是打开一个popWindow\r\n* 8宫格快捷通道，其实是一个自定义的GridView，通过自定义，可以实现资源更新（无限遐想ing。。。）\r\n* 推荐美食，这里是一个轮播图，通过自定义轮播图实现各种复杂的功能\r\n* 特色推荐，这里根据效果图实现就好了\r\n* 个性列表，这里是一个全撑大的ListView，为什么要全撑大，在ScrollView中默认的ListView是不能完全显示列表的内容的所以需要全撑大，思路重写OnMesure方法\r\n* 注意：界面元素的背景色Background太多会影响屏幕绘制速度，所以越少量的背景色来实现是一个重要的问题\r\n* 2、异常处理\r\n* 无网络处理\r\n* 无SD卡处理\r\n* 程序需要的存储空间不足的处理\r\n* 网络连结缓慢\r\n* 网络数据加载异常\r\n* 3、网络请求\r\n* 网上开源的完善的框架很多，博主常用：KJFramForAndroid里面的KJHttp\r\n* 4、数据缓存\r\n* 思路主要是缓存Json数据\r\n* 5、图片加载\r\n* 一样采用KJFramForAndroid里面的KJBitMap\r\n- 优化：\r\n- 图片加载和网络请求采用单例模式\r\n- 数据缓存放在界面加载后，后者是在闪屏页面完成\r\n- 图片大小根据UI控件大小来自动缩放\r\n- UI精简（快捷通道这里的Item，图片和文字放在同一个TextView中）整个界面的背景色为灰色，GridView为白色背景，item背景色为无，这样简单的处理后减少界面重绘次数\r\n- 控件资源异步加载，通过Handler消息机制实现，主线程不能执行任何耗时操作\r\n- 数据处理和网络请求独立，主界面尽量只用来加载数据展示界面\r\n- 数据加载分主次，然后文字信息先展示，图片资源后加载。', '[原创]电商类APP首页优化', '', 'inherit', 'closed', 'closed', '', '90-revision-v1', '', '', '2015-12-23 23:13:53', '2015-12-23 15:13:53', '', 90, 'http://acheng1314.cn/?p=93', 0, 'revision', '', 0),
(94, 1, '2015-12-23 23:17:56', '2015-12-23 15:17:56', '##电商APP用户版首页优化笔记\n\n- 首页构成：\n* 电商类型APP，用户版首页设计经典模型请参考：手机淘宝、手机天猫、京东商城等。\n\n* 参考效果图如下：\n\n<a href="http://acheng1314.cn/wp-content/uploads/2015/12/1-1首页_看图王.jpg"><img class="alignleft wp-image-92 size-large" src="http://acheng1314.cn/wp-content/uploads/2015/12/1-1首页_看图王-313x1024.jpg" alt="(1-1)首页_看图王" width="313" height="1024" /></a>\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n* 首先我们根据上面的效果图可以将首页模块拆分：\n* 1、搜索、位置切换\n* 2、快捷通道（8宫格导航栏）\n* 3、轮播图\n* 4、特色推荐\n* 5、个性列表\n* 6、···等等\n- 首页需求分析：\n* 1、界面构成\n* 界面渲染，分层设计（学过PS的童鞋都知道，底层背景色，UI控件背景色，UI控件图片，UI控件的个数（数量也涉及到渲染效率））\n* 自定义toolBar，搜索框其实是一个textView，点击后打开搜索页，地点选择是打开一个popWindow\n* 8宫格快捷通道，其实是一个自定义的GridView，通过自定义，可以实现资源更新（无限遐想ing。。。）\n* 推荐美食，这里是一个轮播图，通过自定义轮播图实现各种复杂的功能\n* 特色推荐，这里根据效果图实现就好了\n* 个性列表，这里是一个全撑大的ListView，为什么要全撑大，在ScrollView中默认的ListView是不能完全显示列表的内容的所以需要全撑大，思路重写OnMesure方法\n* 注意：界面元素的背景色Background太多会影响屏幕绘制速度，所以越少量的背景色来实现是一个重要的问题\n* 2、异常处理\n* 无网络处理\n* 无SD卡处理\n* 程序需要的存储空间不足的处理\n* 网络连结缓慢\n* 网络数据加载异常\n* 3、网络请求\n* 网上开源的完善的框架很多，博主常用：KJFramForAndroid里面的KJHttp\n* 4、数据缓存\n* 思路主要是缓存Json数据\n* 5、图片加载\n* 一样采用KJFramForAndroid里面的KJBitMap\n- 优化：\n- 图片加载和网络请求采用单例模式\n- 数据缓存放在界面加载后，后者是在闪屏页面完成\n- 图片大小根据UI控件大小来自动缩放\n- UI精简（快捷通道这里的Item，图片和文字放在同一个TextView中）整个界面的背景色为灰色，GridView为白色背景，item背景色为无，这样简单的处理后减少界面重绘次数\n- 控件资源异步加载，通过Handler消息机制实现，主线程不能执行任何耗时操作\n- 数据处理和网络请求独立，主界面尽量只用来加载数据展示界面\n- 数据加载分主次，然后文字信息先展示，图片资源后加载。', '[原创]电商类APP首页优化', '', 'inherit', 'closed', 'closed', '', '90-autosave-v1', '', '', '2015-12-23 23:17:56', '2015-12-23 15:17:56', '', 90, 'http://acheng1314.cn/?p=94', 0, 'revision', '', 0),
(95, 1, '2015-12-23 23:18:13', '2015-12-23 15:18:13', '##电商APP用户版首页优化笔记\r\n\r\n- 首页构成：\r\n* 电商类型APP，用户版首页设计经典模型请参考：手机淘宝、手机天猫、京东商城等。\r\n\r\n* 参考效果图如下：\r\n\r\n<a href="http://acheng1314.cn/wp-content/uploads/2015/12/1-1首页_看图王.jpg"><img class="alignleft wp-image-92 size-large" src="http://acheng1314.cn/wp-content/uploads/2015/12/1-1首页_看图王-313x1024.jpg" alt="(1-1)首页_看图王" width="313" height="1024" /></a>\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n* 首先我们根据上面的效果图可以将首页模块拆分：\r\n* 1、搜索、位置切换\r\n* 2、快捷通道（8宫格导航栏）\r\n* 3、轮播图\r\n* 4、特色推荐\r\n* 5、个性列表\r\n* 6、···等等\r\n- 首页需求分析：\r\n* 1、界面构成\r\n* 界面渲染，分层设计（学过PS的童鞋都知道，底层背景色，UI控件背景色，UI控件图片，UI控件的个数（数量也涉及到渲染效率））\r\n* 自定义toolBar，搜索框其实是一个textView，点击后打开搜索页，地点选择是打开一个popWindow\r\n* 8宫格快捷通道，其实是一个自定义的GridView，通过自定义，可以实现资源更新（无限遐想ing。。。）\r\n* 推荐美食，这里是一个轮播图，通过自定义轮播图实现各种复杂的功能\r\n* 特色推荐，这里根据效果图实现就好了\r\n* 个性列表，这里是一个全撑大的ListView，为什么要全撑大，在ScrollView中默认的ListView是不能完全显示列表的内容的所以需要全撑大，思路重写OnMesure方法\r\n* 注意：界面元素的背景色Background太多会影响屏幕绘制速度，所以越少量的背景色来实现是一个重要的问题\r\n* 2、异常处理\r\n* 无网络处理\r\n* 无SD卡处理\r\n* 程序需要的存储空间不足的处理\r\n* 网络连结缓慢\r\n* 网络数据加载异常\r\n* 3、网络请求\r\n* 网上开源的完善的框架很多，博主常用：KJFramForAndroid里面的KJHttp\r\n* 4、数据缓存\r\n* 思路主要是缓存Json数据\r\n* 5、图片加载\r\n* 一样采用KJFramForAndroid里面的KJBitMap\r\n- 优化：\r\n- 图片加载和网络请求采用单例模式\r\n- 数据缓存放在界面加载后，后者是在闪屏页面完成\r\n- 图片大小根据UI控件大小来自动缩放\r\n- UI精简（快捷通道这里的Item，图片和文字放在同一个TextView中）整个界面的背景色为灰色，GridView为白色背景，item背景色为无，这样简单的处理后减少界面重绘次数\r\n- 控件资源异步加载，通过Handler消息机制实现，主线程不能执行任何耗时操作\r\n- 数据处理和网络请求独立，主界面尽量只用来加载数据展示界面\r\n- 数据加载分主次，然后文字信息先展示，图片资源后加载。', '[原创]电商类APP首页优化', '', 'inherit', 'closed', 'closed', '', '90-revision-v1', '', '', '2015-12-23 23:18:13', '2015-12-23 15:18:13', '', 90, 'http://acheng1314.cn/?p=95', 0, 'revision', '', 0),
(96, 1, '2015-12-23 23:19:41', '2015-12-23 15:19:41', '##电商APP用户版首页优化笔记\r\n\r\n- 首页构成：\r\n* 电商类型APP，用户版首页设计经典模型请参考：手机淘宝、手机天猫、京东商城等。\r\n\r\n* 参考效果图如下：\r\n\r\n<a href="http://acheng1314.cn/wp-content/uploads/2015/12/1-1首页_看图王.jpg"><img class="alignleft wp-image-92 size-large" src="http://acheng1314.cn/wp-content/uploads/2015/12/1-1首页_看图王-313x1024.jpg" alt="(1-1)首页_看图王" width="313" height="1024" /></a>\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n* 首先我们根据上面的效果图可以将首页模块拆分：\r\n* 1、搜索、位置切换\r\n* 2、快捷通道（8宫格导航栏）\r\n* 3、轮播图\r\n* 4、特色推荐\r\n* 5、个性列表\r\n* 6、···等等\r\n- 首页需求分析：\r\n* 1、界面构成\r\n* 界面渲染，分层设计（学过PS的童鞋都知道，底层背景色，UI控件背景色，UI控件图片，UI控件的个数（数量也涉及到渲染效率））\r\n* 自定义toolBar，搜索框其实是一个textView，点击后打开搜索页，地点选择是打开一个popWindow\r\n* 8宫格快捷通道，其实是一个自定义的GridView，通过自定义，可以实现资源更新（无限遐想ing。。。）\r\n* 推荐美食，这里是一个轮播图，通过自定义轮播图实现各种复杂的功能\r\n* 特色推荐，这里根据效果图实现就好了\r\n* 个性列表，这里是一个全撑大的ListView，为什么要全撑大，在ScrollView中默认的ListView是不能完全显示列表的内容的所以需要全撑大，思路重写OnMesure方法\r\n* 注意：界面元素的背景色Background太多会影响屏幕绘制速度，所以越少量的背景色来实现是一个重要的问题\r\n* 2、异常处理\r\n* 无网络处理\r\n* 无SD卡处理\r\n* 程序需要的存储空间不足的处理\r\n* 网络连结缓慢\r\n* 网络数据加载异常\r\n* 3、网络请求\r\n* 网上开源的完善的框架很多，博主常用：KJFramForAndroid里面的KJHttp\r\n* 4、数据缓存\r\n* 思路主要是缓存Json数据\r\n* 5、图片加载\r\n* 一样采用KJFramForAndroid里面的KJBitMap\r\n- 优化：\r\n- 图片加载和网络请求采用单例模式\r\n- 数据缓存放在界面加载后，后者是在闪屏页面完成\r\n- 图片大小根据UI控件大小来自动缩放\r\n- UI精简（快捷通道这里的Item，图片和文字放在同一个TextView中）整个界面的背景色为灰色，GridView为白色背景，item背景色为无，这样简单的处理后减少界面重绘次数\r\n- 控件资源异步加载，通过Handler消息机制实现，主线程不能执行任何耗时操作\r\n- 数据处理和网络请求独立，主界面尽量只用来加载数据展示界面\r\n- 数据加载分主次，然后文字信息先展示，图片资源后加载。', '[原创]电商类APP首页优化', '', 'inherit', 'closed', 'closed', '', '90-revision-v1', '', '', '2015-12-23 23:19:41', '2015-12-23 15:19:41', '', 90, 'http://acheng1314.cn/?p=96', 0, 'revision', '', 0),
(98, 1, '2016-01-10 12:30:14', '2016-01-10 04:30:14', '课程html和css\r\n\r\n1.html\r\n1.什么是html HyperText Markup Language 超文本标记语言。\r\n2.html是最基础的网页语言。\r\n3.html都是由标签组成。\r\n4.html的基本格式\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n放置一些属性信息，辅助信息。\r\n引入一些外部的文件。（css，javascript）\r\n它里面的内容会先加载。\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n存放真正的数据。\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n5.html注意事项\r\n1）多数标签都是有开始标签和结束标签，其中有个别标签因为只有单一功能，或者没有要修饰的内容可以在标签内结束。\r\n2）想要对被标签修饰的内容进行更丰富的操作，就用到了标签中的属性，通过对属性值的改变，增加了更多的效果选择。\r\n3）属性与属性值之间用“=”连接，属性值可以用双引号或单引号或者不用引号，一般都会用双引号。或公司规定书写规范。\r\n\r\n6.排版标签\r\n1）换行 &lt;br/&gt;\r\n2）&lt;p&gt;&lt;/p&gt; 段落标签 在开始和结束的位置上会留一个空行。\r\n属性：align= 对齐方式\r\n3）&lt;hr /&gt; 一条水平线\r\n属性：\r\n1）宽度：width 值像素 100px 可以写百分比 30%\r\n2）align= 对齐方式\r\n3）size 粗细\r\n4）color 值 red green blue RGB 三原色 (red green blue #aa55ff)\r\n\r\n4）div 声明一块区域 &lt;div&gt;数据&lt;/div&gt; css+div\r\n5）span 声明一块区域\r\n\r\n7.字体标签\r\n1）&lt;font&gt;文本内容&lt;/font&gt;\r\n属性：\r\n1）size 字号的大小 最大值是7 最小值是1\r\n2）color 颜色\r\n3）face 字体\r\n\r\n2）标题标签\r\n&lt;h1&gt;&lt;/h1&gt;\r\n...\r\n&lt;h6&gt;&lt;/h6&gt;\r\n从大到小字体缩小。\r\n\r\n3）&lt;B&gt;&lt;/B&gt;粗体\r\n4）&lt;I&gt;&lt;/I&gt;斜体\r\n\r\n标签支持嵌套\r\n\r\n8.列表标签\r\n数据格式化。\r\n1）dl 列表标签\r\n&lt;dl&gt;\r\n&lt;dt&gt;上层项目&lt;/dt&gt;\r\n&lt;dd&gt;下层项目&lt;/dd&gt;特点：自动对齐，自动缩进。\r\n&lt;/dl&gt;\r\n\r\n2）有序列表和无序列表\r\n有序：&lt;ol&gt;\r\ntype：列表前序标号\r\nstart：从第几个开始。\r\n无序：&lt;ul&gt;\r\n数据条目：&lt;li&gt;数据内容&lt;/li&gt;\r\n\r\n&lt;li&gt;&lt;a href="后台的路径"&gt;用户管理&lt;/a&gt;&lt;/li&gt;\r\n\r\n9.图片标签\r\n&lt;img &gt;\r\n属性：src="图片的路径"\r\nwidth 显示图片的宽度\r\nheight 显示图片的高度\r\nalt 图片的说明文字\r\n\r\n10.超链接链接\r\n&lt;a&gt;&lt;/a&gt;\r\n作用：1）链接资源\r\nhref="" 必须指定 如果href的值不指定，默认是file文件的协议。\r\n只有自己指定协议，链接资源。\r\n如果href中指定的协议，浏览器不能解析，就会调用应用程序，可以解析的程序就可以打开。\r\n\r\n2）定位资源\r\nname 名称 专业术语 锚\r\neg: &lt;a name="top"&gt;&lt;/a&gt; //定义top位置\r\n&lt;a herf="#top"&gt;&lt;/a&gt; //回到定义top的位置\r\n\r\n11.表格标签（重点）\r\n作用：格式化数据\r\n&lt;table&gt;&lt;/table&gt; 声明一个表格\r\n属性：\r\n1）边框 border\r\n2）width 宽度\r\n3）文字与内边框的距离 cellpadding\r\n&lt;tr&gt;&lt;/tr&gt; 行\r\n属性：\r\n1）align 对齐方式（文本内容）\r\n\r\n&lt;td&gt;&lt;/td&gt;\r\n属性：\r\n1）width\r\n2）height\r\n3）colspan 列合并单元格\r\n4）rowspan 行合并单元格\r\n&lt;th&gt;&lt;/th&gt; 会加粗 并且会居中。\r\n&lt;caption&gt; 表格的标题\r\n\r\n12.表单标签（重点）\r\n作用：可以和服务器进行交互。\r\n输入项的内容 用户名 密码\r\n&lt;form&gt;&lt;/form&gt;\r\n属性：action="提交的请求位置"\r\nmethod 提交方式（get和post） 如果method没有写默认是get方式提交。\r\n\r\nget和post区别：\r\n1）get方式表单封装的数据直接显示在url上。post方式数据不显示在url上。\r\n2）get方式安全级别较低，post级别较高。\r\n3）get方式数据的长度，post支持大数据。\r\n\r\n** ?sex=on：\r\n在每个输入的标签中指定name和value name必须指定\r\n?username=haha&amp;pwd=1223&amp;sex=nv&amp;jishu=html\r\n\r\n&lt;input /&gt;\r\n属性：type 值可以指定很多的值，每一个不同的值代表的不同输入组件。\r\n\r\n1）type=text 文本框\r\n2）type=password 密码\r\n3）type=radio 单选按钮\r\nname属性\r\n4）type=checkbox 多选按钮\r\n单选和多选都有默认值：checked="checked"\r\n\r\n5）type=reset 重置按钮\r\n6）type=submit 提交按钮\r\n7）type=file 上传文件的输入项\r\n8）type=button 按钮\r\n9）type=image 图片（也是提交按钮，）\r\n10）type=hidden 隐藏标签（用户不用看到的，但是咱们开发时必须要使用的，可以把数据封装到隐藏标签中，和表单一起提交到后台）。\r\n\r\n选择标签\r\n&lt;select&gt;&lt;/select&gt;选择下拉框\r\n\r\n文本域textarea\r\n&lt;textarea&gt;文本内容&lt;/textarea&gt;\r\n\r\n13.框架标签\r\n作用：&lt;frameset&gt;\r\n&lt;frame&gt;\r\n&lt;/frameset&gt;\r\n框架标签不能写在&lt;body&gt;的内部。body不能写在frameset的上面。\r\n\r\n2.css\r\n1.什么是css： Cascading Style Sheets 层叠样式表\r\n2.作用：定义网页的显示效果。\r\n3.css和html的结合方式\r\n1）在每个html的标签中都提供了一个属性 style样式属性 style="就是css的代码"\r\n2）html提供了一个标签 &lt;style type="text/css"&gt;css的代码&lt;/style&gt; 写在&lt;head&gt;&lt;/head&gt;\r\n3）在stype标签中 css提供了 @import url("链接文件的地址");\r\n4）html一个标签 &lt;link rel="引入的文件与html的关系" type="text/css" href="文件的地址" &gt;\r\n\r\n4.优先级\r\n从上到下，从外到内，优先级从低到高。（大多数情况下）\r\n\r\n5.代码规范\r\n\r\n选择器名称 { 属性名：属性值；属性名：属性值；…….}\r\n属性与属性之间用 分号 隔开\r\n属性与属性值直接按用 冒号 连接\r\n如果一个属性有多个值的话，那么多个值用 空格 隔开。\r\n6.css基本选择器\r\n1）标签名称选择器\r\n2）html的标签提供属性 class 类属性 通过class编写的样式的优先级别高。\r\n3）html的标签提供的属性 id 通常会把id定义成唯一性的。 id的优先级别高于class。style属性的优先级最高。\r\n标签名 &lt; class &lt; id &lt; style属性\r\n\r\n7.css的扩展选择器\r\n1）关联选择器：标签是可以嵌套的，两个或多个选择器之间产生关系，就可以用此选择器。\r\n\r\n2）组合选择器：对多个不同选择器进行相同样式设置的时候应用此选择器。\r\n\r\n3）伪元素选择器：\r\n1）a:link 超链接未点击状态。\r\n2）a:hover 光标移到超链接上的状态（未点击）。\r\n3）a:active 点击超链接时的状态。\r\n4）a:visited 被访问后的状态。\r\n\r\n5）p:first-letter 段落中的第一个字母。\r\n6）:focus 具有焦点的元素\r\n\r\n8.盒子模型\r\n看图片。\r\n\r\n9.布局--漂浮\r\nfloat\r\nright：文本流向对象的左边\r\n\r\nposition\r\nabsolute :　 将对象从文档流中拖出，使用 left ， right ， top ， bottom 等属性相对于其最接近的一个最有定位设置的父对象进行绝对定位。', 'html和css基础总结', '', 'publish', 'open', 'open', '', 'html%e5%92%8ccss%e5%9f%ba%e7%a1%80%e6%80%bb%e7%bb%93', '', '', '2016-01-10 12:30:14', '2016-01-10 04:30:14', '', 0, 'http://acheng1314.cn/?p=98', 0, 'post', '', 4),
(99, 1, '2015-12-30 03:35:13', '2015-12-29 19:35:13', '', 'Android应用开发工程师_庞程_个人简历', '', 'inherit', 'open', 'closed', '', 'android%e5%ba%94%e7%94%a8%e5%bc%80%e5%8f%91%e5%b7%a5%e7%a8%8b%e5%b8%88_%e5%ba%9e%e7%a8%8b_%e4%b8%aa%e4%ba%ba%e7%ae%80%e5%8e%86', '', '', '2015-12-30 03:36:14', '2015-12-29 19:36:14', '', 0, 'http://acheng1314.cn/wp-content/uploads/2015/12/Android应用开发工程师_庞程_个人简历.doc', 0, 'attachment', 'application/msword', 0),
(101, 1, '2015-12-30 03:37:34', '2015-12-29 19:37:34', '作者是一名普通得不能再普通的程序猿，没啥事的时候就喜欢瞎搞搞，目前暂居海口，家里人要求我会成都，希望有人看到后，能叫我去他们公司面试，么么哒！<a href="http://acheng1314.cn/?p=99" rel="attachment wp-att-6">Android应用开发工程师_庞程_个人简历</a>', '关于作者', '', 'inherit', 'closed', 'closed', '', '2-revision-v1', '', '', '2015-12-30 03:37:34', '2015-12-29 19:37:34', '', 2, 'http://acheng1314.cn/?p=101', 0, 'revision', '', 0),
(103, 1, '2016-01-10 12:30:14', '2016-01-10 04:30:14', '课程html和css\r\n\r\n1.html\r\n1.什么是html HyperText Markup Language 超文本标记语言。\r\n2.html是最基础的网页语言。\r\n3.html都是由标签组成。\r\n4.html的基本格式\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n放置一些属性信息，辅助信息。\r\n引入一些外部的文件。（css，javascript）\r\n它里面的内容会先加载。\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n存放真正的数据。\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n5.html注意事项\r\n1）多数标签都是有开始标签和结束标签，其中有个别标签因为只有单一功能，或者没有要修饰的内容可以在标签内结束。\r\n2）想要对被标签修饰的内容进行更丰富的操作，就用到了标签中的属性，通过对属性值的改变，增加了更多的效果选择。\r\n3）属性与属性值之间用“=”连接，属性值可以用双引号或单引号或者不用引号，一般都会用双引号。或公司规定书写规范。\r\n\r\n6.排版标签\r\n1）换行 &lt;br/&gt;\r\n2）&lt;p&gt;&lt;/p&gt; 段落标签 在开始和结束的位置上会留一个空行。\r\n属性：align= 对齐方式\r\n3）&lt;hr /&gt; 一条水平线\r\n属性：\r\n1）宽度：width 值像素 100px 可以写百分比 30%\r\n2）align= 对齐方式\r\n3）size 粗细\r\n4）color 值 red green blue RGB 三原色 (red green blue #aa55ff)\r\n\r\n4）div 声明一块区域 &lt;div&gt;数据&lt;/div&gt; css+div\r\n5）span 声明一块区域\r\n\r\n7.字体标签\r\n1）&lt;font&gt;文本内容&lt;/font&gt;\r\n属性：\r\n1）size 字号的大小 最大值是7 最小值是1\r\n2）color 颜色\r\n3）face 字体\r\n\r\n2）标题标签\r\n&lt;h1&gt;&lt;/h1&gt;\r\n...\r\n&lt;h6&gt;&lt;/h6&gt;\r\n从大到小字体缩小。\r\n\r\n3）&lt;B&gt;&lt;/B&gt;粗体\r\n4）&lt;I&gt;&lt;/I&gt;斜体\r\n\r\n标签支持嵌套\r\n\r\n8.列表标签\r\n数据格式化。\r\n1）dl 列表标签\r\n&lt;dl&gt;\r\n&lt;dt&gt;上层项目&lt;/dt&gt;\r\n&lt;dd&gt;下层项目&lt;/dd&gt;特点：自动对齐，自动缩进。\r\n&lt;/dl&gt;\r\n\r\n2）有序列表和无序列表\r\n有序：&lt;ol&gt;\r\ntype：列表前序标号\r\nstart：从第几个开始。\r\n无序：&lt;ul&gt;\r\n数据条目：&lt;li&gt;数据内容&lt;/li&gt;\r\n\r\n&lt;li&gt;&lt;a href="后台的路径"&gt;用户管理&lt;/a&gt;&lt;/li&gt;\r\n\r\n9.图片标签\r\n&lt;img &gt;\r\n属性：src="图片的路径"\r\nwidth 显示图片的宽度\r\nheight 显示图片的高度\r\nalt 图片的说明文字\r\n\r\n10.超链接链接\r\n&lt;a&gt;&lt;/a&gt;\r\n作用：1）链接资源\r\nhref="" 必须指定 如果href的值不指定，默认是file文件的协议。\r\n只有自己指定协议，链接资源。\r\n如果href中指定的协议，浏览器不能解析，就会调用应用程序，可以解析的程序就可以打开。\r\n\r\n2）定位资源\r\nname 名称 专业术语 锚\r\neg: &lt;a name="top"&gt;&lt;/a&gt; //定义top位置\r\n&lt;a herf="#top"&gt;&lt;/a&gt; //回到定义top的位置\r\n\r\n11.表格标签（重点）\r\n作用：格式化数据\r\n&lt;table&gt;&lt;/table&gt; 声明一个表格\r\n属性：\r\n1）边框 border\r\n2）width 宽度\r\n3）文字与内边框的距离 cellpadding\r\n&lt;tr&gt;&lt;/tr&gt; 行\r\n属性：\r\n1）align 对齐方式（文本内容）\r\n\r\n&lt;td&gt;&lt;/td&gt;\r\n属性：\r\n1）width\r\n2）height\r\n3）colspan 列合并单元格\r\n4）rowspan 行合并单元格\r\n&lt;th&gt;&lt;/th&gt; 会加粗 并且会居中。\r\n&lt;caption&gt; 表格的标题\r\n\r\n12.表单标签（重点）\r\n作用：可以和服务器进行交互。\r\n输入项的内容 用户名 密码\r\n&lt;form&gt;&lt;/form&gt;\r\n属性：action="提交的请求位置"\r\nmethod 提交方式（get和post） 如果method没有写默认是get方式提交。\r\n\r\nget和post区别：\r\n1）get方式表单封装的数据直接显示在url上。post方式数据不显示在url上。\r\n2）get方式安全级别较低，post级别较高。\r\n3）get方式数据的长度，post支持大数据。\r\n\r\n** ?sex=on：\r\n在每个输入的标签中指定name和value name必须指定\r\n?username=haha&amp;pwd=1223&amp;sex=nv&amp;jishu=html\r\n\r\n&lt;input /&gt;\r\n属性：type 值可以指定很多的值，每一个不同的值代表的不同输入组件。\r\n\r\n1）type=text 文本框\r\n2）type=password 密码\r\n3）type=radio 单选按钮\r\nname属性\r\n4）type=checkbox 多选按钮\r\n单选和多选都有默认值：checked="checked"\r\n\r\n5）type=reset 重置按钮\r\n6）type=submit 提交按钮\r\n7）type=file 上传文件的输入项\r\n8）type=button 按钮\r\n9）type=image 图片（也是提交按钮，）\r\n10）type=hidden 隐藏标签（用户不用看到的，但是咱们开发时必须要使用的，可以把数据封装到隐藏标签中，和表单一起提交到后台）。\r\n\r\n选择标签\r\n&lt;select&gt;&lt;/select&gt;选择下拉框\r\n\r\n文本域textarea\r\n&lt;textarea&gt;文本内容&lt;/textarea&gt;\r\n\r\n13.框架标签\r\n作用：&lt;frameset&gt;\r\n&lt;frame&gt;\r\n&lt;/frameset&gt;\r\n框架标签不能写在&lt;body&gt;的内部。body不能写在frameset的上面。\r\n\r\n2.css\r\n1.什么是css： Cascading Style Sheets 层叠样式表\r\n2.作用：定义网页的显示效果。\r\n3.css和html的结合方式\r\n1）在每个html的标签中都提供了一个属性 style样式属性 style="就是css的代码"\r\n2）html提供了一个标签 &lt;style type="text/css"&gt;css的代码&lt;/style&gt; 写在&lt;head&gt;&lt;/head&gt;\r\n3）在stype标签中 css提供了 @import url("链接文件的地址");\r\n4）html一个标签 &lt;link rel="引入的文件与html的关系" type="text/css" href="文件的地址" &gt;\r\n\r\n4.优先级\r\n从上到下，从外到内，优先级从低到高。（大多数情况下）\r\n\r\n5.代码规范\r\n\r\n选择器名称 { 属性名：属性值；属性名：属性值；…….}\r\n属性与属性之间用 分号 隔开\r\n属性与属性值直接按用 冒号 连接\r\n如果一个属性有多个值的话，那么多个值用 空格 隔开。\r\n6.css基本选择器\r\n1）标签名称选择器\r\n2）html的标签提供属性 class 类属性 通过class编写的样式的优先级别高。\r\n3）html的标签提供的属性 id 通常会把id定义成唯一性的。 id的优先级别高于class。style属性的优先级最高。\r\n标签名 &lt; class &lt; id &lt; style属性\r\n\r\n7.css的扩展选择器\r\n1）关联选择器：标签是可以嵌套的，两个或多个选择器之间产生关系，就可以用此选择器。\r\n\r\n2）组合选择器：对多个不同选择器进行相同样式设置的时候应用此选择器。\r\n\r\n3）伪元素选择器：\r\n1）a:link 超链接未点击状态。\r\n2）a:hover 光标移到超链接上的状态（未点击）。\r\n3）a:active 点击超链接时的状态。\r\n4）a:visited 被访问后的状态。\r\n\r\n5）p:first-letter 段落中的第一个字母。\r\n6）:focus 具有焦点的元素\r\n\r\n8.盒子模型\r\n看图片。\r\n\r\n9.布局--漂浮\r\nfloat\r\nright：文本流向对象的左边\r\n\r\nposition\r\nabsolute :　 将对象从文档流中拖出，使用 left ， right ， top ， bottom 等属性相对于其最接近的一个最有定位设置的父对象进行绝对定位。', 'html和css基础总结', '', 'inherit', 'closed', 'closed', '', '98-revision-v1', '', '', '2016-01-10 12:30:14', '2016-01-10 04:30:14', '', 98, 'http://acheng1314.cn/?p=103', 0, 'revision', '', 0),
(104, 1, '2016-01-12 17:31:10', '2016-01-12 09:31:10', 'Android中常常使用shape来定义控件的一些显示属性，今天看了一些shape的使用，对shape有了大体的了解，稍作总结：\r\n\r\n先看下面的代码：\r\n<blockquote>&lt;shape&gt;\r\n&lt;!-- 实心 --&gt;\r\n&lt;solid android:color="#ff9d77"/&gt;\r\n&lt;!-- 渐变 --&gt;\r\n&lt;gradient\r\nandroid:startColor="#ff8c00"\r\nandroid:endColor="#FFFFFF"\r\nandroid:angle="270" /&gt;\r\n&lt;!-- 描边 --&gt;\r\n&lt;stroke\r\nandroid:width="2dp"\r\nandroid:color="#dcdcdc" /&gt;\r\n&lt;!-- 圆角 --&gt;\r\n&lt;corners\r\nandroid:radius="2dp" /&gt;\r\n&lt;padding\r\nandroid:left="10dp"\r\nandroid:top="10dp"\r\nandroid:right="10dp"\r\nandroid:bottom="10dp" /&gt;\r\n&lt;/shape&gt;</blockquote>\r\nsolid：实心，就是填充的意思\r\nandroid:color指定填充的颜色\r\n\r\ngradient：渐变\r\nandroid:startColor和android:endColor分别为起始和结束颜色，ndroid:angle是渐变角度，必须为45的整数倍。\r\n另外渐变默认的模式为android:type="linear"，即线性渐变，可以指定渐变为径向渐变，android:type="radial"，径向渐变需要指定半径android:gradientRadius="50"。\r\n\r\nstroke：描边\r\nandroid:width="2dp" 描边的宽度，android:color 描边的颜色。\r\n我们还可以把描边弄成虚线的形式，设置方式为：\r\nandroid:dashWidth="5dp"\r\nandroid:dashGap="3dp"\r\n其中android:dashWidth表示''-''这样一个横线的宽度，android:dashGap表示之间隔开的距离。\r\n\r\ncorners：圆角\r\nandroid:radius为角的弧度，值越大角越圆。\r\n我们还可以把四个角设定成不同的角度，方法为：\r\n<blockquote>&lt;corners\r\nandroid:topRightRadius="20dp" 右上角\r\nandroid:bottomLeftRadius="20dp" 右下角\r\nandroid:topLeftRadius="1dp" 左上角\r\nandroid:bottomRightRadius="0dp" 左下角\r\n/&gt;</blockquote>\r\n这里有个地方需要注意，bottomLeftRadius是右下角，而不是左下角，这个有点郁闷，不过不影响使用，记得别搞错了就行。\r\n还有网上看到有人说设置成0dp无效，不过我在测试中发现是可以的，我用的是2.2，可能修复了这个问题吧，如果无效的话那就只能设成1dp了。\r\n\r\npadding：间隔\r\n这个就不用多说了，XML布局文件中经常用到。\r\n\r\n大体的就是这样，以下是一个使用的具体示例：用在Selector中作为Button的背景，分别定义了按钮的一般状态、获得焦点状态和按下时的状态，具体代码如下：\r\n\r\n&nbsp;\r\n<blockquote>main.xml:\r\n&lt;Button\r\nandroid:layout_width="wrap_content"\r\nandroid:layout_height="wrap_content"\r\nandroid:text="TestShapeButton"\r\nandroid:background="@drawable/button_selector"\r\n/&gt;\r\n\r\nbutton_selector.xml:\r\n&lt;?xml version="1.0" encoding="utf-8"?&gt;\r\n&lt;selector\r\nxmlns:android="http://schemas.android.com/apk/res/android"&gt;\r\n&lt;item android:state_pressed="true" &gt;\r\n&lt;shape&gt;\r\n&lt;!-- 渐变 --&gt;\r\n&lt;gradient\r\nandroid:startColor="#ff8c00"\r\nandroid:endColor="#FFFFFF"\r\nandroid:type="radial"\r\nandroid:gradientRadius="50" /&gt;\r\n&lt;!-- 描边 --&gt;\r\n&lt;stroke\r\nandroid:width="2dp"\r\nandroid:color="#dcdcdc"\r\nandroid:dashWidth="5dp"\r\nandroid:dashGap="3dp" /&gt;\r\n&lt;!-- 圆角 --&gt;\r\n&lt;corners\r\nandroid:radius="2dp" /&gt;\r\n&lt;padding\r\nandroid:left="10dp"\r\nandroid:top="10dp"\r\nandroid:right="10dp"\r\nandroid:bottom="10dp" /&gt;\r\n&lt;/shape&gt;\r\n&lt;/item&gt;\r\n\r\n&lt;item android:state_focused="true" &gt;\r\n&lt;shape&gt;\r\n&lt;gradient\r\nandroid:startColor="#ffc2b7"\r\nandroid:endColor="#ffc2b7"\r\nandroid:angle="270" /&gt;\r\n&lt;stroke\r\nandroid:width="2dp"\r\nandroid:color="#dcdcdc" /&gt;\r\n&lt;corners\r\nandroid:radius="2dp" /&gt;\r\n&lt;padding\r\nandroid:left="10dp"\r\nandroid:top="10dp"\r\nandroid:right="10dp"\r\nandroid:bottom="10dp" /&gt;\r\n&lt;/shape&gt;\r\n&lt;/item&gt;\r\n\r\n&lt;item&gt;\r\n&lt;shape&gt;\r\n&lt;solid android:color="#ff9d77"/&gt;\r\n&lt;stroke\r\nandroid:width="2dp"\r\nandroid:color="#fad3cf" /&gt;\r\n&lt;corners\r\nandroid:topRightRadius="5dp"\r\nandroid:bottomLeftRadius="5dp"\r\nandroid:topLeftRadius="0dp"\r\nandroid:bottomRightRadius="0dp"\r\n/&gt;\r\n&lt;padding\r\nandroid:left="10dp"\r\nandroid:top="10dp"\r\nandroid:right="10dp"\r\nandroid:bottom="10dp" /&gt;\r\n&lt;/shape&gt;\r\n&lt;/item&gt;\r\n&lt;/selector&gt;</blockquote>\r\n<a href="http://acheng1314.cn/wp-content/uploads/2016/01/状态选择器效果图.png"><img class="alignleft size-full wp-image-106" src="http://acheng1314.cn/wp-content/uploads/2016/01/状态选择器效果图.png" alt="状态选择器效果图" width="378" height="757" /></a>\r\n\r\n&nbsp;', '【转载】状态适配器总结', '', 'publish', 'open', 'open', '', '%e3%80%90%e8%bd%ac%e8%bd%bd%e3%80%91%e7%8a%b6%e6%80%81%e9%80%82%e9%85%8d%e5%99%a8%e6%80%bb%e7%bb%93', '', '', '2016-01-12 17:31:17', '2016-01-12 09:31:17', '', 0, 'http://acheng1314.cn/?p=104', 0, 'post', '', 6),
(105, 1, '2016-01-12 17:27:15', '2016-01-12 09:27:15', 'Android中常常使用shape来定义控件的一些显示属性，今天看了一些shape的使用，对shape有了大体的了解，稍作总结：\r\n\r\n先看下面的代码：\r\n&lt;shape&gt;\r\n&lt;!-- 实心 --&gt;\r\n&lt;solid android:color="#ff9d77"/&gt;\r\n&lt;!-- 渐变 --&gt;\r\n&lt;gradient\r\nandroid:startColor="#ff8c00"\r\nandroid:endColor="#FFFFFF"\r\nandroid:angle="270" /&gt;\r\n&lt;!-- 描边 --&gt;\r\n&lt;stroke\r\nandroid:width="2dp"\r\nandroid:color="#dcdcdc" /&gt;\r\n&lt;!-- 圆角 --&gt;\r\n&lt;corners\r\nandroid:radius="2dp" /&gt;\r\n&lt;padding\r\nandroid:left="10dp"\r\nandroid:top="10dp"\r\nandroid:right="10dp"\r\nandroid:bottom="10dp" /&gt;\r\n&lt;/shape&gt;\r\nsolid：实心，就是填充的意思\r\nandroid:color指定填充的颜色\r\n\r\ngradient：渐变\r\nandroid:startColor和android:endColor分别为起始和结束颜色，ndroid:angle是渐变角度，必须为45的整数倍。\r\n另外渐变默认的模式为android:type="linear"，即线性渐变，可以指定渐变为径向渐变，android:type="radial"，径向渐变需要指定半径android:gradientRadius="50"。\r\n\r\nstroke：描边\r\nandroid:width="2dp" 描边的宽度，android:color 描边的颜色。\r\n我们还可以把描边弄成虚线的形式，设置方式为：\r\nandroid:dashWidth="5dp"\r\nandroid:dashGap="3dp"\r\n其中android:dashWidth表示''-''这样一个横线的宽度，android:dashGap表示之间隔开的距离。\r\n\r\ncorners：圆角\r\nandroid:radius为角的弧度，值越大角越圆。\r\n我们还可以把四个角设定成不同的角度，方法为：\r\n&lt;corners\r\nandroid:topRightRadius="20dp" 右上角\r\nandroid:bottomLeftRadius="20dp" 右下角\r\nandroid:topLeftRadius="1dp" 左上角\r\nandroid:bottomRightRadius="0dp" 左下角\r\n/&gt;\r\n这里有个地方需要注意，bottomLeftRadius是右下角，而不是左下角，这个有点郁闷，不过不影响使用，记得别搞错了就行。\r\n还有网上看到有人说设置成0dp无效，不过我在测试中发现是可以的，我用的是2.2，可能修复了这个问题吧，如果无效的话那就只能设成1dp了。\r\n\r\npadding：间隔\r\n这个就不用多说了，XML布局文件中经常用到。\r\n\r\n\r\n大体的就是这样，以下是一个使用的具体示例：用在Selector中作为Button的背景，分别定义了按钮的一般状态、获得焦点状态和按下时的状态，具体代码如下：\r\n\r\nmain.xml:\r\n&lt;Button\r\nandroid:layout_width="wrap_content"\r\nandroid:layout_height="wrap_content"\r\nandroid:text="TestShapeButton"\r\nandroid:background="@drawable/button_selector"\r\n/&gt;\r\n\r\nbutton_selector.xml:\r\n&lt;?xml version="1.0" encoding="utf-8"?&gt;\r\n&lt;selector\r\nxmlns:android="http://schemas.android.com/apk/res/android"&gt;\r\n&lt;item android:state_pressed="true" &gt;\r\n&lt;shape&gt;\r\n&lt;!-- 渐变 --&gt;\r\n&lt;gradient\r\nandroid:startColor="#ff8c00"\r\nandroid:endColor="#FFFFFF"\r\nandroid:type="radial"\r\nandroid:gradientRadius="50" /&gt;\r\n&lt;!-- 描边 --&gt;\r\n&lt;stroke\r\nandroid:width="2dp"\r\nandroid:color="#dcdcdc"\r\nandroid:dashWidth="5dp"\r\nandroid:dashGap="3dp" /&gt;\r\n&lt;!-- 圆角 --&gt;\r\n&lt;corners\r\nandroid:radius="2dp" /&gt;\r\n&lt;padding\r\nandroid:left="10dp"\r\nandroid:top="10dp"\r\nandroid:right="10dp"\r\nandroid:bottom="10dp" /&gt;\r\n&lt;/shape&gt;\r\n&lt;/item&gt;\r\n\r\n&lt;item android:state_focused="true" &gt;\r\n&lt;shape&gt;\r\n&lt;gradient\r\nandroid:startColor="#ffc2b7"\r\nandroid:endColor="#ffc2b7"\r\nandroid:angle="270" /&gt;\r\n&lt;stroke\r\nandroid:width="2dp"\r\nandroid:color="#dcdcdc" /&gt;\r\n&lt;corners\r\nandroid:radius="2dp" /&gt;\r\n&lt;padding\r\nandroid:left="10dp"\r\nandroid:top="10dp"\r\nandroid:right="10dp"\r\nandroid:bottom="10dp" /&gt;\r\n&lt;/shape&gt;\r\n&lt;/item&gt;\r\n\r\n&lt;item&gt;\r\n&lt;shape&gt;\r\n&lt;solid android:color="#ff9d77"/&gt;\r\n&lt;stroke\r\nandroid:width="2dp"\r\nandroid:color="#fad3cf" /&gt;\r\n&lt;corners\r\nandroid:topRightRadius="5dp"\r\nandroid:bottomLeftRadius="5dp"\r\nandroid:topLeftRadius="0dp"\r\nandroid:bottomRightRadius="0dp"\r\n/&gt;\r\n&lt;padding\r\nandroid:left="10dp"\r\nandroid:top="10dp"\r\nandroid:right="10dp"\r\nandroid:bottom="10dp" /&gt;\r\n&lt;/shape&gt;\r\n&lt;/item&gt;\r\n&lt;/selector&gt;\r\n运行效果如下图：\r\n一般状态：', '', '', 'inherit', 'closed', 'closed', '', '104-revision-v1', '', '', '2016-01-12 17:27:15', '2016-01-12 09:27:15', '', 104, 'http://acheng1314.cn/?p=105', 0, 'revision', '', 0),
(106, 1, '2016-01-12 17:30:38', '2016-01-12 09:30:38', '', '状态选择器效果图', '', 'inherit', 'open', 'closed', '', '%e7%8a%b6%e6%80%81%e9%80%89%e6%8b%a9%e5%99%a8%e6%95%88%e6%9e%9c%e5%9b%be', '', '', '2016-01-12 17:30:38', '2016-01-12 09:30:38', '', 104, 'http://acheng1314.cn/wp-content/uploads/2016/01/状态选择器效果图.png', 0, 'attachment', 'image/png', 0),
(107, 1, '2016-01-12 17:31:10', '2016-01-12 09:31:10', 'Android中常常使用shape来定义控件的一些显示属性，今天看了一些shape的使用，对shape有了大体的了解，稍作总结：\r\n\r\n先看下面的代码：\r\n<blockquote>\r\n&lt;shape&gt;\r\n&lt;!-- 实心 --&gt;\r\n&lt;solid android:color="#ff9d77"/&gt;\r\n&lt;!-- 渐变 --&gt;\r\n&lt;gradient\r\nandroid:startColor="#ff8c00"\r\nandroid:endColor="#FFFFFF"\r\nandroid:angle="270" /&gt;\r\n&lt;!-- 描边 --&gt;\r\n&lt;stroke\r\nandroid:width="2dp"\r\nandroid:color="#dcdcdc" /&gt;\r\n&lt;!-- 圆角 --&gt;\r\n&lt;corners\r\nandroid:radius="2dp" /&gt;\r\n&lt;padding\r\nandroid:left="10dp"\r\nandroid:top="10dp"\r\nandroid:right="10dp"\r\nandroid:bottom="10dp" /&gt;\r\n&lt;/shape&gt;</blockquote>\r\nsolid：实心，就是填充的意思\r\nandroid:color指定填充的颜色\r\n\r\ngradient：渐变\r\nandroid:startColor和android:endColor分别为起始和结束颜色，ndroid:angle是渐变角度，必须为45的整数倍。\r\n另外渐变默认的模式为android:type="linear"，即线性渐变，可以指定渐变为径向渐变，android:type="radial"，径向渐变需要指定半径android:gradientRadius="50"。\r\n\r\nstroke：描边\r\nandroid:width="2dp" 描边的宽度，android:color 描边的颜色。\r\n我们还可以把描边弄成虚线的形式，设置方式为：\r\nandroid:dashWidth="5dp"\r\nandroid:dashGap="3dp"\r\n其中android:dashWidth表示''-''这样一个横线的宽度，android:dashGap表示之间隔开的距离。\r\n\r\ncorners：圆角\r\nandroid:radius为角的弧度，值越大角越圆。\r\n我们还可以把四个角设定成不同的角度，方法为：\r\n<blockquote>\r\n&lt;corners\r\nandroid:topRightRadius="20dp" 右上角\r\nandroid:bottomLeftRadius="20dp" 右下角\r\nandroid:topLeftRadius="1dp" 左上角\r\nandroid:bottomRightRadius="0dp" 左下角\r\n/&gt;</blockquote>\r\n这里有个地方需要注意，bottomLeftRadius是右下角，而不是左下角，这个有点郁闷，不过不影响使用，记得别搞错了就行。\r\n还有网上看到有人说设置成0dp无效，不过我在测试中发现是可以的，我用的是2.2，可能修复了这个问题吧，如果无效的话那就只能设成1dp了。\r\n\r\npadding：间隔\r\n这个就不用多说了，XML布局文件中经常用到。\r\n\r\n大体的就是这样，以下是一个使用的具体示例：用在Selector中作为Button的背景，分别定义了按钮的一般状态、获得焦点状态和按下时的状态，具体代码如下：\r\n\r\n&nbsp;\r\n<blockquote>main.xml:\r\n&lt;Button\r\nandroid:layout_width="wrap_content"\r\nandroid:layout_height="wrap_content"\r\nandroid:text="TestShapeButton"\r\nandroid:background="@drawable/button_selector"\r\n/&gt;\r\n\r\nbutton_selector.xml:\r\n&lt;?xml version="1.0" encoding="utf-8"?&gt;\r\n&lt;selector\r\nxmlns:android="http://schemas.android.com/apk/res/android"&gt;\r\n&lt;item android:state_pressed="true" &gt;\r\n&lt;shape&gt;\r\n&lt;!-- 渐变 --&gt;\r\n&lt;gradient\r\nandroid:startColor="#ff8c00"\r\nandroid:endColor="#FFFFFF"\r\nandroid:type="radial"\r\nandroid:gradientRadius="50" /&gt;\r\n&lt;!-- 描边 --&gt;\r\n&lt;stroke\r\nandroid:width="2dp"\r\nandroid:color="#dcdcdc"\r\nandroid:dashWidth="5dp"\r\nandroid:dashGap="3dp" /&gt;\r\n&lt;!-- 圆角 --&gt;\r\n&lt;corners\r\nandroid:radius="2dp" /&gt;\r\n&lt;padding\r\nandroid:left="10dp"\r\nandroid:top="10dp"\r\nandroid:right="10dp"\r\nandroid:bottom="10dp" /&gt;\r\n&lt;/shape&gt;\r\n&lt;/item&gt;\r\n\r\n&lt;item android:state_focused="true" &gt;\r\n&lt;shape&gt;\r\n&lt;gradient\r\nandroid:startColor="#ffc2b7"\r\nandroid:endColor="#ffc2b7"\r\nandroid:angle="270" /&gt;\r\n&lt;stroke\r\nandroid:width="2dp"\r\nandroid:color="#dcdcdc" /&gt;\r\n&lt;corners\r\nandroid:radius="2dp" /&gt;\r\n&lt;padding\r\nandroid:left="10dp"\r\nandroid:top="10dp"\r\nandroid:right="10dp"\r\nandroid:bottom="10dp" /&gt;\r\n&lt;/shape&gt;\r\n&lt;/item&gt;\r\n\r\n&lt;item&gt;\r\n&lt;shape&gt;\r\n&lt;solid android:color="#ff9d77"/&gt;\r\n&lt;stroke\r\nandroid:width="2dp"\r\nandroid:color="#fad3cf" /&gt;\r\n&lt;corners\r\nandroid:topRightRadius="5dp"\r\nandroid:bottomLeftRadius="5dp"\r\nandroid:topLeftRadius="0dp"\r\nandroid:bottomRightRadius="0dp"\r\n/&gt;\r\n&lt;padding\r\nandroid:left="10dp"\r\nandroid:top="10dp"\r\nandroid:right="10dp"\r\nandroid:bottom="10dp" /&gt;\r\n&lt;/shape&gt;\r\n&lt;/item&gt;\r\n&lt;/selector&gt;</blockquote>\r\n<a href="http://acheng1314.cn/wp-content/uploads/2016/01/状态选择器效果图.png"><img class="alignleft size-full wp-image-106" src="http://acheng1314.cn/wp-content/uploads/2016/01/状态选择器效果图.png" alt="状态选择器效果图" width="378" height="757" /></a>\r\n\r\n&nbsp;', '【转载】状态适配器总结', '', 'inherit', 'closed', 'closed', '', '104-revision-v1', '', '', '2016-01-12 17:31:10', '2016-01-12 09:31:10', '', 104, 'http://acheng1314.cn/?p=107', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(108, 1, '2016-01-12 17:31:17', '2016-01-12 09:31:17', 'Android中常常使用shape来定义控件的一些显示属性，今天看了一些shape的使用，对shape有了大体的了解，稍作总结：\r\n\r\n先看下面的代码：\r\n<blockquote>&lt;shape&gt;\r\n&lt;!-- 实心 --&gt;\r\n&lt;solid android:color="#ff9d77"/&gt;\r\n&lt;!-- 渐变 --&gt;\r\n&lt;gradient\r\nandroid:startColor="#ff8c00"\r\nandroid:endColor="#FFFFFF"\r\nandroid:angle="270" /&gt;\r\n&lt;!-- 描边 --&gt;\r\n&lt;stroke\r\nandroid:width="2dp"\r\nandroid:color="#dcdcdc" /&gt;\r\n&lt;!-- 圆角 --&gt;\r\n&lt;corners\r\nandroid:radius="2dp" /&gt;\r\n&lt;padding\r\nandroid:left="10dp"\r\nandroid:top="10dp"\r\nandroid:right="10dp"\r\nandroid:bottom="10dp" /&gt;\r\n&lt;/shape&gt;</blockquote>\r\nsolid：实心，就是填充的意思\r\nandroid:color指定填充的颜色\r\n\r\ngradient：渐变\r\nandroid:startColor和android:endColor分别为起始和结束颜色，ndroid:angle是渐变角度，必须为45的整数倍。\r\n另外渐变默认的模式为android:type="linear"，即线性渐变，可以指定渐变为径向渐变，android:type="radial"，径向渐变需要指定半径android:gradientRadius="50"。\r\n\r\nstroke：描边\r\nandroid:width="2dp" 描边的宽度，android:color 描边的颜色。\r\n我们还可以把描边弄成虚线的形式，设置方式为：\r\nandroid:dashWidth="5dp"\r\nandroid:dashGap="3dp"\r\n其中android:dashWidth表示''-''这样一个横线的宽度，android:dashGap表示之间隔开的距离。\r\n\r\ncorners：圆角\r\nandroid:radius为角的弧度，值越大角越圆。\r\n我们还可以把四个角设定成不同的角度，方法为：\r\n<blockquote>&lt;corners\r\nandroid:topRightRadius="20dp" 右上角\r\nandroid:bottomLeftRadius="20dp" 右下角\r\nandroid:topLeftRadius="1dp" 左上角\r\nandroid:bottomRightRadius="0dp" 左下角\r\n/&gt;</blockquote>\r\n这里有个地方需要注意，bottomLeftRadius是右下角，而不是左下角，这个有点郁闷，不过不影响使用，记得别搞错了就行。\r\n还有网上看到有人说设置成0dp无效，不过我在测试中发现是可以的，我用的是2.2，可能修复了这个问题吧，如果无效的话那就只能设成1dp了。\r\n\r\npadding：间隔\r\n这个就不用多说了，XML布局文件中经常用到。\r\n\r\n大体的就是这样，以下是一个使用的具体示例：用在Selector中作为Button的背景，分别定义了按钮的一般状态、获得焦点状态和按下时的状态，具体代码如下：\r\n\r\n&nbsp;\r\n<blockquote>main.xml:\r\n&lt;Button\r\nandroid:layout_width="wrap_content"\r\nandroid:layout_height="wrap_content"\r\nandroid:text="TestShapeButton"\r\nandroid:background="@drawable/button_selector"\r\n/&gt;\r\n\r\nbutton_selector.xml:\r\n&lt;?xml version="1.0" encoding="utf-8"?&gt;\r\n&lt;selector\r\nxmlns:android="http://schemas.android.com/apk/res/android"&gt;\r\n&lt;item android:state_pressed="true" &gt;\r\n&lt;shape&gt;\r\n&lt;!-- 渐变 --&gt;\r\n&lt;gradient\r\nandroid:startColor="#ff8c00"\r\nandroid:endColor="#FFFFFF"\r\nandroid:type="radial"\r\nandroid:gradientRadius="50" /&gt;\r\n&lt;!-- 描边 --&gt;\r\n&lt;stroke\r\nandroid:width="2dp"\r\nandroid:color="#dcdcdc"\r\nandroid:dashWidth="5dp"\r\nandroid:dashGap="3dp" /&gt;\r\n&lt;!-- 圆角 --&gt;\r\n&lt;corners\r\nandroid:radius="2dp" /&gt;\r\n&lt;padding\r\nandroid:left="10dp"\r\nandroid:top="10dp"\r\nandroid:right="10dp"\r\nandroid:bottom="10dp" /&gt;\r\n&lt;/shape&gt;\r\n&lt;/item&gt;\r\n\r\n&lt;item android:state_focused="true" &gt;\r\n&lt;shape&gt;\r\n&lt;gradient\r\nandroid:startColor="#ffc2b7"\r\nandroid:endColor="#ffc2b7"\r\nandroid:angle="270" /&gt;\r\n&lt;stroke\r\nandroid:width="2dp"\r\nandroid:color="#dcdcdc" /&gt;\r\n&lt;corners\r\nandroid:radius="2dp" /&gt;\r\n&lt;padding\r\nandroid:left="10dp"\r\nandroid:top="10dp"\r\nandroid:right="10dp"\r\nandroid:bottom="10dp" /&gt;\r\n&lt;/shape&gt;\r\n&lt;/item&gt;\r\n\r\n&lt;item&gt;\r\n&lt;shape&gt;\r\n&lt;solid android:color="#ff9d77"/&gt;\r\n&lt;stroke\r\nandroid:width="2dp"\r\nandroid:color="#fad3cf" /&gt;\r\n&lt;corners\r\nandroid:topRightRadius="5dp"\r\nandroid:bottomLeftRadius="5dp"\r\nandroid:topLeftRadius="0dp"\r\nandroid:bottomRightRadius="0dp"\r\n/&gt;\r\n&lt;padding\r\nandroid:left="10dp"\r\nandroid:top="10dp"\r\nandroid:right="10dp"\r\nandroid:bottom="10dp" /&gt;\r\n&lt;/shape&gt;\r\n&lt;/item&gt;\r\n&lt;/selector&gt;</blockquote>\r\n<a href="http://acheng1314.cn/wp-content/uploads/2016/01/状态选择器效果图.png"><img class="alignleft size-full wp-image-106" src="http://acheng1314.cn/wp-content/uploads/2016/01/状态选择器效果图.png" alt="状态选择器效果图" width="378" height="757" /></a>\r\n\r\n&nbsp;', '【转载】状态适配器总结', '', 'inherit', 'closed', 'closed', '', '104-revision-v1', '', '', '2016-01-12 17:31:17', '2016-01-12 09:31:17', '', 104, 'http://acheng1314.cn/?p=108', 0, 'revision', '', 0),
(110, 1, '2016-02-24 15:57:43', '2016-02-24 07:57:43', '首先前几天一个APP需要申请权限的时候程序发生了崩溃，我的编译版本和目标版本都是23，当需要定位信息和手机串号的时候，定位信息为空，手机串号获取的时候直接崩溃了。\r\n\r\n细心的我仔细查看了下，无外乎都是权限获取失败。以前的代码必须改造成能检测API版本再动态申请权限的。<a href="http://inthecheesefactory.com/blog/things-you-need-to-know-about-android-m-permission-developer-edition/en">《参考文献--英文版安卓6.0权限介绍》</a>\r\n\r\n上面的文章中，作者先是说了下以前的情况，那就是直接在AndroidManifest.xml中申明权限就能直接使用了，但是在安卓6.0中，这样可能会导致程序崩溃，我们需要先动态申请权限，再检测权限是否获取成功，没有成功的话做出处理就行。\r\n\r\n当然方便的是，安卓权限是分组了的，当你申请了某一个的时候，该组下面的其他权限则不用再次申请（当然在安卓6.0上面要申请的权限都是属于权限中的危险权限），具体权限一览表如下：\r\n\r\n<a href="http://acheng1314.cn/wp-content/uploads/2016/01/permgroup.png"><img class="alignleft size-full wp-image-111" src="http://acheng1314.cn/wp-content/uploads/2016/01/permgroup.png" alt="安卓6.0权限分组一览表" width="639" height="802" /></a>\r\n\r\n&nbsp;\r\n\r\n当然仅仅是知道了这个还是不行的，我们需要根据不同的是同版本的需求做出程序正确的控制。\r\n\r\n在android6.0以下程序权限都是自动授予的，但是在android6.0以上，我们需要根据需要的权限手动申请。BUT，如果权限太多我们怎么处理呢？\r\n\r\n解决思路：针对权限的情况，需要哪些重要的权限我们在APP初始化的时候检查并授权。\r\n\r\n不是必须权限我们在APP运行的时候授权。\r\n\r\n干货：\r\n<pre style="color: #a9b7c6; font-family: ''Lucida Sans Typewriter''; font-size: 9.8pt; background-color: #2b2b2b;">getUsesPermission();    //android<span style="color: #808080; font-family: ''宋体'';">的开发版本为</span>23  <span style="color: #808080; font-family: ''宋体'';">申请权限，调用此方法实现权限申请</span></pre>\r\n<pre style="color: #a9b7c6; font-family: ''Lucida Sans Typewriter''; font-size: 9.8pt; background-color: #2b2b2b;">final private int REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS = 124;\r\n\r\nprivate void getUsesPermission() {\r\n\r\n    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\r\n        List&lt;String&gt; permissionsNeeded = new ArrayList&lt;String&gt;();\r\n\r\n        final List&lt;String&gt; permissionsList = new ArrayList&lt;String&gt;();\r\n        if (!addPermission(permissionsList, Manifest.permission.WRITE_EXTERNAL_STORAGE))\r\n            permissionsNeeded.add("<span style="color: #6a8759; font-family: ''宋体'';">手机存储空间</span>");\r\n        if (!addPermission(permissionsList, Manifest.permission.READ_PHONE_STATE))\r\n            permissionsNeeded.add("<span style="color: #6a8759; font-family: ''宋体'';">获取手机状态</span>");\r\n        if (!addPermission(permissionsList, Manifest.permission.CAMERA))\r\n            permissionsNeeded.add("<span style="color: #6a8759; font-family: ''宋体'';">手机相机</span>");\r\n        if (!addPermission(permissionsList, Manifest.permission.ACCESS_COARSE_LOCATION))\r\n            permissionsNeeded.add("<span style="color: #6a8759; font-family: ''宋体'';">手机位置</span>");\r\n\r\n        if (permissionsList.size() &gt; 0) {\r\n            if (permissionsNeeded.size() &gt; 0) { //<span style="color: #808080; font-family: ''宋体'';">待申请的权限列表\r\n</span>                // Need Rationale\r\n                String message = "<span style="color: #6a8759; font-family: ''宋体'';">你需要允许本</span>APP<span style="color: #6a8759; font-family: ''宋体'';">使用：</span>" + permissionsNeeded.get(0);\r\n                for (int i = 1; i &lt; permissionsNeeded.size(); i++)\r\n                    message = message + ", " + permissionsNeeded.get(i);\r\n                showMessageOKCancel(message,\r\n                        new DialogInterface.OnClickListener() {\r\n                            @TargetApi(Build.VERSION_CODES.M)\r\n                            @Override\r\n                            public void onClick(DialogInterface dialog, int which) {\r\n                                requestPermissions(permissionsList.toArray(new String[permissionsList.size()]),\r\n                                        REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);\r\n                            }\r\n                        });\r\n                return;\r\n            }\r\n\r\n            requestPermissions(permissionsList.toArray(new String[permissionsList.size()]),\r\n                    REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);\r\n        } else {//<span style="color: #808080; font-family: ''宋体'';">已经获得权限\r\n</span>            new Handler().postDelayed(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    openActivity(HomeActivity.class, null);\r\n                }\r\n            }, 1000);\r\n        }\r\n    } else {    //<span style="color: #808080; font-family: ''宋体'';">版本小于</span>API23\r\n        new Handler().postDelayed(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                openActivity(HomeActivity.class, null);\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n\r\n}\r\n\r\nprivate void showMessageOKCancel(String message, DialogInterface.OnClickListener okListener) {\r\n    new AlertDialog.Builder(this)\r\n            .setMessage(message)\r\n            .setPositiveButton("<span style="color: #6a8759; font-family: ''宋体'';">允许</span>", okListener)\r\n            .setNegativeButton("<span style="color: #6a8759; font-family: ''宋体'';">拒绝</span>", null)\r\n            .create()\r\n            .show();\r\n}\r\n\r\nprivate boolean addPermission(List&lt;String&gt; permissionsList, String permission) {\r\n    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\r\n        if (checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {\r\n            permissionsList.add(permission);\r\n            if (!shouldShowRequestPermissionRationale(permission))\r\n                return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\n@Override\r\npublic void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\r\n    switch (requestCode) {\r\n        case REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS: {\r\n            Map&lt;String, Integer&gt; perms = new HashMap&lt;String, Integer&gt;();\r\n            // Initial\r\n            perms.put(Manifest.permission.WRITE_EXTERNAL_STORAGE, PackageManager.PERMISSION_GRANTED);\r\n            perms.put(Manifest.permission.READ_PHONE_STATE, PackageManager.PERMISSION_GRANTED);\r\n            perms.put(Manifest.permission.CAMERA, PackageManager.PERMISSION_GRANTED);\r\n            perms.put(Manifest.permission.ACCESS_COARSE_LOCATION, PackageManager.PERMISSION_GRANTED);\r\n            // Fill with results\r\n            for (int i = 0; i &lt; permissions.length; i++)\r\n                perms.put(permissions[i], grantResults[i]);\r\n            // Check for ACCESS_FINE_LOCATION\r\n            if (perms.get(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED\r\n                    &amp;&amp; perms.get(Manifest.permission.READ_PHONE_STATE) == PackageManager.PERMISSION_GRANTED\r\n                    &amp;&amp; perms.get(Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED\r\n                    &amp;&amp; perms.get(Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\r\n                //<span style="color: #808080; font-family: ''宋体'';">经过用户授权，获得所有权限\r\n</span>                new Handler().postDelayed(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        openActivity(HomeActivity.class, null);\r\n                    }\r\n                }, 1000);\r\n                // All Permissions Granted\r\n            } else {    //<span style="color: #808080; font-family: ''宋体'';">未得到用户授权\r\n</span>                // Permission Denied\r\n                Toast.makeText(this, "<span style="color: #6a8759; font-family: ''宋体'';">一些权限未被允许，可能导致程序崩溃或功能异常</span>", Toast.LENGTH_SHORT)\r\n                        .show();\r\n                new Handler().postDelayed(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        openActivity(HomeActivity.class, null);\r\n                    }\r\n                }, 1000);\r\n            }\r\n        }\r\n        break;\r\n        default:\r\n            super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n    }\r\n}</pre>', 'Android6.0权限那点事', '', 'publish', 'open', 'open', '', 'android6-0%e6%9d%83%e9%99%90%e9%82%a3%e7%82%b9%e4%ba%8b', '', '', '2016-02-24 15:58:59', '2016-02-24 07:58:59', '', 0, 'http://acheng1314.cn/?p=110', 0, 'post', '', 1),
(111, 1, '2016-01-18 09:22:05', '2016-01-18 01:22:05', '', '安卓6.0权限分组一览表', '', 'inherit', 'open', 'closed', '', 'permgroup', '', '', '2016-01-18 09:22:19', '2016-01-18 01:22:19', '', 110, 'http://acheng1314.cn/wp-content/uploads/2016/01/permgroup.png', 0, 'attachment', 'image/png', 0),
(164, 1, '2016-02-24 15:57:43', '2016-02-24 07:57:43', '首先前几天一个APP需要申请权限的时候程序发生了崩溃，我的编译版本和目标版本都是23，当需要定位信息和手机串号的时候，定位信息为空，手机串号获取的时候直接崩溃了。\r\n\r\n细心的我仔细查看了下，无外乎都是权限获取失败。以前的代码必须改造成能检测API版本再动态申请权限的。<a href="http://inthecheesefactory.com/blog/things-you-need-to-know-about-android-m-permission-developer-edition/en">《参考文献--英文版安卓6.0权限介绍》</a>\r\n\r\n上面的文章中，作者先是说了下以前的情况，那就是直接在AndroidManifest.xml中申明权限就能直接使用了，但是在安卓6.0中，这样可能会导致程序崩溃，我们需要先动态申请权限，再检测权限是否获取成功，没有成功的话做出处理就行。\r\n\r\n当然方便的是，安卓权限是分组了的，当你申请了某一个的时候，该组下面的其他权限则不用再次申请（当然在安卓6.0上面要申请的权限都是属于权限中的危险权限），具体权限一览表如下：\r\n\r\n<a href="http://acheng1314.cn/wp-content/uploads/2016/01/permgroup.png"><img class="alignleft size-full wp-image-111" src="http://acheng1314.cn/wp-content/uploads/2016/01/permgroup.png" alt="安卓6.0权限分组一览表" width="639" height="802" /></a>\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n当然仅仅是知道了这个还是不行的，我们需要根据不同的是同版本的需求做出程序正确的控制。\r\n\r\n在android6.0以下程序权限都是自动授予的，但是在android6.0以上，我们需要根据需要的权限手动申请。BUT，如果权限太多我们怎么处理呢？\r\n\r\n解决思路：针对权限的情况，需要哪些重要的权限我们在APP初始化的时候检查并授权。\r\n\r\n不是必须权限我们在APP运行的时候授权。\r\n\r\n干货：\r\n<pre style="color: #a9b7c6; font-family: ''Lucida Sans Typewriter''; font-size: 9.8pt; background-color: #2b2b2b;">getUsesPermission();    //android<span style="color: #808080; font-family: ''宋体'';">的开发版本为</span>23  <span style="color: #808080; font-family: ''宋体'';">申请权限，调用此方法实现权限申请</span></pre>\r\n<pre style="color: #a9b7c6; font-family: ''Lucida Sans Typewriter''; font-size: 9.8pt; background-color: #2b2b2b;">\r\n\r\nfinal private int REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS = 124;\r\n\r\nprivate void getUsesPermission() {\r\n\r\n    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\r\n        List&lt;String&gt; permissionsNeeded = new ArrayList&lt;String&gt;();\r\n\r\n        final List&lt;String&gt; permissionsList = new ArrayList&lt;String&gt;();\r\n        if (!addPermission(permissionsList, Manifest.permission.WRITE_EXTERNAL_STORAGE))\r\n            permissionsNeeded.add("<span style="color: #6a8759; font-family: ''宋体'';">手机存储空间</span>");\r\n        if (!addPermission(permissionsList, Manifest.permission.READ_PHONE_STATE))\r\n            permissionsNeeded.add("<span style="color: #6a8759; font-family: ''宋体'';">获取手机状态</span>");\r\n        if (!addPermission(permissionsList, Manifest.permission.CAMERA))\r\n            permissionsNeeded.add("<span style="color: #6a8759; font-family: ''宋体'';">手机相机</span>");\r\n        if (!addPermission(permissionsList, Manifest.permission.ACCESS_COARSE_LOCATION))\r\n            permissionsNeeded.add("<span style="color: #6a8759; font-family: ''宋体'';">手机位置</span>");\r\n\r\n        if (permissionsList.size() &gt; 0) {\r\n            if (permissionsNeeded.size() &gt; 0) { //<span style="color: #808080; font-family: ''宋体'';">待申请的权限列表\r\n</span>                // Need Rationale\r\n                String message = "<span style="color: #6a8759; font-family: ''宋体'';">你需要允许本</span>APP<span style="color: #6a8759; font-family: ''宋体'';">使用：</span>" + permissionsNeeded.get(0);\r\n                for (int i = 1; i &lt; permissionsNeeded.size(); i++)\r\n                    message = message + ", " + permissionsNeeded.get(i);\r\n                showMessageOKCancel(message,\r\n                        new DialogInterface.OnClickListener() {\r\n                            @TargetApi(Build.VERSION_CODES.M)\r\n                            @Override\r\n                            public void onClick(DialogInterface dialog, int which) {\r\n                                requestPermissions(permissionsList.toArray(new String[permissionsList.size()]),\r\n                                        REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);\r\n                            }\r\n                        });\r\n                return;\r\n            }\r\n\r\n            requestPermissions(permissionsList.toArray(new String[permissionsList.size()]),\r\n                    REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);\r\n        } else {//<span style="color: #808080; font-family: ''宋体'';">已经获得权限\r\n</span>            new Handler().postDelayed(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    openActivity(HomeActivity.class, null);\r\n                }\r\n            }, 1000);\r\n        }\r\n    } else {    //<span style="color: #808080; font-family: ''宋体'';">版本小于</span>API23\r\n        new Handler().postDelayed(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                openActivity(HomeActivity.class, null);\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n\r\n}\r\n\r\nprivate void showMessageOKCancel(String message, DialogInterface.OnClickListener okListener) {\r\n    new AlertDialog.Builder(this)\r\n            .setMessage(message)\r\n            .setPositiveButton("<span style="color: #6a8759; font-family: ''宋体'';">允许</span>", okListener)\r\n            .setNegativeButton("<span style="color: #6a8759; font-family: ''宋体'';">拒绝</span>", null)\r\n            .create()\r\n            .show();\r\n}\r\n\r\nprivate boolean addPermission(List&lt;String&gt; permissionsList, String permission) {\r\n    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\r\n        if (checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {\r\n            permissionsList.add(permission);\r\n            if (!shouldShowRequestPermissionRationale(permission))\r\n                return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\n@Override\r\npublic void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\r\n    switch (requestCode) {\r\n        case REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS: {\r\n            Map&lt;String, Integer&gt; perms = new HashMap&lt;String, Integer&gt;();\r\n            // Initial\r\n            perms.put(Manifest.permission.WRITE_EXTERNAL_STORAGE, PackageManager.PERMISSION_GRANTED);\r\n            perms.put(Manifest.permission.READ_PHONE_STATE, PackageManager.PERMISSION_GRANTED);\r\n            perms.put(Manifest.permission.CAMERA, PackageManager.PERMISSION_GRANTED);\r\n            perms.put(Manifest.permission.ACCESS_COARSE_LOCATION, PackageManager.PERMISSION_GRANTED);\r\n            // Fill with results\r\n            for (int i = 0; i &lt; permissions.length; i++)\r\n                perms.put(permissions[i], grantResults[i]);\r\n            // Check for ACCESS_FINE_LOCATION\r\n            if (perms.get(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED\r\n                    &amp;&amp; perms.get(Manifest.permission.READ_PHONE_STATE) == PackageManager.PERMISSION_GRANTED\r\n                    &amp;&amp; perms.get(Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED\r\n                    &amp;&amp; perms.get(Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\r\n                //<span style="color: #808080; font-family: ''宋体'';">经过用户授权，获得所有权限\r\n</span>                new Handler().postDelayed(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        openActivity(HomeActivity.class, null);\r\n                    }\r\n                }, 1000);\r\n                // All Permissions Granted\r\n            } else {    //<span style="color: #808080; font-family: ''宋体'';">未得到用户授权\r\n</span>                // Permission Denied\r\n                Toast.makeText(this, "<span style="color: #6a8759; font-family: ''宋体'';">一些权限未被允许，可能导致程序崩溃或功能异常</span>", Toast.LENGTH_SHORT)\r\n                        .show();\r\n                new Handler().postDelayed(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        openActivity(HomeActivity.class, null);\r\n                    }\r\n                }, 1000);\r\n            }\r\n        }\r\n        break;\r\n        default:\r\n            super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n    }\r\n}</pre>', 'Android6.0权限那点事', '', 'inherit', 'closed', 'closed', '', '110-revision-v1', '', '', '2016-02-24 15:57:43', '2016-02-24 07:57:43', '', 110, 'http://acheng1314.cn/?p=164', 0, 'revision', '', 0),
(165, 1, '2016-02-24 15:58:59', '2016-02-24 07:58:59', '首先前几天一个APP需要申请权限的时候程序发生了崩溃，我的编译版本和目标版本都是23，当需要定位信息和手机串号的时候，定位信息为空，手机串号获取的时候直接崩溃了。\r\n\r\n细心的我仔细查看了下，无外乎都是权限获取失败。以前的代码必须改造成能检测API版本再动态申请权限的。<a href="http://inthecheesefactory.com/blog/things-you-need-to-know-about-android-m-permission-developer-edition/en">《参考文献--英文版安卓6.0权限介绍》</a>\r\n\r\n上面的文章中，作者先是说了下以前的情况，那就是直接在AndroidManifest.xml中申明权限就能直接使用了，但是在安卓6.0中，这样可能会导致程序崩溃，我们需要先动态申请权限，再检测权限是否获取成功，没有成功的话做出处理就行。\r\n\r\n当然方便的是，安卓权限是分组了的，当你申请了某一个的时候，该组下面的其他权限则不用再次申请（当然在安卓6.0上面要申请的权限都是属于权限中的危险权限），具体权限一览表如下：\r\n\r\n<a href="http://acheng1314.cn/wp-content/uploads/2016/01/permgroup.png"><img class="alignleft size-full wp-image-111" src="http://acheng1314.cn/wp-content/uploads/2016/01/permgroup.png" alt="安卓6.0权限分组一览表" width="639" height="802" /></a>\r\n\r\n&nbsp;\r\n\r\n当然仅仅是知道了这个还是不行的，我们需要根据不同的是同版本的需求做出程序正确的控制。\r\n\r\n在android6.0以下程序权限都是自动授予的，但是在android6.0以上，我们需要根据需要的权限手动申请。BUT，如果权限太多我们怎么处理呢？\r\n\r\n解决思路：针对权限的情况，需要哪些重要的权限我们在APP初始化的时候检查并授权。\r\n\r\n不是必须权限我们在APP运行的时候授权。\r\n\r\n干货：\r\n<pre style="color: #a9b7c6; font-family: ''Lucida Sans Typewriter''; font-size: 9.8pt; background-color: #2b2b2b;">getUsesPermission();    //android<span style="color: #808080; font-family: ''宋体'';">的开发版本为</span>23  <span style="color: #808080; font-family: ''宋体'';">申请权限，调用此方法实现权限申请</span></pre>\r\n<pre style="color: #a9b7c6; font-family: ''Lucida Sans Typewriter''; font-size: 9.8pt; background-color: #2b2b2b;">final private int REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS = 124;\r\n\r\nprivate void getUsesPermission() {\r\n\r\n    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\r\n        List&lt;String&gt; permissionsNeeded = new ArrayList&lt;String&gt;();\r\n\r\n        final List&lt;String&gt; permissionsList = new ArrayList&lt;String&gt;();\r\n        if (!addPermission(permissionsList, Manifest.permission.WRITE_EXTERNAL_STORAGE))\r\n            permissionsNeeded.add("<span style="color: #6a8759; font-family: ''宋体'';">手机存储空间</span>");\r\n        if (!addPermission(permissionsList, Manifest.permission.READ_PHONE_STATE))\r\n            permissionsNeeded.add("<span style="color: #6a8759; font-family: ''宋体'';">获取手机状态</span>");\r\n        if (!addPermission(permissionsList, Manifest.permission.CAMERA))\r\n            permissionsNeeded.add("<span style="color: #6a8759; font-family: ''宋体'';">手机相机</span>");\r\n        if (!addPermission(permissionsList, Manifest.permission.ACCESS_COARSE_LOCATION))\r\n            permissionsNeeded.add("<span style="color: #6a8759; font-family: ''宋体'';">手机位置</span>");\r\n\r\n        if (permissionsList.size() &gt; 0) {\r\n            if (permissionsNeeded.size() &gt; 0) { //<span style="color: #808080; font-family: ''宋体'';">待申请的权限列表\r\n</span>                // Need Rationale\r\n                String message = "<span style="color: #6a8759; font-family: ''宋体'';">你需要允许本</span>APP<span style="color: #6a8759; font-family: ''宋体'';">使用：</span>" + permissionsNeeded.get(0);\r\n                for (int i = 1; i &lt; permissionsNeeded.size(); i++)\r\n                    message = message + ", " + permissionsNeeded.get(i);\r\n                showMessageOKCancel(message,\r\n                        new DialogInterface.OnClickListener() {\r\n                            @TargetApi(Build.VERSION_CODES.M)\r\n                            @Override\r\n                            public void onClick(DialogInterface dialog, int which) {\r\n                                requestPermissions(permissionsList.toArray(new String[permissionsList.size()]),\r\n                                        REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);\r\n                            }\r\n                        });\r\n                return;\r\n            }\r\n\r\n            requestPermissions(permissionsList.toArray(new String[permissionsList.size()]),\r\n                    REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);\r\n        } else {//<span style="color: #808080; font-family: ''宋体'';">已经获得权限\r\n</span>            new Handler().postDelayed(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    openActivity(HomeActivity.class, null);\r\n                }\r\n            }, 1000);\r\n        }\r\n    } else {    //<span style="color: #808080; font-family: ''宋体'';">版本小于</span>API23\r\n        new Handler().postDelayed(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                openActivity(HomeActivity.class, null);\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n\r\n}\r\n\r\nprivate void showMessageOKCancel(String message, DialogInterface.OnClickListener okListener) {\r\n    new AlertDialog.Builder(this)\r\n            .setMessage(message)\r\n            .setPositiveButton("<span style="color: #6a8759; font-family: ''宋体'';">允许</span>", okListener)\r\n            .setNegativeButton("<span style="color: #6a8759; font-family: ''宋体'';">拒绝</span>", null)\r\n            .create()\r\n            .show();\r\n}\r\n\r\nprivate boolean addPermission(List&lt;String&gt; permissionsList, String permission) {\r\n    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\r\n        if (checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {\r\n            permissionsList.add(permission);\r\n            if (!shouldShowRequestPermissionRationale(permission))\r\n                return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\n@Override\r\npublic void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\r\n    switch (requestCode) {\r\n        case REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS: {\r\n            Map&lt;String, Integer&gt; perms = new HashMap&lt;String, Integer&gt;();\r\n            // Initial\r\n            perms.put(Manifest.permission.WRITE_EXTERNAL_STORAGE, PackageManager.PERMISSION_GRANTED);\r\n            perms.put(Manifest.permission.READ_PHONE_STATE, PackageManager.PERMISSION_GRANTED);\r\n            perms.put(Manifest.permission.CAMERA, PackageManager.PERMISSION_GRANTED);\r\n            perms.put(Manifest.permission.ACCESS_COARSE_LOCATION, PackageManager.PERMISSION_GRANTED);\r\n            // Fill with results\r\n            for (int i = 0; i &lt; permissions.length; i++)\r\n                perms.put(permissions[i], grantResults[i]);\r\n            // Check for ACCESS_FINE_LOCATION\r\n            if (perms.get(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED\r\n                    &amp;&amp; perms.get(Manifest.permission.READ_PHONE_STATE) == PackageManager.PERMISSION_GRANTED\r\n                    &amp;&amp; perms.get(Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED\r\n                    &amp;&amp; perms.get(Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\r\n                //<span style="color: #808080; font-family: ''宋体'';">经过用户授权，获得所有权限\r\n</span>                new Handler().postDelayed(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        openActivity(HomeActivity.class, null);\r\n                    }\r\n                }, 1000);\r\n                // All Permissions Granted\r\n            } else {    //<span style="color: #808080; font-family: ''宋体'';">未得到用户授权\r\n</span>                // Permission Denied\r\n                Toast.makeText(this, "<span style="color: #6a8759; font-family: ''宋体'';">一些权限未被允许，可能导致程序崩溃或功能异常</span>", Toast.LENGTH_SHORT)\r\n                        .show();\r\n                new Handler().postDelayed(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        openActivity(HomeActivity.class, null);\r\n                    }\r\n                }, 1000);\r\n            }\r\n        }\r\n        break;\r\n        default:\r\n            super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n    }\r\n}</pre>', 'Android6.0权限那点事', '', 'inherit', 'closed', 'closed', '', '110-revision-v1', '', '', '2016-02-24 15:58:59', '2016-02-24 07:58:59', '', 110, 'http://acheng1314.cn/?p=165', 0, 'revision', '', 0),
(168, 1, '2016-03-05 14:27:13', '2016-03-05 06:27:13', '作者是一名普通得不能再普通的程序猿，没啥事的时候就喜欢瞎搞搞，目前暂居海口，有意向合作的可以留下联系方式，到时一起哈哈哈', '关于作者', '', 'inherit', 'closed', 'closed', '', '2-revision-v1', '', '', '2016-03-05 14:27:13', '2016-03-05 06:27:13', '', 2, 'http://acheng1314.cn/?p=168', 0, 'revision', '', 0),
(169, 1, '2016-03-05 14:28:36', '2016-03-05 06:28:36', '##电商APP用户版首页优化笔记\r\n\r\n- 首页构成：\r\n* 电商类型APP，用户版首页设计经典模型请参考：手机淘宝、手机天猫、京东商城等。\r\n\r\n* 参考效果图如下：\r\n\r\n<a href="http://acheng1314.cn/wp-content/uploads/2015/12/1-1首页_看图王.jpg"><img class="alignleft wp-image-92 size-large" src="http://acheng1314.cn/wp-content/uploads/2015/12/1-1首页_看图王-313x1024.jpg" alt="(1-1)首页_看图王" width="313" height="1024" /></a>\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n* 首先我们根据上面的效果图可以将首页模块拆分：\r\n* 1、搜索、位置切换\r\n* 2、快捷通道（8宫格导航栏）\r\n* 3、轮播图\r\n* 4、特色推荐\r\n* 5、个性列表\r\n* 6、···等等\r\n- 首页需求分析：\r\n* 1、界面构成\r\n* 界面渲染，分层设计（学过PS的童鞋都知道，底层背景色，UI控件背景色，UI控件图片，UI控件的个数（数量也涉及到渲染效率））\r\n* 自定义toolBar，搜索框其实是一个textView，点击后打开搜索页，地点选择是打开一个popWindow\r\n* 8宫格快捷通道，其实是一个自定义的GridView，通过自定义，可以实现资源更新（无限遐想ing。。。）\r\n* 推荐美食，这里是一个轮播图，通过自定义轮播图实现各种复杂的功能\r\n* 特色推荐，这里根据效果图实现就好了\r\n* 个性列表，这里是一个全撑大的ListView，为什么要全撑大，在ScrollView中默认的ListView是不能完全显示列表的内容的所以需要全撑大，思路重写OnMesure方法\r\n* 注意：界面元素的背景色Background太多会影响屏幕绘制速度，所以越少量的背景色来实现是一个重要的问题\r\n* 2、异常处理\r\n* 无网络处理\r\n* 无SD卡处理\r\n* 程序需要的存储空间不足的处理\r\n* 网络连结缓慢\r\n* 网络数据加载异常\r\n* 3、网络请求\r\n* 网上开源的完善的框架很多，博主常用：KJFramForAndroid里面的KJHttp\r\n* 4、数据缓存\r\n* 思路主要是缓存Json数据\r\n* 5、图片加载\r\n* 一样采用KJFramForAndroid里面的KJBitMap\r\n- 优化：\r\n- 图片加载和网络请求采用单例模式\r\n- 数据缓存放在界面加载后，后者是在闪屏页面完成\r\n- 图片大小根据UI控件大小来自动缩放\r\n- UI精简（快捷通道这里的Item，图片和文字放在同一个TextView中）整个界面的背景色为灰色，GridView为白色背景，item背景色为无，这样简单的处理后减少界面重绘次数\r\n- 控件资源异步加载，通过Handler消息机制实现，主线程不能执行任何耗时操作\r\n- 数据处理和网络请求独立，主界面尽量只用来加载数据展示界面\r\n- 数据加载分主次，然后文字信息先展示，图片资源后加载。', '[原创]电商类APP首页优化', '', 'inherit', 'closed', 'closed', '', '90-revision-v1', '', '', '2016-03-05 14:28:36', '2016-03-05 06:28:36', '', 90, 'http://acheng1314.cn/?p=169', 0, 'revision', '', 0),
(170, 1, '2016-03-08 11:03:10', '2016-03-08 03:03:10', '首先作为技术人员也不能总说技术，先说点人事。\r\n\r\n1.首先是昨天刚被朋友嘲讽了，说我老得快，该找个女朋友，还问我是否没能耐找不到！！！好吧几年生活，这同学都这样关心人了。。。然后就是个人的生活整的很难过。。。是该。\r\n\r\n2.公司的事情整的很不开心，试用期工资是0.8就算了，还钻粗来了绩效考核0.7，fuck！加班工资是基础工资除以30，事假和病假所有工资一块扣，他妈的是算的22天！！！\r\n\r\n3.跟你谈理想的领导不是好领导，跟你谈钱的不会坏到哪里去，要是该谈钱的时候谈理想，他妈的叫他去世。\r\n\r\n吐槽完了，总结：\r\n\r\nA、首先我们项目中引用了第三方的model，我们项目未做国际化，而他们的项目做了国际化，结果就是我们的项目名字等等，一些信息变成他们的。解决办法：在主项目的gradle.properties中添加manifestmerger.enabled=true即可解决问题。\r\n\r\nB、推送的时候使用极光推送，但是WiFi（数据通信）自动关闭，经过检查后发现是权限少写了\r\n<pre>CHANGE_WIFI_STATE</pre>\r\nC、项目中，上拉刷新下拉加载的时候，本来采用手写，后面发现处理太麻烦，鸿阳大神的万能适配器数据刷新有问题，干脆全部替换，采用了\r\n<pre>compile ''com.jude:easyrecyclerview:3.3.4''</pre>\r\nD、在项目的build.gradle中，将jar文件目录和jni目录合并\r\n<pre>//jni调用目录设定为 jar文件同目录\r\nsourceSets {\r\n    main {\r\n        jniLibs.srcDirs = [''libs'']\r\n    }\r\n}</pre>\r\nE、开发中为了查看请求的网络连接，使用了Fiddle这个工具\r\n\r\nF、项目首页采用了底部导航栏多入口，前面使用过Fragment+ViewPager的方式，现在采用了单一的FrameLayout+FragmentStatePagerAdapter设定适配器为：\r\n<pre>FragmentStatePagerAdapter</pre>\r\n同时，问题也出现，在手机内存不足的时候，Activity被回收后，再次打开的时候多个Fragment会产生重叠，所以再次对它进行了处理，主要处理的方法是：onSaveInstanceState中保存我们的Fragment的position，接着在onRestoreInstanceState中实现位置切换并切换底部导航栏变色图标。具体实现如下：\r\n\r\na、首先我们的Fragment使用工厂模式创建，\r\n<pre>public class FragmentFactory {\r\n    \r\n    private static Map&lt;Integer, BaseFragment&gt; baseFragments = new HashMap&lt;&gt;();\r\n    \r\n    /**\r\n     * 用于创建fragment\r\n     *\r\n     * @param position\r\n     * @return\r\n     */\r\n    public static Fragment creatFragment(int position) {\r\n        BaseFragment baseFragment = baseFragments.get(position);\r\n        //baseFragment不存在时候，我们创建他并保存在Map中，存在的时候则直接使用\r\n        if (baseFragment == null) {\r\n        //多个Fragment在下面实现\r\n            switch (position) {\r\n                case 0:\r\n                    baseFragment = new IndexFragment();\r\n                    break;\r\n                case 1:\r\n                    baseFragment = new FindGoodsFragment();\r\n                    break;\r\n                case 2:\r\n                    baseFragment = new MyShipsFragment();\r\n                    break;\r\n                case 3:\r\n                    baseFragment = new MineFrament();\r\n                    break;\r\n                \r\n                \r\n            }\r\n            // 将已将创建的fragment记录到集合中\r\n            baseFragments.put(position, baseFragment);\r\n        }\r\n        return baseFragment;\r\n    }\r\n}</pre>\r\nb、接着在主页的布局文件中，设定FrameLayout+RadioGroup，FrameLayout设定FragmentStatePagerAdapter，并设定切换的方法（以便后面调用），如下：\r\n<pre>/**\r\n * 切换Fragement\r\n */\r\nprivate void exchangeFragement() {\r\n    Fragment fragment = (Fragment) fragmentStatePagerAdapter\r\n            .instantiateItem(frameLayout, index);\r\n    fragmentStatePagerAdapter.setPrimaryItem(frameLayout, 0,\r\n            fragment);\r\n    fragmentStatePagerAdapter.finishUpdate(frameLayout);\r\n}</pre>\r\n<pre>FragmentStatePagerAdapter fragmentStatePagerAdapter = new FragmentStatePagerAdapter(\r\n        getSupportFragmentManager()) {\r\n\r\n    @Override\r\n    public int getCount() {\r\n        return 4;\r\n    }\r\n\r\n    @Override\r\n    public android.support.v4.app.Fragment getItem(int position) {\r\n        return FragmentFactory.creatFragment(position);\r\n    }\r\n};</pre>\r\n顺带设定底部导航栏的按钮变色控制的方法：\r\n<pre>/**\r\n * 切换底部导航栏的选中按钮，仅需要在Activity回归后者是被销毁后再调用\r\n *\r\n * @param childCheckedPostion传入下面的position，我们预先知道有几个所以能定位坐标和ID\r\n */\r\nprivate void checkButton(int childCheckedPostion) {\r\n    switch (childCheckedPostion) {\r\n        case 0:\r\n            group.check(rb_index.getId());\r\n            break;\r\n        case 1:\r\n            group.check(rb_findgoods.getId());\r\n            break;\r\n        case 2:\r\n            group.check(rb_myships.getId());\r\n            break;\r\n        case 3:\r\n            group.check(rb_mine.getId());\r\n            break;\r\n    }\r\n}</pre>\r\n最后是控制被销毁后如何回复界面使其不重叠（重要的都在注释里，请细心）：\r\n<pre>@Override\r\nprotected void onRestoreInstanceState(Bundle savedInstanceState) {\r\n    index = savedInstanceState.getInt("postion");   //获取保存的位置\r\n    exchangeFragement();    //切换位置\r\n    checkButton(index);     //切换底部导航栏的选中状态\r\n    super.onRestoreInstanceState(savedInstanceState);\r\n}\r\n\r\n@Override\r\nprotected void onSaveInstanceState(Bundle outState) {\r\n    outState.putInt("postion", index);  //保存位置\r\n    //删除Super回调父类的方法，防止在被回收后来调用去把所有的视图都保存，然后通过获取保存的位置来重新绘制界面\r\n    //Activity中的onSaveInstanceState() 里面有一句super.onRestoreInstanceState(savedInstanceState)，\r\n    //Google对于这句话的解释是“Always call the superclass so it can save the view hierarchy state”，大概意思是“\r\n    //总是执行这句代码来调用父类去保存视图层的状态”。\r\n}</pre>\r\nG、解决了前面的问题后，由于需要，我们加入了WebView控件，但是为了减少开发量，我们需要把微信网页和我们这个APP内嵌网页区分开来，所以我们需要重写User-Agent，接着我们讨论了功能，由于充能需要和本地交互，我们移动端采用拦截URL实现，但是需要把数据提交给网页的时候，我们还是调用了网页的JS。\r\n\r\nH、在项目中，我们全部采用了最新的Android6.0的开发SDK和build版本，所以需要加入权限申请，具体处理办法请看我的另一篇博文：<a href="http://acheng1314.cn/?p=110" target="_blank">Android6.0权限那点事</a>\r\n\r\nI、在项目中我们采用了一些对话框，但是个人很不喜欢他们，遂改成Activity模仿成对话框，至于用Activity的好处就不必多提了，百度能找到一大堆，具体怎么实现如下：\r\n<pre>&lt;style name="dialog" parent="Theme.AppCompat.Light.NoActionBar"&gt;\r\n    &lt;!-- 去黑边 --&gt;\r\n    &lt;item name="android:windowFrame"&gt;@null&lt;/item&gt;\r\n    &lt;!-- 设置是否可滑动 --&gt;\r\n    &lt;item name="android:windowIsFloating"&gt;true&lt;/item&gt;\r\n    &lt;!-- 设置是否透明 --&gt;\r\n    &lt;item name="android:windowIsTranslucent"&gt;true&lt;/item&gt;\r\n    &lt;!-- 无标题 --&gt;\r\n    &lt;item name="android:windowNoTitle"&gt;true&lt;/item&gt;\r\n    &lt;item name="android:windowActionBar"&gt;false&lt;/item&gt;\r\n    &lt;!-- 背景 --&gt;\r\n    &lt;item name="android:background"&gt;@null&lt;/item&gt;\r\n    &lt;!-- 窗口背景 --&gt;\r\n    &lt;item name="android:windowBackground"&gt;@android:color/transparent&lt;/item&gt;\r\n    &lt;!-- 是否变暗 --&gt;\r\n    &lt;item name="android:backgroundDimEnabled"&gt;true&lt;/item&gt;\r\n    &lt;!-- 点击空白部分activity不消失 --&gt;\r\n    &lt;item name="android:windowCloseOnTouchOutside"&gt;true&lt;/item&gt;\r\n&lt;/style&gt;</pre>\r\n这是在我们的Style文件中的设置，然后在配置清单文件中，我们可以给我们的Activity指定Style为：\r\n<pre>android:theme="@style/dialog"</pre>\r\n&nbsp;', '最近项目开发中遇到的问题总纲', '', 'publish', 'open', 'open', '', '%e6%9c%80%e8%bf%91%e9%a1%b9%e7%9b%ae%e5%bc%80%e5%8f%91%e4%b8%ad%e9%81%87%e5%88%b0%e7%9a%84%e9%97%ae%e9%a2%98%e6%80%bb%e7%ba%b2', '', '\nhttp://acheng1314.cn/?p=110', '2016-03-08 11:13:59', '2016-03-08 03:13:59', '', 0, 'http://acheng1314.cn/?p=170', 0, 'post', '', 0),
(172, 1, '2016-03-08 09:55:50', '2016-03-08 01:55:50', '首先作为技术人员也不能总说技术，先说点人事。\r\n\r\n1.首先是昨天刚被朋友嘲讽了，说我老得快，该找个女朋友，还问我是否没能耐找不到！！！好吧几年生活，这同学都这样关心人了。。。然后就是个人的生活整的很难过。。。是该。\r\n\r\n2.公司的事情整的很不开心，试用期工资是0.8就算了，还钻粗来了绩效考核0.7，fuck！加班工资是基础工资除以30，事假和病假所有工资一块扣，他妈的是算的22天！！！\r\n\r\n3.跟你谈理想的领导不是好领导，跟你谈钱的不会坏到哪里去，要是该谈钱的时候谈理想，他妈的叫他去世。\r\n\r\n吐槽完了，总结：\r\n\r\nA、首先我们项目中引用了第三方的model，我们项目未做国际化，而他们的项目做了国际化，结果就是我们的项目名字等等，一些信息变成他们的。解决办法：在主项目的gradle.properties中添加manifestmerger.enabled=true即可解决问题。\r\n\r\nB、', '最近项目开发中遇到的问题总纲', '', 'inherit', 'closed', 'closed', '', '170-revision-v1', '', '', '2016-03-08 09:55:50', '2016-03-08 01:55:50', '', 170, 'http://acheng1314.cn/?p=172', 0, 'revision', '', 0),
(173, 1, '2016-03-08 09:59:59', '2016-03-08 01:59:59', '##电商APP用户版首页优化笔记\r\n\r\n- 首页构成：\r\n* 电商类型APP，用户版首页设计经典模型请参考：手机淘宝、手机天猫、京东商城等。\r\n\r\n* 参考效果图如下：\r\n\r\n<a href="http://acheng1314.cn/wp-content/uploads/2015/12/1-1首页_看图王.jpg"><img class="alignleft wp-image-92 size-large" src="http://acheng1314.cn/wp-content/uploads/2015/12/1-1首页_看图王-313x1024.jpg" alt="(1-1)首页_看图王" width="313" height="1024" /></a>\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n* 首先我们根据上面的效果图可以将首页模块拆分：\r\n* 1、搜索、位置切换\r\n* 2、快捷通道（8宫格导航栏）\r\n* 3、轮播图\r\n* 4、特色推荐\r\n* 5、个性列表\r\n* 6、···等等\r\n- 首页需求分析：\r\n* 1、界面构成\r\n* 界面渲染，分层设计（学过PS的童鞋都知道，底层背景色，UI控件背景色，UI控件图片，UI控件的个数（数量也涉及到渲染效率））\r\n* 自定义toolBar，搜索框其实是一个textView，点击后打开搜索页，地点选择是打开一个popWindow\r\n* 8宫格快捷通道，其实是一个自定义的GridView，通过自定义，可以实现资源更新（无限遐想ing。。。）\r\n* 推荐美食，这里是一个轮播图，通过自定义轮播图实现各种复杂的功能\r\n* 特色推荐，这里根据效果图实现就好了\r\n* 个性列表，这里是一个全撑大的ListView，为什么要全撑大，在ScrollView中默认的ListView是不能完全显示列表的内容的所以需要全撑大，思路重写OnMesure方法\r\n* 注意：界面元素的背景色Background太多会影响屏幕绘制速度，所以越少量的背景色来实现是一个重要的问题\r\n* 2、异常处理\r\n* 无网络处理\r\n* 无SD卡处理\r\n* 程序需要的存储空间不足的处理\r\n* 网络连结缓慢\r\n* 网络数据加载异常\r\n* 3、网络请求\r\n* 网上开源的完善的框架很多，博主常用：KJFramForAndroid里面的KJHttp\r\n* 4、数据缓存\r\n* 思路主要是缓存Json数据\r\n* 5、图片加载\r\n* 一样采用KJFramForAndroid里面的KJBitMap\r\n- 优化：\r\n- 图片加载和网络请求采用单例模式\r\n- 数据缓存放在界面加载后，后者是在闪屏页面完成\r\n- 图片大小根据UI控件大小来自动缩放\r\n- UI精简（快捷通道这里的Item，图片和文字放在同一个TextView中）整个界面的背景色为灰色，GridView为白色背景，item背景色为无，这样简单的处理后减少界面重绘次数\r\n- 控件资源异步加载，通过Handler消息机制实现，主线程不能执行任何耗时操作\r\n- 数据处理和网络请求独立，主界面尽量只用来加载数据展示界面\r\n- 数据加载分主次，然后文字信息先展示，图片资源后加载。', '[原创]电商类APP首页优化', '', 'inherit', 'closed', 'closed', '', '90-revision-v1', '', '', '2016-03-08 09:59:59', '2016-03-08 01:59:59', '', 90, 'http://acheng1314.cn/?p=173', 0, 'revision', '', 0),
(174, 1, '2016-03-08 11:03:10', '2016-03-08 03:03:10', '首先作为技术人员也不能总说技术，先说点人事。\r\n\r\n1.首先是昨天刚被朋友嘲讽了，说我老得快，该找个女朋友，还问我是否没能耐找不到！！！好吧几年生活，这同学都这样关心人了。。。然后就是个人的生活整的很难过。。。是该。\r\n\r\n2.公司的事情整的很不开心，试用期工资是0.8就算了，还钻粗来了绩效考核0.7，fuck！加班工资是基础工资除以30，事假和病假所有工资一块扣，他妈的是算的22天！！！\r\n\r\n3.跟你谈理想的领导不是好领导，跟你谈钱的不会坏到哪里去，要是该谈钱的时候谈理想，他妈的叫他去世。\r\n\r\n吐槽完了，总结：\r\n\r\nA、首先我们项目中引用了第三方的model，我们项目未做国际化，而他们的项目做了国际化，结果就是我们的项目名字等等，一些信息变成他们的。解决办法：在主项目的gradle.properties中添加manifestmerger.enabled=true即可解决问题。\r\n\r\nB、推送的时候使用极光推送，但是WiFi（数据通信）自动关闭，经过检查后发现是权限少写了\r\n<pre>CHANGE_WIFI_STATE</pre>\r\nC、项目中，上拉刷新下拉加载的时候，本来采用手写，后面发现处理太麻烦，鸿阳大神的万能适配器数据刷新有问题，干脆全部替换，采用了\r\n<pre>compile ''de.hdodenhof:circleimageview:2.0.0''</pre>\r\nD、在项目的build.gradle中，将jar文件目录和jni目录合并\r\n<pre>//jni调用目录设定为 jar文件同目录\r\nsourceSets {\r\n    main {\r\n        jniLibs.srcDirs = [''libs'']\r\n    }\r\n}</pre>\r\nE、开发中为了查看请求的网络连接，使用了Fiddle这个工具\r\n\r\nF、项目首页采用了底部导航栏多入口，前面使用过Fragment+ViewPager的方式，现在采用了单一的FrameLayout+FragmentStatePagerAdapter设定适配器为：\r\n<pre>FragmentStatePagerAdapter</pre>\r\n同时，问题也出现，在手机内存不足的时候，Activity被回收后，再次打开的时候多个Fragment会产生重叠，所以再次对它进行了处理，主要处理的方法是：onSaveInstanceState中保存我们的Fragment的position，接着在onRestoreInstanceState中实现位置切换并切换底部导航栏变色图标。具体实现如下：\r\n\r\na、首先我们的Fragment使用工厂模式创建，\r\n<pre>public class FragmentFactory {\r\n    \r\n    private static Map&lt;Integer, BaseFragment&gt; baseFragments = new HashMap&lt;&gt;();\r\n    \r\n    /**\r\n     * 用于创建fragment\r\n     *\r\n     * @param position\r\n     * @return\r\n     */\r\n    public static Fragment creatFragment(int position) {\r\n        BaseFragment baseFragment = baseFragments.get(position);\r\n        //baseFragment不存在时候，我们创建他并保存在Map中，存在的时候则直接使用\r\n        if (baseFragment == null) {\r\n        //多个Fragment在下面实现\r\n            switch (position) {\r\n                case 0:\r\n                    baseFragment = new IndexFragment();\r\n                    break;\r\n                case 1:\r\n                    baseFragment = new FindGoodsFragment();\r\n                    break;\r\n                case 2:\r\n                    baseFragment = new MyShipsFragment();\r\n                    break;\r\n                case 3:\r\n                    baseFragment = new MineFrament();\r\n                    break;\r\n                \r\n                \r\n            }\r\n            // 将已将创建的fragment记录到集合中\r\n            baseFragments.put(position, baseFragment);\r\n        }\r\n        return baseFragment;\r\n    }\r\n}</pre>\r\nb、接着在主页的布局文件中，设定FrameLayout+RadioGroup，FrameLayout设定FragmentStatePagerAdapter，并设定切换的方法（以便后面调用），如下：\r\n<pre>/**\r\n * 切换Fragement\r\n */\r\nprivate void exchangeFragement() {\r\n    Fragment fragment = (Fragment) fragmentStatePagerAdapter\r\n            .instantiateItem(frameLayout, index);\r\n    fragmentStatePagerAdapter.setPrimaryItem(frameLayout, 0,\r\n            fragment);\r\n    fragmentStatePagerAdapter.finishUpdate(frameLayout);\r\n}</pre>\r\n<pre>FragmentStatePagerAdapter fragmentStatePagerAdapter = new FragmentStatePagerAdapter(\r\n        getSupportFragmentManager()) {\r\n\r\n    @Override\r\n    public int getCount() {\r\n        return 4;\r\n    }\r\n\r\n    @Override\r\n    public android.support.v4.app.Fragment getItem(int position) {\r\n        return FragmentFactory.creatFragment(position);\r\n    }\r\n};</pre>\r\n顺带设定底部导航栏的按钮变色控制的方法：\r\n<pre>/**\r\n * 切换底部导航栏的选中按钮，仅需要在Activity回归后者是被销毁后再调用\r\n *\r\n * @param childCheckedPostion传入下面的position，我们预先知道有几个所以能定位坐标和ID\r\n */\r\nprivate void checkButton(int childCheckedPostion) {\r\n    switch (childCheckedPostion) {\r\n        case 0:\r\n            group.check(rb_index.getId());\r\n            break;\r\n        case 1:\r\n            group.check(rb_findgoods.getId());\r\n            break;\r\n        case 2:\r\n            group.check(rb_myships.getId());\r\n            break;\r\n        case 3:\r\n            group.check(rb_mine.getId());\r\n            break;\r\n    }\r\n}</pre>\r\n最后是控制被销毁后如何回复界面使其不重叠（重要的都在注释里，请细心）：\r\n<pre>@Override\r\nprotected void onRestoreInstanceState(Bundle savedInstanceState) {\r\n    index = savedInstanceState.getInt("postion");   //获取保存的位置\r\n    exchangeFragement();    //切换位置\r\n    checkButton(index);     //切换底部导航栏的选中状态\r\n    super.onRestoreInstanceState(savedInstanceState);\r\n}\r\n\r\n@Override\r\nprotected void onSaveInstanceState(Bundle outState) {\r\n    outState.putInt("postion", index);  //保存位置\r\n    //删除Super回调父类的方法，防止在被回收后来调用去把所有的视图都保存，然后通过获取保存的位置来重新绘制界面\r\n    //Activity中的onSaveInstanceState() 里面有一句super.onRestoreInstanceState(savedInstanceState)，\r\n    //Google对于这句话的解释是“Always call the superclass so it can save the view hierarchy state”，大概意思是“\r\n    //总是执行这句代码来调用父类去保存视图层的状态”。\r\n}</pre>\r\nG、解决了前面的问题后，由于需要，我们加入了WebView控件，但是为了减少开发量，我们需要把微信网页和我们这个APP内嵌网页区分开来，所以我们需要重写User-Agent，接着我们讨论了功能，由于充能需要和本地交互，我们移动端采用拦截URL实现，但是需要把数据提交给网页的时候，我们还是调用了网页的JS。\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;', '最近项目开发中遇到的问题总纲', '', 'inherit', 'closed', 'closed', '', '170-revision-v1', '', '', '2016-03-08 11:03:10', '2016-03-08 03:03:10', '', 170, 'http://acheng1314.cn/?p=174', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(175, 1, '2016-03-08 11:13:35', '2016-03-08 03:13:35', '首先作为技术人员也不能总说技术，先说点人事。\n\n1.首先是昨天刚被朋友嘲讽了，说我老得快，该找个女朋友，还问我是否没能耐找不到！！！好吧几年生活，这同学都这样关心人了。。。然后就是个人的生活整的很难过。。。是该。\n\n2.公司的事情整的很不开心，试用期工资是0.8就算了，还钻粗来了绩效考核0.7，fuck！加班工资是基础工资除以30，事假和病假所有工资一块扣，他妈的是算的22天！！！\n\n3.跟你谈理想的领导不是好领导，跟你谈钱的不会坏到哪里去，要是该谈钱的时候谈理想，他妈的叫他去世。\n\n吐槽完了，总结：\n\nA、首先我们项目中引用了第三方的model，我们项目未做国际化，而他们的项目做了国际化，结果就是我们的项目名字等等，一些信息变成他们的。解决办法：在主项目的gradle.properties中添加manifestmerger.enabled=true即可解决问题。\n\nB、推送的时候使用极光推送，但是WiFi（数据通信）自动关闭，经过检查后发现是权限少写了\n<pre>CHANGE_WIFI_STATE</pre>\nC、项目中，上拉刷新下拉加载的时候，本来采用手写，后面发现处理太麻烦，鸿阳大神的万能适配器数据刷新有问题，干脆全部替换，采用了\n<pre>compile ''com.jude:easyrecyclerview:3.3.4''</pre>\nD、在项目的build.gradle中，将jar文件目录和jni目录合并\n<pre>//jni调用目录设定为 jar文件同目录\nsourceSets {\n    main {\n        jniLibs.srcDirs = [''libs'']\n    }\n}</pre>\nE、开发中为了查看请求的网络连接，使用了Fiddle这个工具\n\nF、项目首页采用了底部导航栏多入口，前面使用过Fragment+ViewPager的方式，现在采用了单一的FrameLayout+FragmentStatePagerAdapter设定适配器为：\n<pre>FragmentStatePagerAdapter</pre>\n同时，问题也出现，在手机内存不足的时候，Activity被回收后，再次打开的时候多个Fragment会产生重叠，所以再次对它进行了处理，主要处理的方法是：onSaveInstanceState中保存我们的Fragment的position，接着在onRestoreInstanceState中实现位置切换并切换底部导航栏变色图标。具体实现如下：\n\na、首先我们的Fragment使用工厂模式创建，\n<pre>public class FragmentFactory {\n    \n    private static Map&lt;Integer, BaseFragment&gt; baseFragments = new HashMap&lt;&gt;();\n    \n    /**\n     * 用于创建fragment\n     *\n     * @param position\n     * @return\n     */\n    public static Fragment creatFragment(int position) {\n        BaseFragment baseFragment = baseFragments.get(position);\n        //baseFragment不存在时候，我们创建他并保存在Map中，存在的时候则直接使用\n        if (baseFragment == null) {\n        //多个Fragment在下面实现\n            switch (position) {\n                case 0:\n                    baseFragment = new IndexFragment();\n                    break;\n                case 1:\n                    baseFragment = new FindGoodsFragment();\n                    break;\n                case 2:\n                    baseFragment = new MyShipsFragment();\n                    break;\n                case 3:\n                    baseFragment = new MineFrament();\n                    break;\n                \n                \n            }\n            // 将已将创建的fragment记录到集合中\n            baseFragments.put(position, baseFragment);\n        }\n        return baseFragment;\n    }\n}</pre>\nb、接着在主页的布局文件中，设定FrameLayout+RadioGroup，FrameLayout设定FragmentStatePagerAdapter，并设定切换的方法（以便后面调用），如下：\n<pre>/**\n * 切换Fragement\n */\nprivate void exchangeFragement() {\n    Fragment fragment = (Fragment) fragmentStatePagerAdapter\n            .instantiateItem(frameLayout, index);\n    fragmentStatePagerAdapter.setPrimaryItem(frameLayout, 0,\n            fragment);\n    fragmentStatePagerAdapter.finishUpdate(frameLayout);\n}</pre>\n<pre>FragmentStatePagerAdapter fragmentStatePagerAdapter = new FragmentStatePagerAdapter(\n        getSupportFragmentManager()) {\n\n    @Override\n    public int getCount() {\n        return 4;\n    }\n\n    @Override\n    public android.support.v4.app.Fragment getItem(int position) {\n        return FragmentFactory.creatFragment(position);\n    }\n};</pre>\n顺带设定底部导航栏的按钮变色控制的方法：\n<pre>/**\n * 切换底部导航栏的选中按钮，仅需要在Activity回归后者是被销毁后再调用\n *\n * @param childCheckedPostion传入下面的position，我们预先知道有几个所以能定位坐标和ID\n */\nprivate void checkButton(int childCheckedPostion) {\n    switch (childCheckedPostion) {\n        case 0:\n            group.check(rb_index.getId());\n            break;\n        case 1:\n            group.check(rb_findgoods.getId());\n            break;\n        case 2:\n            group.check(rb_myships.getId());\n            break;\n        case 3:\n            group.check(rb_mine.getId());\n            break;\n    }\n}</pre>\n最后是控制被销毁后如何回复界面使其不重叠（重要的都在注释里，请细心）：\n<pre>@Override\nprotected void onRestoreInstanceState(Bundle savedInstanceState) {\n    index = savedInstanceState.getInt("postion");   //获取保存的位置\n    exchangeFragement();    //切换位置\n    checkButton(index);     //切换底部导航栏的选中状态\n    super.onRestoreInstanceState(savedInstanceState);\n}\n\n@Override\nprotected void onSaveInstanceState(Bundle outState) {\n    outState.putInt("postion", index);  //保存位置\n    //删除Super回调父类的方法，防止在被回收后来调用去把所有的视图都保存，然后通过获取保存的位置来重新绘制界面\n    //Activity中的onSaveInstanceState() 里面有一句super.onRestoreInstanceState(savedInstanceState)，\n    //Google对于这句话的解释是“Always call the superclass so it can save the view hierarchy state”，大概意思是“\n    //总是执行这句代码来调用父类去保存视图层的状态”。\n}</pre>\nG、解决了前面的问题后，由于需要，我们加入了WebView控件，但是为了减少开发量，我们需要把微信网页和我们这个APP内嵌网页区分开来，所以我们需要重写User-Agent，接着我们讨论了功能，由于充能需要和本地交互，我们移动端采用拦截URL实现，但是需要把数据提交给网页的时候，我们还是调用了网页的JS。\n\nH、在项目中，我们全部采用了最新的Android6.0的开发SDK和build版本，所以需要加入权限申请，具体处理办法请看我的另一篇博文：<a href="http://acheng1314.cn/?p=110" target="_blank">Android6.0权限那点事</a>\n\nI、在项目中我们采用了一些对话框，但是个人很不喜欢他们，遂改成Activity模仿成对话框，至于用Activity的好处就不必多提了，百度能找到一大堆，具体怎么实现如下：\n<pre>&lt;style name="dialog" parent="Theme.AppCompat.Light.NoActionBar"&gt;\n    &lt;!-- 去黑边 --&gt;\n    &lt;item name="android:windowFrame"&gt;@null&lt;/item&gt;\n    &lt;!-- 设置是否可滑动 --&gt;\n    &lt;item name="android:windowIsFloating"&gt;true&lt;/item&gt;\n    &lt;!-- 设置是否透明 --&gt;\n    &lt;item name="android:windowIsTranslucent"&gt;true&lt;/item&gt;\n    &lt;!-- 无标题 --&gt;\n    &lt;item name="android:windowNoTitle"&gt;true&lt;/item&gt;\n    &lt;item name="android:windowActionBar"&gt;false&lt;/item&gt;\n    &lt;!-- 背景 --&gt;\n    &lt;item name="android:background"&gt;@null&lt;/item&gt;\n    &lt;!-- 窗口背景 --&gt;\n    &lt;item name="android:windowBackground"&gt;@android:color/transparent&lt;/item&gt;\n    &lt;!-- 是否变暗 --&gt;\n    &lt;item name="android:backgroundDimEnabled"&gt;true&lt;/item&gt;\n    &lt;!-- 点击空白部分activity不消失 --&gt;\n    &lt;item name="android:windowCloseOnTouchOutside"&gt;true&lt;/item&gt;\n&lt;/style&gt;</pre>\n这是在我们的Style文件中的设置，然后在配置清单文件中，我们可以给我们的Activity指定Style为\n\n&nbsp;', '最近项目开发中遇到的问题总纲', '', 'inherit', 'closed', 'closed', '', '170-autosave-v1', '', '', '2016-03-08 11:13:35', '2016-03-08 03:13:35', '', 170, 'http://acheng1314.cn/?p=175', 0, 'revision', '', 0),
(176, 1, '2016-03-08 11:05:38', '2016-03-08 03:05:38', '首先作为技术人员也不能总说技术，先说点人事。\r\n\r\n1.首先是昨天刚被朋友嘲讽了，说我老得快，该找个女朋友，还问我是否没能耐找不到！！！好吧几年生活，这同学都这样关心人了。。。然后就是个人的生活整的很难过。。。是该。\r\n\r\n2.公司的事情整的很不开心，试用期工资是0.8就算了，还钻粗来了绩效考核0.7，fuck！加班工资是基础工资除以30，事假和病假所有工资一块扣，他妈的是算的22天！！！\r\n\r\n3.跟你谈理想的领导不是好领导，跟你谈钱的不会坏到哪里去，要是该谈钱的时候谈理想，他妈的叫他去世。\r\n\r\n吐槽完了，总结：\r\n\r\nA、首先我们项目中引用了第三方的model，我们项目未做国际化，而他们的项目做了国际化，结果就是我们的项目名字等等，一些信息变成他们的。解决办法：在主项目的gradle.properties中添加manifestmerger.enabled=true即可解决问题。\r\n\r\nB、推送的时候使用极光推送，但是WiFi（数据通信）自动关闭，经过检查后发现是权限少写了\r\n<pre>CHANGE_WIFI_STATE</pre>\r\nC、项目中，上拉刷新下拉加载的时候，本来采用手写，后面发现处理太麻烦，鸿阳大神的万能适配器数据刷新有问题，干脆全部替换，采用了\r\n<pre>compile ''de.hdodenhof:circleimageview:2.0.0''</pre>\r\nD、在项目的build.gradle中，将jar文件目录和jni目录合并\r\n<pre>//jni调用目录设定为 jar文件同目录\r\nsourceSets {\r\n    main {\r\n        jniLibs.srcDirs = [''libs'']\r\n    }\r\n}</pre>\r\nE、开发中为了查看请求的网络连接，使用了Fiddle这个工具\r\n\r\nF、项目首页采用了底部导航栏多入口，前面使用过Fragment+ViewPager的方式，现在采用了单一的FrameLayout+FragmentStatePagerAdapter设定适配器为：\r\n<pre>FragmentStatePagerAdapter</pre>\r\n同时，问题也出现，在手机内存不足的时候，Activity被回收后，再次打开的时候多个Fragment会产生重叠，所以再次对它进行了处理，主要处理的方法是：onSaveInstanceState中保存我们的Fragment的position，接着在onRestoreInstanceState中实现位置切换并切换底部导航栏变色图标。具体实现如下：\r\n\r\na、首先我们的Fragment使用工厂模式创建，\r\n<pre>public class FragmentFactory {\r\n    \r\n    private static Map&lt;Integer, BaseFragment&gt; baseFragments = new HashMap&lt;&gt;();\r\n    \r\n    /**\r\n     * 用于创建fragment\r\n     *\r\n     * @param position\r\n     * @return\r\n     */\r\n    public static Fragment creatFragment(int position) {\r\n        BaseFragment baseFragment = baseFragments.get(position);\r\n        //baseFragment不存在时候，我们创建他并保存在Map中，存在的时候则直接使用\r\n        if (baseFragment == null) {\r\n        //多个Fragment在下面实现\r\n            switch (position) {\r\n                case 0:\r\n                    baseFragment = new IndexFragment();\r\n                    break;\r\n                case 1:\r\n                    baseFragment = new FindGoodsFragment();\r\n                    break;\r\n                case 2:\r\n                    baseFragment = new MyShipsFragment();\r\n                    break;\r\n                case 3:\r\n                    baseFragment = new MineFrament();\r\n                    break;\r\n                \r\n                \r\n            }\r\n            // 将已将创建的fragment记录到集合中\r\n            baseFragments.put(position, baseFragment);\r\n        }\r\n        return baseFragment;\r\n    }\r\n}</pre>\r\nb、接着在主页的布局文件中，设定FrameLayout+RadioGroup，FrameLayout设定FragmentStatePagerAdapter，并设定切换的方法（以便后面调用），如下：\r\n<pre>/**\r\n * 切换Fragement\r\n */\r\nprivate void exchangeFragement() {\r\n    Fragment fragment = (Fragment) fragmentStatePagerAdapter\r\n            .instantiateItem(frameLayout, index);\r\n    fragmentStatePagerAdapter.setPrimaryItem(frameLayout, 0,\r\n            fragment);\r\n    fragmentStatePagerAdapter.finishUpdate(frameLayout);\r\n}</pre>\r\n<pre>FragmentStatePagerAdapter fragmentStatePagerAdapter = new FragmentStatePagerAdapter(\r\n        getSupportFragmentManager()) {\r\n\r\n    @Override\r\n    public int getCount() {\r\n        return 4;\r\n    }\r\n\r\n    @Override\r\n    public android.support.v4.app.Fragment getItem(int position) {\r\n        return FragmentFactory.creatFragment(position);\r\n    }\r\n};</pre>\r\n顺带设定底部导航栏的按钮变色控制的方法：\r\n<pre>/**\r\n * 切换底部导航栏的选中按钮，仅需要在Activity回归后者是被销毁后再调用\r\n *\r\n * @param childCheckedPostion传入下面的position，我们预先知道有几个所以能定位坐标和ID\r\n */\r\nprivate void checkButton(int childCheckedPostion) {\r\n    switch (childCheckedPostion) {\r\n        case 0:\r\n            group.check(rb_index.getId());\r\n            break;\r\n        case 1:\r\n            group.check(rb_findgoods.getId());\r\n            break;\r\n        case 2:\r\n            group.check(rb_myships.getId());\r\n            break;\r\n        case 3:\r\n            group.check(rb_mine.getId());\r\n            break;\r\n    }\r\n}</pre>\r\n最后是控制被销毁后如何回复界面使其不重叠（重要的都在注释里，请细心）：\r\n<pre>@Override\r\nprotected void onRestoreInstanceState(Bundle savedInstanceState) {\r\n    index = savedInstanceState.getInt("postion");   //获取保存的位置\r\n    exchangeFragement();    //切换位置\r\n    checkButton(index);     //切换底部导航栏的选中状态\r\n    super.onRestoreInstanceState(savedInstanceState);\r\n}\r\n\r\n@Override\r\nprotected void onSaveInstanceState(Bundle outState) {\r\n    outState.putInt("postion", index);  //保存位置\r\n    //删除Super回调父类的方法，防止在被回收后来调用去把所有的视图都保存，然后通过获取保存的位置来重新绘制界面\r\n    //Activity中的onSaveInstanceState() 里面有一句super.onRestoreInstanceState(savedInstanceState)，\r\n    //Google对于这句话的解释是“Always call the superclass so it can save the view hierarchy state”，大概意思是“\r\n    //总是执行这句代码来调用父类去保存视图层的状态”。\r\n}</pre>\r\nG、解决了前面的问题后，由于需要，我们加入了WebView控件，但是为了减少开发量，我们需要把微信网页和我们这个APP内嵌网页区分开来，所以我们需要重写User-Agent，接着我们讨论了功能，由于充能需要和本地交互，我们移动端采用拦截URL实现，但是需要把数据提交给网页的时候，我们还是调用了网页的JS。\r\n\r\nH、在项目中，我们全部采用了最新的Android6.0的开发SDK和build版本，所以需要加入权限申请，具体处理办法请看我的另一篇博文：<a href="http://acheng1314.cn/?p=110" target="_blank">Android6.0权限那点事</a>\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;', '最近项目开发中遇到的问题总纲', '', 'inherit', 'closed', 'closed', '', '170-revision-v1', '', '', '2016-03-08 11:05:38', '2016-03-08 03:05:38', '', 170, 'http://acheng1314.cn/?p=176', 0, 'revision', '', 0),
(177, 1, '2016-03-08 11:07:58', '2016-03-08 03:07:58', '首先作为技术人员也不能总说技术，先说点人事。\r\n\r\n1.首先是昨天刚被朋友嘲讽了，说我老得快，该找个女朋友，还问我是否没能耐找不到！！！好吧几年生活，这同学都这样关心人了。。。然后就是个人的生活整的很难过。。。是该。\r\n\r\n2.公司的事情整的很不开心，试用期工资是0.8就算了，还钻粗来了绩效考核0.7，fuck！加班工资是基础工资除以30，事假和病假所有工资一块扣，他妈的是算的22天！！！\r\n\r\n3.跟你谈理想的领导不是好领导，跟你谈钱的不会坏到哪里去，要是该谈钱的时候谈理想，他妈的叫他去世。\r\n\r\n吐槽完了，总结：\r\n\r\nA、首先我们项目中引用了第三方的model，我们项目未做国际化，而他们的项目做了国际化，结果就是我们的项目名字等等，一些信息变成他们的。解决办法：在主项目的gradle.properties中添加manifestmerger.enabled=true即可解决问题。\r\n\r\nB、推送的时候使用极光推送，但是WiFi（数据通信）自动关闭，经过检查后发现是权限少写了\r\n<pre>CHANGE_WIFI_STATE</pre>\r\nC、项目中，上拉刷新下拉加载的时候，本来采用手写，后面发现处理太麻烦，鸿阳大神的万能适配器数据刷新有问题，干脆全部替换，采用了\r\n<pre>compile ''com.jude:easyrecyclerview:3.3.4''</pre>\r\nD、在项目的build.gradle中，将jar文件目录和jni目录合并\r\n<pre>//jni调用目录设定为 jar文件同目录\r\nsourceSets {\r\n    main {\r\n        jniLibs.srcDirs = [''libs'']\r\n    }\r\n}</pre>\r\nE、开发中为了查看请求的网络连接，使用了Fiddle这个工具\r\n\r\nF、项目首页采用了底部导航栏多入口，前面使用过Fragment+ViewPager的方式，现在采用了单一的FrameLayout+FragmentStatePagerAdapter设定适配器为：\r\n<pre>FragmentStatePagerAdapter</pre>\r\n同时，问题也出现，在手机内存不足的时候，Activity被回收后，再次打开的时候多个Fragment会产生重叠，所以再次对它进行了处理，主要处理的方法是：onSaveInstanceState中保存我们的Fragment的position，接着在onRestoreInstanceState中实现位置切换并切换底部导航栏变色图标。具体实现如下：\r\n\r\na、首先我们的Fragment使用工厂模式创建，\r\n<pre>public class FragmentFactory {\r\n    \r\n    private static Map&lt;Integer, BaseFragment&gt; baseFragments = new HashMap&lt;&gt;();\r\n    \r\n    /**\r\n     * 用于创建fragment\r\n     *\r\n     * @param position\r\n     * @return\r\n     */\r\n    public static Fragment creatFragment(int position) {\r\n        BaseFragment baseFragment = baseFragments.get(position);\r\n        //baseFragment不存在时候，我们创建他并保存在Map中，存在的时候则直接使用\r\n        if (baseFragment == null) {\r\n        //多个Fragment在下面实现\r\n            switch (position) {\r\n                case 0:\r\n                    baseFragment = new IndexFragment();\r\n                    break;\r\n                case 1:\r\n                    baseFragment = new FindGoodsFragment();\r\n                    break;\r\n                case 2:\r\n                    baseFragment = new MyShipsFragment();\r\n                    break;\r\n                case 3:\r\n                    baseFragment = new MineFrament();\r\n                    break;\r\n                \r\n                \r\n            }\r\n            // 将已将创建的fragment记录到集合中\r\n            baseFragments.put(position, baseFragment);\r\n        }\r\n        return baseFragment;\r\n    }\r\n}</pre>\r\nb、接着在主页的布局文件中，设定FrameLayout+RadioGroup，FrameLayout设定FragmentStatePagerAdapter，并设定切换的方法（以便后面调用），如下：\r\n<pre>/**\r\n * 切换Fragement\r\n */\r\nprivate void exchangeFragement() {\r\n    Fragment fragment = (Fragment) fragmentStatePagerAdapter\r\n            .instantiateItem(frameLayout, index);\r\n    fragmentStatePagerAdapter.setPrimaryItem(frameLayout, 0,\r\n            fragment);\r\n    fragmentStatePagerAdapter.finishUpdate(frameLayout);\r\n}</pre>\r\n<pre>FragmentStatePagerAdapter fragmentStatePagerAdapter = new FragmentStatePagerAdapter(\r\n        getSupportFragmentManager()) {\r\n\r\n    @Override\r\n    public int getCount() {\r\n        return 4;\r\n    }\r\n\r\n    @Override\r\n    public android.support.v4.app.Fragment getItem(int position) {\r\n        return FragmentFactory.creatFragment(position);\r\n    }\r\n};</pre>\r\n顺带设定底部导航栏的按钮变色控制的方法：\r\n<pre>/**\r\n * 切换底部导航栏的选中按钮，仅需要在Activity回归后者是被销毁后再调用\r\n *\r\n * @param childCheckedPostion传入下面的position，我们预先知道有几个所以能定位坐标和ID\r\n */\r\nprivate void checkButton(int childCheckedPostion) {\r\n    switch (childCheckedPostion) {\r\n        case 0:\r\n            group.check(rb_index.getId());\r\n            break;\r\n        case 1:\r\n            group.check(rb_findgoods.getId());\r\n            break;\r\n        case 2:\r\n            group.check(rb_myships.getId());\r\n            break;\r\n        case 3:\r\n            group.check(rb_mine.getId());\r\n            break;\r\n    }\r\n}</pre>\r\n最后是控制被销毁后如何回复界面使其不重叠（重要的都在注释里，请细心）：\r\n<pre>@Override\r\nprotected void onRestoreInstanceState(Bundle savedInstanceState) {\r\n    index = savedInstanceState.getInt("postion");   //获取保存的位置\r\n    exchangeFragement();    //切换位置\r\n    checkButton(index);     //切换底部导航栏的选中状态\r\n    super.onRestoreInstanceState(savedInstanceState);\r\n}\r\n\r\n@Override\r\nprotected void onSaveInstanceState(Bundle outState) {\r\n    outState.putInt("postion", index);  //保存位置\r\n    //删除Super回调父类的方法，防止在被回收后来调用去把所有的视图都保存，然后通过获取保存的位置来重新绘制界面\r\n    //Activity中的onSaveInstanceState() 里面有一句super.onRestoreInstanceState(savedInstanceState)，\r\n    //Google对于这句话的解释是“Always call the superclass so it can save the view hierarchy state”，大概意思是“\r\n    //总是执行这句代码来调用父类去保存视图层的状态”。\r\n}</pre>\r\nG、解决了前面的问题后，由于需要，我们加入了WebView控件，但是为了减少开发量，我们需要把微信网页和我们这个APP内嵌网页区分开来，所以我们需要重写User-Agent，接着我们讨论了功能，由于充能需要和本地交互，我们移动端采用拦截URL实现，但是需要把数据提交给网页的时候，我们还是调用了网页的JS。\r\n\r\nH、在项目中，我们全部采用了最新的Android6.0的开发SDK和build版本，所以需要加入权限申请，具体处理办法请看我的另一篇博文：<a href="http://acheng1314.cn/?p=110" target="_blank">Android6.0权限那点事</a>\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;', '最近项目开发中遇到的问题总纲', '', 'inherit', 'closed', 'closed', '', '170-revision-v1', '', '', '2016-03-08 11:07:58', '2016-03-08 03:07:58', '', 170, 'http://acheng1314.cn/?p=177', 0, 'revision', '', 0),
(178, 1, '2016-03-08 11:13:59', '2016-03-08 03:13:59', '首先作为技术人员也不能总说技术，先说点人事。\r\n\r\n1.首先是昨天刚被朋友嘲讽了，说我老得快，该找个女朋友，还问我是否没能耐找不到！！！好吧几年生活，这同学都这样关心人了。。。然后就是个人的生活整的很难过。。。是该。\r\n\r\n2.公司的事情整的很不开心，试用期工资是0.8就算了，还钻粗来了绩效考核0.7，fuck！加班工资是基础工资除以30，事假和病假所有工资一块扣，他妈的是算的22天！！！\r\n\r\n3.跟你谈理想的领导不是好领导，跟你谈钱的不会坏到哪里去，要是该谈钱的时候谈理想，他妈的叫他去世。\r\n\r\n吐槽完了，总结：\r\n\r\nA、首先我们项目中引用了第三方的model，我们项目未做国际化，而他们的项目做了国际化，结果就是我们的项目名字等等，一些信息变成他们的。解决办法：在主项目的gradle.properties中添加manifestmerger.enabled=true即可解决问题。\r\n\r\nB、推送的时候使用极光推送，但是WiFi（数据通信）自动关闭，经过检查后发现是权限少写了\r\n<pre>CHANGE_WIFI_STATE</pre>\r\nC、项目中，上拉刷新下拉加载的时候，本来采用手写，后面发现处理太麻烦，鸿阳大神的万能适配器数据刷新有问题，干脆全部替换，采用了\r\n<pre>compile ''com.jude:easyrecyclerview:3.3.4''</pre>\r\nD、在项目的build.gradle中，将jar文件目录和jni目录合并\r\n<pre>//jni调用目录设定为 jar文件同目录\r\nsourceSets {\r\n    main {\r\n        jniLibs.srcDirs = [''libs'']\r\n    }\r\n}</pre>\r\nE、开发中为了查看请求的网络连接，使用了Fiddle这个工具\r\n\r\nF、项目首页采用了底部导航栏多入口，前面使用过Fragment+ViewPager的方式，现在采用了单一的FrameLayout+FragmentStatePagerAdapter设定适配器为：\r\n<pre>FragmentStatePagerAdapter</pre>\r\n同时，问题也出现，在手机内存不足的时候，Activity被回收后，再次打开的时候多个Fragment会产生重叠，所以再次对它进行了处理，主要处理的方法是：onSaveInstanceState中保存我们的Fragment的position，接着在onRestoreInstanceState中实现位置切换并切换底部导航栏变色图标。具体实现如下：\r\n\r\na、首先我们的Fragment使用工厂模式创建，\r\n<pre>public class FragmentFactory {\r\n    \r\n    private static Map&lt;Integer, BaseFragment&gt; baseFragments = new HashMap&lt;&gt;();\r\n    \r\n    /**\r\n     * 用于创建fragment\r\n     *\r\n     * @param position\r\n     * @return\r\n     */\r\n    public static Fragment creatFragment(int position) {\r\n        BaseFragment baseFragment = baseFragments.get(position);\r\n        //baseFragment不存在时候，我们创建他并保存在Map中，存在的时候则直接使用\r\n        if (baseFragment == null) {\r\n        //多个Fragment在下面实现\r\n            switch (position) {\r\n                case 0:\r\n                    baseFragment = new IndexFragment();\r\n                    break;\r\n                case 1:\r\n                    baseFragment = new FindGoodsFragment();\r\n                    break;\r\n                case 2:\r\n                    baseFragment = new MyShipsFragment();\r\n                    break;\r\n                case 3:\r\n                    baseFragment = new MineFrament();\r\n                    break;\r\n                \r\n                \r\n            }\r\n            // 将已将创建的fragment记录到集合中\r\n            baseFragments.put(position, baseFragment);\r\n        }\r\n        return baseFragment;\r\n    }\r\n}</pre>\r\nb、接着在主页的布局文件中，设定FrameLayout+RadioGroup，FrameLayout设定FragmentStatePagerAdapter，并设定切换的方法（以便后面调用），如下：\r\n<pre>/**\r\n * 切换Fragement\r\n */\r\nprivate void exchangeFragement() {\r\n    Fragment fragment = (Fragment) fragmentStatePagerAdapter\r\n            .instantiateItem(frameLayout, index);\r\n    fragmentStatePagerAdapter.setPrimaryItem(frameLayout, 0,\r\n            fragment);\r\n    fragmentStatePagerAdapter.finishUpdate(frameLayout);\r\n}</pre>\r\n<pre>FragmentStatePagerAdapter fragmentStatePagerAdapter = new FragmentStatePagerAdapter(\r\n        getSupportFragmentManager()) {\r\n\r\n    @Override\r\n    public int getCount() {\r\n        return 4;\r\n    }\r\n\r\n    @Override\r\n    public android.support.v4.app.Fragment getItem(int position) {\r\n        return FragmentFactory.creatFragment(position);\r\n    }\r\n};</pre>\r\n顺带设定底部导航栏的按钮变色控制的方法：\r\n<pre>/**\r\n * 切换底部导航栏的选中按钮，仅需要在Activity回归后者是被销毁后再调用\r\n *\r\n * @param childCheckedPostion传入下面的position，我们预先知道有几个所以能定位坐标和ID\r\n */\r\nprivate void checkButton(int childCheckedPostion) {\r\n    switch (childCheckedPostion) {\r\n        case 0:\r\n            group.check(rb_index.getId());\r\n            break;\r\n        case 1:\r\n            group.check(rb_findgoods.getId());\r\n            break;\r\n        case 2:\r\n            group.check(rb_myships.getId());\r\n            break;\r\n        case 3:\r\n            group.check(rb_mine.getId());\r\n            break;\r\n    }\r\n}</pre>\r\n最后是控制被销毁后如何回复界面使其不重叠（重要的都在注释里，请细心）：\r\n<pre>@Override\r\nprotected void onRestoreInstanceState(Bundle savedInstanceState) {\r\n    index = savedInstanceState.getInt("postion");   //获取保存的位置\r\n    exchangeFragement();    //切换位置\r\n    checkButton(index);     //切换底部导航栏的选中状态\r\n    super.onRestoreInstanceState(savedInstanceState);\r\n}\r\n\r\n@Override\r\nprotected void onSaveInstanceState(Bundle outState) {\r\n    outState.putInt("postion", index);  //保存位置\r\n    //删除Super回调父类的方法，防止在被回收后来调用去把所有的视图都保存，然后通过获取保存的位置来重新绘制界面\r\n    //Activity中的onSaveInstanceState() 里面有一句super.onRestoreInstanceState(savedInstanceState)，\r\n    //Google对于这句话的解释是“Always call the superclass so it can save the view hierarchy state”，大概意思是“\r\n    //总是执行这句代码来调用父类去保存视图层的状态”。\r\n}</pre>\r\nG、解决了前面的问题后，由于需要，我们加入了WebView控件，但是为了减少开发量，我们需要把微信网页和我们这个APP内嵌网页区分开来，所以我们需要重写User-Agent，接着我们讨论了功能，由于充能需要和本地交互，我们移动端采用拦截URL实现，但是需要把数据提交给网页的时候，我们还是调用了网页的JS。\r\n\r\nH、在项目中，我们全部采用了最新的Android6.0的开发SDK和build版本，所以需要加入权限申请，具体处理办法请看我的另一篇博文：<a href="http://acheng1314.cn/?p=110" target="_blank">Android6.0权限那点事</a>\r\n\r\nI、在项目中我们采用了一些对话框，但是个人很不喜欢他们，遂改成Activity模仿成对话框，至于用Activity的好处就不必多提了，百度能找到一大堆，具体怎么实现如下：\r\n<pre>&lt;style name="dialog" parent="Theme.AppCompat.Light.NoActionBar"&gt;\r\n    &lt;!-- 去黑边 --&gt;\r\n    &lt;item name="android:windowFrame"&gt;@null&lt;/item&gt;\r\n    &lt;!-- 设置是否可滑动 --&gt;\r\n    &lt;item name="android:windowIsFloating"&gt;true&lt;/item&gt;\r\n    &lt;!-- 设置是否透明 --&gt;\r\n    &lt;item name="android:windowIsTranslucent"&gt;true&lt;/item&gt;\r\n    &lt;!-- 无标题 --&gt;\r\n    &lt;item name="android:windowNoTitle"&gt;true&lt;/item&gt;\r\n    &lt;item name="android:windowActionBar"&gt;false&lt;/item&gt;\r\n    &lt;!-- 背景 --&gt;\r\n    &lt;item name="android:background"&gt;@null&lt;/item&gt;\r\n    &lt;!-- 窗口背景 --&gt;\r\n    &lt;item name="android:windowBackground"&gt;@android:color/transparent&lt;/item&gt;\r\n    &lt;!-- 是否变暗 --&gt;\r\n    &lt;item name="android:backgroundDimEnabled"&gt;true&lt;/item&gt;\r\n    &lt;!-- 点击空白部分activity不消失 --&gt;\r\n    &lt;item name="android:windowCloseOnTouchOutside"&gt;true&lt;/item&gt;\r\n&lt;/style&gt;</pre>\r\n这是在我们的Style文件中的设置，然后在配置清单文件中，我们可以给我们的Activity指定Style为：\r\n<pre>android:theme="@style/dialog"</pre>\r\n&nbsp;', '最近项目开发中遇到的问题总纲', '', 'inherit', 'closed', 'closed', '', '170-revision-v1', '', '', '2016-03-08 11:13:59', '2016-03-08 03:13:59', '', 170, 'http://acheng1314.cn/?p=178', 0, 'revision', '', 0),
(179, 1, '2016-03-15 01:38:11', '2016-03-14 17:38:11', '作者是一名普通得不能再普通的程序猿，没啥事的时候就喜欢瞎搞搞，目前暂居海口，家里人要求我会成都，希望有人看到后，能叫我去他们公司面试，么么哒！<a href="http://acheng1314.cn/?p=99" rel="attachment wp-att-6">Android应用开发工程师_庞程_个人简历</a>', '关于作者', '', 'inherit', 'closed', 'closed', '', '2-revision-v1', '', '', '2016-03-15 01:38:11', '2016-03-14 17:38:11', '', 2, 'http://acheng1314.cn/?p=179', 0, 'revision', '', 0),
(181, 1, '2016-03-18 11:00:08', '2016-03-18 03:00:08', 'A、首先最常见的是getColor、getDrawable之类的，但是我们替换成context.getRecouse.getColor(R.color.xxx,null)之类的会提示最低API是16之类的提示，根据文档查询最终得出：\r\n<pre>ContextCompat.getDrawable(this, R.mipmap.ic_launcher)</pre>\r\nB、在Fragment中使用onAttach方法的时候，传入参数是Activity的已经弃用，但是我们可以更换为传入参数为Context的，用法相同作用相同，而且我们知道常规的上下文都是可以直接从Activity中获取，所以说，可能是谷歌工程师觉得名字不对吧。\r\n\r\nC、当我们想设置透明背景的时候：setBackgroundDrawable(new ColorDrawable(0x00000000));似乎是个不错的方法，但是值得注意  //过时，不推荐使用，这时候我们不得不寻找类似的方法来解决问题，而setBackground方法提示说明要在API16才能使用，所以我们更好使用\r\n<pre>setBackgroundResource(0x00000000);//需要指定资源文件</pre>\r\nD、直接上代码：\r\n\r\n在网络连接判断中，常见的坑是当没有网络连接的时候，返回数据为null，这时候判断是否为WIFI或者数据连接则会产生空指针异常。所以应该先判断是否为空\r\n\r\n原来的：\r\n<pre>/**\r\n * 判断WiFi网络是否可用\r\n *\r\n * @param context\r\n * @return\r\n */\r\npublic static boolean isWifiConnected(Context context) {\r\n    if (context != null) {\r\n        ConnectivityManager mConnectivityManager = (ConnectivityManager) context\r\n                .getSystemService(Context.CONNECTIVITY_SERVICE);\r\n        NetworkInfo networkInfo = mConnectivityManager.getActiveNetworkInfo();\r\n        return networkInfo != null &amp;&amp; ConnectivityManager.TYPE_WIFI == networkInfo.getType();\r\n    }\r\n    return false;\r\n}</pre>\r\n新的：\r\n<pre>/**\r\n * 判断数据流量是否可用\r\n *\r\n * @param context\r\n * @return\r\n */\r\npublic static boolean isMobileConnected(Context context) {\r\n    if (context != null) {\r\n        ConnectivityManager mConnectivityManager = (ConnectivityManager) context\r\n                .getSystemService(Context.CONNECTIVITY_SERVICE);\r\n        NetworkInfo networkInfo = mConnectivityManager.getActiveNetworkInfo();\r\n        return networkInfo != null &amp;&amp; ConnectivityManager.TYPE_MOBILE == networkInfo.getType();\r\n    }\r\n    return false;\r\n}</pre>\r\nE、常见的屏幕检测：\r\n\r\nWindowManager wm = this.getWindowManager();\r\n\r\nint height = wm.getDefaultDisplay().getHeight();  //getHeight过期\r\n\r\n新的：\r\n<pre>//检测屏幕分辨率，代码更新，弃用过时的方法\r\n        DisplayMetrics dm = new DisplayMetrics();\r\n        this.getWindowManager().getDefaultDisplay().getMetrics(dm);\r\n        int height = dm.heightPixels;</pre>\r\n&nbsp;', 'Android开发中常见的过期API以及替换方法', '', 'publish', 'open', 'open', '', 'android%e5%bc%80%e5%8f%91%e4%b8%ad%e5%b8%b8%e8%a7%81%e7%9a%84%e8%bf%87%e6%9c%9fapi%e4%bb%a5%e5%8f%8a%e6%9b%bf%e6%8d%a2%e6%96%b9%e6%b3%95', '', '', '2016-03-18 15:17:47', '2016-03-18 07:17:47', '', 0, 'http://acheng1314.cn/?p=181', 0, 'post', '', 1),
(182, 1, '2016-03-18 11:00:08', '2016-03-18 03:00:08', 'A、首先最常见的是getColor、getDrawable之类的，但是我们替换成context.getRecouse.getColor(R.color.xxx,null)之类的会提示最低API是16之类的提示，根据文档查询最终得出：\r\n<pre>ContextCompat.getDrawable(this, R.mipmap.ic_launcher)</pre>\r\nB、在Fragment中使用onAttach方法的时候，传入参数是Activity的已经弃用，但是我们可以更换为传入参数为Context的，用法相同作用相同，而且我们知道常规的上下文都是可以直接从Activity中获取，所以说，可能是谷歌工程师觉得名字不对吧。\r\n\r\nC、当我们想设置透明背景的时候：setBackgroundDrawable(new ColorDrawable(0x00000000));似乎是个不错的方法，但是值得注意  //过时，不推荐使用，这时候我们不得不寻找类似的方法来解决问题，而setBackground方法提示说明要在API16才能使用，所以我们更好使用\r\n<pre>setBackgroundResource(0x00000000);//需要指定资源文件</pre>\r\nD、直接上代码：\r\n\r\n原来的：\r\n<pre>/**\r\n * 判断WiFi网络是否可用\r\n *\r\n * @param context\r\n * @return\r\n */\r\npublic static boolean isWifiConnected(Context context) {\r\n    if (context != null) {\r\n ConnectivityManager mConnectivityManager = (ConnectivityManager) context\r\n .getSystemService(Context.CONNECTIVITY_SERVICE);\r\n NetworkInfo mWiFiNetworkInfo = mConnectivityManager\r\n .getNetworkInfo(ConnectivityManager.TYPE_WIFI);\r\n if (mWiFiNetworkInfo != null) {\r\n return mWiFiNetworkInfo.isAvailable();\r\n }\r\n }\r\n    return false;\r\n}</pre>\r\n新的：\r\n<pre>/**\r\n * 判断WiFi网络是否可用\r\n *\r\n * @param context\r\n * @return\r\n */\r\npublic static boolean isWifiConnected(Context context) {\r\n    if (context != null) {\r\n        ConnectivityManager mConnectivityManager = (ConnectivityManager) context\r\n                .getSystemService(Context.CONNECTIVITY_SERVICE);\r\n        int mWiFiNetworkInfo = mConnectivityManager\r\n                .getActiveNetworkInfo().getType();\r\n        return ConnectivityManager.TYPE_WIFI == mWiFiNetworkInfo;\r\n    }\r\n    return false;\r\n}</pre>\r\nE、常见的屏幕检测：\r\n\r\nWindowManager wm = this.getWindowManager();\r\n\r\nint height = wm.getDefaultDisplay().getHeight();  //getHeight过期\r\n\r\n新的：\r\n<pre>//检测屏幕分辨率，代码更新，弃用过时的方法\r\n        DisplayMetrics dm = new DisplayMetrics();\r\n        this.getWindowManager().getDefaultDisplay().getMetrics(dm);\r\n        int height = dm.heightPixels;</pre>\r\n&nbsp;', 'Android开发中常见的过期API以及替换方法', '', 'inherit', 'closed', 'closed', '', '181-revision-v1', '', '', '2016-03-18 11:00:08', '2016-03-18 03:00:08', '', 181, 'http://acheng1314.cn/?p=182', 0, 'revision', '', 0),
(183, 1, '2016-03-18 15:17:47', '2016-03-18 07:17:47', 'A、首先最常见的是getColor、getDrawable之类的，但是我们替换成context.getRecouse.getColor(R.color.xxx,null)之类的会提示最低API是16之类的提示，根据文档查询最终得出：\n<pre>ContextCompat.getDrawable(this, R.mipmap.ic_launcher)</pre>\nB、在Fragment中使用onAttach方法的时候，传入参数是Activity的已经弃用，但是我们可以更换为传入参数为Context的，用法相同作用相同，而且我们知道常规的上下文都是可以直接从Activity中获取，所以说，可能是谷歌工程师觉得名字不对吧。\n\nC、当我们想设置透明背景的时候：setBackgroundDrawable(new ColorDrawable(0x00000000));似乎是个不错的方法，但是值得注意  //过时，不推荐使用，这时候我们不得不寻找类似的方法来解决问题，而setBackground方法提示说明要在API16才能使用，所以我们更好使用\n<pre>setBackgroundResource(0x00000000);//需要指定资源文件</pre>\nD、直接上代码：\n\n在网络连接判断中，常见的坑是当没有网络连接的时候，返回数据为null，这时候判断是否为WIFI或者数据连接则会产生空指针异常。所以应该先判断是否为空\n\n原来的：\n<pre>/**\n * 判断WiFi网络是否可用\n *\n * @param context\n * @return\n */\npublic static boolean isWifiConnected(Context context) {\n    if (context != null) {\n        ConnectivityManager mConnectivityManager = (ConnectivityManager) context\n                .getSystemService(Context.CONNECTIVITY_SERVICE);\n        NetworkInfo networkInfo = mConnectivityManager.getActiveNetworkInfo();\n        return networkInfo != null &amp;&amp; ConnectivityManager.TYPE_WIFI == networkInfo.getType();\n    }\n    return false;\n}</pre>\n新的：\n<pre>/**\n * 判断数据流量是否可用\n *\n * @param context\n * @return\n */\npublic static boolean isMobileConnected(Context context) {\n    if (context != null) {\n        ConnectivityManager mConnectivityManager = (ConnectivityManager) context\n                .getSystemService(Context.CONNECTIVITY_SERVICE);\n        NetworkInfo networkInfo = mConnectivityManager.getActiveNetworkInfo();\n        return networkInfo != null &amp;&amp; ConnectivityManager.TYPE_MOBILE == networkInfo.getType();\n    }\n    return false;\n}</pre>\nE、常见的屏幕检测：\n\nWindowManager wm = this.getWindowManager();\n\nint height = wm.getDefaultDisplay().getHeight();  //getHeight过期\n\n新的：\n<pre>//检测屏幕分辨率，代码更新，弃用过时的方法\n        DisplayMetrics dm = new DisplayMetrics();\n        this.getWindowManager().getDefaultDisplay().getMetrics(dm);\n        int height = dm.heightPixels;</pre>\n&nbsp;', 'Android开发中常见的过期API以及替换方法', '', 'inherit', 'closed', 'closed', '', '181-autosave-v1', '', '', '2016-03-18 15:17:47', '2016-03-18 07:17:47', '', 181, 'http://acheng1314.cn/?p=183', 0, 'revision', '', 0),
(184, 1, '2016-03-18 15:14:15', '2016-03-18 07:14:15', 'A、首先最常见的是getColor、getDrawable之类的，但是我们替换成context.getRecouse.getColor(R.color.xxx,null)之类的会提示最低API是16之类的提示，根据文档查询最终得出：\r\n<pre>ContextCompat.getDrawable(this, R.mipmap.ic_launcher)</pre>\r\nB、在Fragment中使用onAttach方法的时候，传入参数是Activity的已经弃用，但是我们可以更换为传入参数为Context的，用法相同作用相同，而且我们知道常规的上下文都是可以直接从Activity中获取，所以说，可能是谷歌工程师觉得名字不对吧。\r\n\r\nC、当我们想设置透明背景的时候：setBackgroundDrawable(new ColorDrawable(0x00000000));似乎是个不错的方法，但是值得注意  //过时，不推荐使用，这时候我们不得不寻找类似的方法来解决问题，而setBackground方法提示说明要在API16才能使用，所以我们更好使用\r\n<pre>setBackgroundResource(0x00000000);//需要指定资源文件</pre>\r\nD、直接上代码：\r\n\r\n原来的：\r\n<pre>/**\r\n * 判断WiFi网络是否可用\r\n *\r\n * @param context\r\n * @return\r\n */\r\npublic static boolean isWifiConnected(Context context) {\r\n    if (context != null) {\r\n        ConnectivityManager mConnectivityManager = (ConnectivityManager) context\r\n                .getSystemService(Context.CONNECTIVITY_SERVICE);\r\n        NetworkInfo networkInfo = mConnectivityManager.getActiveNetworkInfo();\r\n        return networkInfo != null &amp;&amp; ConnectivityManager.TYPE_WIFI == networkInfo.getType();\r\n    }\r\n    return false;\r\n}</pre>\r\n新的：\r\n<pre>/**\r\n * 判断数据流量是否可用\r\n *\r\n * @param context\r\n * @return\r\n */\r\npublic static boolean isMobileConnected(Context context) {\r\n    if (context != null) {\r\n        ConnectivityManager mConnectivityManager = (ConnectivityManager) context\r\n                .getSystemService(Context.CONNECTIVITY_SERVICE);\r\n        NetworkInfo networkInfo = mConnectivityManager.getActiveNetworkInfo();\r\n        return networkInfo != null &amp;&amp; ConnectivityManager.TYPE_MOBILE == networkInfo.getType();\r\n    }\r\n    return false;\r\n}</pre>\r\nE、常见的屏幕检测：\r\n\r\nWindowManager wm = this.getWindowManager();\r\n\r\nint height = wm.getDefaultDisplay().getHeight();  //getHeight过期\r\n\r\n新的：\r\n<pre>//检测屏幕分辨率，代码更新，弃用过时的方法\r\n        DisplayMetrics dm = new DisplayMetrics();\r\n        this.getWindowManager().getDefaultDisplay().getMetrics(dm);\r\n        int height = dm.heightPixels;</pre>\r\n&nbsp;', 'Android开发中常见的过期API以及替换方法', '', 'inherit', 'closed', 'closed', '', '181-revision-v1', '', '', '2016-03-18 15:14:15', '2016-03-18 07:14:15', '', 181, 'http://acheng1314.cn/?p=184', 0, 'revision', '', 0),
(185, 1, '2016-03-18 15:17:47', '2016-03-18 07:17:47', 'A、首先最常见的是getColor、getDrawable之类的，但是我们替换成context.getRecouse.getColor(R.color.xxx,null)之类的会提示最低API是16之类的提示，根据文档查询最终得出：\r\n<pre>ContextCompat.getDrawable(this, R.mipmap.ic_launcher)</pre>\r\nB、在Fragment中使用onAttach方法的时候，传入参数是Activity的已经弃用，但是我们可以更换为传入参数为Context的，用法相同作用相同，而且我们知道常规的上下文都是可以直接从Activity中获取，所以说，可能是谷歌工程师觉得名字不对吧。\r\n\r\nC、当我们想设置透明背景的时候：setBackgroundDrawable(new ColorDrawable(0x00000000));似乎是个不错的方法，但是值得注意  //过时，不推荐使用，这时候我们不得不寻找类似的方法来解决问题，而setBackground方法提示说明要在API16才能使用，所以我们更好使用\r\n<pre>setBackgroundResource(0x00000000);//需要指定资源文件</pre>\r\nD、直接上代码：\r\n\r\n在网络连接判断中，常见的坑是当没有网络连接的时候，返回数据为null，这时候判断是否为WIFI或者数据连接则会产生空指针异常。所以应该先判断是否为空\r\n\r\n原来的：\r\n<pre>/**\r\n * 判断WiFi网络是否可用\r\n *\r\n * @param context\r\n * @return\r\n */\r\npublic static boolean isWifiConnected(Context context) {\r\n    if (context != null) {\r\n        ConnectivityManager mConnectivityManager = (ConnectivityManager) context\r\n                .getSystemService(Context.CONNECTIVITY_SERVICE);\r\n        NetworkInfo networkInfo = mConnectivityManager.getActiveNetworkInfo();\r\n        return networkInfo != null &amp;&amp; ConnectivityManager.TYPE_WIFI == networkInfo.getType();\r\n    }\r\n    return false;\r\n}</pre>\r\n新的：\r\n<pre>/**\r\n * 判断数据流量是否可用\r\n *\r\n * @param context\r\n * @return\r\n */\r\npublic static boolean isMobileConnected(Context context) {\r\n    if (context != null) {\r\n        ConnectivityManager mConnectivityManager = (ConnectivityManager) context\r\n                .getSystemService(Context.CONNECTIVITY_SERVICE);\r\n        NetworkInfo networkInfo = mConnectivityManager.getActiveNetworkInfo();\r\n        return networkInfo != null &amp;&amp; ConnectivityManager.TYPE_MOBILE == networkInfo.getType();\r\n    }\r\n    return false;\r\n}</pre>\r\nE、常见的屏幕检测：\r\n\r\nWindowManager wm = this.getWindowManager();\r\n\r\nint height = wm.getDefaultDisplay().getHeight();  //getHeight过期\r\n\r\n新的：\r\n<pre>//检测屏幕分辨率，代码更新，弃用过时的方法\r\n        DisplayMetrics dm = new DisplayMetrics();\r\n        this.getWindowManager().getDefaultDisplay().getMetrics(dm);\r\n        int height = dm.heightPixels;</pre>\r\n&nbsp;', 'Android开发中常见的过期API以及替换方法', '', 'inherit', 'closed', 'closed', '', '181-revision-v1', '', '', '2016-03-18 15:17:47', '2016-03-18 07:17:47', '', 181, 'http://acheng1314.cn/?p=185', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(187, 1, '2016-03-30 23:53:18', '2016-03-30 15:53:18', '今天公司项目上线倒计时（目前已经上线），在最后的几个钟头进行项目打包混淆。\r\n\r\n首先打开项目属性，选中项目的model后，切换到build Types选项卡，选中release中在下面选中minifyEnabled并设置为true。如图：\r\n\r\n[caption id="attachment_188" align="alignleft" width="814"]<a href="http://acheng1314.cn/?attachment_id=188" rel="attachment wp-att-188"><img class="size-full wp-image-188" src="http://acheng1314.cn/wp-content/uploads/2016/03/项目属性截图.jpg" alt="混淆项目属性截图" width="814" height="533" /></a> 混淆项目属性截图[/caption]\r\n\r\n接着生成签名包，好戏开始了，各种报错信息。。。。（可能在build的时候项目会持续很长时间，直接结束从新生成包就好了）。\r\n<blockquote>Reading input...\r\nReading program jar [D:\\ship\\app\\libs\\jpush-android-2.1.0.jar] (filtered)\r\nReading program jar [C:\\Users\\Administrator\\.gradle\\caches\\modules-2\\files-2.1\\com.nineoldandroids\\library\\2.4.0\\e9b63380f3a242dbdbf103a2355ad7e43bad17cb\\library-2.4.0.jar] (filtered)\r\nReading program jar [C:\\Users\\Administrator\\.gradle\\caches\\modules-2\\files-2.1\\com.squareup.picasso\\picasso\\2.4.0\\f36d2d4e3a36b3259aaf9d004d29b4cdc6c1bfb2\\picasso-2.4.0.jar] (filtered)\r\nReading program jar [C:\\Users\\Administrator\\.gradle\\caches\\modules-2\\files-2.1\\com.alibaba\\fastjson\\1.2.7\\a5c721e8ea1e18854272879d6ed2770d25feb342\\fastjson-1.2.7.jar] (filtered)\r\nReading program jar [D:\\android-sdk-windows\\extras\\android\\m2repository\\com\\android\\support\\support-annotations\\23.1.1\\support-annotations-23.1.1.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\de.hdodenhof\\circleimageview\\2.0.0\\jars\\classes.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\com.jude\\rollviewpager\\1.2.3\\jars\\classes.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\com.github.premnirmal\\TextCounter\\1.1.0\\jars\\classes.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\com.melnykov\\floatingactionbutton\\1.3.0\\jars\\classes.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\com.jude\\easyrecyclerview\\3.3.4\\jars\\classes.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\com.github.clans\\fab\\1.6.0\\jars\\classes.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\com.android.support\\appcompat-v7\\23.1.1\\jars\\classes.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\com.bigkoo\\svprogresshud\\1.0.2\\jars\\classes.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\com.android.support\\recyclerview-v7\\23.1.1\\jars\\classes.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\com.android.support\\support-v4\\23.1.1\\jars\\classes.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\com.android.support\\support-v4\\23.1.1\\jars\\libs\\internal_impl-23.1.1.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\com.android.support\\cardview-v7\\23.1.1\\jars\\classes.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\ship\\multi-image-selector\\unspecified\\jars\\classes.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\transforms\\mergeJavaRes\\release\\jars\\2\\1f\\main.jar] (filtered)\r\nReading program directory [D:\\ship\\app\\build\\intermediates\\classes\\release] (filtered)\r\nReading library jar [D:\\android-sdk-windows\\platforms\\android-23\\android.jar]\r\nReading library jar [D:\\android-sdk-windows\\platforms\\android-23\\optional\\org.apache.http.legacy.jar]\r\nNote: duplicate definition of library class [android.net.http.SslError]\r\nNote: duplicate definition of library class [android.net.http.SslCertificate]\r\nNote: duplicate definition of library class [android.net.http.SslCertificate$DName]\r\nNote: duplicate definition of library class [org.apache.http.conn.scheme.HostNameResolver]\r\nNote: duplicate definition of library class [org.apache.http.conn.scheme.SocketFactory]\r\nNote: duplicate definition of library class [org.apache.http.conn.ConnectTimeoutException]\r\nNote: duplicate definition of library class [org.apache.http.params.HttpParams]\r\nNote: there were 7 duplicate class definitions.\r\n(http://proguard.sourceforge.net/manual/troubleshooting.html#duplicateclass)\r\nInitializing...\r\nNote: the configuration refers to the unknown class ''com.google.vending.licensing.ILicensingService''\r\nNote: the configuration refers to the unknown class ''com.android.vending.licensing.ILicensingService''\r\nNote: android.support.v4.app.NotificationCompatJellybean calls ''Field.getType''\r\nNote: com.alibaba.fastjson.JSONObject calls ''Method.getGenericReturnType''\r\nNote: com.alibaba.fastjson.TypeReference calls ''Class.getGenericSuperclass''\r\nNote: com.alibaba.fastjson.parser.ParserConfig calls ''Class.getTypeParameters''\r\nNote: com.alibaba.fastjson.parser.deserializer.ArrayDeserializer calls ''Class.getTypeParameters''\r\nNote: com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer calls ''Class.getTypeParameters''\r\nNote: com.alibaba.fastjson.util.ASMUtils calls ''Method.getGenericReturnType''\r\nNote: com.alibaba.fastjson.util.ASMUtils calls ''Field.getGenericType''\r\nNote: com.alibaba.fastjson.util.DeserializeBeanInfo calls ''Method.getGenericParameterTypes''\r\nNote: com.alibaba.fastjson.util.FieldInfo calls ''Method.getGenericParameterTypes''\r\nNote: com.alibaba.fastjson.util.FieldInfo calls ''Method.getGenericReturnType''\r\nNote: com.alibaba.fastjson.util.FieldInfo calls ''Field.getType''\r\nNote: com.alibaba.fastjson.util.FieldInfo calls ''Field.getGenericType''\r\nNote: com.alibaba.fastjson.util.FieldInfo calls ''Class.getTypeParameters''\r\nNote: com.alibaba.fastjson.util.FieldInfo calls ''Class.getGenericSuperclass''\r\nNote: com.alibaba.fastjson.util.TypeUtils calls ''Method.getGenericParameterTypes''\r\nNote: com.alibaba.fastjson.util.TypeUtils calls ''Class.getGenericSuperclass''\r\nNote: com.google.gson.jpush.a.a.q calls ''Class.getGenericSuperclass''\r\nNote: com.google.gson.jpush.a.a.q calls ''Field.getGenericType''\r\nNote: com.google.gson.jpush.a.a.q calls ''Field.getType''\r\nNote: com.google.gson.jpush.a.b calls ''Class.getGenericInterfaces''\r\nNote: com.google.gson.jpush.a.b calls ''Class.getGenericSuperclass''\r\nNote: com.google.gson.jpush.a.b calls ''Class.getTypeParameters''\r\nNote: com.google.gson.jpush.a.s calls ''Field.getType''\r\nNote: com.google.gson.jpush.b.a calls ''Class.getGenericSuperclass''\r\nNote: com.nineoldandroids.util.ReflectiveProperty calls ''Field.getType''\r\nNote: com.alibaba.fastjson.util.DeserializeBeanInfo calls ''Class.getDeclaringClass''\r\nNote: com.google.gson.jpush.a.d calls ''Class.getEnclosingClass''\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find superclass or interface org.springframework.http.converter.AbstractHttpMessageConverter\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find superclass or interface org.springframework.web.servlet.view.AbstractView\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.LocalDateTime\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.LocalDate\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.LocalTime\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.ZonedDateTime\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.OffsetDateTime\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.OffsetTime\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.ZoneId\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.Period\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.Duration\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.Instant\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.LocalDateTime\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.LocalDate\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.LocalTime\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.ZonedDateTime\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.OffsetDateTime\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.OffsetTime\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.ZoneId\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.Period\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.Duration\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.Instant\r\nWarning:com.alibaba.fastjson.serializer.ColorCodec: can''t find referenced class java.awt.Color\r\nWarning:com.alibaba.fastjson.serializer.FontCodec: can''t find referenced class java.awt.Font\r\nWarning:com.alibaba.fastjson.serializer.PointCodec: can''t find referenced class java.awt.Point\r\nWarning:com.alibaba.fastjson.serializer.RectangleCodec: can''t find referenced class java.awt.Rectangle\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find referenced class org.springframework.http.MediaType\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find referenced class org.springframework.http.converter.AbstractHttpMessageConverter\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find referenced class org.springframework.http.HttpInputMessage\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find referenced class org.springframework.http.HttpOutputMessage\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find referenced class org.springframework.http.converter.AbstractHttpMessageConverter\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find referenced class org.springframework.http.converter.HttpMessageNotReadableException\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find referenced class org.springframework.http.converter.HttpMessageNotWritableException\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find referenced class org.springframework.http.HttpInputMessage\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find referenced class org.springframework.http.HttpOutputMessage\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find referenced class org.springframework.http.HttpInputMessage\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find referenced class org.springframework.http.HttpOutputMessage\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find referenced class org.springframework.http.converter.AbstractHttpMessageConverter\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class org.springframework.web.servlet.view.AbstractView\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced method ''void setContentType(java.lang.String)'' in program class com.alibaba.fastjson.support.spring.FastJsonJsonView\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced method ''void setExposePathVariables(boolean)'' in program class com.alibaba.fastjson.support.spring.FastJsonJsonView\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced method ''java.io.ByteArrayOutputStream createTemporaryOutputStream()'' in program class com.alibaba.fastjson.support.spring.FastJsonJsonView\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletResponse\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced method ''void writeToResponse(javax.servlet.http.HttpServletResponse,java.io.ByteArrayOutputStream)'' in program class com.alibaba.fastjson.support.spring.FastJsonJsonView\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced method ''void setResponseContentType(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)'' in program class com.alibaba.fastjson.support.spring.FastJsonJsonView\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletResponse\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class org.springframework.util.CollectionUtils\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class org.springframework.validation.BindingResult\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class org.springframework.web.servlet.view.AbstractView\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletResponse\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class org.springframework.util.CollectionUtils\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletRequest\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletResponse\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletRequest\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletResponse\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletRequest\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletResponse\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletRequest\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletResponse\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletRequest\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletResponse\r\nWarning:com.google.gson.jpush.a.ab: can''t find referenced class com.google.gson.jpush.a.w$com.google.gson.jpush.a.ac\r\nWarning:com.google.gson.jpush.a.w: can''t find referenced class com.google.gson.jpush.a.w$com.google.gson.jpush.a.y\r\nWarning:com.google.gson.jpush.a.w: can''t find referenced class com.google.gson.jpush.a.w$com.google.gson.jpush.a.aa\r\nWarning:com.google.gson.jpush.a.z: can''t find referenced class com.google.gson.jpush.a.w$com.google.gson.jpush.a.ac\r\nWarning:com.squareup.picasso.OkHttpDownloader: can''t find referenced class com.squareup.okhttp.OkHttpClient\r\nWarning:com.squareup.picasso.OkHttpDownloader: can''t find referenced class com.squareup.okhttp.OkUrlFactory\r\nWarning:com.squareup.picasso.OkHttpDownloader: can''t find referenced class com.squareup.okhttp.Cache\r\nWarning:com.squareup.picasso.OkHttpDownloader: can''t find referenced class com.squareup.okhttp.OkHttpClient\r\nWarning:com.squareup.picasso.OkHttpDownloader: can''t find referenced class com.squareup.okhttp.OkUrlFactory\r\nWarning:com.squareup.picasso.OkHttpDownloader: can''t find referenced class com.squareup.okhttp.OkHttpClient\r\nWarning:com.squareup.picasso.OkHttpDownloader: can''t find referenced class com.squareup.okhttp.Cache\r\nWarning:com.squareup.picasso.OkHttpDownloader: can''t find referenced class com.squareup.okhttp.OkUrlFactory\r\nWarning:com.squareup.picasso.OkHttpDownloader: can''t find referenced class com.squareup.okhttp.OkHttpClient\r\nWarning:com.squareup.picasso.OkHttpDownloader: can''t find referenced class com.squareup.okhttp.Cache\r\nNote: android.support.v4.text.ICUCompatApi23: can''t find dynamically referenced class libcore.icu.ICU\r\nNote: android.support.v4.text.ICUCompatIcs: can''t find dynamically referenced class libcore.icu.ICU\r\nNote: android.support.v7.widget.DrawableUtils: can''t find dynamically referenced class android.graphics.Insets\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.awt.Point\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.awt.Font\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.awt.Rectangle\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.awt.Color\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.time.LocalDateTime\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.time.LocalDate\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.time.LocalTime\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.time.ZonedDateTime\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.time.OffsetDateTime\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.time.OffsetTime\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.time.ZoneOffset\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.time.ZoneRegion\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.time.ZoneId\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.time.Period\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.time.Duration\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.time.Instant\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.awt.Color\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.awt.Font\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.awt.Point\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.awt.Rectangle\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.time.LocalDateTime\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.time.LocalDate\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.time.LocalTime\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.time.ZonedDateTime\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.time.OffsetDateTime\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.time.OffsetTime\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.time.ZoneOffset\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.time.ZoneRegion\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.time.Period\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.time.Duration\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.time.Instant\r\nNote: com.squareup.picasso.Utils: can''t find dynamically referenced class com.squareup.okhttp.OkUrlFactory\r\nNote: com.squareup.picasso.Utils: can''t find dynamically referenced class com.squareup.okhttp.OkHttpClient\r\nNote: android.support.v4.app.NotificationCompatJellybean accesses a declared field ''icon'' dynamically\r\nMaybe this is program field ''android.support.v4.app.NotificationCompat$Action { int icon; }''\r\nMaybe this is program field ''android.support.v7.appcompat.R$attr { int icon; }''\r\nMaybe this is program field ''android.support.v7.appcompat.R$id { int icon; }''\r\nMaybe this is program field ''co.sspp.ship.R$attr { int icon; }''\r\nMaybe this is program field ''co.sspp.ship.R$id { int icon; }''\r\nMaybe this is program field ''com.jude.easyrecyclerview.R$attr { int icon; }''\r\nMaybe this is program field ''com.jude.easyrecyclerview.R$id { int icon; }''\r\nMaybe this is program field ''com.jude.rollviewpager.R$attr { int icon; }''\r\nMaybe this is program field ''com.jude.rollviewpager.R$id { int icon; }''\r\nMaybe this is program field ''me.nereo.multi_image_selector.R$attr { int icon; }''\r\nMaybe this is program field ''me.nereo.multi_image_selector.R$id { int icon; }''\r\nMaybe this is library field ''android.R$attr { int icon; }''\r\nMaybe this is library field ''android.R$id { int icon; }''\r\nMaybe this is library field ''android.app.LauncherActivity$ListItem { android.graphics.drawable.Drawable icon; }''\r\nMaybe this is library field ''android.app.Notification { int icon; }''\r\nMaybe this is library field ''android.app.Notification$Action { int icon; }''\r\nMaybe this is library field ''android.appwidget.AppWidgetProviderInfo { int icon; }''\r\nMaybe this is library field ''android.content.pm.PackageItemInfo { int icon; }''\r\nMaybe this is library field ''android.content.pm.ResolveInfo { int icon; }''\r\nMaybe this is library field ''android.inputmethodservice.Keyboard$Key { android.graphics.drawable.Drawable icon; }''\r\nMaybe this is library field ''android.speech.tts.TextToSpeech$EngineInfo { int icon; }''\r\nNote: android.support.v4.app.NotificationCompatJellybean accesses a declared field ''title'' dynamically\r\nMaybe this is program field ''android.support.v4.app.NotificationCompat$Action { java.lang.CharSequence title; }''\r\nMaybe this is program field ''android.support.v7.appcompat.R$attr { int title; }''\r\nMaybe this is program field ''android.support.v7.appcompat.R$id { int title; }''\r\nMaybe this is program field ''co.sspp.ship.R$attr { int title; }''\r\nMaybe this is program field ''co.sspp.ship.R$id { int title; }''\r\nMaybe this is program field ''com.jude.easyrecyclerview.R$attr { int title; }''\r\nMaybe this is program field ''com.jude.easyrecyclerview.R$id { int title; }''\r\nMaybe this is program field ''com.jude.rollviewpager.R$attr { int title; }''\r\nMaybe this is program field ''com.jude.rollviewpager.R$id { int title; }''\r\nMaybe this is program field ''me.nereo.multi_image_selector.R$attr { int title; }''\r\nMaybe this is program field ''me.nereo.multi_image_selector.R$id { int title; }''\r\nMaybe this is library field ''android.R$attr { int title; }''\r\nMaybe this is library field ''android.R$id { int title; }''\r\nMaybe this is library field ''android.app.Notification$Action { java.lang.CharSequence title; }''\r\nMaybe this is library field ''android.preference.PreferenceActivity$Header { java.lang.CharSequence title; }''\r\nNote: android.support.v4.app.NotificationCompatJellybean accesses a declared field ''actionIntent'' dynamically\r\nMaybe this is program field ''android.support.v4.app.NotificationCompat$Action { android.app.PendingIntent actionIntent; }''\r\nMaybe this is library field ''android.app.Notification$Action { android.app.PendingIntent actionIntent; }''\r\nNote: the configuration keeps the entry point ''android.support.v4.view.ViewPager { void setAdapter(android.support.v4.view.PagerAdapter); }'', but not the descriptor class ''android.support.v4.view.PagerAdapter''\r\nNote: the configuration keeps the entry point ''android.support.v4.view.ViewPager { void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener); }'', but not the descriptor class ''android.support.v4.view.ViewPager$OnAdapterChangeListener''\r\nNote: the configuration keeps the entry point ''android.support.v4.view.ViewPager { void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener); }'', but not the descriptor class ''android.support.v4.view.ViewPager$OnPageChangeListener''\r\nNote: the configuration keeps the entry point ''android.support.v4.widget.DrawerLayout { void setDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener); }'', but not the descriptor class ''android.support.v4.widget.DrawerLayout$DrawerListener''\r\nNote: the configuration keeps the entry point ''android.support.v4.widget.NestedScrollView { void setOnScrollChangeListener(android.support.v4.widget.NestedScrollView$OnScrollChangeListener); }'', but not the descriptor class ''android.support.v4.widget.NestedScrollView$OnScrollChangeListener''\r\nNote: the configuration keeps the entry point ''android.support.v4.widget.SlidingPaneLayout { void setPanelSlideListener(android.support.v4.widget.SlidingPaneLayout$PanelSlideListener); }'', but not the descriptor class ''android.support.v4.widget.SlidingPaneLayout$PanelSlideListener''\r\nNote: the configuration keeps the entry point ''android.support.v4.widget.SwipeRefreshLayout { void setOnRefreshListener(android.support.v4.widget.SwipeRefreshLayout$OnRefreshListener); }'', but not the descriptor class ''android.support.v4.widget.SwipeRefreshLayout$OnRefreshListener''\r\nNote: the configuration keeps the entry point ''android.support.v7.view.menu.ActionMenuItemView { void setItemInvoker(android.support.v7.view.menu.MenuBuilder$ItemInvoker); }'', but not the descriptor class ''android.support.v7.view.menu.MenuBuilder$ItemInvoker''\r\nNote: the configuration keeps the entry point ''android.support.v7.view.menu.ActionMenuItemView { void setPopupCallback(android.support.v7.view.menu.ActionMenuItemView$PopupCallback); }'', but not the descriptor class ''android.support.v7.view.menu.ActionMenuItemView$PopupCallback''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.ActionBarContainer { void setTabContainer(android.support.v7.widget.ScrollingTabContainerView); }'', but not the descriptor class ''android.support.v7.widget.ScrollingTabContainerView''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.ActionBarOverlayLayout { void setActionBarVisibilityCallback(android.support.v7.widget.ActionBarOverlayLayout$ActionBarVisibilityCallback); }'', but not the descriptor class ''android.support.v7.widget.ActionBarOverlayLayout$ActionBarVisibilityCallback''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.ActionMenuView { void setPresenter(android.support.v7.widget.ActionMenuPresenter); }'', but not the descriptor class ''android.support.v7.widget.ActionMenuPresenter''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.ActionMenuView { void setOnMenuItemClickListener(android.support.v7.widget.ActionMenuView$OnMenuItemClickListener); }'', but not the descriptor class ''android.support.v7.widget.ActionMenuView$OnMenuItemClickListener''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.ActivityChooserView { void setActivityChooserModel(android.support.v7.widget.ActivityChooserModel); }'', but not the descriptor class ''android.support.v7.widget.ActivityChooserModel''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.ActivityChooserView { void setProvider(android.support.v4.view.ActionProvider); }'', but not the descriptor class ''android.support.v4.view.ActionProvider''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.ContentFrameLayout { void setAttachListener(android.support.v7.widget.ContentFrameLayout$OnAttachListener); }'', but not the descriptor class ''android.support.v7.widget.ContentFrameLayout$OnAttachListener''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.FitWindowsFrameLayout { void setOnFitSystemWindowsListener(android.support.v7.widget.FitWindowsViewGroup$OnFitSystemWindowsListener); }'', but not the descriptor class ''android.support.v7.widget.FitWindowsViewGroup$OnFitSystemWindowsListener''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.FitWindowsLinearLayout { void setOnFitSystemWindowsListener(android.support.v7.widget.FitWindowsViewGroup$OnFitSystemWindowsListener); }'', but not the descriptor class ''android.support.v7.widget.FitWindowsViewGroup$OnFitSystemWindowsListener''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.RecyclerView { void setAccessibilityDelegateCompat(android.support.v7.widget.RecyclerViewAccessibilityDelegate); }'', but not the descriptor class ''android.support.v7.widget.RecyclerViewAccessibilityDelegate''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.RecyclerView { void setAdapter(android.support.v7.widget.RecyclerView$Adapter); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$Adapter''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.RecyclerView { void setRecyclerListener(android.support.v7.widget.RecyclerView$RecyclerListener); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$RecyclerListener''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.RecyclerView { void setLayoutManager(android.support.v7.widget.RecyclerView$LayoutManager); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$LayoutManager''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.RecyclerView { void setRecycledViewPool(android.support.v7.widget.RecyclerView$RecycledViewPool); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$RecycledViewPool''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.RecyclerView { void setViewCacheExtension(android.support.v7.widget.RecyclerView$ViewCacheExtension); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$ViewCacheExtension''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.RecyclerView { void setChildDrawingOrderCallback(android.support.v7.widget.RecyclerView$ChildDrawingOrderCallback); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$ChildDrawingOrderCallback''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.RecyclerView { void setOnScrollListener(android.support.v7.widget.RecyclerView$OnScrollListener); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$OnScrollListener''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.RecyclerView { void setItemAnimator(android.support.v7.widget.RecyclerView$ItemAnimator); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$ItemAnimator''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.SearchView { void setOnQueryTextListener(android.support.v7.widget.SearchView$OnQueryTextListener); }'', but not the descriptor class ''android.support.v7.widget.SearchView$OnQueryTextListener''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.SearchView { void setOnCloseListener(android.support.v7.widget.SearchView$OnCloseListener); }'', but not the descriptor class ''android.support.v7.widget.SearchView$OnCloseListener''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.SearchView { void setOnSuggestionListener(android.support.v7.widget.SearchView$OnSuggestionListener); }'', but not the descriptor class ''android.support.v7.widget.SearchView$OnSuggestionListener''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.SearchView { void setSuggestionsAdapter(android.support.v4.widget.CursorAdapter); }'', but not the descriptor class ''android.support.v4.widget.CursorAdapter''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.SearchView$SearchAutoComplete { void setSearchView(android.support.v7.widget.SearchView); }'', but not the descriptor class ''android.support.v7.widget.SearchView''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.Toolbar { void setOnMenuItemClickListener(android.support.v7.widget.Toolbar$OnMenuItemClickListener); }'', but not the descriptor class ''android.support.v7.widget.Toolbar$OnMenuItemClickListener''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.ViewStubCompat { void setOnInflateListener(android.support.v7.widget.ViewStubCompat$OnInflateListener); }'', but not the descriptor class ''android.support.v7.widget.ViewStubCompat$OnInflateListener''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.goodser.widgets.CustomCheckBox.RecyclerViewWithFooter.RecyclerViewWithFooter { void setOnLoadMoreListener(co.sspp.ship.goodser.widgets.CustomCheckBox.RecyclerViewWithFooter.OnLoadMoreListener); }'', but not the descriptor class ''co.sspp.ship.goodser.widgets.CustomCheckBox.RecyclerViewWithFooter.OnLoadMoreListener''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.goodser.widgets.CustomCheckBox.RecyclerViewWithFooter.RecyclerViewWithFooter { void setAdapter(android.support.v7.widget.RecyclerView$Adapter); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$Adapter''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.goodser.widgets.CustomCheckBox.RecyclerViewWithFooter.RecyclerViewWithFooter { void setFootItem(co.sspp.ship.goodser.widgets.CustomCheckBox.RecyclerViewWithFooter.FootItem); }'', but not the descriptor class ''co.sspp.ship.goodser.widgets.CustomCheckBox.RecyclerViewWithFooter.FootItem''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.goodser.widgets.CustomCheckBox.RecyclerViewWithFooter.RecyclerViewWithFooter { void setEmptyItem(co.sspp.ship.goodser.widgets.CustomCheckBox.RecyclerViewWithFooter.EmptyItem); }'', but not the descriptor class ''co.sspp.ship.goodser.widgets.CustomCheckBox.RecyclerViewWithFooter.EmptyItem''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.goodser.widgets.CustomCheckBox.SmoothCheckBox { void setOnCheckedChangeListener(co.sspp.ship.goodser.widgets.CustomCheckBox.SmoothCheckBox$OnCheckedChangeListener); }'', but not the descriptor class ''co.sspp.ship.goodser.widgets.CustomCheckBox.SmoothCheckBox$OnCheckedChangeListener''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.widgets.RatingBarView { void setOnRatingListener(co.sspp.ship.widgets.RatingBarView$OnRatingListener); }'', but not the descriptor class ''co.sspp.ship.widgets.RatingBarView$OnRatingListener''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.widgets.datepicker.views.DatePicker { void setDPDecor(co.sspp.ship.widgets.datepicker.bizs.decors.DPDecor); }'', but not the descriptor class ''co.sspp.ship.widgets.datepicker.bizs.decors.DPDecor''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.widgets.datepicker.views.DatePicker { void setMode(co.sspp.ship.widgets.datepicker.cons.DPMode); }'', but not the descriptor class ''co.sspp.ship.widgets.datepicker.cons.DPMode''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.widgets.datepicker.views.DatePicker { void setOnDatePickedListener(co.sspp.ship.widgets.datepicker.views.DatePicker$OnDatePickedListener); }'', but not the descriptor class ''co.sspp.ship.widgets.datepicker.views.DatePicker$OnDatePickedListener''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.widgets.datepicker.views.DatePicker { void setOnDateSelectedListener(co.sspp.ship.widgets.datepicker.views.DatePicker$OnDateSelectedListener); }'', but not the descriptor class ''co.sspp.ship.widgets.datepicker.views.DatePicker$OnDateSelectedListener''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.widgets.datepicker.views.MonthView { void setOnDateChangeListener(co.sspp.ship.widgets.datepicker.views.MonthView$OnDateChangeListener); }'', but not the descriptor class ''co.sspp.ship.widgets.datepicker.views.MonthView$OnDateChangeListener''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.widgets.datepicker.views.MonthView { void setOnDatePickedListener(co.sspp.ship.widgets.datepicker.views.DatePicker$OnDatePickedListener); }'', but not the descriptor class ''co.sspp.ship.widgets.datepicker.views.DatePicker$OnDatePickedListener''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.widgets.datepicker.views.MonthView { void setDPMode(co.sspp.ship.widgets.datepicker.cons.DPMode); }'', but not the descriptor class ''co.sspp.ship.widgets.datepicker.cons.DPMode''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.widgets.datepicker.views.MonthView { void setDPDecor(co.sspp.ship.widgets.datepicker.bizs.decors.DPDecor); }'', but not the descriptor class ''co.sspp.ship.widgets.datepicker.bizs.decors.DPDecor''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.widgets.sortlistview.SideBar { void setOnTouchingLetterChangedListener(co.sspp.ship.widgets.sortlistview.SideBar$OnTouchingLetterChangedListener); }'', but not the descriptor class ''co.sspp.ship.widgets.sortlistview.SideBar$OnTouchingLetterChangedListener''\r\nNote: the configuration keeps the entry point ''com.github.clans.fab.FloatingActionMenu { void setLabelEllipsize(com.github.clans.fab.Label); }'', but not the descriptor class ''com.github.clans.fab.Label''\r\nNote: the configuration keeps the entry point ''com.github.clans.fab.FloatingActionMenu { void setOnMenuToggleListener(com.github.clans.fab.FloatingActionMenu$OnMenuToggleListener); }'', but not the descriptor class ''com.github.clans.fab.FloatingActionMenu$OnMenuToggleListener''\r\nNote: the configuration keeps the entry point ''com.github.premnirmal.textcounter.CounterView { void setCounterType(com.github.premnirmal.textcounter.CounterType); }'', but not the descriptor class ''com.github.premnirmal.textcounter.CounterType''\r\nNote: the configuration keeps the entry point ''com.github.premnirmal.textcounter.CounterView { void setFormatter(com.github.premnirmal.textcounter.Formatter); }'', but not the descriptor class ''com.github.premnirmal.textcounter.Formatter''\r\nNote: the configuration keeps the entry point ''com.jude.easyrecyclerview.EasyRecyclerView { void setLayoutManager(android.support.v7.widget.RecyclerView$LayoutManager); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$LayoutManager''\r\nNote: the configuration keeps the entry point ''com.jude.easyrecyclerview.EasyRecyclerView { void setAdapter(android.support.v7.widget.RecyclerView$Adapter); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$Adapter''\r\nNote: the configuration keeps the entry point ''com.jude.easyrecyclerview.EasyRecyclerView { void setAdapterWithProgress(android.support.v7.widget.RecyclerView$Adapter); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$Adapter''\r\nNote: the configuration keeps the entry point ''com.jude.easyrecyclerview.EasyRecyclerView { void setRefreshListener(android.support.v4.widget.SwipeRefreshLayout$OnRefreshListener); }'', but not the descriptor class ''android.support.v4.widget.SwipeRefreshLayout$OnRefreshListener''\r\nNote: the configuration keeps the entry point ''com.jude.easyrecyclerview.EasyRecyclerView { void setOnScrollListener(android.support.v7.widget.RecyclerView$OnScrollListener); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$OnScrollListener''\r\nNote: the configuration keeps the entry point ''com.jude.easyrecyclerview.EasyRecyclerView { void setItemAnimator(android.support.v7.widget.RecyclerView$ItemAnimator); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$ItemAnimator''\r\nNote: the configuration keeps the entry point ''com.jude.easyrecyclerview.swipe.SwipeRefreshLayout { void setOnRefreshListener(android.support.v4.widget.SwipeRefreshLayout$OnRefreshListener); }'', but not the descriptor class ''android.support.v4.widget.SwipeRefreshLayout$OnRefreshListener''\r\nNote: the configuration keeps the entry point ''com.jude.rollviewpager.RollPagerView { void setHintViewDelegate(com.jude.rollviewpager.RollPagerView$HintViewDelegate); }'', but not the descriptor class ''com.jude.rollviewpager.RollPagerView$HintViewDelegate''\r\nNote: the configuration keeps the entry point ''com.jude.rollviewpager.RollPagerView { void setHintView(com.jude.rollviewpager.HintView); }'', but not the descriptor class ''com.jude.rollviewpager.HintView''\r\nNote: the configuration keeps the entry point ''com.jude.rollviewpager.RollPagerView { void setAdapter(android.support.v4.view.PagerAdapter); }'', but not the descriptor class ''android.support.v4.view.PagerAdapter''\r\nNote: the configuration keeps the entry point ''com.melnykov.fab.ObservableScrollView { void setOnScrollChangedListener(com.melnykov.fab.ObservableScrollView$OnScrollChangedListener); }'', but not the descriptor class ''com.melnykov.fab.ObservableScrollView$OnScrollChangedListener''\r\nNote: there were 2 references to unknown classes.\r\nYou should check your configuration for typos.\r\n(http://proguard.sourceforge.net/manual/troubleshooting.html#unknownclass)\r\nNote: there were 26 classes trying to access generic signatures using reflection.\r\nYou should consider keeping the signature attributes\r\n(using ''-keepattributes Signature'').\r\n(http://proguard.sourceforge.net/manual/troubleshooting.html#attributes)\r\nNote: there were 2 classes trying to access enclosing classes using reflection.\r\nYou should consider keeping the inner classes attributes\r\n(using ''-keepattributes InnerClasses'').\r\n(http://proguard.sourceforge.net/manual/troubleshooting.html#attributes)\r\nNote: there were 64 unkept descriptor classes in kept class members.\r\nYou should consider explicitly keeping the mentioned classes\r\n(using ''-keep'').\r\n(http://proguard.sourceforge.net/manual/troubleshooting.html#descriptorclass)\r\nNote: there were 36 unresolved dynamic references to classes or interfaces.\r\nYou should check if you need to specify additional program jars.\r\n(http://proguard.sourceforge.net/manual/troubleshooting.html#dynamicalclass)\r\nNote: there were 3 accesses to class members by means of introspection.\r\nYou should consider explicitly keeping the mentioned class members\r\n(using ''-keep'' or ''-keepclassmembers'').\r\n(http://proguard.sourceforge.net/manual/troubleshooting.html#dynamicalclassmember)\r\nWarning:there were 114 unresolved references to classes or interfaces.\r\nYou may need to add missing library jars or update their versions.\r\nIf your code works fine without the missing classes, you can suppress\r\nthe warnings with ''-dontwarn'' options.\r\n(http://proguard.sourceforge.net/manual/troubleshooting.html#unresolvedclass)\r\nWarning:there were 5 unresolved references to program class members.\r\nYour input classes appear to be inconsistent.\r\nYou may need to recompile the code.\r\n(http://proguard.sourceforge.net/manual/troubleshooting.html#unresolvedprogramclassmember)\r\nWarning:Exception while processing task java.io.IOException: Please correct the above warnings first.\r\n:app:transformClassesAndResourcesWithProguardForRelease FAILED\r\nError:Execution failed for task '':app:transformClassesAndResourcesWithProguardForRelease''.\r\n&gt; java.io.IOException: Please correct the above warnings first.</blockquote>\r\n&nbsp;\r\n\r\n其实上面的信息都可以不看，无非是一大堆报错信息。上网百度了下，首先要将引用的第三方类库全部过滤掉，代码如下：\r\n\r\n&nbsp;\r\n<pre>-libraryjars ../multi-image-selector\r\n#上面是导入的model。同样的其他的也是如此\r\n-keep class com.github.** { *; }\r\n#上面这个是避免混淆你导入的maven类库之类的\r\n-<em>dontwarn</em>//不用输出警告\r\n-ignorewarning-dump class_files.txt\r\n-printseeds seeds.txt\r\n-printusage unused.txt\r\n-printmapping mapping.txt\r\n#生成对应的混淆信息\r\n#注意的是fastJson要特殊对待</pre>\r\n当你混淆完成后，你发现一个很神奇的事情，这东西就是你的APP前面测试的时候，你保证了百分百不出错，但是你混淆后可能会出错，这时候你要检查网络请求。混淆过后的空指针错误可能多一点，这个时候兄弟莫慌，先检查网络请求，确定你的网络请求正确后，你需要查看你的数据转换，一般问题多一点就出在json数据转换这里。\r\n\r\n&nbsp;', 'Android代码混淆打包踩过的坑', '', 'publish', 'open', 'open', '', 'android%e4%bb%a3%e7%a0%81%e6%b7%b7%e6%b7%86%e6%89%93%e5%8c%85%e8%b8%a9%e8%bf%87%e7%9a%84%e5%9d%91', '', '', '2016-03-30 23:53:18', '2016-03-30 15:53:18', '', 0, 'http://acheng1314.cn/?p=187', 0, 'post', '', 18),
(188, 1, '2016-03-30 23:34:28', '2016-03-30 15:34:28', '', '项目属性截图', '混淆项目属性截图', 'inherit', 'open', 'closed', '', '%e9%a1%b9%e7%9b%ae%e5%b1%9e%e6%80%a7%e6%88%aa%e5%9b%be', '', '', '2016-03-30 23:34:50', '2016-03-30 15:34:50', '', 187, 'http://acheng1314.cn/wp-content/uploads/2016/03/项目属性截图.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(189, 1, '2016-03-30 23:53:18', '2016-03-30 15:53:18', '今天公司项目上线倒计时（目前已经上线），在最后的几个钟头进行项目打包混淆。\r\n\r\n首先打开项目属性，选中项目的model后，切换到build Types选项卡，选中release中在下面选中minifyEnabled并设置为true。如图：\r\n\r\n[caption id="attachment_188" align="alignleft" width="814"]<a href="http://acheng1314.cn/?attachment_id=188" rel="attachment wp-att-188"><img class="size-full wp-image-188" src="http://acheng1314.cn/wp-content/uploads/2016/03/项目属性截图.jpg" alt="混淆项目属性截图" width="814" height="533" /></a> 混淆项目属性截图[/caption]\r\n\r\n接着生成签名包，好戏开始了，各种报错信息。。。。（可能在build的时候项目会持续很长时间，直接结束从新生成包就好了）。\r\n<blockquote>Reading input...\r\nReading program jar [D:\\ship\\app\\libs\\jpush-android-2.1.0.jar] (filtered)\r\nReading program jar [C:\\Users\\Administrator\\.gradle\\caches\\modules-2\\files-2.1\\com.nineoldandroids\\library\\2.4.0\\e9b63380f3a242dbdbf103a2355ad7e43bad17cb\\library-2.4.0.jar] (filtered)\r\nReading program jar [C:\\Users\\Administrator\\.gradle\\caches\\modules-2\\files-2.1\\com.squareup.picasso\\picasso\\2.4.0\\f36d2d4e3a36b3259aaf9d004d29b4cdc6c1bfb2\\picasso-2.4.0.jar] (filtered)\r\nReading program jar [C:\\Users\\Administrator\\.gradle\\caches\\modules-2\\files-2.1\\com.alibaba\\fastjson\\1.2.7\\a5c721e8ea1e18854272879d6ed2770d25feb342\\fastjson-1.2.7.jar] (filtered)\r\nReading program jar [D:\\android-sdk-windows\\extras\\android\\m2repository\\com\\android\\support\\support-annotations\\23.1.1\\support-annotations-23.1.1.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\de.hdodenhof\\circleimageview\\2.0.0\\jars\\classes.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\com.jude\\rollviewpager\\1.2.3\\jars\\classes.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\com.github.premnirmal\\TextCounter\\1.1.0\\jars\\classes.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\com.melnykov\\floatingactionbutton\\1.3.0\\jars\\classes.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\com.jude\\easyrecyclerview\\3.3.4\\jars\\classes.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\com.github.clans\\fab\\1.6.0\\jars\\classes.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\com.android.support\\appcompat-v7\\23.1.1\\jars\\classes.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\com.bigkoo\\svprogresshud\\1.0.2\\jars\\classes.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\com.android.support\\recyclerview-v7\\23.1.1\\jars\\classes.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\com.android.support\\support-v4\\23.1.1\\jars\\classes.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\com.android.support\\support-v4\\23.1.1\\jars\\libs\\internal_impl-23.1.1.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\com.android.support\\cardview-v7\\23.1.1\\jars\\classes.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\exploded-aar\\ship\\multi-image-selector\\unspecified\\jars\\classes.jar] (filtered)\r\nReading program jar [D:\\ship\\app\\build\\intermediates\\transforms\\mergeJavaRes\\release\\jars\\2\\1f\\main.jar] (filtered)\r\nReading program directory [D:\\ship\\app\\build\\intermediates\\classes\\release] (filtered)\r\nReading library jar [D:\\android-sdk-windows\\platforms\\android-23\\android.jar]\r\nReading library jar [D:\\android-sdk-windows\\platforms\\android-23\\optional\\org.apache.http.legacy.jar]\r\nNote: duplicate definition of library class [android.net.http.SslError]\r\nNote: duplicate definition of library class [android.net.http.SslCertificate]\r\nNote: duplicate definition of library class [android.net.http.SslCertificate$DName]\r\nNote: duplicate definition of library class [org.apache.http.conn.scheme.HostNameResolver]\r\nNote: duplicate definition of library class [org.apache.http.conn.scheme.SocketFactory]\r\nNote: duplicate definition of library class [org.apache.http.conn.ConnectTimeoutException]\r\nNote: duplicate definition of library class [org.apache.http.params.HttpParams]\r\nNote: there were 7 duplicate class definitions.\r\n(http://proguard.sourceforge.net/manual/troubleshooting.html#duplicateclass)\r\nInitializing...\r\nNote: the configuration refers to the unknown class ''com.google.vending.licensing.ILicensingService''\r\nNote: the configuration refers to the unknown class ''com.android.vending.licensing.ILicensingService''\r\nNote: android.support.v4.app.NotificationCompatJellybean calls ''Field.getType''\r\nNote: com.alibaba.fastjson.JSONObject calls ''Method.getGenericReturnType''\r\nNote: com.alibaba.fastjson.TypeReference calls ''Class.getGenericSuperclass''\r\nNote: com.alibaba.fastjson.parser.ParserConfig calls ''Class.getTypeParameters''\r\nNote: com.alibaba.fastjson.parser.deserializer.ArrayDeserializer calls ''Class.getTypeParameters''\r\nNote: com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer calls ''Class.getTypeParameters''\r\nNote: com.alibaba.fastjson.util.ASMUtils calls ''Method.getGenericReturnType''\r\nNote: com.alibaba.fastjson.util.ASMUtils calls ''Field.getGenericType''\r\nNote: com.alibaba.fastjson.util.DeserializeBeanInfo calls ''Method.getGenericParameterTypes''\r\nNote: com.alibaba.fastjson.util.FieldInfo calls ''Method.getGenericParameterTypes''\r\nNote: com.alibaba.fastjson.util.FieldInfo calls ''Method.getGenericReturnType''\r\nNote: com.alibaba.fastjson.util.FieldInfo calls ''Field.getType''\r\nNote: com.alibaba.fastjson.util.FieldInfo calls ''Field.getGenericType''\r\nNote: com.alibaba.fastjson.util.FieldInfo calls ''Class.getTypeParameters''\r\nNote: com.alibaba.fastjson.util.FieldInfo calls ''Class.getGenericSuperclass''\r\nNote: com.alibaba.fastjson.util.TypeUtils calls ''Method.getGenericParameterTypes''\r\nNote: com.alibaba.fastjson.util.TypeUtils calls ''Class.getGenericSuperclass''\r\nNote: com.google.gson.jpush.a.a.q calls ''Class.getGenericSuperclass''\r\nNote: com.google.gson.jpush.a.a.q calls ''Field.getGenericType''\r\nNote: com.google.gson.jpush.a.a.q calls ''Field.getType''\r\nNote: com.google.gson.jpush.a.b calls ''Class.getGenericInterfaces''\r\nNote: com.google.gson.jpush.a.b calls ''Class.getGenericSuperclass''\r\nNote: com.google.gson.jpush.a.b calls ''Class.getTypeParameters''\r\nNote: com.google.gson.jpush.a.s calls ''Field.getType''\r\nNote: com.google.gson.jpush.b.a calls ''Class.getGenericSuperclass''\r\nNote: com.nineoldandroids.util.ReflectiveProperty calls ''Field.getType''\r\nNote: com.alibaba.fastjson.util.DeserializeBeanInfo calls ''Class.getDeclaringClass''\r\nNote: com.google.gson.jpush.a.d calls ''Class.getEnclosingClass''\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find superclass or interface org.springframework.http.converter.AbstractHttpMessageConverter\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find superclass or interface org.springframework.web.servlet.view.AbstractView\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.LocalDateTime\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.LocalDate\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.LocalTime\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.ZonedDateTime\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.OffsetDateTime\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.OffsetTime\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.ZoneId\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.Period\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.Duration\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.Instant\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.LocalDateTime\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.LocalDate\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.LocalTime\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.ZonedDateTime\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.OffsetDateTime\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.OffsetTime\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.ZoneId\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.Period\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.Duration\r\nWarning:com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec: can''t find referenced class java.time.Instant\r\nWarning:com.alibaba.fastjson.serializer.ColorCodec: can''t find referenced class java.awt.Color\r\nWarning:com.alibaba.fastjson.serializer.FontCodec: can''t find referenced class java.awt.Font\r\nWarning:com.alibaba.fastjson.serializer.PointCodec: can''t find referenced class java.awt.Point\r\nWarning:com.alibaba.fastjson.serializer.RectangleCodec: can''t find referenced class java.awt.Rectangle\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find referenced class org.springframework.http.MediaType\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find referenced class org.springframework.http.converter.AbstractHttpMessageConverter\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find referenced class org.springframework.http.HttpInputMessage\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find referenced class org.springframework.http.HttpOutputMessage\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find referenced class org.springframework.http.converter.AbstractHttpMessageConverter\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find referenced class org.springframework.http.converter.HttpMessageNotReadableException\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find referenced class org.springframework.http.converter.HttpMessageNotWritableException\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find referenced class org.springframework.http.HttpInputMessage\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find referenced class org.springframework.http.HttpOutputMessage\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find referenced class org.springframework.http.HttpInputMessage\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find referenced class org.springframework.http.HttpOutputMessage\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter: can''t find referenced class org.springframework.http.converter.AbstractHttpMessageConverter\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class org.springframework.web.servlet.view.AbstractView\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced method ''void setContentType(java.lang.String)'' in program class com.alibaba.fastjson.support.spring.FastJsonJsonView\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced method ''void setExposePathVariables(boolean)'' in program class com.alibaba.fastjson.support.spring.FastJsonJsonView\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced method ''java.io.ByteArrayOutputStream createTemporaryOutputStream()'' in program class com.alibaba.fastjson.support.spring.FastJsonJsonView\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletResponse\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced method ''void writeToResponse(javax.servlet.http.HttpServletResponse,java.io.ByteArrayOutputStream)'' in program class com.alibaba.fastjson.support.spring.FastJsonJsonView\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced method ''void setResponseContentType(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)'' in program class com.alibaba.fastjson.support.spring.FastJsonJsonView\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletResponse\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class org.springframework.util.CollectionUtils\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class org.springframework.validation.BindingResult\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class org.springframework.web.servlet.view.AbstractView\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletResponse\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class org.springframework.util.CollectionUtils\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletRequest\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletResponse\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletRequest\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletResponse\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletRequest\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletResponse\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletRequest\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletResponse\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletRequest\r\nWarning:com.alibaba.fastjson.support.spring.FastJsonJsonView: can''t find referenced class javax.servlet.http.HttpServletResponse\r\nWarning:com.google.gson.jpush.a.ab: can''t find referenced class com.google.gson.jpush.a.w$com.google.gson.jpush.a.ac\r\nWarning:com.google.gson.jpush.a.w: can''t find referenced class com.google.gson.jpush.a.w$com.google.gson.jpush.a.y\r\nWarning:com.google.gson.jpush.a.w: can''t find referenced class com.google.gson.jpush.a.w$com.google.gson.jpush.a.aa\r\nWarning:com.google.gson.jpush.a.z: can''t find referenced class com.google.gson.jpush.a.w$com.google.gson.jpush.a.ac\r\nWarning:com.squareup.picasso.OkHttpDownloader: can''t find referenced class com.squareup.okhttp.OkHttpClient\r\nWarning:com.squareup.picasso.OkHttpDownloader: can''t find referenced class com.squareup.okhttp.OkUrlFactory\r\nWarning:com.squareup.picasso.OkHttpDownloader: can''t find referenced class com.squareup.okhttp.Cache\r\nWarning:com.squareup.picasso.OkHttpDownloader: can''t find referenced class com.squareup.okhttp.OkHttpClient\r\nWarning:com.squareup.picasso.OkHttpDownloader: can''t find referenced class com.squareup.okhttp.OkUrlFactory\r\nWarning:com.squareup.picasso.OkHttpDownloader: can''t find referenced class com.squareup.okhttp.OkHttpClient\r\nWarning:com.squareup.picasso.OkHttpDownloader: can''t find referenced class com.squareup.okhttp.Cache\r\nWarning:com.squareup.picasso.OkHttpDownloader: can''t find referenced class com.squareup.okhttp.OkUrlFactory\r\nWarning:com.squareup.picasso.OkHttpDownloader: can''t find referenced class com.squareup.okhttp.OkHttpClient\r\nWarning:com.squareup.picasso.OkHttpDownloader: can''t find referenced class com.squareup.okhttp.Cache\r\nNote: android.support.v4.text.ICUCompatApi23: can''t find dynamically referenced class libcore.icu.ICU\r\nNote: android.support.v4.text.ICUCompatIcs: can''t find dynamically referenced class libcore.icu.ICU\r\nNote: android.support.v7.widget.DrawableUtils: can''t find dynamically referenced class android.graphics.Insets\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.awt.Point\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.awt.Font\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.awt.Rectangle\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.awt.Color\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.time.LocalDateTime\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.time.LocalDate\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.time.LocalTime\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.time.ZonedDateTime\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.time.OffsetDateTime\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.time.OffsetTime\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.time.ZoneOffset\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.time.ZoneRegion\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.time.ZoneId\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.time.Period\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.time.Duration\r\nNote: com.alibaba.fastjson.parser.ParserConfig: can''t find dynamically referenced class java.time.Instant\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.awt.Color\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.awt.Font\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.awt.Point\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.awt.Rectangle\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.time.LocalDateTime\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.time.LocalDate\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.time.LocalTime\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.time.ZonedDateTime\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.time.OffsetDateTime\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.time.OffsetTime\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.time.ZoneOffset\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.time.ZoneRegion\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.time.Period\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.time.Duration\r\nNote: com.alibaba.fastjson.serializer.SerializeConfig: can''t find dynamically referenced class java.time.Instant\r\nNote: com.squareup.picasso.Utils: can''t find dynamically referenced class com.squareup.okhttp.OkUrlFactory\r\nNote: com.squareup.picasso.Utils: can''t find dynamically referenced class com.squareup.okhttp.OkHttpClient\r\nNote: android.support.v4.app.NotificationCompatJellybean accesses a declared field ''icon'' dynamically\r\nMaybe this is program field ''android.support.v4.app.NotificationCompat$Action { int icon; }''\r\nMaybe this is program field ''android.support.v7.appcompat.R$attr { int icon; }''\r\nMaybe this is program field ''android.support.v7.appcompat.R$id { int icon; }''\r\nMaybe this is program field ''co.sspp.ship.R$attr { int icon; }''\r\nMaybe this is program field ''co.sspp.ship.R$id { int icon; }''\r\nMaybe this is program field ''com.jude.easyrecyclerview.R$attr { int icon; }''\r\nMaybe this is program field ''com.jude.easyrecyclerview.R$id { int icon; }''\r\nMaybe this is program field ''com.jude.rollviewpager.R$attr { int icon; }''\r\nMaybe this is program field ''com.jude.rollviewpager.R$id { int icon; }''\r\nMaybe this is program field ''me.nereo.multi_image_selector.R$attr { int icon; }''\r\nMaybe this is program field ''me.nereo.multi_image_selector.R$id { int icon; }''\r\nMaybe this is library field ''android.R$attr { int icon; }''\r\nMaybe this is library field ''android.R$id { int icon; }''\r\nMaybe this is library field ''android.app.LauncherActivity$ListItem { android.graphics.drawable.Drawable icon; }''\r\nMaybe this is library field ''android.app.Notification { int icon; }''\r\nMaybe this is library field ''android.app.Notification$Action { int icon; }''\r\nMaybe this is library field ''android.appwidget.AppWidgetProviderInfo { int icon; }''\r\nMaybe this is library field ''android.content.pm.PackageItemInfo { int icon; }''\r\nMaybe this is library field ''android.content.pm.ResolveInfo { int icon; }''\r\nMaybe this is library field ''android.inputmethodservice.Keyboard$Key { android.graphics.drawable.Drawable icon; }''\r\nMaybe this is library field ''android.speech.tts.TextToSpeech$EngineInfo { int icon; }''\r\nNote: android.support.v4.app.NotificationCompatJellybean accesses a declared field ''title'' dynamically\r\nMaybe this is program field ''android.support.v4.app.NotificationCompat$Action { java.lang.CharSequence title; }''\r\nMaybe this is program field ''android.support.v7.appcompat.R$attr { int title; }''\r\nMaybe this is program field ''android.support.v7.appcompat.R$id { int title; }''\r\nMaybe this is program field ''co.sspp.ship.R$attr { int title; }''\r\nMaybe this is program field ''co.sspp.ship.R$id { int title; }''\r\nMaybe this is program field ''com.jude.easyrecyclerview.R$attr { int title; }''\r\nMaybe this is program field ''com.jude.easyrecyclerview.R$id { int title; }''\r\nMaybe this is program field ''com.jude.rollviewpager.R$attr { int title; }''\r\nMaybe this is program field ''com.jude.rollviewpager.R$id { int title; }''\r\nMaybe this is program field ''me.nereo.multi_image_selector.R$attr { int title; }''\r\nMaybe this is program field ''me.nereo.multi_image_selector.R$id { int title; }''\r\nMaybe this is library field ''android.R$attr { int title; }''\r\nMaybe this is library field ''android.R$id { int title; }''\r\nMaybe this is library field ''android.app.Notification$Action { java.lang.CharSequence title; }''\r\nMaybe this is library field ''android.preference.PreferenceActivity$Header { java.lang.CharSequence title; }''\r\nNote: android.support.v4.app.NotificationCompatJellybean accesses a declared field ''actionIntent'' dynamically\r\nMaybe this is program field ''android.support.v4.app.NotificationCompat$Action { android.app.PendingIntent actionIntent; }''\r\nMaybe this is library field ''android.app.Notification$Action { android.app.PendingIntent actionIntent; }''\r\nNote: the configuration keeps the entry point ''android.support.v4.view.ViewPager { void setAdapter(android.support.v4.view.PagerAdapter); }'', but not the descriptor class ''android.support.v4.view.PagerAdapter''\r\nNote: the configuration keeps the entry point ''android.support.v4.view.ViewPager { void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener); }'', but not the descriptor class ''android.support.v4.view.ViewPager$OnAdapterChangeListener''\r\nNote: the configuration keeps the entry point ''android.support.v4.view.ViewPager { void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener); }'', but not the descriptor class ''android.support.v4.view.ViewPager$OnPageChangeListener''\r\nNote: the configuration keeps the entry point ''android.support.v4.widget.DrawerLayout { void setDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener); }'', but not the descriptor class ''android.support.v4.widget.DrawerLayout$DrawerListener''\r\nNote: the configuration keeps the entry point ''android.support.v4.widget.NestedScrollView { void setOnScrollChangeListener(android.support.v4.widget.NestedScrollView$OnScrollChangeListener); }'', but not the descriptor class ''android.support.v4.widget.NestedScrollView$OnScrollChangeListener''\r\nNote: the configuration keeps the entry point ''android.support.v4.widget.SlidingPaneLayout { void setPanelSlideListener(android.support.v4.widget.SlidingPaneLayout$PanelSlideListener); }'', but not the descriptor class ''android.support.v4.widget.SlidingPaneLayout$PanelSlideListener''\r\nNote: the configuration keeps the entry point ''android.support.v4.widget.SwipeRefreshLayout { void setOnRefreshListener(android.support.v4.widget.SwipeRefreshLayout$OnRefreshListener); }'', but not the descriptor class ''android.support.v4.widget.SwipeRefreshLayout$OnRefreshListener''\r\nNote: the configuration keeps the entry point ''android.support.v7.view.menu.ActionMenuItemView { void setItemInvoker(android.support.v7.view.menu.MenuBuilder$ItemInvoker); }'', but not the descriptor class ''android.support.v7.view.menu.MenuBuilder$ItemInvoker''\r\nNote: the configuration keeps the entry point ''android.support.v7.view.menu.ActionMenuItemView { void setPopupCallback(android.support.v7.view.menu.ActionMenuItemView$PopupCallback); }'', but not the descriptor class ''android.support.v7.view.menu.ActionMenuItemView$PopupCallback''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.ActionBarContainer { void setTabContainer(android.support.v7.widget.ScrollingTabContainerView); }'', but not the descriptor class ''android.support.v7.widget.ScrollingTabContainerView''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.ActionBarOverlayLayout { void setActionBarVisibilityCallback(android.support.v7.widget.ActionBarOverlayLayout$ActionBarVisibilityCallback); }'', but not the descriptor class ''android.support.v7.widget.ActionBarOverlayLayout$ActionBarVisibilityCallback''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.ActionMenuView { void setPresenter(android.support.v7.widget.ActionMenuPresenter); }'', but not the descriptor class ''android.support.v7.widget.ActionMenuPresenter''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.ActionMenuView { void setOnMenuItemClickListener(android.support.v7.widget.ActionMenuView$OnMenuItemClickListener); }'', but not the descriptor class ''android.support.v7.widget.ActionMenuView$OnMenuItemClickListener''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.ActivityChooserView { void setActivityChooserModel(android.support.v7.widget.ActivityChooserModel); }'', but not the descriptor class ''android.support.v7.widget.ActivityChooserModel''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.ActivityChooserView { void setProvider(android.support.v4.view.ActionProvider); }'', but not the descriptor class ''android.support.v4.view.ActionProvider''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.ContentFrameLayout { void setAttachListener(android.support.v7.widget.ContentFrameLayout$OnAttachListener); }'', but not the descriptor class ''android.support.v7.widget.ContentFrameLayout$OnAttachListener''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.FitWindowsFrameLayout { void setOnFitSystemWindowsListener(android.support.v7.widget.FitWindowsViewGroup$OnFitSystemWindowsListener); }'', but not the descriptor class ''android.support.v7.widget.FitWindowsViewGroup$OnFitSystemWindowsListener''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.FitWindowsLinearLayout { void setOnFitSystemWindowsListener(android.support.v7.widget.FitWindowsViewGroup$OnFitSystemWindowsListener); }'', but not the descriptor class ''android.support.v7.widget.FitWindowsViewGroup$OnFitSystemWindowsListener''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.RecyclerView { void setAccessibilityDelegateCompat(android.support.v7.widget.RecyclerViewAccessibilityDelegate); }'', but not the descriptor class ''android.support.v7.widget.RecyclerViewAccessibilityDelegate''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.RecyclerView { void setAdapter(android.support.v7.widget.RecyclerView$Adapter); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$Adapter''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.RecyclerView { void setRecyclerListener(android.support.v7.widget.RecyclerView$RecyclerListener); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$RecyclerListener''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.RecyclerView { void setLayoutManager(android.support.v7.widget.RecyclerView$LayoutManager); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$LayoutManager''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.RecyclerView { void setRecycledViewPool(android.support.v7.widget.RecyclerView$RecycledViewPool); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$RecycledViewPool''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.RecyclerView { void setViewCacheExtension(android.support.v7.widget.RecyclerView$ViewCacheExtension); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$ViewCacheExtension''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.RecyclerView { void setChildDrawingOrderCallback(android.support.v7.widget.RecyclerView$ChildDrawingOrderCallback); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$ChildDrawingOrderCallback''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.RecyclerView { void setOnScrollListener(android.support.v7.widget.RecyclerView$OnScrollListener); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$OnScrollListener''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.RecyclerView { void setItemAnimator(android.support.v7.widget.RecyclerView$ItemAnimator); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$ItemAnimator''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.SearchView { void setOnQueryTextListener(android.support.v7.widget.SearchView$OnQueryTextListener); }'', but not the descriptor class ''android.support.v7.widget.SearchView$OnQueryTextListener''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.SearchView { void setOnCloseListener(android.support.v7.widget.SearchView$OnCloseListener); }'', but not the descriptor class ''android.support.v7.widget.SearchView$OnCloseListener''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.SearchView { void setOnSuggestionListener(android.support.v7.widget.SearchView$OnSuggestionListener); }'', but not the descriptor class ''android.support.v7.widget.SearchView$OnSuggestionListener''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.SearchView { void setSuggestionsAdapter(android.support.v4.widget.CursorAdapter); }'', but not the descriptor class ''android.support.v4.widget.CursorAdapter''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.SearchView$SearchAutoComplete { void setSearchView(android.support.v7.widget.SearchView); }'', but not the descriptor class ''android.support.v7.widget.SearchView''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.Toolbar { void setOnMenuItemClickListener(android.support.v7.widget.Toolbar$OnMenuItemClickListener); }'', but not the descriptor class ''android.support.v7.widget.Toolbar$OnMenuItemClickListener''\r\nNote: the configuration keeps the entry point ''android.support.v7.widget.ViewStubCompat { void setOnInflateListener(android.support.v7.widget.ViewStubCompat$OnInflateListener); }'', but not the descriptor class ''android.support.v7.widget.ViewStubCompat$OnInflateListener''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.goodser.widgets.CustomCheckBox.RecyclerViewWithFooter.RecyclerViewWithFooter { void setOnLoadMoreListener(co.sspp.ship.goodser.widgets.CustomCheckBox.RecyclerViewWithFooter.OnLoadMoreListener); }'', but not the descriptor class ''co.sspp.ship.goodser.widgets.CustomCheckBox.RecyclerViewWithFooter.OnLoadMoreListener''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.goodser.widgets.CustomCheckBox.RecyclerViewWithFooter.RecyclerViewWithFooter { void setAdapter(android.support.v7.widget.RecyclerView$Adapter); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$Adapter''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.goodser.widgets.CustomCheckBox.RecyclerViewWithFooter.RecyclerViewWithFooter { void setFootItem(co.sspp.ship.goodser.widgets.CustomCheckBox.RecyclerViewWithFooter.FootItem); }'', but not the descriptor class ''co.sspp.ship.goodser.widgets.CustomCheckBox.RecyclerViewWithFooter.FootItem''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.goodser.widgets.CustomCheckBox.RecyclerViewWithFooter.RecyclerViewWithFooter { void setEmptyItem(co.sspp.ship.goodser.widgets.CustomCheckBox.RecyclerViewWithFooter.EmptyItem); }'', but not the descriptor class ''co.sspp.ship.goodser.widgets.CustomCheckBox.RecyclerViewWithFooter.EmptyItem''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.goodser.widgets.CustomCheckBox.SmoothCheckBox { void setOnCheckedChangeListener(co.sspp.ship.goodser.widgets.CustomCheckBox.SmoothCheckBox$OnCheckedChangeListener); }'', but not the descriptor class ''co.sspp.ship.goodser.widgets.CustomCheckBox.SmoothCheckBox$OnCheckedChangeListener''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.widgets.RatingBarView { void setOnRatingListener(co.sspp.ship.widgets.RatingBarView$OnRatingListener); }'', but not the descriptor class ''co.sspp.ship.widgets.RatingBarView$OnRatingListener''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.widgets.datepicker.views.DatePicker { void setDPDecor(co.sspp.ship.widgets.datepicker.bizs.decors.DPDecor); }'', but not the descriptor class ''co.sspp.ship.widgets.datepicker.bizs.decors.DPDecor''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.widgets.datepicker.views.DatePicker { void setMode(co.sspp.ship.widgets.datepicker.cons.DPMode); }'', but not the descriptor class ''co.sspp.ship.widgets.datepicker.cons.DPMode''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.widgets.datepicker.views.DatePicker { void setOnDatePickedListener(co.sspp.ship.widgets.datepicker.views.DatePicker$OnDatePickedListener); }'', but not the descriptor class ''co.sspp.ship.widgets.datepicker.views.DatePicker$OnDatePickedListener''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.widgets.datepicker.views.DatePicker { void setOnDateSelectedListener(co.sspp.ship.widgets.datepicker.views.DatePicker$OnDateSelectedListener); }'', but not the descriptor class ''co.sspp.ship.widgets.datepicker.views.DatePicker$OnDateSelectedListener''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.widgets.datepicker.views.MonthView { void setOnDateChangeListener(co.sspp.ship.widgets.datepicker.views.MonthView$OnDateChangeListener); }'', but not the descriptor class ''co.sspp.ship.widgets.datepicker.views.MonthView$OnDateChangeListener''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.widgets.datepicker.views.MonthView { void setOnDatePickedListener(co.sspp.ship.widgets.datepicker.views.DatePicker$OnDatePickedListener); }'', but not the descriptor class ''co.sspp.ship.widgets.datepicker.views.DatePicker$OnDatePickedListener''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.widgets.datepicker.views.MonthView { void setDPMode(co.sspp.ship.widgets.datepicker.cons.DPMode); }'', but not the descriptor class ''co.sspp.ship.widgets.datepicker.cons.DPMode''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.widgets.datepicker.views.MonthView { void setDPDecor(co.sspp.ship.widgets.datepicker.bizs.decors.DPDecor); }'', but not the descriptor class ''co.sspp.ship.widgets.datepicker.bizs.decors.DPDecor''\r\nNote: the configuration keeps the entry point ''co.sspp.ship.widgets.sortlistview.SideBar { void setOnTouchingLetterChangedListener(co.sspp.ship.widgets.sortlistview.SideBar$OnTouchingLetterChangedListener); }'', but not the descriptor class ''co.sspp.ship.widgets.sortlistview.SideBar$OnTouchingLetterChangedListener''\r\nNote: the configuration keeps the entry point ''com.github.clans.fab.FloatingActionMenu { void setLabelEllipsize(com.github.clans.fab.Label); }'', but not the descriptor class ''com.github.clans.fab.Label''\r\nNote: the configuration keeps the entry point ''com.github.clans.fab.FloatingActionMenu { void setOnMenuToggleListener(com.github.clans.fab.FloatingActionMenu$OnMenuToggleListener); }'', but not the descriptor class ''com.github.clans.fab.FloatingActionMenu$OnMenuToggleListener''\r\nNote: the configuration keeps the entry point ''com.github.premnirmal.textcounter.CounterView { void setCounterType(com.github.premnirmal.textcounter.CounterType); }'', but not the descriptor class ''com.github.premnirmal.textcounter.CounterType''\r\nNote: the configuration keeps the entry point ''com.github.premnirmal.textcounter.CounterView { void setFormatter(com.github.premnirmal.textcounter.Formatter); }'', but not the descriptor class ''com.github.premnirmal.textcounter.Formatter''\r\nNote: the configuration keeps the entry point ''com.jude.easyrecyclerview.EasyRecyclerView { void setLayoutManager(android.support.v7.widget.RecyclerView$LayoutManager); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$LayoutManager''\r\nNote: the configuration keeps the entry point ''com.jude.easyrecyclerview.EasyRecyclerView { void setAdapter(android.support.v7.widget.RecyclerView$Adapter); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$Adapter''\r\nNote: the configuration keeps the entry point ''com.jude.easyrecyclerview.EasyRecyclerView { void setAdapterWithProgress(android.support.v7.widget.RecyclerView$Adapter); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$Adapter''\r\nNote: the configuration keeps the entry point ''com.jude.easyrecyclerview.EasyRecyclerView { void setRefreshListener(android.support.v4.widget.SwipeRefreshLayout$OnRefreshListener); }'', but not the descriptor class ''android.support.v4.widget.SwipeRefreshLayout$OnRefreshListener''\r\nNote: the configuration keeps the entry point ''com.jude.easyrecyclerview.EasyRecyclerView { void setOnScrollListener(android.support.v7.widget.RecyclerView$OnScrollListener); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$OnScrollListener''\r\nNote: the configuration keeps the entry point ''com.jude.easyrecyclerview.EasyRecyclerView { void setItemAnimator(android.support.v7.widget.RecyclerView$ItemAnimator); }'', but not the descriptor class ''android.support.v7.widget.RecyclerView$ItemAnimator''\r\nNote: the configuration keeps the entry point ''com.jude.easyrecyclerview.swipe.SwipeRefreshLayout { void setOnRefreshListener(android.support.v4.widget.SwipeRefreshLayout$OnRefreshListener); }'', but not the descriptor class ''android.support.v4.widget.SwipeRefreshLayout$OnRefreshListener''\r\nNote: the configuration keeps the entry point ''com.jude.rollviewpager.RollPagerView { void setHintViewDelegate(com.jude.rollviewpager.RollPagerView$HintViewDelegate); }'', but not the descriptor class ''com.jude.rollviewpager.RollPagerView$HintViewDelegate''\r\nNote: the configuration keeps the entry point ''com.jude.rollviewpager.RollPagerView { void setHintView(com.jude.rollviewpager.HintView); }'', but not the descriptor class ''com.jude.rollviewpager.HintView''\r\nNote: the configuration keeps the entry point ''com.jude.rollviewpager.RollPagerView { void setAdapter(android.support.v4.view.PagerAdapter); }'', but not the descriptor class ''android.support.v4.view.PagerAdapter''\r\nNote: the configuration keeps the entry point ''com.melnykov.fab.ObservableScrollView { void setOnScrollChangedListener(com.melnykov.fab.ObservableScrollView$OnScrollChangedListener); }'', but not the descriptor class ''com.melnykov.fab.ObservableScrollView$OnScrollChangedListener''\r\nNote: there were 2 references to unknown classes.\r\nYou should check your configuration for typos.\r\n(http://proguard.sourceforge.net/manual/troubleshooting.html#unknownclass)\r\nNote: there were 26 classes trying to access generic signatures using reflection.\r\nYou should consider keeping the signature attributes\r\n(using ''-keepattributes Signature'').\r\n(http://proguard.sourceforge.net/manual/troubleshooting.html#attributes)\r\nNote: there were 2 classes trying to access enclosing classes using reflection.\r\nYou should consider keeping the inner classes attributes\r\n(using ''-keepattributes InnerClasses'').\r\n(http://proguard.sourceforge.net/manual/troubleshooting.html#attributes)\r\nNote: there were 64 unkept descriptor classes in kept class members.\r\nYou should consider explicitly keeping the mentioned classes\r\n(using ''-keep'').\r\n(http://proguard.sourceforge.net/manual/troubleshooting.html#descriptorclass)\r\nNote: there were 36 unresolved dynamic references to classes or interfaces.\r\nYou should check if you need to specify additional program jars.\r\n(http://proguard.sourceforge.net/manual/troubleshooting.html#dynamicalclass)\r\nNote: there were 3 accesses to class members by means of introspection.\r\nYou should consider explicitly keeping the mentioned class members\r\n(using ''-keep'' or ''-keepclassmembers'').\r\n(http://proguard.sourceforge.net/manual/troubleshooting.html#dynamicalclassmember)\r\nWarning:there were 114 unresolved references to classes or interfaces.\r\nYou may need to add missing library jars or update their versions.\r\nIf your code works fine without the missing classes, you can suppress\r\nthe warnings with ''-dontwarn'' options.\r\n(http://proguard.sourceforge.net/manual/troubleshooting.html#unresolvedclass)\r\nWarning:there were 5 unresolved references to program class members.\r\nYour input classes appear to be inconsistent.\r\nYou may need to recompile the code.\r\n(http://proguard.sourceforge.net/manual/troubleshooting.html#unresolvedprogramclassmember)\r\nWarning:Exception while processing task java.io.IOException: Please correct the above warnings first.\r\n:app:transformClassesAndResourcesWithProguardForRelease FAILED\r\nError:Execution failed for task '':app:transformClassesAndResourcesWithProguardForRelease''.\r\n&gt; java.io.IOException: Please correct the above warnings first.</blockquote>\r\n&nbsp;\r\n\r\n其实上面的信息都可以不看，无非是一大堆报错信息。上网百度了下，首先要将引用的第三方类库全部过滤掉，代码如下：\r\n\r\n&nbsp;\r\n<pre>-libraryjars ../multi-image-selector\r\n#上面是导入的model。同样的其他的也是如此\r\n-keep class com.github.** { *; }\r\n#上面这个是避免混淆你导入的maven类库之类的\r\n-<em>dontwarn</em>//不用输出警告\r\n-ignorewarning-dump class_files.txt\r\n-printseeds seeds.txt\r\n-printusage unused.txt\r\n-printmapping mapping.txt\r\n#生成对应的混淆信息\r\n#注意的是fastJson要特殊对待</pre>\r\n当你混淆完成后，你发现一个很神奇的事情，这东西就是你的APP前面测试的时候，你保证了百分百不出错，但是你混淆后可能会出错，这时候你要检查网络请求。混淆过后的空指针错误可能多一点，这个时候兄弟莫慌，先检查网络请求，确定你的网络请求正确后，你需要查看你的数据转换，一般问题多一点就出在json数据转换这里。\r\n\r\n&nbsp;', 'Android代码混淆打包踩过的坑', '', 'inherit', 'closed', 'closed', '', '187-revision-v1', '', '', '2016-03-30 23:53:18', '2016-03-30 15:53:18', '', 187, 'http://acheng1314.cn/?p=189', 0, 'revision', '', 0),
(191, 1, '2016-05-19 22:08:35', '2016-05-19 14:08:35', '前阶段项目很忙，因为项目经理的执行方案有问题，所以砍掉重做，一个月的项目两周做完，够呛。\r\n\r\n在此给各位项目经理或者即将成为项目经理的人提一个小小的建议，在做出执行方案之前一定一定一定要咨询各开发部门以及测试部门等人员的意见。\r\n\r\n1.startActivityForResult在一定情况下(当你需要做数据回传的页面的lanchmode为singleTask)会失败，这个时候可以考虑广播的方式实现界面数据回调。\r\n\r\n2.移动端和服务器端数据交互，一般是才用UUID和sessionID等字段来确定APP的请求正确，一般UUID是根据一些APP的基础信息设定跟时间做关联发生改变，sessionID一般是APP打开的时候访问服务器拿到的并且在本地做一次效验通过则OK   通不过则不允许和服务器做交互。\r\n\r\n3.当你的做的项目为特殊设备的时候，首先要读懂demo或者API文档，很多硬件调用的东西是需要多线程或者是新线程支持的。\r\n\r\n4.项目重构很重要，但是前期开发一定要注意好注释和基础架构。关于基础架构，我再提一下，一般是有个BaseActivity和BaseFragment，但是他们不一定适用于所有的业务场景，所以这个时候你需要根据你的业务需求来，再抽取共性，针对某些模块做他们的基础架构。\r\n\r\n5.业务需求是个不断变化的过程，你只有让你的项目的扩展性够强才能更少量的干活。\r\n\r\n6.项目中有的时候，会存在资源找不到的情况，也会报错，这时候你需要clean你的项目，并将它rebuild。\r\n\r\n7.项目上线之前最好对项目进行回归测试和基础功能检测，给用户提供良好的体验的前提是基础功能正常，这点事可能会导致你的项目粗大问题，当然SVN日志说明很重要，减少不必要的背黑锅。\r\n\r\n8.在布局中写好的backGround可能会在代码中出现错误提示，说需要上下文，这种错误我们可以选择性的忽略。\r\n\r\n9.项目如果需要极致体验的话，我们需要优化内存使用，比如说状态选择器，我们完全可以根据我们的需要手动选择图片，具体原因就是状态选择器是所有的控件的不同状态都存在内存中，而我们每次切换后都只需要一个，so我们可以根据按钮的状态进行手动切换。比如说输入框的边框我们的美工完全可以出图给我们，我们自己手动绘制边框一般来说都是要开销很多内存的，所以我们可以考虑用.9图来完成我们的项目需求。\r\n\r\n10.业务需求如果经常变更，简单的来说，我们请求服务器的数据最好做成json，这样我们每次可以直接修改bean和输入的值，而不需要每次都找到使用而地方再进行拼接。\r\n\r\n11.其实我们常用的http请求我们很多时候都没仔细深究内部构造，这一点我们需要注意下，可能在某些时候，我们需要追本溯源明白我们传输的到底是什么数据。\r\n\r\n12.很多时候窗体泄露也会导致空指针，这个时候我们需要保证我们需要操作的控件在context结束之前关闭。\r\n\r\n13.很多时候我们需要的是不断总结而不是持续高速的编码，我们可以将我们常用的东西总结起来，做成自己的工具类，很多事情可以依靠这些工具类给你提高开发效率和降低出错率。', '项目阶段性总结20160519', '', 'publish', 'open', 'open', '', '%e9%a1%b9%e7%9b%ae%e9%98%b6%e6%ae%b5%e6%80%a7%e6%80%bb%e7%bb%9320160519', '', '', '2016-05-19 22:31:53', '2016-05-19 14:31:53', '', 0, 'http://acheng1314.cn/?p=191', 0, 'post', '', 0),
(192, 1, '2016-05-19 22:14:14', '2016-05-19 14:14:14', '写这篇博客的时候，真如博客标题，雨下。\r\n\r\n说实话，我是不太爱在互联网上谈论自己的事情的，但是现实总是有很多无奈。\r\n\r\n1.涉及到个人利益的事情，一定要预先谈妥，在公司中是没有人主动给与你足够的利益，除非你能创造他给你的利益的几何级的利益。\r\n\r\n2.不要因为个人感情而把利益看的太浅，正如上文所说，人潮人海皆为利来，现实世界也是无利不起早的，除非你是在创业。\r\n\r\n3.不要把个人的东西和集体的搅和在一起，否则在某些情况下你会很被动。\r\n\r\n4.在团队开发中很多时候你需要多次解析，并且试验，你在提出技术方案的时候，你需要检测你的方案是否合理，当然可以的情况下你需要把你的项目的东西给别人阐述清楚。\r\n\r\n5.不要轻易相信别人给你许下的承诺，如果没有对应的保障，一切都是屁话。', '正如雨下', '', 'publish', 'open', 'open', '', '%e6%ad%a3%e5%a6%82%e9%9b%a8%e4%b8%8b', '', '', '2016-05-19 22:14:14', '2016-05-19 14:14:14', '', 0, 'http://acheng1314.cn/?p=192', 0, 'post', '', 14),
(193, 1, '2016-05-10 17:25:25', '2016-05-10 09:25:25', '写这篇博客的时候，真如博客标题，雨下。\r\n\r\n说实话，我是不太爱在互联网上谈论自己的事情的，', '正如雨下', '', 'inherit', 'closed', 'closed', '', '192-revision-v1', '', '', '2016-05-10 17:25:25', '2016-05-10 09:25:25', '', 192, 'http://acheng1314.cn/?p=193', 0, 'revision', '', 0),
(196, 1, '2016-05-19 21:53:46', '2016-05-19 13:53:46', '前阶段项目很忙，因为项目经理的执行方案有问题，所以砍掉重做，一个月的项目两周做完，够呛。\r\n\r\n在此给各位项目经理或者即将成为项目经理的人提一个小小的建议，在做出执行方案之前一定一定一定要咨询各开发部门以及测试部门等人员的意见。\r\n\r\n1.startActivityForResult在一定情况下(当你需要做数据回传的页面的lanchmode为singleTask)会失败，这个时候可以考虑广播的方式实现界面数据回调。\r\n\r\n2.移动端和服务器端数据交互，一般是才用UUID和sessionID等字段来确定APP的请求正确，一般UUID是根据一些APP的基础信息设定跟时间做关联发生改变，sessionID一般是APP打开的时候访问服务器拿到的并且在本地做一次效验通过则OK   通不过则不允许和服务器做交互。\r\n\r\n3.当你的做的项目为特殊设备的时候，首先要读懂demo或者API文档，很多硬件调用的东西是需要多线程或者是新线程支持的。\r\n\r\n4.项目重构很重要，但是前期开发一定要注意好注释和基础架构。关于基础架构，我再提一下，一般是有个BaseActivity和BaseFragment，但是他们不一定适用于所有的业务场景，所以这个时候你需要根据你的业务需求来，再抽取共性，针对某些模块做他们的基础架构。\r\n\r\n5.', '项目阶段性总结20160403', '', 'inherit', 'closed', 'closed', '', '191-revision-v1', '', '', '2016-05-19 21:53:46', '2016-05-19 13:53:46', '', 191, 'http://acheng1314.cn/?p=196', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(197, 1, '2016-05-19 22:08:35', '2016-05-19 14:08:35', '前阶段项目很忙，因为项目经理的执行方案有问题，所以砍掉重做，一个月的项目两周做完，够呛。\r\n\r\n在此给各位项目经理或者即将成为项目经理的人提一个小小的建议，在做出执行方案之前一定一定一定要咨询各开发部门以及测试部门等人员的意见。\r\n\r\n1.startActivityForResult在一定情况下(当你需要做数据回传的页面的lanchmode为singleTask)会失败，这个时候可以考虑广播的方式实现界面数据回调。\r\n\r\n2.移动端和服务器端数据交互，一般是才用UUID和sessionID等字段来确定APP的请求正确，一般UUID是根据一些APP的基础信息设定跟时间做关联发生改变，sessionID一般是APP打开的时候访问服务器拿到的并且在本地做一次效验通过则OK   通不过则不允许和服务器做交互。\r\n\r\n3.当你的做的项目为特殊设备的时候，首先要读懂demo或者API文档，很多硬件调用的东西是需要多线程或者是新线程支持的。\r\n\r\n4.项目重构很重要，但是前期开发一定要注意好注释和基础架构。关于基础架构，我再提一下，一般是有个BaseActivity和BaseFragment，但是他们不一定适用于所有的业务场景，所以这个时候你需要根据你的业务需求来，再抽取共性，针对某些模块做他们的基础架构。\r\n\r\n5.业务需求是个不断变化的过程，你只有让你的项目的扩展性够强才能更少量的干活。\r\n\r\n6.项目中有的时候，会存在资源找不到的情况，也会报错，这时候你需要clean你的项目，并将它rebuild。\r\n\r\n7.项目上线之前最好对项目进行回归测试和基础功能检测，给用户提供良好的体验的前提是基础功能正常，这点事可能会导致你的项目粗大问题，当然SVN日志说明很重要，减少不必要的背黑锅。\r\n\r\n8.在布局中写好的backGround可能会在代码中出现错误提示，说需要上下文，这种错误我们可以选择性的忽略。\r\n\r\n9.项目如果需要极致体验的话，我们需要优化内存使用，比如说状态选择器，我们完全可以根据我们的需要手动选择图片，具体原因就是状态选择器是所有的控件的不同状态都存在内存中，而我们每次切换后都只需要一个，so我们可以根据按钮的状态进行手动切换。比如说输入框的边框我们的美工完全可以出图给我们，我们自己手动绘制边框一般来说都是要开销很多内存的，所以我们可以考虑用.9图来完成我们的项目需求。\r\n\r\n10.业务需求如果经常变更，简单的来说，我们请求服务器的数据最好做成json，这样我们每次可以直接修改bean和输入的值，而不需要每次都找到使用而地方再进行拼接。\r\n\r\n11.其实我们常用的http请求我们很多时候都没仔细深究内部构造，这一点我们需要注意下，可能在某些时候，我们需要追本溯源明白我们传输的到底是什么数据。', '项目阶段性总结20160519', '', 'inherit', 'closed', 'closed', '', '191-revision-v1', '', '', '2016-05-19 22:08:35', '2016-05-19 14:08:35', '', 191, 'http://acheng1314.cn/?p=197', 0, 'revision', '', 0),
(198, 1, '2016-05-19 22:14:14', '2016-05-19 14:14:14', '写这篇博客的时候，真如博客标题，雨下。\r\n\r\n说实话，我是不太爱在互联网上谈论自己的事情的，但是现实总是有很多无奈。\r\n\r\n1.涉及到个人利益的事情，一定要预先谈妥，在公司中是没有人主动给与你足够的利益，除非你能创造他给你的利益的几何级的利益。\r\n\r\n2.不要因为个人感情而把利益看的太浅，正如上文所说，人潮人海皆为利来，现实世界也是无利不起早的，除非你是在创业。\r\n\r\n3.不要把个人的东西和集体的搅和在一起，否则在某些情况下你会很被动。\r\n\r\n4.在团队开发中很多时候你需要多次解析，并且试验，你在提出技术方案的时候，你需要检测你的方案是否合理，当然可以的情况下你需要把你的项目的东西给别人阐述清楚。\r\n\r\n5.不要轻易相信别人给你许下的承诺，如果没有对应的保障，一切都是屁话。', '正如雨下', '', 'inherit', 'closed', 'closed', '', '192-revision-v1', '', '', '2016-05-19 22:14:14', '2016-05-19 14:14:14', '', 192, 'http://acheng1314.cn/?p=198', 0, 'revision', '', 0),
(199, 1, '2016-05-19 22:31:44', '2016-05-19 14:31:44', '前阶段项目很忙，因为项目经理的执行方案有问题，所以砍掉重做，一个月的项目两周做完，够呛。\n\n在此给各位项目经理或者即将成为项目经理的人提一个小小的建议，在做出执行方案之前一定一定一定要咨询各开发部门以及测试部门等人员的意见。\n\n1.startActivityForResult在一定情况下(当你需要做数据回传的页面的lanchmode为singleTask)会失败，这个时候可以考虑广播的方式实现界面数据回调。\n\n2.移动端和服务器端数据交互，一般是才用UUID和sessionID等字段来确定APP的请求正确，一般UUID是根据一些APP的基础信息设定跟时间做关联发生改变，sessionID一般是APP打开的时候访问服务器拿到的并且在本地做一次效验通过则OK   通不过则不允许和服务器做交互。\n\n3.当你的做的项目为特殊设备的时候，首先要读懂demo或者API文档，很多硬件调用的东西是需要多线程或者是新线程支持的。\n\n4.项目重构很重要，但是前期开发一定要注意好注释和基础架构。关于基础架构，我再提一下，一般是有个BaseActivity和BaseFragment，但是他们不一定适用于所有的业务场景，所以这个时候你需要根据你的业务需求来，再抽取共性，针对某些模块做他们的基础架构。\n\n5.业务需求是个不断变化的过程，你只有让你的项目的扩展性够强才能更少量的干活。\n\n6.项目中有的时候，会存在资源找不到的情况，也会报错，这时候你需要clean你的项目，并将它rebuild。\n\n7.项目上线之前最好对项目进行回归测试和基础功能检测，给用户提供良好的体验的前提是基础功能正常，这点事可能会导致你的项目粗大问题，当然SVN日志说明很重要，减少不必要的背黑锅。\n\n8.在布局中写好的backGround可能会在代码中出现错误提示，说需要上下文，这种错误我们可以选择性的忽略。\n\n9.项目如果需要极致体验的话，我们需要优化内存使用，比如说状态选择器，我们完全可以根据我们的需要手动选择图片，具体原因就是状态选择器是所有的控件的不同状态都存在内存中，而我们每次切换后都只需要一个，so我们可以根据按钮的状态进行手动切换。比如说输入框的边框我们的美工完全可以出图给我们，我们自己手动绘制边框一般来说都是要开销很多内存的，所以我们可以考虑用.9图来完成我们的项目需求。\n\n10.业务需求如果经常变更，简单的来说，我们请求服务器的数据最好做成json，这样我们每次可以直接修改bean和输入的值，而不需要每次都找到使用而地方再进行拼接。\n\n11.其实我们常用的http请求我们很多时候都没仔细深究内部构造，这一点我们需要注意下，可能在某些时候，我们需要追本溯源明白我们传输的到底是什么数据。\n\n12.很多时候窗体泄露也会导致空指针，这个时候我们需要保证我们需要操作的控件在context结束之前关闭。\n\n13.很多时候我们需要的是不断总结而不是持续高速的编码，我们可以将我们常用的东西总结起来，做成自己的工具类，很多事情可以依靠这些工具类给你提高开发效率和降低出错率', '项目阶段性总结20160519', '', 'inherit', 'closed', 'closed', '', '191-autosave-v1', '', '', '2016-05-19 22:31:44', '2016-05-19 14:31:44', '', 191, 'http://acheng1314.cn/?p=199', 0, 'revision', '', 0),
(200, 1, '2016-05-19 22:16:42', '2016-05-19 14:16:42', '前阶段项目很忙，因为项目经理的执行方案有问题，所以砍掉重做，一个月的项目两周做完，够呛。\r\n\r\n在此给各位项目经理或者即将成为项目经理的人提一个小小的建议，在做出执行方案之前一定一定一定要咨询各开发部门以及测试部门等人员的意见。\r\n\r\n1.startActivityForResult在一定情况下(当你需要做数据回传的页面的lanchmode为singleTask)会失败，这个时候可以考虑广播的方式实现界面数据回调。\r\n\r\n2.移动端和服务器端数据交互，一般是才用UUID和sessionID等字段来确定APP的请求正确，一般UUID是根据一些APP的基础信息设定跟时间做关联发生改变，sessionID一般是APP打开的时候访问服务器拿到的并且在本地做一次效验通过则OK   通不过则不允许和服务器做交互。\r\n\r\n3.当你的做的项目为特殊设备的时候，首先要读懂demo或者API文档，很多硬件调用的东西是需要多线程或者是新线程支持的。\r\n\r\n4.项目重构很重要，但是前期开发一定要注意好注释和基础架构。关于基础架构，我再提一下，一般是有个BaseActivity和BaseFragment，但是他们不一定适用于所有的业务场景，所以这个时候你需要根据你的业务需求来，再抽取共性，针对某些模块做他们的基础架构。\r\n\r\n5.业务需求是个不断变化的过程，你只有让你的项目的扩展性够强才能更少量的干活。\r\n\r\n6.项目中有的时候，会存在资源找不到的情况，也会报错，这时候你需要clean你的项目，并将它rebuild。\r\n\r\n7.项目上线之前最好对项目进行回归测试和基础功能检测，给用户提供良好的体验的前提是基础功能正常，这点事可能会导致你的项目粗大问题，当然SVN日志说明很重要，减少不必要的背黑锅。\r\n\r\n8.在布局中写好的backGround可能会在代码中出现错误提示，说需要上下文，这种错误我们可以选择性的忽略。\r\n\r\n9.项目如果需要极致体验的话，我们需要优化内存使用，比如说状态选择器，我们完全可以根据我们的需要手动选择图片，具体原因就是状态选择器是所有的控件的不同状态都存在内存中，而我们每次切换后都只需要一个，so我们可以根据按钮的状态进行手动切换。比如说输入框的边框我们的美工完全可以出图给我们，我们自己手动绘制边框一般来说都是要开销很多内存的，所以我们可以考虑用.9图来完成我们的项目需求。\r\n\r\n10.业务需求如果经常变更，简单的来说，我们请求服务器的数据最好做成json，这样我们每次可以直接修改bean和输入的值，而不需要每次都找到使用而地方再进行拼接。\r\n\r\n11.其实我们常用的http请求我们很多时候都没仔细深究内部构造，这一点我们需要注意下，可能在某些时候，我们需要追本溯源明白我们传输的到底是什么数据。\r\n\r\n10.很多时候窗体泄露也会导致空指针，这个时候我们需要保证我们需要操作的控件在context结束之前关闭。', '项目阶段性总结20160519', '', 'inherit', 'closed', 'closed', '', '191-revision-v1', '', '', '2016-05-19 22:16:42', '2016-05-19 14:16:42', '', 191, 'http://acheng1314.cn/?p=200', 0, 'revision', '', 0),
(201, 1, '2016-05-19 22:17:05', '2016-05-19 14:17:05', '前阶段项目很忙，因为项目经理的执行方案有问题，所以砍掉重做，一个月的项目两周做完，够呛。\r\n\r\n在此给各位项目经理或者即将成为项目经理的人提一个小小的建议，在做出执行方案之前一定一定一定要咨询各开发部门以及测试部门等人员的意见。\r\n\r\n1.startActivityForResult在一定情况下(当你需要做数据回传的页面的lanchmode为singleTask)会失败，这个时候可以考虑广播的方式实现界面数据回调。\r\n\r\n2.移动端和服务器端数据交互，一般是才用UUID和sessionID等字段来确定APP的请求正确，一般UUID是根据一些APP的基础信息设定跟时间做关联发生改变，sessionID一般是APP打开的时候访问服务器拿到的并且在本地做一次效验通过则OK   通不过则不允许和服务器做交互。\r\n\r\n3.当你的做的项目为特殊设备的时候，首先要读懂demo或者API文档，很多硬件调用的东西是需要多线程或者是新线程支持的。\r\n\r\n4.项目重构很重要，但是前期开发一定要注意好注释和基础架构。关于基础架构，我再提一下，一般是有个BaseActivity和BaseFragment，但是他们不一定适用于所有的业务场景，所以这个时候你需要根据你的业务需求来，再抽取共性，针对某些模块做他们的基础架构。\r\n\r\n5.业务需求是个不断变化的过程，你只有让你的项目的扩展性够强才能更少量的干活。\r\n\r\n6.项目中有的时候，会存在资源找不到的情况，也会报错，这时候你需要clean你的项目，并将它rebuild。\r\n\r\n7.项目上线之前最好对项目进行回归测试和基础功能检测，给用户提供良好的体验的前提是基础功能正常，这点事可能会导致你的项目粗大问题，当然SVN日志说明很重要，减少不必要的背黑锅。\r\n\r\n8.在布局中写好的backGround可能会在代码中出现错误提示，说需要上下文，这种错误我们可以选择性的忽略。\r\n\r\n9.项目如果需要极致体验的话，我们需要优化内存使用，比如说状态选择器，我们完全可以根据我们的需要手动选择图片，具体原因就是状态选择器是所有的控件的不同状态都存在内存中，而我们每次切换后都只需要一个，so我们可以根据按钮的状态进行手动切换。比如说输入框的边框我们的美工完全可以出图给我们，我们自己手动绘制边框一般来说都是要开销很多内存的，所以我们可以考虑用.9图来完成我们的项目需求。\r\n\r\n10.业务需求如果经常变更，简单的来说，我们请求服务器的数据最好做成json，这样我们每次可以直接修改bean和输入的值，而不需要每次都找到使用而地方再进行拼接。\r\n\r\n11.其实我们常用的http请求我们很多时候都没仔细深究内部构造，这一点我们需要注意下，可能在某些时候，我们需要追本溯源明白我们传输的到底是什么数据。\r\n\r\n12.很多时候窗体泄露也会导致空指针，这个时候我们需要保证我们需要操作的控件在context结束之前关闭。', '项目阶段性总结20160519', '', 'inherit', 'closed', 'closed', '', '191-revision-v1', '', '', '2016-05-19 22:17:05', '2016-05-19 14:17:05', '', 191, 'http://acheng1314.cn/?p=201', 0, 'revision', '', 0),
(202, 1, '2016-05-19 22:31:53', '2016-05-19 14:31:53', '前阶段项目很忙，因为项目经理的执行方案有问题，所以砍掉重做，一个月的项目两周做完，够呛。\r\n\r\n在此给各位项目经理或者即将成为项目经理的人提一个小小的建议，在做出执行方案之前一定一定一定要咨询各开发部门以及测试部门等人员的意见。\r\n\r\n1.startActivityForResult在一定情况下(当你需要做数据回传的页面的lanchmode为singleTask)会失败，这个时候可以考虑广播的方式实现界面数据回调。\r\n\r\n2.移动端和服务器端数据交互，一般是才用UUID和sessionID等字段来确定APP的请求正确，一般UUID是根据一些APP的基础信息设定跟时间做关联发生改变，sessionID一般是APP打开的时候访问服务器拿到的并且在本地做一次效验通过则OK   通不过则不允许和服务器做交互。\r\n\r\n3.当你的做的项目为特殊设备的时候，首先要读懂demo或者API文档，很多硬件调用的东西是需要多线程或者是新线程支持的。\r\n\r\n4.项目重构很重要，但是前期开发一定要注意好注释和基础架构。关于基础架构，我再提一下，一般是有个BaseActivity和BaseFragment，但是他们不一定适用于所有的业务场景，所以这个时候你需要根据你的业务需求来，再抽取共性，针对某些模块做他们的基础架构。\r\n\r\n5.业务需求是个不断变化的过程，你只有让你的项目的扩展性够强才能更少量的干活。\r\n\r\n6.项目中有的时候，会存在资源找不到的情况，也会报错，这时候你需要clean你的项目，并将它rebuild。\r\n\r\n7.项目上线之前最好对项目进行回归测试和基础功能检测，给用户提供良好的体验的前提是基础功能正常，这点事可能会导致你的项目粗大问题，当然SVN日志说明很重要，减少不必要的背黑锅。\r\n\r\n8.在布局中写好的backGround可能会在代码中出现错误提示，说需要上下文，这种错误我们可以选择性的忽略。\r\n\r\n9.项目如果需要极致体验的话，我们需要优化内存使用，比如说状态选择器，我们完全可以根据我们的需要手动选择图片，具体原因就是状态选择器是所有的控件的不同状态都存在内存中，而我们每次切换后都只需要一个，so我们可以根据按钮的状态进行手动切换。比如说输入框的边框我们的美工完全可以出图给我们，我们自己手动绘制边框一般来说都是要开销很多内存的，所以我们可以考虑用.9图来完成我们的项目需求。\r\n\r\n10.业务需求如果经常变更，简单的来说，我们请求服务器的数据最好做成json，这样我们每次可以直接修改bean和输入的值，而不需要每次都找到使用而地方再进行拼接。\r\n\r\n11.其实我们常用的http请求我们很多时候都没仔细深究内部构造，这一点我们需要注意下，可能在某些时候，我们需要追本溯源明白我们传输的到底是什么数据。\r\n\r\n12.很多时候窗体泄露也会导致空指针，这个时候我们需要保证我们需要操作的控件在context结束之前关闭。\r\n\r\n13.很多时候我们需要的是不断总结而不是持续高速的编码，我们可以将我们常用的东西总结起来，做成自己的工具类，很多事情可以依靠这些工具类给你提高开发效率和降低出错率。', '项目阶段性总结20160519', '', 'inherit', 'closed', 'closed', '', '191-revision-v1', '', '', '2016-05-19 22:31:53', '2016-05-19 14:31:53', '', 191, 'http://acheng1314.cn/?p=202', 0, 'revision', '', 0),
(208, 1, '2016-07-19 10:27:56', '2016-07-19 02:27:56', '', 'AppShowGif', '', 'inherit', 'open', 'closed', '', 'appshowgif', '', '', '2016-07-19 10:27:56', '2016-07-19 02:27:56', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/07/AppShowGif.gif', 0, 'attachment', 'image/gif', 0),
(209, 1, '2016-07-20 16:23:39', '2016-07-20 08:23:39', '<h2>Google Android Templates</h2>\r\n<h4>缘由：从eclipse时代到“死丢丢”时代，一直存在一个我未曾深入观察过的东西——Google Android Templates。一次偶然我在android studio上面结识了她，遂望一窥究竟。</h4>\r\n<h4>How to Creat？标题栏File→New→Activity→Login Activity，接下来在弹出的对话框中一直点击Next直到点击Filish。当然上面所说的都是在你的model里面完成的。如下图：</h4>\r\n<ul>\r\n 	<li>① <img src="https://github.com/pc859107393/AchengDemos/blob/master/ChooseCreatActivity.png?raw=true" alt="image" /></li>\r\n 	<li>② <img src="https://github.com/pc859107393/AchengDemos/blob/master/CreatActivityOver.png?raw=true" alt="image" /></li>\r\n</ul>\r\n<h4>To observe。拿到源码第一件事我们不是修改，而是先进行观察。我是个喜欢从外到内的人，所以我先run起来。</h4>\r\n<ul>\r\n 	<li>1.<img src="https://github.com/pc859107393/AchengDemos/blob/master/RunningPermissions.png?raw=true" alt="image" /></li>\r\n 	<li>2.<img src="http://acheng1314.cn/wp-content/uploads/2016/07/AppShowGif.gif" alt="image" /></li>\r\n 	<li>现象：\r\n<ul>\r\n 	<li>1.运行时权限申请</li>\r\n 	<li>2.两个<strong>输入框的提示性文字有动画效果（且输入内容后未消失）</strong>。焦点转移后能看到明显的色彩变化。</li>\r\n 	<li>3.点击登录按钮后有针对email地址输入框的错误提示文字。</li>\r\n 	<li>4.键盘下面有个独特的@符号，一般情况下的英文输入法是没有单独放在这么明显地方的@符号。</li>\r\n 	<li>5.符合效验标准后，点击登录按钮会有进度圈旋转。</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<h3>source code</h3>\r\n<ul>\r\n 	<li>activity_login.xml\r\n<ul>\r\n 	<li>\r\n<pre><code>&lt;ProgressBar\r\nandroid:id="@+id/login_progress"\r\nstyle="?android:attr/progressBarStyleLarge"\r\nandroid:layout_width="wrap_content"\r\nandroid:layout_height="wrap_content"\r\nandroid:layout_marginBottom="8dp"\r\nandroid:visibility="gone"/&gt;\r\n\r\n&lt;ScrollView\r\n    android:id="@+id/login_form"\r\n    android:layout_width="match_parent"\r\n    android:layout_height="match_parent"&gt;\r\n\r\n    &lt;LinearLayout\r\n        android:id="@+id/email_login_form"\r\n        android:layout_width="match_parent"\r\n        android:layout_height="wrap_content"\r\n        android:orientation="vertical"&gt;\r\n\r\n        &lt;android.support.design.widget.TextInputLayout\r\n            android:layout_width="match_parent"\r\n            android:layout_height="wrap_content"&gt;\r\n\r\n            &lt;AutoCompleteTextView\r\n                android:id="@+id/email"\r\n                android:layout_width="match_parent"\r\n                android:layout_height="wrap_content"\r\n                android:hint="@string/prompt_email"\r\n                android:inputType="textEmailAddress"\r\n                android:maxLines="1"\r\n                android:singleLine="true"/&gt;\r\n            &lt;!-android:inputType="textEmailAddress" 说明软件盘中会有@符号 --&gt;\r\n        &lt;/android.support.design.widget.TextInputLayout&gt;\r\n\r\n        &lt;android.support.design.widget.TextInputLayout\r\n            android:layout_width="match_parent"\r\n            android:layout_height="wrap_content"&gt;\r\n\r\n            &lt;EditText\r\n                android:id="@+id/password"\r\n                android:layout_width="match_parent"\r\n                android:layout_height="wrap_content"\r\n                android:hint="@string/prompt_password"\r\n                android:imeActionId="@+id/login"\r\n                android:imeActionLabel="@string/action_sign_in_short"\r\n                android:imeOptions="actionUnspecified"\r\n                android:inputType="textPassword"\r\n                android:maxLines="1"\r\n                android:singleLine="true"/&gt;\r\n\r\n        &lt;/android.support.design.widget.TextInputLayout&gt;\r\n\r\n        &lt;Button\r\n            android:id="@+id/email_sign_in_button"\r\n            style="?android:textAppearanceSmall"\r\n            android:layout_width="match_parent"\r\n            android:layout_height="wrap_content"\r\n            android:layout_marginTop="16dp"\r\n            android:text="@string/action_sign_in"\r\n            android:textStyle="bold"/&gt;\r\n\r\n    &lt;/LinearLayout&gt;\r\n&lt;/ScrollView&gt;\r\n</code></pre>\r\n</li>\r\n 	<li>上面代码中包含控件：ProgressBar、ScrollView、LinearLayout、TextInputLayout、EditText、Button。</li>\r\n 	<li>\r\n<h5>分析：</h5>\r\n<ul>\r\n 	<li>ProgressBar是我们登录后出现的进度条。</li>\r\n 	<li>ScrollView可滑动界面，内部只能包含一个控件</li>\r\n 	<li>LinearLayout是ScrollView可滑动界面下面的最上层控件，有且仅有一个</li>\r\n 	<li>TextInputLayout文本输入布局</li>\r\n 	<li>EditText输入框</li>\r\n 	<li>Button按钮，点击后执行登陆操作\r\n<ul>\r\n 	<li>在上面的控件中， 我们不是特别常用的仅仅有TextInputLayout，而且根据界面效果来看，我们大胆猜测TextInputLayout可能产生了EditText的提示文字（hint）发生了变化，故此我们需要<a href="http://www.jcodecraeer.com/a/basictutorial/2015/0821/3338.html"><strong>查看相关资料</strong></a>和<a href="https://developer.android.com/reference/android/support/design/widget/TextInputLayout.html"><strong>官方API文档</strong></a>，根据文章总结，TextInputLayout是一个显示在EditText上方的浮动标签。跟ScrollView一样，<strong>TextInputLayout只接受一个子元素</strong>。子元素需要是<strong>一个EditText元素</strong>。</li>\r\n 	<li>展示效果：一个单一的EditText 在输入文字的时候会隐藏hint，而被包含在TextInputLayout中的EditText则会让hint变成一个在EditText上方的浮动标签。同时还包括一个漂亮的material动画。</li>\r\n 	<li>处理错误：TextInputLayout可以处理错误，我们先检查输入的信息是否正常，如果不符合我们的要求我们可以设置错误XXX.setError();</li>\r\n 	<li>样式：TextInputLayout，所有色彩展示都是在style.xml中设置，具体的请自行搜索。</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n 	<li>\r\n<h2>LoginActivity.java</h2>\r\n/** * A login screen that offers login via email/password. */ public class LoginActivity extends AppCompatActivity implements LoaderCallbacks {\r\n<pre><code>    /**\r\n     * Id to identity READ_CONTACTS permission request.\r\n     */\r\n    private static final int REQUEST_READ_CONTACTS = 0;\r\n\r\n    /**\r\n     * A dummy authentication store containing known user names and passwords.\r\n     * TODO: remove after connecting to a real authentication system.\r\n     */\r\n    private static final String[] DUMMY_CREDENTIALS = new String[]{\r\n            "foo@example.com:hello", "bar@example.com:world"\r\n    };\r\n    /**\r\n     * Keep track of the login task to ensure we can cancel it if requested.\r\n     */\r\n    private UserLoginTask mAuthTask = null;\r\n\r\n    // UI references.\r\n    private AutoCompleteTextView mEmailView;\r\n    private EditText mPasswordView;\r\n    private View mProgressView;\r\n    private View mLoginFormView;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_login);\r\n        // Set up the login form.\r\n        mEmailView = (AutoCompleteTextView) findViewById(R.id.email);\r\n        populateAutoComplete();\r\n\r\n        mPasswordView = (EditText) findViewById(R.id.password);\r\n        mPasswordView.setOnEditorActionListener(new TextView.OnEditorActionListener() {\r\n            @Override\r\n            public boolean onEditorAction(TextView textView, int id, KeyEvent keyEvent) {\r\n                if (id == R.id.login || id == EditorInfo.IME_NULL) {\r\n                    attemptLogin();\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n        Button mEmailSignInButton = (Button) findViewById(R.id.email_sign_in_button);\r\n        mEmailSignInButton.setOnClickListener(new OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                attemptLogin();\r\n            }\r\n        });\r\n\r\n        mLoginFormView = findViewById(R.id.login_form);\r\n        mProgressView = findViewById(R.id.login_progress);\r\n    }\r\n\r\n    private void populateAutoComplete() {\r\n        if (!mayRequestContacts()) {\r\n            return;\r\n        }\r\n\r\n        getLoaderManager().initLoader(0, null, this);\r\n    }\r\n\r\n    private boolean mayRequestContacts() {\r\n        if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.M) {\r\n            return true;\r\n        }\r\n        if (checkSelfPermission(READ_CONTACTS) == PackageManager.PERMISSION_GRANTED) {\r\n            return true;\r\n        }\r\n        if (shouldShowRequestPermissionRationale(READ_CONTACTS)) {\r\n            Snackbar.make(mEmailView, R.string.permission_rationale, Snackbar.LENGTH_INDEFINITE)\r\n                    .setAction(android.R.string.ok, new View.OnClickListener() {\r\n                        @Override\r\n                        @TargetApi(Build.VERSION_CODES.M)\r\n                        public void onClick(View v) {\r\n                            requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);\r\n                        }\r\n                    });\r\n        } else {\r\n            requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Callback received when a permissions request has been completed.\r\n     */\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,\r\n                                           @NonNull int[] grantResults) {\r\n        if (requestCode == REQUEST_READ_CONTACTS) {\r\n            if (grantResults.length == 1 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                populateAutoComplete();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Attempts to sign in or register the account specified by the login form.\r\n     * If there are form errors (invalid email, missing fields, etc.), the\r\n     * errors are presented and no actual login attempt is made.\r\n     */\r\n    private void attemptLogin() {\r\n        if (mAuthTask != null) {\r\n            return;\r\n        }\r\n\r\n        // Reset errors.\r\n        mEmailView.setError(null);\r\n        mPasswordView.setError(null);\r\n\r\n        // Store values at the time of the login attempt.\r\n        String email = mEmailView.getText().toString();\r\n        String password = mPasswordView.getText().toString();\r\n\r\n        boolean cancel = false;\r\n        View focusView = null;\r\n\r\n        // Check for a valid password, if the user entered one.\r\n        if (!TextUtils.isEmpty(password) &amp;&amp; !isPasswordValid(password)) {\r\n            mPasswordView.setError(getString(R.string.error_invalid_password));\r\n            focusView = mPasswordView;\r\n            cancel = true;\r\n        }\r\n\r\n        // Check for a valid email address.\r\n        if (TextUtils.isEmpty(email)) {\r\n            mEmailView.setError(getString(R.string.error_field_required));\r\n            focusView = mEmailView;\r\n            cancel = true;\r\n        } else if (!isEmailValid(email)) {\r\n            mEmailView.setError(getString(R.string.error_invalid_email));\r\n            focusView = mEmailView;\r\n            cancel = true;\r\n        }\r\n\r\n        if (cancel) {\r\n            // There was an error; don''t attempt login and focus the first\r\n            // form field with an error.\r\n            focusView.requestFocus();\r\n        } else {\r\n            // Show a progress spinner, and kick off a background task to\r\n            // perform the user login attempt.\r\n            showProgress(true);\r\n            mAuthTask = new UserLoginTask(email, password);\r\n            mAuthTask.execute((Void) null);\r\n        }\r\n    }\r\n\r\n    private boolean isEmailValid(String email) {\r\n        //TODO: Replace this with your own logic\r\n        return email.contains("@");\r\n    }\r\n\r\n    private boolean isPasswordValid(String password) {\r\n        //TODO: Replace this with your own logic\r\n        return password.length() &gt; 4;\r\n    }\r\n\r\n    /**\r\n     * Shows the progress UI and hides the login form.\r\n     */\r\n    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)\r\n    private void showProgress(final boolean show) {\r\n        // On Honeycomb MR2 we have the ViewPropertyAnimator APIs, which allow\r\n        // for very easy animations. If available, use these APIs to fade-in\r\n        // the progress spinner.\r\n        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB_MR2) {\r\n            int shortAnimTime = getResources().getInteger(android.R.integer.config_shortAnimTime);\r\n\r\n            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);\r\n            mLoginFormView.animate().setDuration(shortAnimTime).alpha(\r\n                    show ? 0 : 1).setListener(new AnimatorListenerAdapter() {\r\n                @Override\r\n                public void onAnimationEnd(Animator animation) {\r\n                    mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);\r\n                }\r\n            });\r\n\r\n            mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);\r\n            mProgressView.animate().setDuration(shortAnimTime).alpha(\r\n                    show ? 1 : 0).setListener(new AnimatorListenerAdapter() {\r\n                @Override\r\n                public void onAnimationEnd(Animator animation) {\r\n                    mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);\r\n                }\r\n            });\r\n        } else {\r\n            // The ViewPropertyAnimator APIs are not available, so simply show\r\n            // and hide the relevant UI components.\r\n            mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);\r\n            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Loader&lt;Cursor&gt; onCreateLoader(int i, Bundle bundle) {\r\n        return new CursorLoader(this,\r\n                // Retrieve data rows for the device user''s ''profile'' contact.\r\n                Uri.withAppendedPath(ContactsContract.Profile.CONTENT_URI,\r\n                        ContactsContract.Contacts.Data.CONTENT_DIRECTORY), ProfileQuery.PROJECTION,\r\n\r\n                // Select only email addresses.\r\n                ContactsContract.Contacts.Data.MIMETYPE +\r\n                        " = ?", new String[]{ContactsContract.CommonDataKinds.Email\r\n                .CONTENT_ITEM_TYPE},\r\n\r\n                // Show primary email addresses first. Note that there won''t be\r\n                // a primary email address if the user hasn''t specified one.\r\n                ContactsContract.Contacts.Data.IS_PRIMARY + " DESC");\r\n    }\r\n\r\n    @Override\r\n    public void onLoadFinished(Loader&lt;Cursor&gt; cursorLoader, Cursor cursor) {\r\n        List&lt;String&gt; emails = new ArrayList&lt;&gt;();\r\n        cursor.moveToFirst();\r\n        while (!cursor.isAfterLast()) {\r\n            emails.add(cursor.getString(ProfileQuery.ADDRESS));\r\n            cursor.moveToNext();\r\n        }\r\n\r\n        addEmailsToAutoComplete(emails);\r\n    }\r\n\r\n    @Override\r\n    public void onLoaderReset(Loader&lt;Cursor&gt; cursorLoader) {\r\n\r\n    }\r\n\r\n    private void addEmailsToAutoComplete(List&lt;String&gt; emailAddressCollection) {\r\n        //Create adapter to tell the AutoCompleteTextView what to show in its dropdown list.\r\n        ArrayAdapter&lt;String&gt; adapter =\r\n                new ArrayAdapter&lt;&gt;(LoginActivity.this,\r\n                        android.R.layout.simple_dropdown_item_1line, emailAddressCollection);\r\n\r\n        mEmailView.setAdapter(adapter);\r\n    }\r\n\r\n\r\n    private interface ProfileQuery {\r\n        String[] PROJECTION = {\r\n                ContactsContract.CommonDataKinds.Email.ADDRESS,\r\n                ContactsContract.CommonDataKinds.Email.IS_PRIMARY,\r\n        };\r\n\r\n        int ADDRESS = 0;\r\n        int IS_PRIMARY = 1;\r\n    }\r\n\r\n    /**\r\n     * Represents an asynchronous login/registration task used to authenticate\r\n     * the user.\r\n     */\r\n    public class UserLoginTask extends AsyncTask&lt;Void, Void, Boolean&gt; {\r\n\r\n        private final String mEmail;\r\n        private final String mPassword;\r\n\r\n        UserLoginTask(String email, String password) {\r\n            mEmail = email;\r\n            mPassword = password;\r\n        }\r\n\r\n        @Override\r\n        protected Boolean doInBackground(Void... params) {\r\n            // TODO: attempt authentication against a network service.\r\n\r\n            try {\r\n                // Simulate network access.\r\n                Thread.sleep(2000);\r\n            } catch (InterruptedException e) {\r\n                return false;\r\n            }\r\n\r\n            for (String credential : DUMMY_CREDENTIALS) {\r\n                String[] pieces = credential.split(":");\r\n                if (pieces[0].equals(mEmail)) {\r\n                    // Account exists, return true if the password matches.\r\n                    return pieces[1].equals(mPassword);\r\n                }\r\n            }\r\n\r\n            // TODO: register the new account here.\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        protected void onPostExecute(final Boolean success) {\r\n            mAuthTask = null;\r\n            showProgress(false);\r\n\r\n            if (success) {\r\n                finish();\r\n            } else {\r\n                mPasswordView.setError(getString(R.string.error_incorrect_password));\r\n                mPasswordView.requestFocus();\r\n            }\r\n        }\r\n\r\n        @Override\r\n        protected void onCancelled() {\r\n            mAuthTask = null;\r\n            showProgress(false);\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<ul>\r\n 	<li>分析：\r\n<ul>\r\n 	<li>方法列表：\r\n<ul>\r\n 	<li>onCreate() ——来自activity，初始化控件，事件绑定。</li>\r\n 	<li>populateAutoComplete() ——调用mayRequestContacts()，成功后调用接口（LoaderCallbacks）下面的方法</li>\r\n 	<li><strong>mayRequestContacts()</strong> ——动态获取PERMISSION_GRANTED(通讯录权限)</li>\r\n 	<li><strong>onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults)</strong> ——顾名思义是返回权限申请的结果</li>\r\n 	<li><strong>attemptLogin()</strong> ——登录事件</li>\r\n 	<li>isEmailValid(String email) ——是否是email地址的标准</li>\r\n 	<li>isPasswordValid(String password) ——是否符合密码标准</li>\r\n 	<li>showProgress(final boolean show) ——加载进度条</li>\r\n 	<li>onCreateLoader(int i, Bundle bundle) ——接口LoaderCallbacks</li>\r\n 	<li>onLoadFinished(Loader cursorLoader, Cursor cursor) ——接口LoaderCallbacks</li>\r\n 	<li>onLoaderReset(Loader cursorLoader) ——接口LoaderCallbacks</li>\r\n 	<li>addEmailsToAutoComplete(List emailAddressCollection) ——</li>\r\n</ul>\r\n</li>\r\n 	<li>内部接口：\r\n<ul>\r\n 	<li>ProfileQuery\r\n<ul>\r\n 	<li>接口内常量 String[] PROJECTION、ADDRESS、IS_PRIMARY</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n 	<li>内部类：\r\n<ul>\r\n 	<li><strong>UserLoginTask extends AsyncTask&lt;Void, Void, Boolean&gt;</strong>\r\n<ul>\r\n 	<li>构造函数：UserLoginTask(String email, String password)</li>\r\n 	<li>方法：\r\n<ul>\r\n 	<li>doInBackground(Void... params)</li>\r\n 	<li>onPostExecute(final Boolean success)</li>\r\n 	<li>onCancelled()</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n 	<li>流程梳理：\r\n<ul>\r\n 	<li>1.加载XML布局→找到mEmailView控件（email输入框）→申请通讯录权限\r\n<ul>\r\n 	<li>申请权限成功→遍历通讯录→获取主要的email→有，加载到界面、无，无操作</li>\r\n 	<li>申请权限失败→无操作</li>\r\n</ul>\r\n</li>\r\n 	<li>2.找到其他控件→事件绑定→等待用户执行操作</li>\r\n 	<li>3.操作界面→执行登录事件</li>\r\n</ul>\r\n</li>\r\n 	<li>上面我们列出了方法列表，并且将我们涉及到主体流程、较新技能等的方法均有加粗标记。</li>\r\n</ul>\r\n</li>\r\n 	<li>解析：</li>\r\n</ul>\r\n<h4>申请权限：</h4>\r\n<pre><code>  private boolean mayRequestContacts() {\r\n    //当系统版本低于android_M时，跳过权限检查\r\n    if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.M) {\r\n            return true;\r\n        }\r\n    //当系统版本大于等于android_M时，执行权限申请代码\r\n    if (checkSelfPermission(READ_CONTACTS) == PackageManager.PERMISSION_GRANTED) {\r\n    //当自身已经被允许的权限中包含了READ_CONTACTS时，返回True\r\n            return true;\r\n        }\r\n    //当自身已经被允许权限中没有READ_CONTACTS时，申请通讯录读取权限READ_CONTACTS\r\n    //shouldShowRequestPermissionRationale ==&gt; 是否需要调用系统的权限申请界面\r\n    if (shouldShowRequestPermissionRationale(READ_CONTACTS)) {\r\n        Snackbar.make(mEmailView, R.string.permission_rationale, Snackbar.LENGTH_INDEFINITE)\r\n                .setAction(android.R.string.ok, new View.OnClickListener() {\r\n                    @Override\r\n                    @TargetApi(Build.VERSION_CODES.M)\r\n                    public void onClick(View v) {\r\n                        //展示请求权限界面，第一个参数是权限数组，第二个是请求码\r\n                        requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);\r\n                    }\r\n                });\r\n        } else {\r\n            requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);\r\n        }\r\n        return false;\r\n    }\r\n</code></pre>\r\n<h4>申请权限返回的响应</h4>\r\n<pre><code>    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n    //请求码 对应上面请求的请求码\r\n    if (requestCode == REQUEST_READ_CONTACTS) {\r\n        if (grantResults.length == 1 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {    //权限申请成功\r\n            populateAutoComplete(); //读取联系人列表内的email\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<h4>登录事件</h4>\r\n<pre><code>private void attemptLogin() {\r\nif (mAuthTask != null) {    //登录信息提交的异步任务已经实例化，则无需进行操作，第一次执行attemptLogin()时，mAuthTask并未初始化\r\n    return;\r\n}\r\n\r\n// Reset errors.重设用户名和密码框的错误提示\r\nmEmailView.setError(null);  //setError方法是TextView下面的方法，主要是提示一个错误信息，内部有系统集成的错误提示图标，原理是在TextView的右边出现一个Drawable\r\nmPasswordView.setError(null);\r\n\r\n// Store values at the time of the login attempt.\r\nString email = mEmailView.getText().toString();\r\nString password = mPasswordView.getText().toString();\r\n\r\nboolean cancel = false; //是否退出执行登陆进程\r\nView focusView = null;  //焦点View，当某个输入框输入信息不符合标准时，不执行登陆进程，并锁定焦点到那个输入控件\r\n\r\n// 当用户名不为空，判断密码是否符合标准\r\nif (!TextUtils.isEmpty(password) &amp;&amp; !isPasswordValid(password)) {\r\n    mPasswordView.setError(getString(R.string.error_invalid_password));\r\n    focusView = mPasswordView;\r\n    cancel = true;\r\n}\r\n\r\n// Check for a valid email address.\r\nif (TextUtils.isEmpty(email)) {\r\n    mEmailView.setError(getString(R.string.error_field_required));\r\n    focusView = mEmailView;\r\n    cancel = true;\r\n} else if (!isEmailValid(email)) {\r\n    mEmailView.setError(getString(R.string.error_invalid_email));\r\n    focusView = mEmailView;\r\n    cancel = true;\r\n}\r\n\r\nif (cancel) {\r\n    //在上面的操作中出现错误了，不执行具体的登录，并且把焦点切换到上面去\r\n    // There was an error; don''t attempt login and focus the first\r\n    // form field with an error.\r\n    focusView.requestFocus();\r\n} else {\r\n    //开启滚动条，执行登录的异步任务\r\n    // Show a progress spinner, and kick off a background task to\r\n    // perform the user login attempt.\r\n    showProgress(true);\r\n    mAuthTask = new UserLoginTask(email, password);\r\n    mAuthTask.execute((Void) null);\r\n}\r\n</code></pre>\r\n}\r\n<h4>登录的异步任务</h4>\r\n<pre><code>public class UserLoginTask extends AsyncTask&lt;Void, Void, Boolean&gt; {\r\n\r\n    private final String mEmail;\r\n    private final String mPassword;\r\n\r\n    UserLoginTask(String email, String password) {\r\n        mEmail = email;\r\n        mPassword = password;\r\n    }\r\n\r\n    @Override\r\n    protected Boolean doInBackground(Void... params) {  //后台任务，耗时操作此处执行，该处代码执行在子线程\r\n        // TODO: attempt authentication against a network service.\r\n\r\n        try {\r\n            // Simulate network access.\r\n            Thread.sleep(2000); //模拟耗时操作\r\n        } catch (InterruptedException e) {\r\n            return false;\r\n        }\r\n\r\n        for (String credential : DUMMY_CREDENTIALS) {\r\n            String[] pieces = credential.split(":");\r\n            if (pieces[0].equals(mEmail)) {\r\n                // Account exists, return true if the password matches.\r\n                return pieces[1].equals(mPassword);\r\n            }\r\n        }\r\n\r\n        // TODO: register the new account here.\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    protected void onPostExecute(final Boolean success) {   //执行完毕耗时操作调用这里\r\n        mAuthTask = null;\r\n        showProgress(false);\r\n\r\n        if (success) {\r\n            finish();\r\n        } else {\r\n            mPasswordView.setError(getString(R.string.error_incorrect_password));\r\n            mPasswordView.requestFocus();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onCancelled() {  //退出异步任务调用这里\r\n        mAuthTask = null;\r\n        showProgress(false);\r\n    }\r\n}\r\n</code></pre>\r\n<ul>\r\n 	<li>关于<a href="http://www.cnblogs.com/devinzhang/archive/2012/02/13/2350070.html">更多AsyncTask资料点击查看</a></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<h3>总结：</h3>\r\n<ul>\r\n 	<li>TextInputLayout，这个控件包含EditText后，会产生提示文字的动画效果，且提示文字不会消失。</li>\r\n 	<li>纵向布局中，为了保证界面能完整展示，最好在外层套上ScrollView。</li>\r\n 	<li>一个简单的登录流程，耗时操作不能在主线程执行，AsyncTask异步任务执行完毕后，会回归主线程。</li>\r\n 	<li>需要数据交互的地方，数据需要做效验。</li>\r\n 	<li>（重点）android6.0以及以后加入了权限申请，我们这里是动态权限申请，也是最容易被用户接受的。</li>\r\n 	<li>整个登陆界面的业务流程。</li>\r\n</ul>', '从登陆模版学习，Google Android Templates（一）', '', 'publish', 'open', 'open', '', '%e4%bb%8e%e7%99%bb%e9%99%86%e6%a8%a1%e7%89%88%e5%ad%a6%e4%b9%a0%ef%bc%8cgoogle-android-templates%ef%bc%88%e4%b8%80%ef%bc%89', '', '', '2016-07-20 16:28:37', '2016-07-20 08:28:37', '', 0, 'http://acheng1314.cn/?p=209', 0, 'post', '', 2);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(210, 1, '2016-07-20 16:23:39', '2016-07-20 08:23:39', '<h2>Google Android Templates</h2>\r\n<h4>缘由：从eclipse时代到“死丢丢”时代，一直存在一个我未曾深入观察过的东西——Google Android Templates。一次偶然我在android studio上面结识了她，遂望一窥究竟。</h4>\r\n<h4>How to Creat？标题栏File→New→Activity→Login Activity，接下来在弹出的对话框中一直点击Next直到点击Filish。当然上面所说的都是在你的model里面完成的。如下图：</h4>\r\n<ul>\r\n 	<li>① <img src="https://github.com/pc859107393/AchengDemos/blob/master/ChooseCreatActivity.png?raw=true" alt="image" /></li>\r\n 	<li>② <img src="https://github.com/pc859107393/AchengDemos/blob/master/CreatActivityOver.png?raw=true" alt="image" /></li>\r\n</ul>\r\n<h4>To observe。拿到源码第一件事我们不是修改，而是先进行观察。我是个喜欢从外到内的人，所以我先run起来。</h4>\r\n<ul>\r\n 	<li>1.<img src="https://github.com/pc859107393/AchengDemos/blob/master/RunningPermissions.png?raw=true" alt="image" /></li>\r\n 	<li>2.<img src="http://acheng1314.cn/wp-content/uploads/2016/07/AppShowGif.gif" alt="image" /></li>\r\n 	<li>现象：\r\n<ul>\r\n 	<li>1.运行时权限申请</li>\r\n 	<li>2.两个<strong>输入框的提示性文字有动画效果（且输入内容后未消失）</strong>。焦点转移后能看到明显的色彩变化。</li>\r\n 	<li>3.点击登录按钮后有针对email地址输入框的错误提示文字。</li>\r\n 	<li>4.键盘下面有个独特的@符号，一般情况下的英文输入法是没有单独放在这么明显地方的@符号。</li>\r\n 	<li>5.符合效验标准后，点击登录按钮会有进度圈旋转。</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<h3>source code</h3>\r\n<ul>\r\n 	<li>activity_login.xml\r\n<ul>\r\n 	<li>\r\n<pre><code>&lt;ProgressBar\r\nandroid:id="@+id/login_progress"\r\nstyle="?android:attr/progressBarStyleLarge"\r\nandroid:layout_width="wrap_content"\r\nandroid:layout_height="wrap_content"\r\nandroid:layout_marginBottom="8dp"\r\nandroid:visibility="gone"/&gt;\r\n\r\n&lt;ScrollView\r\n    android:id="@+id/login_form"\r\n    android:layout_width="match_parent"\r\n    android:layout_height="match_parent"&gt;\r\n\r\n    &lt;LinearLayout\r\n        android:id="@+id/email_login_form"\r\n        android:layout_width="match_parent"\r\n        android:layout_height="wrap_content"\r\n        android:orientation="vertical"&gt;\r\n\r\n        &lt;android.support.design.widget.TextInputLayout\r\n            android:layout_width="match_parent"\r\n            android:layout_height="wrap_content"&gt;\r\n\r\n            &lt;AutoCompleteTextView\r\n                android:id="@+id/email"\r\n                android:layout_width="match_parent"\r\n                android:layout_height="wrap_content"\r\n                android:hint="@string/prompt_email"\r\n                android:inputType="textEmailAddress"\r\n                android:maxLines="1"\r\n                android:singleLine="true"/&gt;\r\n            &lt;!-android:inputType="textEmailAddress" 说明软件盘中会有@符号 --&gt;\r\n        &lt;/android.support.design.widget.TextInputLayout&gt;\r\n\r\n        &lt;android.support.design.widget.TextInputLayout\r\n            android:layout_width="match_parent"\r\n            android:layout_height="wrap_content"&gt;\r\n\r\n            &lt;EditText\r\n                android:id="@+id/password"\r\n                android:layout_width="match_parent"\r\n                android:layout_height="wrap_content"\r\n                android:hint="@string/prompt_password"\r\n                android:imeActionId="@+id/login"\r\n                android:imeActionLabel="@string/action_sign_in_short"\r\n                android:imeOptions="actionUnspecified"\r\n                android:inputType="textPassword"\r\n                android:maxLines="1"\r\n                android:singleLine="true"/&gt;\r\n\r\n        &lt;/android.support.design.widget.TextInputLayout&gt;\r\n\r\n        &lt;Button\r\n            android:id="@+id/email_sign_in_button"\r\n            style="?android:textAppearanceSmall"\r\n            android:layout_width="match_parent"\r\n            android:layout_height="wrap_content"\r\n            android:layout_marginTop="16dp"\r\n            android:text="@string/action_sign_in"\r\n            android:textStyle="bold"/&gt;\r\n\r\n    &lt;/LinearLayout&gt;\r\n&lt;/ScrollView&gt;\r\n</code></pre>\r\n</li>\r\n 	<li>上面代码中包含控件：ProgressBar、ScrollView、LinearLayout、TextInputLayout、EditText、Button。</li>\r\n 	<li>\r\n<h5>分析：</h5>\r\n<ul>\r\n 	<li>ProgressBar是我们登录后出现的进度条。</li>\r\n 	<li>ScrollView可滑动界面，内部只能包含一个控件</li>\r\n 	<li>LinearLayout是ScrollView可滑动界面下面的最上层控件，有且仅有一个</li>\r\n 	<li>TextInputLayout文本输入布局</li>\r\n 	<li>EditText输入框</li>\r\n 	<li>Button按钮，点击后执行登陆操作\r\n<ul>\r\n 	<li>在上面的控件中， 我们不是特别常用的仅仅有TextInputLayout，而且根据界面效果来看，我们大胆猜测TextInputLayout可能产生了EditText的提示文字（hint）发生了变化，故此我们需要<a href="http://www.jcodecraeer.com/a/basictutorial/2015/0821/3338.html"><strong>查看相关资料</strong></a>和<a href="https://developer.android.com/reference/android/support/design/widget/TextInputLayout.html"><strong>官方API文档</strong></a>，根据文章总结，TextInputLayout是一个显示在EditText上方的浮动标签。跟ScrollView一样，<strong>TextInputLayout只接受一个子元素</strong>。子元素需要是<strong>一个EditText元素</strong>。</li>\r\n 	<li>展示效果：一个单一的EditText 在输入文字的时候会隐藏hint，而被包含在TextInputLayout中的EditText则会让hint变成一个在EditText上方的浮动标签。同时还包括一个漂亮的material动画。</li>\r\n 	<li>处理错误：TextInputLayout可以处理错误，我们先检查输入的信息是否正常，如果不符合我们的要求我们可以设置错误XXX.setError();</li>\r\n 	<li>样式：TextInputLayout，所有色彩展示都是在style.xml中设置，具体的请自行搜索。</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n 	<li>\r\n<h2>LoginActivity.java</h2>\r\n/** * A login screen that offers login via email/password. */ public class LoginActivity extends AppCompatActivity implements LoaderCallbacks {\r\n<pre><code>    /**\r\n     * Id to identity READ_CONTACTS permission request.\r\n     */\r\n    private static final int REQUEST_READ_CONTACTS = 0;\r\n\r\n    /**\r\n     * A dummy authentication store containing known user names and passwords.\r\n     * TODO: remove after connecting to a real authentication system.\r\n     */\r\n    private static final String[] DUMMY_CREDENTIALS = new String[]{\r\n            "foo@example.com:hello", "bar@example.com:world"\r\n    };\r\n    /**\r\n     * Keep track of the login task to ensure we can cancel it if requested.\r\n     */\r\n    private UserLoginTask mAuthTask = null;\r\n\r\n    // UI references.\r\n    private AutoCompleteTextView mEmailView;\r\n    private EditText mPasswordView;\r\n    private View mProgressView;\r\n    private View mLoginFormView;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_login);\r\n        // Set up the login form.\r\n        mEmailView = (AutoCompleteTextView) findViewById(R.id.email);\r\n        populateAutoComplete();\r\n\r\n        mPasswordView = (EditText) findViewById(R.id.password);\r\n        mPasswordView.setOnEditorActionListener(new TextView.OnEditorActionListener() {\r\n            @Override\r\n            public boolean onEditorAction(TextView textView, int id, KeyEvent keyEvent) {\r\n                if (id == R.id.login || id == EditorInfo.IME_NULL) {\r\n                    attemptLogin();\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n        Button mEmailSignInButton = (Button) findViewById(R.id.email_sign_in_button);\r\n        mEmailSignInButton.setOnClickListener(new OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                attemptLogin();\r\n            }\r\n        });\r\n\r\n        mLoginFormView = findViewById(R.id.login_form);\r\n        mProgressView = findViewById(R.id.login_progress);\r\n    }\r\n\r\n    private void populateAutoComplete() {\r\n        if (!mayRequestContacts()) {\r\n            return;\r\n        }\r\n\r\n        getLoaderManager().initLoader(0, null, this);\r\n    }\r\n\r\n    private boolean mayRequestContacts() {\r\n        if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.M) {\r\n            return true;\r\n        }\r\n        if (checkSelfPermission(READ_CONTACTS) == PackageManager.PERMISSION_GRANTED) {\r\n            return true;\r\n        }\r\n        if (shouldShowRequestPermissionRationale(READ_CONTACTS)) {\r\n            Snackbar.make(mEmailView, R.string.permission_rationale, Snackbar.LENGTH_INDEFINITE)\r\n                    .setAction(android.R.string.ok, new View.OnClickListener() {\r\n                        @Override\r\n                        @TargetApi(Build.VERSION_CODES.M)\r\n                        public void onClick(View v) {\r\n                            requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);\r\n                        }\r\n                    });\r\n        } else {\r\n            requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Callback received when a permissions request has been completed.\r\n     */\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,\r\n                                           @NonNull int[] grantResults) {\r\n        if (requestCode == REQUEST_READ_CONTACTS) {\r\n            if (grantResults.length == 1 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                populateAutoComplete();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Attempts to sign in or register the account specified by the login form.\r\n     * If there are form errors (invalid email, missing fields, etc.), the\r\n     * errors are presented and no actual login attempt is made.\r\n     */\r\n    private void attemptLogin() {\r\n        if (mAuthTask != null) {\r\n            return;\r\n        }\r\n\r\n        // Reset errors.\r\n        mEmailView.setError(null);\r\n        mPasswordView.setError(null);\r\n\r\n        // Store values at the time of the login attempt.\r\n        String email = mEmailView.getText().toString();\r\n        String password = mPasswordView.getText().toString();\r\n\r\n        boolean cancel = false;\r\n        View focusView = null;\r\n\r\n        // Check for a valid password, if the user entered one.\r\n        if (!TextUtils.isEmpty(password) &amp;&amp; !isPasswordValid(password)) {\r\n            mPasswordView.setError(getString(R.string.error_invalid_password));\r\n            focusView = mPasswordView;\r\n            cancel = true;\r\n        }\r\n\r\n        // Check for a valid email address.\r\n        if (TextUtils.isEmpty(email)) {\r\n            mEmailView.setError(getString(R.string.error_field_required));\r\n            focusView = mEmailView;\r\n            cancel = true;\r\n        } else if (!isEmailValid(email)) {\r\n            mEmailView.setError(getString(R.string.error_invalid_email));\r\n            focusView = mEmailView;\r\n            cancel = true;\r\n        }\r\n\r\n        if (cancel) {\r\n            // There was an error; don''t attempt login and focus the first\r\n            // form field with an error.\r\n            focusView.requestFocus();\r\n        } else {\r\n            // Show a progress spinner, and kick off a background task to\r\n            // perform the user login attempt.\r\n            showProgress(true);\r\n            mAuthTask = new UserLoginTask(email, password);\r\n            mAuthTask.execute((Void) null);\r\n        }\r\n    }\r\n\r\n    private boolean isEmailValid(String email) {\r\n        //TODO: Replace this with your own logic\r\n        return email.contains("@");\r\n    }\r\n\r\n    private boolean isPasswordValid(String password) {\r\n        //TODO: Replace this with your own logic\r\n        return password.length() &gt; 4;\r\n    }\r\n\r\n    /**\r\n     * Shows the progress UI and hides the login form.\r\n     */\r\n    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)\r\n    private void showProgress(final boolean show) {\r\n        // On Honeycomb MR2 we have the ViewPropertyAnimator APIs, which allow\r\n        // for very easy animations. If available, use these APIs to fade-in\r\n        // the progress spinner.\r\n        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB_MR2) {\r\n            int shortAnimTime = getResources().getInteger(android.R.integer.config_shortAnimTime);\r\n\r\n            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);\r\n            mLoginFormView.animate().setDuration(shortAnimTime).alpha(\r\n                    show ? 0 : 1).setListener(new AnimatorListenerAdapter() {\r\n                @Override\r\n                public void onAnimationEnd(Animator animation) {\r\n                    mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);\r\n                }\r\n            });\r\n\r\n            mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);\r\n            mProgressView.animate().setDuration(shortAnimTime).alpha(\r\n                    show ? 1 : 0).setListener(new AnimatorListenerAdapter() {\r\n                @Override\r\n                public void onAnimationEnd(Animator animation) {\r\n                    mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);\r\n                }\r\n            });\r\n        } else {\r\n            // The ViewPropertyAnimator APIs are not available, so simply show\r\n            // and hide the relevant UI components.\r\n            mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);\r\n            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Loader&lt;Cursor&gt; onCreateLoader(int i, Bundle bundle) {\r\n        return new CursorLoader(this,\r\n                // Retrieve data rows for the device user''s ''profile'' contact.\r\n                Uri.withAppendedPath(ContactsContract.Profile.CONTENT_URI,\r\n                        ContactsContract.Contacts.Data.CONTENT_DIRECTORY), ProfileQuery.PROJECTION,\r\n\r\n                // Select only email addresses.\r\n                ContactsContract.Contacts.Data.MIMETYPE +\r\n                        " = ?", new String[]{ContactsContract.CommonDataKinds.Email\r\n                .CONTENT_ITEM_TYPE},\r\n\r\n                // Show primary email addresses first. Note that there won''t be\r\n                // a primary email address if the user hasn''t specified one.\r\n                ContactsContract.Contacts.Data.IS_PRIMARY + " DESC");\r\n    }\r\n\r\n    @Override\r\n    public void onLoadFinished(Loader&lt;Cursor&gt; cursorLoader, Cursor cursor) {\r\n        List&lt;String&gt; emails = new ArrayList&lt;&gt;();\r\n        cursor.moveToFirst();\r\n        while (!cursor.isAfterLast()) {\r\n            emails.add(cursor.getString(ProfileQuery.ADDRESS));\r\n            cursor.moveToNext();\r\n        }\r\n\r\n        addEmailsToAutoComplete(emails);\r\n    }\r\n\r\n    @Override\r\n    public void onLoaderReset(Loader&lt;Cursor&gt; cursorLoader) {\r\n\r\n    }\r\n\r\n    private void addEmailsToAutoComplete(List&lt;String&gt; emailAddressCollection) {\r\n        //Create adapter to tell the AutoCompleteTextView what to show in its dropdown list.\r\n        ArrayAdapter&lt;String&gt; adapter =\r\n                new ArrayAdapter&lt;&gt;(LoginActivity.this,\r\n                        android.R.layout.simple_dropdown_item_1line, emailAddressCollection);\r\n\r\n        mEmailView.setAdapter(adapter);\r\n    }\r\n\r\n\r\n    private interface ProfileQuery {\r\n        String[] PROJECTION = {\r\n                ContactsContract.CommonDataKinds.Email.ADDRESS,\r\n                ContactsContract.CommonDataKinds.Email.IS_PRIMARY,\r\n        };\r\n\r\n        int ADDRESS = 0;\r\n        int IS_PRIMARY = 1;\r\n    }\r\n\r\n    /**\r\n     * Represents an asynchronous login/registration task used to authenticate\r\n     * the user.\r\n     */\r\n    public class UserLoginTask extends AsyncTask&lt;Void, Void, Boolean&gt; {\r\n\r\n        private final String mEmail;\r\n        private final String mPassword;\r\n\r\n        UserLoginTask(String email, String password) {\r\n            mEmail = email;\r\n            mPassword = password;\r\n        }\r\n\r\n        @Override\r\n        protected Boolean doInBackground(Void... params) {\r\n            // TODO: attempt authentication against a network service.\r\n\r\n            try {\r\n                // Simulate network access.\r\n                Thread.sleep(2000);\r\n            } catch (InterruptedException e) {\r\n                return false;\r\n            }\r\n\r\n            for (String credential : DUMMY_CREDENTIALS) {\r\n                String[] pieces = credential.split(":");\r\n                if (pieces[0].equals(mEmail)) {\r\n                    // Account exists, return true if the password matches.\r\n                    return pieces[1].equals(mPassword);\r\n                }\r\n            }\r\n\r\n            // TODO: register the new account here.\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        protected void onPostExecute(final Boolean success) {\r\n            mAuthTask = null;\r\n            showProgress(false);\r\n\r\n            if (success) {\r\n                finish();\r\n            } else {\r\n                mPasswordView.setError(getString(R.string.error_incorrect_password));\r\n                mPasswordView.requestFocus();\r\n            }\r\n        }\r\n\r\n        @Override\r\n        protected void onCancelled() {\r\n            mAuthTask = null;\r\n            showProgress(false);\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<ul>\r\n 	<li>分析：\r\n<ul>\r\n 	<li>方法列表：\r\n<ul>\r\n 	<li>onCreate() ——来自activity，初始化控件，事件绑定。</li>\r\n 	<li>populateAutoComplete() ——调用mayRequestContacts()，成功后调用接口（LoaderCallbacks）下面的方法</li>\r\n 	<li><strong>mayRequestContacts()</strong> ——动态获取PERMISSION_GRANTED(通讯录权限)</li>\r\n 	<li><strong>onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults)</strong> ——顾名思义是返回权限申请的结果</li>\r\n 	<li><strong>attemptLogin()</strong> ——登录事件</li>\r\n 	<li>isEmailValid(String email) ——是否是email地址的标准</li>\r\n 	<li>isPasswordValid(String password) ——是否符合密码标准</li>\r\n 	<li>showProgress(final boolean show) ——加载进度条</li>\r\n 	<li>onCreateLoader(int i, Bundle bundle) ——接口LoaderCallbacks</li>\r\n 	<li>onLoadFinished(Loader cursorLoader, Cursor cursor) ——接口LoaderCallbacks</li>\r\n 	<li>onLoaderReset(Loader cursorLoader) ——接口LoaderCallbacks</li>\r\n 	<li>addEmailsToAutoComplete(List emailAddressCollection) ——</li>\r\n</ul>\r\n</li>\r\n 	<li>内部接口：\r\n<ul>\r\n 	<li>ProfileQuery\r\n<ul>\r\n 	<li>接口内常量 String[] PROJECTION、ADDRESS、IS_PRIMARY</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n 	<li>内部类：\r\n<ul>\r\n 	<li><strong>UserLoginTask extends AsyncTask&lt;Void, Void, Boolean&gt;</strong>\r\n<ul>\r\n 	<li>构造函数：UserLoginTask(String email, String password)</li>\r\n 	<li>方法：\r\n<ul>\r\n 	<li>doInBackground(Void... params)</li>\r\n 	<li>onPostExecute(final Boolean success)</li>\r\n 	<li>onCancelled()</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n 	<li>流程梳理：\r\n<ul>\r\n 	<li>1.加载XML布局→找到mEmailView控件（email输入框）→申请通讯录权限\r\n<ul>\r\n 	<li>申请权限成功→遍历通讯录→获取主要的email→有，加载到界面、无，无操作</li>\r\n 	<li>申请权限失败→无操作</li>\r\n</ul>\r\n</li>\r\n 	<li>2.找到其他控件→事件绑定→等待用户执行操作</li>\r\n 	<li>3.操作界面→执行登录事件</li>\r\n</ul>\r\n</li>\r\n 	<li>上面我们列出了方法列表，并且将我们涉及到主体流程、较新技能等的方法均有加粗标记。</li>\r\n</ul>\r\n</li>\r\n 	<li>解析：</li>\r\n</ul>\r\n<h4>申请权限：</h4>\r\n<pre><code>  private boolean mayRequestContacts() {\r\n    //当系统版本低于android_M时，跳过权限检查\r\n    if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.M) {\r\n            return true;\r\n        }\r\n    //当系统版本大于等于android_M时，执行权限申请代码\r\n    if (checkSelfPermission(READ_CONTACTS) == PackageManager.PERMISSION_GRANTED) {\r\n    //当自身已经被允许的权限中包含了READ_CONTACTS时，返回True\r\n            return true;\r\n        }\r\n    //当自身已经被允许权限中没有READ_CONTACTS时，申请通讯录读取权限READ_CONTACTS\r\n    //shouldShowRequestPermissionRationale ==&gt; 是否需要调用系统的权限申请界面\r\n    if (shouldShowRequestPermissionRationale(READ_CONTACTS)) {\r\n        Snackbar.make(mEmailView, R.string.permission_rationale, Snackbar.LENGTH_INDEFINITE)\r\n                .setAction(android.R.string.ok, new View.OnClickListener() {\r\n                    @Override\r\n                    @TargetApi(Build.VERSION_CODES.M)\r\n                    public void onClick(View v) {\r\n                        //展示请求权限界面，第一个参数是权限数组，第二个是请求码\r\n                        requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);\r\n                    }\r\n                });\r\n        } else {\r\n            requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);\r\n        }\r\n        return false;\r\n    }\r\n</code></pre>\r\n<h4>申请权限返回的响应</h4>\r\n<pre><code>    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n    //请求码 对应上面请求的请求码\r\n    if (requestCode == REQUEST_READ_CONTACTS) {\r\n        if (grantResults.length == 1 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {    //权限申请成功\r\n            populateAutoComplete(); //读取联系人列表内的email\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<h4>登录事件</h4>\r\n<pre><code>private void attemptLogin() {\r\nif (mAuthTask != null) {    //登录信息提交的异步任务已经实例化，则无需进行操作，第一次执行attemptLogin()时，mAuthTask并未初始化\r\n    return;\r\n}\r\n\r\n// Reset errors.重设用户名和密码框的错误提示\r\nmEmailView.setError(null);  //setError方法是TextView下面的方法，主要是提示一个错误信息，内部有系统集成的错误提示图标，原理是在TextView的右边出现一个Drawable\r\nmPasswordView.setError(null);\r\n\r\n// Store values at the time of the login attempt.\r\nString email = mEmailView.getText().toString();\r\nString password = mPasswordView.getText().toString();\r\n\r\nboolean cancel = false; //是否退出执行登陆进程\r\nView focusView = null;  //焦点View，当某个输入框输入信息不符合标准时，不执行登陆进程，并锁定焦点到那个输入控件\r\n\r\n// 当用户名不为空，判断密码是否符合标准\r\nif (!TextUtils.isEmpty(password) &amp;&amp; !isPasswordValid(password)) {\r\n    mPasswordView.setError(getString(R.string.error_invalid_password));\r\n    focusView = mPasswordView;\r\n    cancel = true;\r\n}\r\n\r\n// Check for a valid email address.\r\nif (TextUtils.isEmpty(email)) {\r\n    mEmailView.setError(getString(R.string.error_field_required));\r\n    focusView = mEmailView;\r\n    cancel = true;\r\n} else if (!isEmailValid(email)) {\r\n    mEmailView.setError(getString(R.string.error_invalid_email));\r\n    focusView = mEmailView;\r\n    cancel = true;\r\n}\r\n\r\nif (cancel) {\r\n    //在上面的操作中出现错误了，不执行具体的登录，并且把焦点切换到上面去\r\n    // There was an error; don''t attempt login and focus the first\r\n    // form field with an error.\r\n    focusView.requestFocus();\r\n} else {\r\n    //开启滚动条，执行登录的异步任务\r\n    // Show a progress spinner, and kick off a background task to\r\n    // perform the user login attempt.\r\n    showProgress(true);\r\n    mAuthTask = new UserLoginTask(email, password);\r\n    mAuthTask.execute((Void) null);\r\n}\r\n</code></pre>\r\n}\r\n<h4>登录的异步任务</h4>\r\n<pre><code>public class UserLoginTask extends AsyncTask&lt;Void, Void, Boolean&gt; {\r\n\r\n    private final String mEmail;\r\n    private final String mPassword;\r\n\r\n    UserLoginTask(String email, String password) {\r\n        mEmail = email;\r\n        mPassword = password;\r\n    }\r\n\r\n    @Override\r\n    protected Boolean doInBackground(Void... params) {  //后台任务，耗时操作此处执行，该处代码执行在子线程\r\n        // TODO: attempt authentication against a network service.\r\n\r\n        try {\r\n            // Simulate network access.\r\n            Thread.sleep(2000); //模拟耗时操作\r\n        } catch (InterruptedException e) {\r\n            return false;\r\n        }\r\n\r\n        for (String credential : DUMMY_CREDENTIALS) {\r\n            String[] pieces = credential.split(":");\r\n            if (pieces[0].equals(mEmail)) {\r\n                // Account exists, return true if the password matches.\r\n                return pieces[1].equals(mPassword);\r\n            }\r\n        }\r\n\r\n        // TODO: register the new account here.\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    protected void onPostExecute(final Boolean success) {   //执行完毕耗时操作调用这里\r\n        mAuthTask = null;\r\n        showProgress(false);\r\n\r\n        if (success) {\r\n            finish();\r\n        } else {\r\n            mPasswordView.setError(getString(R.string.error_incorrect_password));\r\n            mPasswordView.requestFocus();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onCancelled() {  //退出异步任务调用这里\r\n        mAuthTask = null;\r\n        showProgress(false);\r\n    }\r\n}\r\n</code></pre>\r\n<ul>\r\n 	<li>关于<a href="http://www.cnblogs.com/devinzhang/archive/2012/02/13/2350070.html">更多AsyncTask资料点击查看</a></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<h3>总结：</h3>\r\n<ul>\r\n 	<li>TextInputLayout，这个控件包含EditText后，会产生提示文字的动画效果，且提示文字不会消失。</li>\r\n 	<li>纵向布局中，为了保证界面能完整展示，最好在外层套上ScrollView。</li>\r\n 	<li>一个简单的登录流程，耗时操作不能在主线程执行，AsyncTask异步任务执行完毕后，会回归主线程。</li>\r\n 	<li>需要数据交互的地方，数据需要做效验。</li>\r\n 	<li>（重点）android6.0以及以后加入了权限申请，我们这里是动态权限申请，也是最容易被用户接受的。</li>\r\n 	<li>整个登陆界面的操作流程。</li>\r\n</ul>', '从登陆模版学习，Google Android Templates（一）', '', 'inherit', 'closed', 'closed', '', '209-revision-v1', '', '', '2016-07-20 16:23:39', '2016-07-20 08:23:39', '', 209, 'http://acheng1314.cn/?p=210', 0, 'revision', '', 0),
(211, 1, '2016-07-20 16:28:04', '2016-07-20 08:28:04', '<h2>Google Android Templates</h2>\n<h4>缘由：从eclipse时代到“死丢丢”时代，一直存在一个我未曾深入观察过的东西——Google Android Templates。一次偶然我在android studio上面结识了她，遂望一窥究竟。</h4>\n<h4>How to Creat？标题栏File→New→Activity→Login Activity，接下来在弹出的对话框中一直点击Next直到点击Filish。当然上面所说的都是在你的model里面完成的。如下图：</h4>\n<ul>\n 	<li>① <img src="https://github.com/pc859107393/AchengDemos/blob/master/ChooseCreatActivity.png?raw=true" alt="image" /></li>\n 	<li>② <img src="https://github.com/pc859107393/AchengDemos/blob/master/CreatActivityOver.png?raw=true" alt="image" /></li>\n</ul>\n<h4>To observe。拿到源码第一件事我们不是修改，而是先进行观察。我是个喜欢从外到内的人，所以我先run起来。</h4>\n<ul>\n 	<li>1.<img src="https://github.com/pc859107393/AchengDemos/blob/master/RunningPermissions.png?raw=true" alt="image" /></li>\n 	<li>2.<img src="http://acheng1314.cn/wp-content/uploads/2016/07/AppShowGif.gif" alt="image" /></li>\n 	<li>现象：\n<ul>\n 	<li>1.运行时权限申请</li>\n 	<li>2.两个<strong>输入框的提示性文字有动画效果（且输入内容后未消失）</strong>。焦点转移后能看到明显的色彩变化。</li>\n 	<li>3.点击登录按钮后有针对email地址输入框的错误提示文字。</li>\n 	<li>4.键盘下面有个独特的@符号，一般情况下的英文输入法是没有单独放在这么明显地方的@符号。</li>\n 	<li>5.符合效验标准后，点击登录按钮会有进度圈旋转。</li>\n</ul>\n</li>\n</ul>\n<h3>source code</h3>\n<ul>\n 	<li>activity_login.xml\n<ul>\n 	<li>\n<pre><code>&lt;ProgressBar\nandroid:id="@+id/login_progress"\nstyle="?android:attr/progressBarStyleLarge"\nandroid:layout_width="wrap_content"\nandroid:layout_height="wrap_content"\nandroid:layout_marginBottom="8dp"\nandroid:visibility="gone"/&gt;\n\n&lt;ScrollView\n    android:id="@+id/login_form"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"&gt;\n\n    &lt;LinearLayout\n        android:id="@+id/email_login_form"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:orientation="vertical"&gt;\n\n        &lt;android.support.design.widget.TextInputLayout\n            android:layout_width="match_parent"\n            android:layout_height="wrap_content"&gt;\n\n            &lt;AutoCompleteTextView\n                android:id="@+id/email"\n                android:layout_width="match_parent"\n                android:layout_height="wrap_content"\n                android:hint="@string/prompt_email"\n                android:inputType="textEmailAddress"\n                android:maxLines="1"\n                android:singleLine="true"/&gt;\n            &lt;!-android:inputType="textEmailAddress" 说明软件盘中会有@符号 --&gt;\n        &lt;/android.support.design.widget.TextInputLayout&gt;\n\n        &lt;android.support.design.widget.TextInputLayout\n            android:layout_width="match_parent"\n            android:layout_height="wrap_content"&gt;\n\n            &lt;EditText\n                android:id="@+id/password"\n                android:layout_width="match_parent"\n                android:layout_height="wrap_content"\n                android:hint="@string/prompt_password"\n                android:imeActionId="@+id/login"\n                android:imeActionLabel="@string/action_sign_in_short"\n                android:imeOptions="actionUnspecified"\n                android:inputType="textPassword"\n                android:maxLines="1"\n                android:singleLine="true"/&gt;\n\n        &lt;/android.support.design.widget.TextInputLayout&gt;\n\n        &lt;Button\n            android:id="@+id/email_sign_in_button"\n            style="?android:textAppearanceSmall"\n            android:layout_width="match_parent"\n            android:layout_height="wrap_content"\n            android:layout_marginTop="16dp"\n            android:text="@string/action_sign_in"\n            android:textStyle="bold"/&gt;\n\n    &lt;/LinearLayout&gt;\n&lt;/ScrollView&gt;\n</code></pre>\n</li>\n 	<li>上面代码中包含控件：ProgressBar、ScrollView、LinearLayout、TextInputLayout、EditText、Button。</li>\n 	<li>\n<h5>分析：</h5>\n<ul>\n 	<li>ProgressBar是我们登录后出现的进度条。</li>\n 	<li>ScrollView可滑动界面，内部只能包含一个控件</li>\n 	<li>LinearLayout是ScrollView可滑动界面下面的最上层控件，有且仅有一个</li>\n 	<li>TextInputLayout文本输入布局</li>\n 	<li>EditText输入框</li>\n 	<li>Button按钮，点击后执行登陆操作\n<ul>\n 	<li>在上面的控件中， 我们不是特别常用的仅仅有TextInputLayout，而且根据界面效果来看，我们大胆猜测TextInputLayout可能产生了EditText的提示文字（hint）发生了变化，故此我们需要<a href="http://www.jcodecraeer.com/a/basictutorial/2015/0821/3338.html"><strong>查看相关资料</strong></a>和<a href="https://developer.android.com/reference/android/support/design/widget/TextInputLayout.html"><strong>官方API文档</strong></a>，根据文章总结，TextInputLayout是一个显示在EditText上方的浮动标签。跟ScrollView一样，<strong>TextInputLayout只接受一个子元素</strong>。子元素需要是<strong>一个EditText元素</strong>。</li>\n 	<li>展示效果：一个单一的EditText 在输入文字的时候会隐藏hint，而被包含在TextInputLayout中的EditText则会让hint变成一个在EditText上方的浮动标签。同时还包括一个漂亮的material动画。</li>\n 	<li>处理错误：TextInputLayout可以处理错误，我们先检查输入的信息是否正常，如果不符合我们的要求我们可以设置错误XXX.setError();</li>\n 	<li>样式：TextInputLayout，所有色彩展示都是在style.xml中设置，具体的请自行搜索。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n 	<li>\n<h2>LoginActivity.java</h2>\n/** * A login screen that offers login via email/password. */ public class LoginActivity extends AppCompatActivity implements LoaderCallbacks {\n<pre><code>    /**\n     * Id to identity READ_CONTACTS permission request.\n     */\n    private static final int REQUEST_READ_CONTACTS = 0;\n\n    /**\n     * A dummy authentication store containing known user names and passwords.\n     * TODO: remove after connecting to a real authentication system.\n     */\n    private static final String[] DUMMY_CREDENTIALS = new String[]{\n            "foo@example.com:hello", "bar@example.com:world"\n    };\n    /**\n     * Keep track of the login task to ensure we can cancel it if requested.\n     */\n    private UserLoginTask mAuthTask = null;\n\n    // UI references.\n    private AutoCompleteTextView mEmailView;\n    private EditText mPasswordView;\n    private View mProgressView;\n    private View mLoginFormView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_login);\n        // Set up the login form.\n        mEmailView = (AutoCompleteTextView) findViewById(R.id.email);\n        populateAutoComplete();\n\n        mPasswordView = (EditText) findViewById(R.id.password);\n        mPasswordView.setOnEditorActionListener(new TextView.OnEditorActionListener() {\n            @Override\n            public boolean onEditorAction(TextView textView, int id, KeyEvent keyEvent) {\n                if (id == R.id.login || id == EditorInfo.IME_NULL) {\n                    attemptLogin();\n                    return true;\n                }\n                return false;\n            }\n        });\n\n        Button mEmailSignInButton = (Button) findViewById(R.id.email_sign_in_button);\n        mEmailSignInButton.setOnClickListener(new OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                attemptLogin();\n            }\n        });\n\n        mLoginFormView = findViewById(R.id.login_form);\n        mProgressView = findViewById(R.id.login_progress);\n    }\n\n    private void populateAutoComplete() {\n        if (!mayRequestContacts()) {\n            return;\n        }\n\n        getLoaderManager().initLoader(0, null, this);\n    }\n\n    private boolean mayRequestContacts() {\n        if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.M) {\n            return true;\n        }\n        if (checkSelfPermission(READ_CONTACTS) == PackageManager.PERMISSION_GRANTED) {\n            return true;\n        }\n        if (shouldShowRequestPermissionRationale(READ_CONTACTS)) {\n            Snackbar.make(mEmailView, R.string.permission_rationale, Snackbar.LENGTH_INDEFINITE)\n                    .setAction(android.R.string.ok, new View.OnClickListener() {\n                        @Override\n                        @TargetApi(Build.VERSION_CODES.M)\n                        public void onClick(View v) {\n                            requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);\n                        }\n                    });\n        } else {\n            requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);\n        }\n        return false;\n    }\n\n    /**\n     * Callback received when a permissions request has been completed.\n     */\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,\n                                           @NonNull int[] grantResults) {\n        if (requestCode == REQUEST_READ_CONTACTS) {\n            if (grantResults.length == 1 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                populateAutoComplete();\n            }\n        }\n    }\n\n\n    /**\n     * Attempts to sign in or register the account specified by the login form.\n     * If there are form errors (invalid email, missing fields, etc.), the\n     * errors are presented and no actual login attempt is made.\n     */\n    private void attemptLogin() {\n        if (mAuthTask != null) {\n            return;\n        }\n\n        // Reset errors.\n        mEmailView.setError(null);\n        mPasswordView.setError(null);\n\n        // Store values at the time of the login attempt.\n        String email = mEmailView.getText().toString();\n        String password = mPasswordView.getText().toString();\n\n        boolean cancel = false;\n        View focusView = null;\n\n        // Check for a valid password, if the user entered one.\n        if (!TextUtils.isEmpty(password) &amp;&amp; !isPasswordValid(password)) {\n            mPasswordView.setError(getString(R.string.error_invalid_password));\n            focusView = mPasswordView;\n            cancel = true;\n        }\n\n        // Check for a valid email address.\n        if (TextUtils.isEmpty(email)) {\n            mEmailView.setError(getString(R.string.error_field_required));\n            focusView = mEmailView;\n            cancel = true;\n        } else if (!isEmailValid(email)) {\n            mEmailView.setError(getString(R.string.error_invalid_email));\n            focusView = mEmailView;\n            cancel = true;\n        }\n\n        if (cancel) {\n            // There was an error; don''t attempt login and focus the first\n            // form field with an error.\n            focusView.requestFocus();\n        } else {\n            // Show a progress spinner, and kick off a background task to\n            // perform the user login attempt.\n            showProgress(true);\n            mAuthTask = new UserLoginTask(email, password);\n            mAuthTask.execute((Void) null);\n        }\n    }\n\n    private boolean isEmailValid(String email) {\n        //TODO: Replace this with your own logic\n        return email.contains("@");\n    }\n\n    private boolean isPasswordValid(String password) {\n        //TODO: Replace this with your own logic\n        return password.length() &gt; 4;\n    }\n\n    /**\n     * Shows the progress UI and hides the login form.\n     */\n    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)\n    private void showProgress(final boolean show) {\n        // On Honeycomb MR2 we have the ViewPropertyAnimator APIs, which allow\n        // for very easy animations. If available, use these APIs to fade-in\n        // the progress spinner.\n        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB_MR2) {\n            int shortAnimTime = getResources().getInteger(android.R.integer.config_shortAnimTime);\n\n            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);\n            mLoginFormView.animate().setDuration(shortAnimTime).alpha(\n                    show ? 0 : 1).setListener(new AnimatorListenerAdapter() {\n                @Override\n                public void onAnimationEnd(Animator animation) {\n                    mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);\n                }\n            });\n\n            mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);\n            mProgressView.animate().setDuration(shortAnimTime).alpha(\n                    show ? 1 : 0).setListener(new AnimatorListenerAdapter() {\n                @Override\n                public void onAnimationEnd(Animator animation) {\n                    mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);\n                }\n            });\n        } else {\n            // The ViewPropertyAnimator APIs are not available, so simply show\n            // and hide the relevant UI components.\n            mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);\n            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);\n        }\n    }\n\n    @Override\n    public Loader&lt;Cursor&gt; onCreateLoader(int i, Bundle bundle) {\n        return new CursorLoader(this,\n                // Retrieve data rows for the device user''s ''profile'' contact.\n                Uri.withAppendedPath(ContactsContract.Profile.CONTENT_URI,\n                        ContactsContract.Contacts.Data.CONTENT_DIRECTORY), ProfileQuery.PROJECTION,\n\n                // Select only email addresses.\n                ContactsContract.Contacts.Data.MIMETYPE +\n                        " = ?", new String[]{ContactsContract.CommonDataKinds.Email\n                .CONTENT_ITEM_TYPE},\n\n                // Show primary email addresses first. Note that there won''t be\n                // a primary email address if the user hasn''t specified one.\n                ContactsContract.Contacts.Data.IS_PRIMARY + " DESC");\n    }\n\n    @Override\n    public void onLoadFinished(Loader&lt;Cursor&gt; cursorLoader, Cursor cursor) {\n        List&lt;String&gt; emails = new ArrayList&lt;&gt;();\n        cursor.moveToFirst();\n        while (!cursor.isAfterLast()) {\n            emails.add(cursor.getString(ProfileQuery.ADDRESS));\n            cursor.moveToNext();\n        }\n\n        addEmailsToAutoComplete(emails);\n    }\n\n    @Override\n    public void onLoaderReset(Loader&lt;Cursor&gt; cursorLoader) {\n\n    }\n\n    private void addEmailsToAutoComplete(List&lt;String&gt; emailAddressCollection) {\n        //Create adapter to tell the AutoCompleteTextView what to show in its dropdown list.\n        ArrayAdapter&lt;String&gt; adapter =\n                new ArrayAdapter&lt;&gt;(LoginActivity.this,\n                        android.R.layout.simple_dropdown_item_1line, emailAddressCollection);\n\n        mEmailView.setAdapter(adapter);\n    }\n\n\n    private interface ProfileQuery {\n        String[] PROJECTION = {\n                ContactsContract.CommonDataKinds.Email.ADDRESS,\n                ContactsContract.CommonDataKinds.Email.IS_PRIMARY,\n        };\n\n        int ADDRESS = 0;\n        int IS_PRIMARY = 1;\n    }\n\n    /**\n     * Represents an asynchronous login/registration task used to authenticate\n     * the user.\n     */\n    public class UserLoginTask extends AsyncTask&lt;Void, Void, Boolean&gt; {\n\n        private final String mEmail;\n        private final String mPassword;\n\n        UserLoginTask(String email, String password) {\n            mEmail = email;\n            mPassword = password;\n        }\n\n        @Override\n        protected Boolean doInBackground(Void... params) {\n            // TODO: attempt authentication against a network service.\n\n            try {\n                // Simulate network access.\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                return false;\n            }\n\n            for (String credential : DUMMY_CREDENTIALS) {\n                String[] pieces = credential.split(":");\n                if (pieces[0].equals(mEmail)) {\n                    // Account exists, return true if the password matches.\n                    return pieces[1].equals(mPassword);\n                }\n            }\n\n            // TODO: register the new account here.\n            return true;\n        }\n\n        @Override\n        protected void onPostExecute(final Boolean success) {\n            mAuthTask = null;\n            showProgress(false);\n\n            if (success) {\n                finish();\n            } else {\n                mPasswordView.setError(getString(R.string.error_incorrect_password));\n                mPasswordView.requestFocus();\n            }\n        }\n\n        @Override\n        protected void onCancelled() {\n            mAuthTask = null;\n            showProgress(false);\n        }\n    }\n}\n</code></pre>\n<ul>\n 	<li>分析：\n<ul>\n 	<li>方法列表：\n<ul>\n 	<li>onCreate() ——来自activity，初始化控件，事件绑定。</li>\n 	<li>populateAutoComplete() ——调用mayRequestContacts()，成功后调用接口（LoaderCallbacks）下面的方法</li>\n 	<li><strong>mayRequestContacts()</strong> ——动态获取PERMISSION_GRANTED(通讯录权限)</li>\n 	<li><strong>onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults)</strong> ——顾名思义是返回权限申请的结果</li>\n 	<li><strong>attemptLogin()</strong> ——登录事件</li>\n 	<li>isEmailValid(String email) ——是否是email地址的标准</li>\n 	<li>isPasswordValid(String password) ——是否符合密码标准</li>\n 	<li>showProgress(final boolean show) ——加载进度条</li>\n 	<li>onCreateLoader(int i, Bundle bundle) ——接口LoaderCallbacks</li>\n 	<li>onLoadFinished(Loader cursorLoader, Cursor cursor) ——接口LoaderCallbacks</li>\n 	<li>onLoaderReset(Loader cursorLoader) ——接口LoaderCallbacks</li>\n 	<li>addEmailsToAutoComplete(List emailAddressCollection) ——</li>\n</ul>\n</li>\n 	<li>内部接口：\n<ul>\n 	<li>ProfileQuery\n<ul>\n 	<li>接口内常量 String[] PROJECTION、ADDRESS、IS_PRIMARY</li>\n</ul>\n</li>\n</ul>\n</li>\n 	<li>内部类：\n<ul>\n 	<li><strong>UserLoginTask extends AsyncTask&lt;Void, Void, Boolean&gt;</strong>\n<ul>\n 	<li>构造函数：UserLoginTask(String email, String password)</li>\n 	<li>方法：\n<ul>\n 	<li>doInBackground(Void... params)</li>\n 	<li>onPostExecute(final Boolean success)</li>\n 	<li>onCancelled()</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n 	<li>流程梳理：\n<ul>\n 	<li>1.加载XML布局→找到mEmailView控件（email输入框）→申请通讯录权限\n<ul>\n 	<li>申请权限成功→遍历通讯录→获取主要的email→有，加载到界面、无，无操作</li>\n 	<li>申请权限失败→无操作</li>\n</ul>\n</li>\n 	<li>2.找到其他控件→事件绑定→等待用户执行操作</li>\n 	<li>3.操作界面→执行登录事件</li>\n</ul>\n</li>\n 	<li>上面我们列出了方法列表，并且将我们涉及到主体流程、较新技能等的方法均有加粗标记。</li>\n</ul>\n</li>\n 	<li>解析：</li>\n</ul>\n<h4>申请权限：</h4>\n<pre><code>  private boolean mayRequestContacts() {\n    //当系统版本低于android_M时，跳过权限检查\n    if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.M) {\n            return true;\n        }\n    //当系统版本大于等于android_M时，执行权限申请代码\n    if (checkSelfPermission(READ_CONTACTS) == PackageManager.PERMISSION_GRANTED) {\n    //当自身已经被允许的权限中包含了READ_CONTACTS时，返回True\n            return true;\n        }\n    //当自身已经被允许权限中没有READ_CONTACTS时，申请通讯录读取权限READ_CONTACTS\n    //shouldShowRequestPermissionRationale ==&gt; 是否需要调用系统的权限申请界面\n    if (shouldShowRequestPermissionRationale(READ_CONTACTS)) {\n        Snackbar.make(mEmailView, R.string.permission_rationale, Snackbar.LENGTH_INDEFINITE)\n                .setAction(android.R.string.ok, new View.OnClickListener() {\n                    @Override\n                    @TargetApi(Build.VERSION_CODES.M)\n                    public void onClick(View v) {\n                        //展示请求权限界面，第一个参数是权限数组，第二个是请求码\n                        requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);\n                    }\n                });\n        } else {\n            requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);\n        }\n        return false;\n    }\n</code></pre>\n<h4>申请权限返回的响应</h4>\n<pre><code>    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n    //请求码 对应上面请求的请求码\n    if (requestCode == REQUEST_READ_CONTACTS) {\n        if (grantResults.length == 1 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {    //权限申请成功\n            populateAutoComplete(); //读取联系人列表内的email\n        }\n    }\n}\n</code></pre>\n<h4>登录事件</h4>\n<pre><code>private void attemptLogin() {\nif (mAuthTask != null) {    //登录信息提交的异步任务已经实例化，则无需进行操作，第一次执行attemptLogin()时，mAuthTask并未初始化\n    return;\n}\n\n// Reset errors.重设用户名和密码框的错误提示\nmEmailView.setError(null);  //setError方法是TextView下面的方法，主要是提示一个错误信息，内部有系统集成的错误提示图标，原理是在TextView的右边出现一个Drawable\nmPasswordView.setError(null);\n\n// Store values at the time of the login attempt.\nString email = mEmailView.getText().toString();\nString password = mPasswordView.getText().toString();\n\nboolean cancel = false; //是否退出执行登陆进程\nView focusView = null;  //焦点View，当某个输入框输入信息不符合标准时，不执行登陆进程，并锁定焦点到那个输入控件\n\n// 当用户名不为空，判断密码是否符合标准\nif (!TextUtils.isEmpty(password) &amp;&amp; !isPasswordValid(password)) {\n    mPasswordView.setError(getString(R.string.error_invalid_password));\n    focusView = mPasswordView;\n    cancel = true;\n}\n\n// Check for a valid email address.\nif (TextUtils.isEmpty(email)) {\n    mEmailView.setError(getString(R.string.error_field_required));\n    focusView = mEmailView;\n    cancel = true;\n} else if (!isEmailValid(email)) {\n    mEmailView.setError(getString(R.string.error_invalid_email));\n    focusView = mEmailView;\n    cancel = true;\n}\n\nif (cancel) {\n    //在上面的操作中出现错误了，不执行具体的登录，并且把焦点切换到上面去\n    // There was an error; don''t attempt login and focus the first\n    // form field with an error.\n    focusView.requestFocus();\n} else {\n    //开启滚动条，执行登录的异步任务\n    // Show a progress spinner, and kick off a background task to\n    // perform the user login attempt.\n    showProgress(true);\n    mAuthTask = new UserLoginTask(email, password);\n    mAuthTask.execute((Void) null);\n}\n</code></pre>\n}\n<h4>登录的异步任务</h4>\n<pre><code>public class UserLoginTask extends AsyncTask&lt;Void, Void, Boolean&gt; {\n\n    private final String mEmail;\n    private final String mPassword;\n\n    UserLoginTask(String email, String password) {\n        mEmail = email;\n        mPassword = password;\n    }\n\n    @Override\n    protected Boolean doInBackground(Void... params) {  //后台任务，耗时操作此处执行，该处代码执行在子线程\n        // TODO: attempt authentication against a network service.\n\n        try {\n            // Simulate network access.\n            Thread.sleep(2000); //模拟耗时操作\n        } catch (InterruptedException e) {\n            return false;\n        }\n\n        for (String credential : DUMMY_CREDENTIALS) {\n            String[] pieces = credential.split(":");\n            if (pieces[0].equals(mEmail)) {\n                // Account exists, return true if the password matches.\n                return pieces[1].equals(mPassword);\n            }\n        }\n\n        // TODO: register the new account here.\n        return true;\n    }\n\n    @Override\n    protected void onPostExecute(final Boolean success) {   //执行完毕耗时操作调用这里\n        mAuthTask = null;\n        showProgress(false);\n\n        if (success) {\n            finish();\n        } else {\n            mPasswordView.setError(getString(R.string.error_incorrect_password));\n            mPasswordView.requestFocus();\n        }\n    }\n\n    @Override\n    protected void onCancelled() {  //退出异步任务调用这里\n        mAuthTask = null;\n        showProgress(false);\n    }\n}\n</code></pre>\n<ul>\n 	<li>关于<a href="http://www.cnblogs.com/devinzhang/archive/2012/02/13/2350070.html">更多AsyncTask资料点击查看</a></li>\n</ul>\n</li>\n</ul>\n<h3>总结：</h3>\n<ul>\n 	<li>TextInputLayout，这个控件包含EditText后，会产生提示文字的动画效果，且提示文字不会消失。</li>\n 	<li>纵向布局中，为了保证界面能完整展示，最好在外层套上ScrollView。</li>\n 	<li>一个简单的登录流程，耗时操作不能在主线程执行，AsyncTask异步任务执行完毕后，会回归主线程。</li>\n 	<li>需要数据交互的地方，数据需要做效验。</li>\n 	<li>（重点）android6.0以及以后加入了权限申请，我们这里是动态权限申请，也是最容易被用户接受的。</li>\n 	<li>整个登陆界面的业务流程。</li>\n</ul>', '从登陆模版学习，Google Android Templates（一）', '', 'inherit', 'closed', 'closed', '', '209-autosave-v1', '', '', '2016-07-20 16:28:04', '2016-07-20 08:28:04', '', 209, 'http://acheng1314.cn/?p=211', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(212, 1, '2016-07-20 16:28:37', '2016-07-20 08:28:37', '<h2>Google Android Templates</h2>\r\n<h4>缘由：从eclipse时代到“死丢丢”时代，一直存在一个我未曾深入观察过的东西——Google Android Templates。一次偶然我在android studio上面结识了她，遂望一窥究竟。</h4>\r\n<h4>How to Creat？标题栏File→New→Activity→Login Activity，接下来在弹出的对话框中一直点击Next直到点击Filish。当然上面所说的都是在你的model里面完成的。如下图：</h4>\r\n<ul>\r\n 	<li>① <img src="https://github.com/pc859107393/AchengDemos/blob/master/ChooseCreatActivity.png?raw=true" alt="image" /></li>\r\n 	<li>② <img src="https://github.com/pc859107393/AchengDemos/blob/master/CreatActivityOver.png?raw=true" alt="image" /></li>\r\n</ul>\r\n<h4>To observe。拿到源码第一件事我们不是修改，而是先进行观察。我是个喜欢从外到内的人，所以我先run起来。</h4>\r\n<ul>\r\n 	<li>1.<img src="https://github.com/pc859107393/AchengDemos/blob/master/RunningPermissions.png?raw=true" alt="image" /></li>\r\n 	<li>2.<img src="http://acheng1314.cn/wp-content/uploads/2016/07/AppShowGif.gif" alt="image" /></li>\r\n 	<li>现象：\r\n<ul>\r\n 	<li>1.运行时权限申请</li>\r\n 	<li>2.两个<strong>输入框的提示性文字有动画效果（且输入内容后未消失）</strong>。焦点转移后能看到明显的色彩变化。</li>\r\n 	<li>3.点击登录按钮后有针对email地址输入框的错误提示文字。</li>\r\n 	<li>4.键盘下面有个独特的@符号，一般情况下的英文输入法是没有单独放在这么明显地方的@符号。</li>\r\n 	<li>5.符合效验标准后，点击登录按钮会有进度圈旋转。</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<h3>source code</h3>\r\n<ul>\r\n 	<li>activity_login.xml\r\n<ul>\r\n 	<li>\r\n<pre><code>&lt;ProgressBar\r\nandroid:id="@+id/login_progress"\r\nstyle="?android:attr/progressBarStyleLarge"\r\nandroid:layout_width="wrap_content"\r\nandroid:layout_height="wrap_content"\r\nandroid:layout_marginBottom="8dp"\r\nandroid:visibility="gone"/&gt;\r\n\r\n&lt;ScrollView\r\n    android:id="@+id/login_form"\r\n    android:layout_width="match_parent"\r\n    android:layout_height="match_parent"&gt;\r\n\r\n    &lt;LinearLayout\r\n        android:id="@+id/email_login_form"\r\n        android:layout_width="match_parent"\r\n        android:layout_height="wrap_content"\r\n        android:orientation="vertical"&gt;\r\n\r\n        &lt;android.support.design.widget.TextInputLayout\r\n            android:layout_width="match_parent"\r\n            android:layout_height="wrap_content"&gt;\r\n\r\n            &lt;AutoCompleteTextView\r\n                android:id="@+id/email"\r\n                android:layout_width="match_parent"\r\n                android:layout_height="wrap_content"\r\n                android:hint="@string/prompt_email"\r\n                android:inputType="textEmailAddress"\r\n                android:maxLines="1"\r\n                android:singleLine="true"/&gt;\r\n            &lt;!-android:inputType="textEmailAddress" 说明软件盘中会有@符号 --&gt;\r\n        &lt;/android.support.design.widget.TextInputLayout&gt;\r\n\r\n        &lt;android.support.design.widget.TextInputLayout\r\n            android:layout_width="match_parent"\r\n            android:layout_height="wrap_content"&gt;\r\n\r\n            &lt;EditText\r\n                android:id="@+id/password"\r\n                android:layout_width="match_parent"\r\n                android:layout_height="wrap_content"\r\n                android:hint="@string/prompt_password"\r\n                android:imeActionId="@+id/login"\r\n                android:imeActionLabel="@string/action_sign_in_short"\r\n                android:imeOptions="actionUnspecified"\r\n                android:inputType="textPassword"\r\n                android:maxLines="1"\r\n                android:singleLine="true"/&gt;\r\n\r\n        &lt;/android.support.design.widget.TextInputLayout&gt;\r\n\r\n        &lt;Button\r\n            android:id="@+id/email_sign_in_button"\r\n            style="?android:textAppearanceSmall"\r\n            android:layout_width="match_parent"\r\n            android:layout_height="wrap_content"\r\n            android:layout_marginTop="16dp"\r\n            android:text="@string/action_sign_in"\r\n            android:textStyle="bold"/&gt;\r\n\r\n    &lt;/LinearLayout&gt;\r\n&lt;/ScrollView&gt;\r\n</code></pre>\r\n</li>\r\n 	<li>上面代码中包含控件：ProgressBar、ScrollView、LinearLayout、TextInputLayout、EditText、Button。</li>\r\n 	<li>\r\n<h5>分析：</h5>\r\n<ul>\r\n 	<li>ProgressBar是我们登录后出现的进度条。</li>\r\n 	<li>ScrollView可滑动界面，内部只能包含一个控件</li>\r\n 	<li>LinearLayout是ScrollView可滑动界面下面的最上层控件，有且仅有一个</li>\r\n 	<li>TextInputLayout文本输入布局</li>\r\n 	<li>EditText输入框</li>\r\n 	<li>Button按钮，点击后执行登陆操作\r\n<ul>\r\n 	<li>在上面的控件中， 我们不是特别常用的仅仅有TextInputLayout，而且根据界面效果来看，我们大胆猜测TextInputLayout可能产生了EditText的提示文字（hint）发生了变化，故此我们需要<a href="http://www.jcodecraeer.com/a/basictutorial/2015/0821/3338.html"><strong>查看相关资料</strong></a>和<a href="https://developer.android.com/reference/android/support/design/widget/TextInputLayout.html"><strong>官方API文档</strong></a>，根据文章总结，TextInputLayout是一个显示在EditText上方的浮动标签。跟ScrollView一样，<strong>TextInputLayout只接受一个子元素</strong>。子元素需要是<strong>一个EditText元素</strong>。</li>\r\n 	<li>展示效果：一个单一的EditText 在输入文字的时候会隐藏hint，而被包含在TextInputLayout中的EditText则会让hint变成一个在EditText上方的浮动标签。同时还包括一个漂亮的material动画。</li>\r\n 	<li>处理错误：TextInputLayout可以处理错误，我们先检查输入的信息是否正常，如果不符合我们的要求我们可以设置错误XXX.setError();</li>\r\n 	<li>样式：TextInputLayout，所有色彩展示都是在style.xml中设置，具体的请自行搜索。</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n 	<li>\r\n<h2>LoginActivity.java</h2>\r\n/** * A login screen that offers login via email/password. */ public class LoginActivity extends AppCompatActivity implements LoaderCallbacks {\r\n<pre><code>    /**\r\n     * Id to identity READ_CONTACTS permission request.\r\n     */\r\n    private static final int REQUEST_READ_CONTACTS = 0;\r\n\r\n    /**\r\n     * A dummy authentication store containing known user names and passwords.\r\n     * TODO: remove after connecting to a real authentication system.\r\n     */\r\n    private static final String[] DUMMY_CREDENTIALS = new String[]{\r\n            "foo@example.com:hello", "bar@example.com:world"\r\n    };\r\n    /**\r\n     * Keep track of the login task to ensure we can cancel it if requested.\r\n     */\r\n    private UserLoginTask mAuthTask = null;\r\n\r\n    // UI references.\r\n    private AutoCompleteTextView mEmailView;\r\n    private EditText mPasswordView;\r\n    private View mProgressView;\r\n    private View mLoginFormView;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_login);\r\n        // Set up the login form.\r\n        mEmailView = (AutoCompleteTextView) findViewById(R.id.email);\r\n        populateAutoComplete();\r\n\r\n        mPasswordView = (EditText) findViewById(R.id.password);\r\n        mPasswordView.setOnEditorActionListener(new TextView.OnEditorActionListener() {\r\n            @Override\r\n            public boolean onEditorAction(TextView textView, int id, KeyEvent keyEvent) {\r\n                if (id == R.id.login || id == EditorInfo.IME_NULL) {\r\n                    attemptLogin();\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n        Button mEmailSignInButton = (Button) findViewById(R.id.email_sign_in_button);\r\n        mEmailSignInButton.setOnClickListener(new OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                attemptLogin();\r\n            }\r\n        });\r\n\r\n        mLoginFormView = findViewById(R.id.login_form);\r\n        mProgressView = findViewById(R.id.login_progress);\r\n    }\r\n\r\n    private void populateAutoComplete() {\r\n        if (!mayRequestContacts()) {\r\n            return;\r\n        }\r\n\r\n        getLoaderManager().initLoader(0, null, this);\r\n    }\r\n\r\n    private boolean mayRequestContacts() {\r\n        if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.M) {\r\n            return true;\r\n        }\r\n        if (checkSelfPermission(READ_CONTACTS) == PackageManager.PERMISSION_GRANTED) {\r\n            return true;\r\n        }\r\n        if (shouldShowRequestPermissionRationale(READ_CONTACTS)) {\r\n            Snackbar.make(mEmailView, R.string.permission_rationale, Snackbar.LENGTH_INDEFINITE)\r\n                    .setAction(android.R.string.ok, new View.OnClickListener() {\r\n                        @Override\r\n                        @TargetApi(Build.VERSION_CODES.M)\r\n                        public void onClick(View v) {\r\n                            requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);\r\n                        }\r\n                    });\r\n        } else {\r\n            requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Callback received when a permissions request has been completed.\r\n     */\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,\r\n                                           @NonNull int[] grantResults) {\r\n        if (requestCode == REQUEST_READ_CONTACTS) {\r\n            if (grantResults.length == 1 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                populateAutoComplete();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Attempts to sign in or register the account specified by the login form.\r\n     * If there are form errors (invalid email, missing fields, etc.), the\r\n     * errors are presented and no actual login attempt is made.\r\n     */\r\n    private void attemptLogin() {\r\n        if (mAuthTask != null) {\r\n            return;\r\n        }\r\n\r\n        // Reset errors.\r\n        mEmailView.setError(null);\r\n        mPasswordView.setError(null);\r\n\r\n        // Store values at the time of the login attempt.\r\n        String email = mEmailView.getText().toString();\r\n        String password = mPasswordView.getText().toString();\r\n\r\n        boolean cancel = false;\r\n        View focusView = null;\r\n\r\n        // Check for a valid password, if the user entered one.\r\n        if (!TextUtils.isEmpty(password) &amp;&amp; !isPasswordValid(password)) {\r\n            mPasswordView.setError(getString(R.string.error_invalid_password));\r\n            focusView = mPasswordView;\r\n            cancel = true;\r\n        }\r\n\r\n        // Check for a valid email address.\r\n        if (TextUtils.isEmpty(email)) {\r\n            mEmailView.setError(getString(R.string.error_field_required));\r\n            focusView = mEmailView;\r\n            cancel = true;\r\n        } else if (!isEmailValid(email)) {\r\n            mEmailView.setError(getString(R.string.error_invalid_email));\r\n            focusView = mEmailView;\r\n            cancel = true;\r\n        }\r\n\r\n        if (cancel) {\r\n            // There was an error; don''t attempt login and focus the first\r\n            // form field with an error.\r\n            focusView.requestFocus();\r\n        } else {\r\n            // Show a progress spinner, and kick off a background task to\r\n            // perform the user login attempt.\r\n            showProgress(true);\r\n            mAuthTask = new UserLoginTask(email, password);\r\n            mAuthTask.execute((Void) null);\r\n        }\r\n    }\r\n\r\n    private boolean isEmailValid(String email) {\r\n        //TODO: Replace this with your own logic\r\n        return email.contains("@");\r\n    }\r\n\r\n    private boolean isPasswordValid(String password) {\r\n        //TODO: Replace this with your own logic\r\n        return password.length() &gt; 4;\r\n    }\r\n\r\n    /**\r\n     * Shows the progress UI and hides the login form.\r\n     */\r\n    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)\r\n    private void showProgress(final boolean show) {\r\n        // On Honeycomb MR2 we have the ViewPropertyAnimator APIs, which allow\r\n        // for very easy animations. If available, use these APIs to fade-in\r\n        // the progress spinner.\r\n        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB_MR2) {\r\n            int shortAnimTime = getResources().getInteger(android.R.integer.config_shortAnimTime);\r\n\r\n            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);\r\n            mLoginFormView.animate().setDuration(shortAnimTime).alpha(\r\n                    show ? 0 : 1).setListener(new AnimatorListenerAdapter() {\r\n                @Override\r\n                public void onAnimationEnd(Animator animation) {\r\n                    mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);\r\n                }\r\n            });\r\n\r\n            mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);\r\n            mProgressView.animate().setDuration(shortAnimTime).alpha(\r\n                    show ? 1 : 0).setListener(new AnimatorListenerAdapter() {\r\n                @Override\r\n                public void onAnimationEnd(Animator animation) {\r\n                    mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);\r\n                }\r\n            });\r\n        } else {\r\n            // The ViewPropertyAnimator APIs are not available, so simply show\r\n            // and hide the relevant UI components.\r\n            mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);\r\n            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Loader&lt;Cursor&gt; onCreateLoader(int i, Bundle bundle) {\r\n        return new CursorLoader(this,\r\n                // Retrieve data rows for the device user''s ''profile'' contact.\r\n                Uri.withAppendedPath(ContactsContract.Profile.CONTENT_URI,\r\n                        ContactsContract.Contacts.Data.CONTENT_DIRECTORY), ProfileQuery.PROJECTION,\r\n\r\n                // Select only email addresses.\r\n                ContactsContract.Contacts.Data.MIMETYPE +\r\n                        " = ?", new String[]{ContactsContract.CommonDataKinds.Email\r\n                .CONTENT_ITEM_TYPE},\r\n\r\n                // Show primary email addresses first. Note that there won''t be\r\n                // a primary email address if the user hasn''t specified one.\r\n                ContactsContract.Contacts.Data.IS_PRIMARY + " DESC");\r\n    }\r\n\r\n    @Override\r\n    public void onLoadFinished(Loader&lt;Cursor&gt; cursorLoader, Cursor cursor) {\r\n        List&lt;String&gt; emails = new ArrayList&lt;&gt;();\r\n        cursor.moveToFirst();\r\n        while (!cursor.isAfterLast()) {\r\n            emails.add(cursor.getString(ProfileQuery.ADDRESS));\r\n            cursor.moveToNext();\r\n        }\r\n\r\n        addEmailsToAutoComplete(emails);\r\n    }\r\n\r\n    @Override\r\n    public void onLoaderReset(Loader&lt;Cursor&gt; cursorLoader) {\r\n\r\n    }\r\n\r\n    private void addEmailsToAutoComplete(List&lt;String&gt; emailAddressCollection) {\r\n        //Create adapter to tell the AutoCompleteTextView what to show in its dropdown list.\r\n        ArrayAdapter&lt;String&gt; adapter =\r\n                new ArrayAdapter&lt;&gt;(LoginActivity.this,\r\n                        android.R.layout.simple_dropdown_item_1line, emailAddressCollection);\r\n\r\n        mEmailView.setAdapter(adapter);\r\n    }\r\n\r\n\r\n    private interface ProfileQuery {\r\n        String[] PROJECTION = {\r\n                ContactsContract.CommonDataKinds.Email.ADDRESS,\r\n                ContactsContract.CommonDataKinds.Email.IS_PRIMARY,\r\n        };\r\n\r\n        int ADDRESS = 0;\r\n        int IS_PRIMARY = 1;\r\n    }\r\n\r\n    /**\r\n     * Represents an asynchronous login/registration task used to authenticate\r\n     * the user.\r\n     */\r\n    public class UserLoginTask extends AsyncTask&lt;Void, Void, Boolean&gt; {\r\n\r\n        private final String mEmail;\r\n        private final String mPassword;\r\n\r\n        UserLoginTask(String email, String password) {\r\n            mEmail = email;\r\n            mPassword = password;\r\n        }\r\n\r\n        @Override\r\n        protected Boolean doInBackground(Void... params) {\r\n            // TODO: attempt authentication against a network service.\r\n\r\n            try {\r\n                // Simulate network access.\r\n                Thread.sleep(2000);\r\n            } catch (InterruptedException e) {\r\n                return false;\r\n            }\r\n\r\n            for (String credential : DUMMY_CREDENTIALS) {\r\n                String[] pieces = credential.split(":");\r\n                if (pieces[0].equals(mEmail)) {\r\n                    // Account exists, return true if the password matches.\r\n                    return pieces[1].equals(mPassword);\r\n                }\r\n            }\r\n\r\n            // TODO: register the new account here.\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        protected void onPostExecute(final Boolean success) {\r\n            mAuthTask = null;\r\n            showProgress(false);\r\n\r\n            if (success) {\r\n                finish();\r\n            } else {\r\n                mPasswordView.setError(getString(R.string.error_incorrect_password));\r\n                mPasswordView.requestFocus();\r\n            }\r\n        }\r\n\r\n        @Override\r\n        protected void onCancelled() {\r\n            mAuthTask = null;\r\n            showProgress(false);\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<ul>\r\n 	<li>分析：\r\n<ul>\r\n 	<li>方法列表：\r\n<ul>\r\n 	<li>onCreate() ——来自activity，初始化控件，事件绑定。</li>\r\n 	<li>populateAutoComplete() ——调用mayRequestContacts()，成功后调用接口（LoaderCallbacks）下面的方法</li>\r\n 	<li><strong>mayRequestContacts()</strong> ——动态获取PERMISSION_GRANTED(通讯录权限)</li>\r\n 	<li><strong>onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults)</strong> ——顾名思义是返回权限申请的结果</li>\r\n 	<li><strong>attemptLogin()</strong> ——登录事件</li>\r\n 	<li>isEmailValid(String email) ——是否是email地址的标准</li>\r\n 	<li>isPasswordValid(String password) ——是否符合密码标准</li>\r\n 	<li>showProgress(final boolean show) ——加载进度条</li>\r\n 	<li>onCreateLoader(int i, Bundle bundle) ——接口LoaderCallbacks</li>\r\n 	<li>onLoadFinished(Loader cursorLoader, Cursor cursor) ——接口LoaderCallbacks</li>\r\n 	<li>onLoaderReset(Loader cursorLoader) ——接口LoaderCallbacks</li>\r\n 	<li>addEmailsToAutoComplete(List emailAddressCollection) ——</li>\r\n</ul>\r\n</li>\r\n 	<li>内部接口：\r\n<ul>\r\n 	<li>ProfileQuery\r\n<ul>\r\n 	<li>接口内常量 String[] PROJECTION、ADDRESS、IS_PRIMARY</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n 	<li>内部类：\r\n<ul>\r\n 	<li><strong>UserLoginTask extends AsyncTask&lt;Void, Void, Boolean&gt;</strong>\r\n<ul>\r\n 	<li>构造函数：UserLoginTask(String email, String password)</li>\r\n 	<li>方法：\r\n<ul>\r\n 	<li>doInBackground(Void... params)</li>\r\n 	<li>onPostExecute(final Boolean success)</li>\r\n 	<li>onCancelled()</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n 	<li>流程梳理：\r\n<ul>\r\n 	<li>1.加载XML布局→找到mEmailView控件（email输入框）→申请通讯录权限\r\n<ul>\r\n 	<li>申请权限成功→遍历通讯录→获取主要的email→有，加载到界面、无，无操作</li>\r\n 	<li>申请权限失败→无操作</li>\r\n</ul>\r\n</li>\r\n 	<li>2.找到其他控件→事件绑定→等待用户执行操作</li>\r\n 	<li>3.操作界面→执行登录事件</li>\r\n</ul>\r\n</li>\r\n 	<li>上面我们列出了方法列表，并且将我们涉及到主体流程、较新技能等的方法均有加粗标记。</li>\r\n</ul>\r\n</li>\r\n 	<li>解析：</li>\r\n</ul>\r\n<h4>申请权限：</h4>\r\n<pre><code>  private boolean mayRequestContacts() {\r\n    //当系统版本低于android_M时，跳过权限检查\r\n    if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.M) {\r\n            return true;\r\n        }\r\n    //当系统版本大于等于android_M时，执行权限申请代码\r\n    if (checkSelfPermission(READ_CONTACTS) == PackageManager.PERMISSION_GRANTED) {\r\n    //当自身已经被允许的权限中包含了READ_CONTACTS时，返回True\r\n            return true;\r\n        }\r\n    //当自身已经被允许权限中没有READ_CONTACTS时，申请通讯录读取权限READ_CONTACTS\r\n    //shouldShowRequestPermissionRationale ==&gt; 是否需要调用系统的权限申请界面\r\n    if (shouldShowRequestPermissionRationale(READ_CONTACTS)) {\r\n        Snackbar.make(mEmailView, R.string.permission_rationale, Snackbar.LENGTH_INDEFINITE)\r\n                .setAction(android.R.string.ok, new View.OnClickListener() {\r\n                    @Override\r\n                    @TargetApi(Build.VERSION_CODES.M)\r\n                    public void onClick(View v) {\r\n                        //展示请求权限界面，第一个参数是权限数组，第二个是请求码\r\n                        requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);\r\n                    }\r\n                });\r\n        } else {\r\n            requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);\r\n        }\r\n        return false;\r\n    }\r\n</code></pre>\r\n<h4>申请权限返回的响应</h4>\r\n<pre><code>    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n    //请求码 对应上面请求的请求码\r\n    if (requestCode == REQUEST_READ_CONTACTS) {\r\n        if (grantResults.length == 1 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {    //权限申请成功\r\n            populateAutoComplete(); //读取联系人列表内的email\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<h4>登录事件</h4>\r\n<pre><code>private void attemptLogin() {\r\nif (mAuthTask != null) {    //登录信息提交的异步任务已经实例化，则无需进行操作，第一次执行attemptLogin()时，mAuthTask并未初始化\r\n    return;\r\n}\r\n\r\n// Reset errors.重设用户名和密码框的错误提示\r\nmEmailView.setError(null);  //setError方法是TextView下面的方法，主要是提示一个错误信息，内部有系统集成的错误提示图标，原理是在TextView的右边出现一个Drawable\r\nmPasswordView.setError(null);\r\n\r\n// Store values at the time of the login attempt.\r\nString email = mEmailView.getText().toString();\r\nString password = mPasswordView.getText().toString();\r\n\r\nboolean cancel = false; //是否退出执行登陆进程\r\nView focusView = null;  //焦点View，当某个输入框输入信息不符合标准时，不执行登陆进程，并锁定焦点到那个输入控件\r\n\r\n// 当用户名不为空，判断密码是否符合标准\r\nif (!TextUtils.isEmpty(password) &amp;&amp; !isPasswordValid(password)) {\r\n    mPasswordView.setError(getString(R.string.error_invalid_password));\r\n    focusView = mPasswordView;\r\n    cancel = true;\r\n}\r\n\r\n// Check for a valid email address.\r\nif (TextUtils.isEmpty(email)) {\r\n    mEmailView.setError(getString(R.string.error_field_required));\r\n    focusView = mEmailView;\r\n    cancel = true;\r\n} else if (!isEmailValid(email)) {\r\n    mEmailView.setError(getString(R.string.error_invalid_email));\r\n    focusView = mEmailView;\r\n    cancel = true;\r\n}\r\n\r\nif (cancel) {\r\n    //在上面的操作中出现错误了，不执行具体的登录，并且把焦点切换到上面去\r\n    // There was an error; don''t attempt login and focus the first\r\n    // form field with an error.\r\n    focusView.requestFocus();\r\n} else {\r\n    //开启滚动条，执行登录的异步任务\r\n    // Show a progress spinner, and kick off a background task to\r\n    // perform the user login attempt.\r\n    showProgress(true);\r\n    mAuthTask = new UserLoginTask(email, password);\r\n    mAuthTask.execute((Void) null);\r\n}\r\n</code></pre>\r\n}\r\n<h4>登录的异步任务</h4>\r\n<pre><code>public class UserLoginTask extends AsyncTask&lt;Void, Void, Boolean&gt; {\r\n\r\n    private final String mEmail;\r\n    private final String mPassword;\r\n\r\n    UserLoginTask(String email, String password) {\r\n        mEmail = email;\r\n        mPassword = password;\r\n    }\r\n\r\n    @Override\r\n    protected Boolean doInBackground(Void... params) {  //后台任务，耗时操作此处执行，该处代码执行在子线程\r\n        // TODO: attempt authentication against a network service.\r\n\r\n        try {\r\n            // Simulate network access.\r\n            Thread.sleep(2000); //模拟耗时操作\r\n        } catch (InterruptedException e) {\r\n            return false;\r\n        }\r\n\r\n        for (String credential : DUMMY_CREDENTIALS) {\r\n            String[] pieces = credential.split(":");\r\n            if (pieces[0].equals(mEmail)) {\r\n                // Account exists, return true if the password matches.\r\n                return pieces[1].equals(mPassword);\r\n            }\r\n        }\r\n\r\n        // TODO: register the new account here.\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    protected void onPostExecute(final Boolean success) {   //执行完毕耗时操作调用这里\r\n        mAuthTask = null;\r\n        showProgress(false);\r\n\r\n        if (success) {\r\n            finish();\r\n        } else {\r\n            mPasswordView.setError(getString(R.string.error_incorrect_password));\r\n            mPasswordView.requestFocus();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onCancelled() {  //退出异步任务调用这里\r\n        mAuthTask = null;\r\n        showProgress(false);\r\n    }\r\n}\r\n</code></pre>\r\n<ul>\r\n 	<li>关于<a href="http://www.cnblogs.com/devinzhang/archive/2012/02/13/2350070.html">更多AsyncTask资料点击查看</a></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<h3>总结：</h3>\r\n<ul>\r\n 	<li>TextInputLayout，这个控件包含EditText后，会产生提示文字的动画效果，且提示文字不会消失。</li>\r\n 	<li>纵向布局中，为了保证界面能完整展示，最好在外层套上ScrollView。</li>\r\n 	<li>一个简单的登录流程，耗时操作不能在主线程执行，AsyncTask异步任务执行完毕后，会回归主线程。</li>\r\n 	<li>需要数据交互的地方，数据需要做效验。</li>\r\n 	<li>（重点）android6.0以及以后加入了权限申请，我们这里是动态权限申请，也是最容易被用户接受的。</li>\r\n 	<li>整个登陆界面的业务流程。</li>\r\n</ul>', '从登陆模版学习，Google Android Templates（一）', '', 'inherit', 'closed', 'closed', '', '209-revision-v1', '', '', '2016-07-20 16:28:37', '2016-07-20 08:28:37', '', 209, 'http://acheng1314.cn/?p=212', 0, 'revision', '', 0),
(214, 1, '2016-09-10 21:28:10', '2016-09-10 13:28:10', '', 'DAO设计模型', '', 'inherit', 'open', 'closed', '', 'dao%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%9e%8b', '', '', '2016-09-10 21:28:10', '2016-09-10 13:28:10', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/09/DAO设计模型.png', 0, 'attachment', 'image/png', 0),
(215, 1, '2016-09-16 01:14:35', '2016-09-15 17:14:35', '', 'maven新建WebApp项目第一步', '', 'inherit', 'open', 'closed', '', 'maven%e6%96%b0%e5%bb%bawebapp%e9%a1%b9%e7%9b%ae%e7%ac%ac%e4%b8%80%e6%ad%a5', '', '', '2016-09-16 01:14:35', '2016-09-15 17:14:35', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/09/maven新建WebApp项目第一步.png', 0, 'attachment', 'image/png', 0),
(216, 1, '2016-09-16 01:25:14', '2016-09-15 17:25:14', '', 'maven新建WebApp项目第二步', '', 'inherit', 'open', 'closed', '', 'maven%e6%96%b0%e5%bb%bawebapp%e9%a1%b9%e7%9b%ae%e7%ac%ac%e4%ba%8c%e6%ad%a5', '', '', '2016-09-16 01:25:14', '2016-09-15 17:25:14', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/09/maven新建WebApp项目第二步.png', 0, 'attachment', 'image/png', 0),
(218, 1, '2016-09-16 01:38:51', '2016-09-15 17:38:51', '', 'maven新建WebApp项目第三步', '', 'inherit', 'open', 'closed', '', 'maven%e6%96%b0%e5%bb%bawebapp%e9%a1%b9%e7%9b%ae%e7%ac%ac%e4%b8%89%e6%ad%a5', '', '', '2016-09-16 01:38:51', '2016-09-15 17:38:51', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/09/maven新建WebApp项目第三步.png', 0, 'attachment', 'image/png', 0),
(219, 1, '2016-09-16 01:46:25', '2016-09-15 17:46:25', '', 'maven新建WebApp项目第四步', '', 'inherit', 'open', 'closed', '', 'maven%e6%96%b0%e5%bb%bawebapp%e9%a1%b9%e7%9b%ae%e7%ac%ac%e5%9b%9b%e6%ad%a5', '', '', '2016-09-16 01:46:25', '2016-09-15 17:46:25', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/09/maven新建WebApp项目第四步.png', 0, 'attachment', 'image/png', 0),
(220, 1, '2016-09-16 02:06:26', '2016-09-15 18:06:26', '', 'maven新建WebApp项目完成后的自动导入提示框', '', 'inherit', 'open', 'closed', '', 'maven%e6%96%b0%e5%bb%bawebapp%e9%a1%b9%e7%9b%ae%e5%ae%8c%e6%88%90%e5%90%8e%e7%9a%84%e8%87%aa%e5%8a%a8%e5%af%bc%e5%85%a5%e6%8f%90%e7%a4%ba%e6%a1%86', '', '', '2016-09-16 02:06:26', '2016-09-15 18:06:26', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/09/maven新建WebApp项目完成后的自动导入提示框.png', 0, 'attachment', 'image/png', 0),
(221, 1, '2016-09-16 02:35:08', '2016-09-15 18:35:08', '', 'maven新建WebApp项目完成后的目录结构', '', 'inherit', 'open', 'closed', '', 'maven%e6%96%b0%e5%bb%bawebapp%e9%a1%b9%e7%9b%ae%e5%ae%8c%e6%88%90%e5%90%8e%e7%9a%84%e7%9b%ae%e5%bd%95%e7%bb%93%e6%9e%84', '', '', '2016-09-16 02:35:08', '2016-09-15 18:35:08', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/09/maven新建WebApp项目完成后的目录结构.png', 0, 'attachment', 'image/png', 0),
(223, 1, '2016-09-16 02:41:17', '2016-09-15 18:41:17', '', 'WebApp项目整合框架前的目录结构', '', 'inherit', 'open', 'closed', '', 'webapp%e9%a1%b9%e7%9b%ae%e6%95%b4%e5%90%88%e6%a1%86%e6%9e%b6%e5%89%8d%e7%9a%84%e7%9b%ae%e5%bd%95%e7%bb%93%e6%9e%84', '', '', '2016-09-16 02:41:17', '2016-09-15 18:41:17', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/09/WebApp项目整合框架前的目录结构.png', 0, 'attachment', 'image/png', 0),
(224, 1, '2016-09-16 13:28:58', '2016-09-16 05:28:58', '', 'WebApp目录调整第一步创建java源代码目录', '', 'inherit', 'open', 'closed', '', 'webapp%e7%9b%ae%e5%bd%95%e8%b0%83%e6%95%b4%e7%ac%ac%e4%b8%80%e6%ad%a5%e5%88%9b%e5%bb%bajava%e6%ba%90%e4%bb%a3%e7%a0%81%e7%9b%ae%e5%bd%95', '', '', '2016-09-16 13:28:58', '2016-09-16 05:28:58', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/09/WebApp目录调整第一步创建java源代码目录.png', 0, 'attachment', 'image/png', 0),
(225, 1, '2016-09-16 13:33:56', '2016-09-16 05:33:56', '', 'WebApp目录调整第二步标记java目录为资源目录', '', 'inherit', 'open', 'closed', '', 'webapp%e7%9b%ae%e5%bd%95%e8%b0%83%e6%95%b4%e7%ac%ac%e4%ba%8c%e6%ad%a5%e6%a0%87%e8%ae%b0java%e7%9b%ae%e5%bd%95%e4%b8%ba%e8%b5%84%e6%ba%90%e7%9b%ae%e5%bd%95', '', '', '2016-09-16 13:33:56', '2016-09-16 05:33:56', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/09/WebApp目录调整第二步标记java目录为资源目录.png', 0, 'attachment', 'image/png', 0),
(226, 1, '2016-09-16 14:40:09', '2016-09-16 06:40:09', '', '基本的spring配置和druid配置后截图', '', 'inherit', 'open', 'closed', '', '%e5%9f%ba%e6%9c%ac%e7%9a%84spring%e9%85%8d%e7%bd%ae%e5%92%8cdruid%e9%85%8d%e7%bd%ae%e5%90%8e%e6%88%aa%e5%9b%be', '', '', '2016-09-16 14:40:09', '2016-09-16 06:40:09', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/09/基本的spring配置和druid配置后截图.png', 0, 'attachment', 'image/png', 0),
(227, 1, '2016-09-16 14:58:00', '2016-09-16 06:58:00', '', 'ssm框架整合完毕截图', '', 'inherit', 'open', 'closed', '', 'ssm%e6%a1%86%e6%9e%b6%e6%95%b4%e5%90%88%e5%ae%8c%e6%af%95%e6%88%aa%e5%9b%be', '', '', '2016-09-16 14:58:00', '2016-09-16 06:58:00', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/09/ssm框架整合完毕截图.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(228, 1, '2016-09-16 15:39:23', '2016-09-16 07:39:23', '<p data-source-line="2">手把手教你整合最优雅SSM框架：SpringMVC + Spring + MyBatis</p>\r\n\r\n<ul data-source-line="3">\r\n 	<li>前面网友说我为啥很久不更新博客了,我告诉他们我准备潜修.其实是我的博客被人批评是在记流水账(<sub>一脸尴尬</sub>).</li>\r\n 	<li>再次安利一波,博客地址:<a href="http://acheng1314.cn/">acheng1314.cn</a></li>\r\n 	<li>本文中的图片用了个人服务器存储,网速较慢,各位老司机耐心等待.</li>\r\n</ul>\r\n<h4 data-source-line="7">工具</h4>\r\n<ul data-source-line="8">\r\n 	<li>IDE为<strong>idea15</strong></li>\r\n 	<li>JDK环境为<strong>1.8</strong></li>\r\n 	<li>maven版本为<strong>maven3</strong></li>\r\n</ul>\r\n<h4 data-source-line="12">目标</h4>\r\n<ul data-source-line="13">\r\n 	<li>完成基本的SpringMVC + Spring + MyBatis框架整合</li>\r\n 	<li>数据库使用mysql</li>\r\n 	<li>加入阿里巴巴的druid数据库连接池</li>\r\n 	<li>使用gson作为json解析工具</li>\r\n 	<li>实现日志输出</li>\r\n 	<li>maven依赖的版本管理</li>\r\n</ul>\r\n<h4 data-source-line="20">优点</h4>\r\n<pre data-source-line="21"><code class="hljs">此处省略若干字,观众们请脑补.</code></pre>\r\n\r\n<hr />\r\n\r\n<h4 data-source-line="27">SSM框架整合配置</h4>\r\n<p data-source-line="29">前面说了这么多,现在开始正式的干货.</p>\r\n\r\n<h5 data-source-line="31">第一步: 使用idea的maven创建一个基本的web工程.</h5>\r\n<ul data-source-line="32">\r\n 	<li>打开Idea在欢迎界面选择创建一个新的Project或者是(在菜单界面选择:New→Project),这是会出现一个界面如下图所示:</li>\r\n</ul>\r\n<p data-source-line="34"><img src="http://acheng1314.cn/wp-content/uploads/2016/09/maven%E6%96%B0%E5%BB%BAWebApp%E9%A1%B9%E7%9B%AE%E7%AC%AC%E4%B8%80%E6%AD%A5.png" alt="maven新建WebApp项目第一步" /></p>\r\n\r\n<ul data-source-line="36">\r\n 	<li>如上图所示,我们需要勾选的地方已经使用红色框标注出来.\r\n<ul>\r\n 	<li>最左边的是<strong>maven</strong>,是我们需要使用的项目构建工具.</li>\r\n 	<li>勾选右边上面的<strong>Create from archetype</strong>,我们才能在下面选择我们需要构建成什么类型的项目.</li>\r\n 	<li>接着我们选中<strong>maven-archetype-webapp</strong>,这时候我们的项目类型就确定为是web项目.</li>\r\n 	<li>需要注意一点,我上面图中没标注出来的<strong>Project SDK</strong>,这里是选择我们开发的JDK版本.</li>\r\n</ul>\r\n</li>\r\n 	<li>点击next后,如下图所示:</li>\r\n</ul>\r\n<p data-source-line="44"><img src="http://acheng1314.cn/wp-content/uploads/2016/09/maven%E6%96%B0%E5%BB%BAWebApp%E9%A1%B9%E7%9B%AE%E7%AC%AC%E4%BA%8C%E6%AD%A5.png" alt="maven新建WebApp项目第二步" /></p>\r\n\r\n<ul data-source-line="46">\r\n 	<li>上面图中,我们需要注意地方如下:\r\n<ul>\r\n 	<li><strong>GroupId</strong>也就是我们常说的组织ID,也可以理解为我们<strong>应用程序的包名</strong></li>\r\n 	<li><strong>ArtifactId</strong>是我们常说的产品名称(同一个组织下面可以有多个产品),也可以当作是我们的<strong>当前项目名称</strong></li>\r\n 	<li><strong>Version</strong>顾名思义就是版本号</li>\r\n 	<li>最下面的红色框中,Previous==&gt;返回上一步,Next==&gt;下一步,Cancel==&gt;取消,Help==&gt;帮助</li>\r\n</ul>\r\n</li>\r\n 	<li>接下来,我们继续点击Next后,如下图所示:</li>\r\n</ul>\r\n<p data-source-line="54"><img src="http://acheng1314.cn/wp-content/uploads/2016/09/maven%E6%96%B0%E5%BB%BAWebApp%E9%A1%B9%E7%9B%AE%E7%AC%AC%E4%B8%89%E6%AD%A5.png" alt="maven新建WebApp项目第三步" /></p>\r\n\r\n<ul data-source-line="56">\r\n 	<li>上面途中没啥好说的,圈出来部分就是我们的<strong>Maven目录</strong>.继续next后,如下图所示:</li>\r\n</ul>\r\n<p data-source-line="58"><img src="http://acheng1314.cn/wp-content/uploads/2016/09/maven%E6%96%B0%E5%BB%BAWebApp%E9%A1%B9%E7%9B%AE%E7%AC%AC%E5%9B%9B%E6%AD%A5.png" alt="maven新建WebApp项目第四步" /></p>\r\n\r\n<ul data-source-line="60">\r\n 	<li>上面选中部分,<strong>Project name</strong>为<strong>项目名称</strong>,<strong>Project location</strong>是项目的<strong>存储位置</strong>(<sub>右边的省略号意味着可以选择位置</sub>).</li>\r\n 	<li>接下来我们<strong>点击Finish</strong>,我们新建基本的web项目的步骤就完成了.</li>\r\n 	<li>这时候在Idea主窗口的右下角部分,我们可以看到一个滚动条在执行,说明我们的项目正在build中.右上角有一个提示框如下图所示:</li>\r\n</ul>\r\n<p data-source-line="64"><img src="http://acheng1314.cn/wp-content/uploads/2016/09/maven%E6%96%B0%E5%BB%BAWebApp%E9%A1%B9%E7%9B%AE%E5%AE%8C%E6%88%90%E5%90%8E%E7%9A%84%E8%87%AA%E5%8A%A8%E5%AF%BC%E5%85%A5%E6%8F%90%E7%A4%BA%E6%A1%86.png" alt="maven新建WebApp项目完成后的自动导入提示框" /></p>\r\n\r\n<ul data-source-line="66">\r\n 	<li>这个提示框大概意思是:Maven项目需要被导入.我建议勾选:<strong>Enable Auto-Import</strong>(<sub>自动导入</sub>)</li>\r\n</ul>\r\n<p data-source-line="68">此处,使用Idea创建一个<strong>Maven依赖的基本的WebApp项目</strong>已经完成.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h4 data-source-line="71">框架整合前的准备工作.</h4>\r\n<ul data-source-line="72">\r\n 	<li>整理项目文件组织结构.\r\n<ul>\r\n 	<li>通过观察目录结构,我们可以发现,需要的目录不齐全,我们需要手动补齐.初始结构图如下:\r\n\r\n<img src="http://acheng1314.cn/wp-content/uploads/2016/09/maven%E6%96%B0%E5%BB%BAWebApp%E9%A1%B9%E7%9B%AE%E5%AE%8C%E6%88%90%E5%90%8E%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="maven新建WebApp项目完成后的目录结构" /></li>\r\n 	<li>我们需要的主体结构图应如下:\r\n\r\n<img src="http://acheng1314.cn/wp-content/uploads/2016/09/WebApp%E9%A1%B9%E7%9B%AE%E6%95%B4%E5%90%88%E6%A1%86%E6%9E%B6%E5%89%8D%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="WebApp项目整合框架前的目录结构" />\r\n<h4>需要的主体结构目录解释:</h4>\r\n\r\n<hr />\r\n\r\n<table>\r\n<thead>\r\n<tr>\r\n<th>目录名称</th>\r\n<th>说明</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>src</td>\r\n<td>源码、资源等文件的根目录</td>\r\n</tr>\r\n<tr>\r\n<td>↓ main</td>\r\n<td>项目开发主要目录之一,可以放java代码和一些资源文件.</td>\r\n</tr>\r\n<tr>\r\n<td>↓↓java</td>\r\n<td>开发的主要的java代码存放目录</td>\r\n</tr>\r\n<tr>\r\n<td>↓↓↓cn.acheng1314</td>\r\n<td>我的应用程序的包名</td>\r\n</tr>\r\n<tr>\r\n<td>↓↓resources</td>\r\n<td>开发中的主要的资源文件存放目录</td>\r\n</tr>\r\n<tr>\r\n<td>↓↓sql</td>\r\n<td>开发中主要的sql语句文件存放目录</td>\r\n</tr>\r\n<tr>\r\n<td>↓↓webapp</td>\r\n<td>web页面和其他web配置、资源文件存放目录</td>\r\n</tr>\r\n<tr>\r\n<td>↓ test</td>\r\n<td>项目开发中的测试模块存放路径,包含java代码和资源文件.</td>\r\n</tr>\r\n<tr>\r\n<td>↓↓java</td>\r\n<td>测试代码存放目录</td>\r\n</tr>\r\n<tr>\r\n<td>↓↓resources</td>\r\n<td>测试资源文件存放目录</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n 	<li>配置目录:\r\n<ul>\r\n 	<li>创建main目录下的java目录(用于存放java源代码)\r\n\r\n<img src="http://acheng1314.cn/wp-content/uploads/2016/09/WebApp%E7%9B%AE%E5%BD%95%E8%B0%83%E6%95%B4%E7%AC%AC%E4%B8%80%E6%AD%A5%E5%88%9B%E5%BB%BAjava%E6%BA%90%E4%BB%A3%E7%A0%81%E7%9B%AE%E5%BD%95.png" alt="WebApp目录调整第一步创建java源代码目录" />\r\n\r\n我们先<strong>右键点击main目录</strong>,接着选中<strong>New</strong>→<strong>Directory</strong>,在弹出的对话框中输入java.</li>\r\n 	<li>接着我们需要把java目录标记为源文目录.\r\n\r\n<img src="http://acheng1314.cn/wp-content/uploads/2016/09/WebApp%E7%9B%AE%E5%BD%95%E8%B0%83%E6%95%B4%E7%AC%AC%E4%BA%8C%E6%AD%A5%E6%A0%87%E8%AE%B0java%E7%9B%AE%E5%BD%95%E4%B8%BA%E8%B5%84%E6%BA%90%E7%9B%AE%E5%BD%95.png" alt="WebApp目录调整第二步标记java目录为资源目录" />\r\n\r\n我们先<strong>右键点击java</strong>,然后选择<strong>Mark Directory As</strong>→<strong>Sources Root</strong>\r\n\r\n接着我们在src目录下创建test目录(注意: <strong>test目录和main目录同级</strong>),以及test下面的java和resources目录,分别标记为源文件目录和资源文件目录\r\n\r\n<strong>值得注意的是sql目录为普通文件目录</strong></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n 	<li>根据目标明白我们<strong>需要哪些支援库</strong>,具体结果如下:</li>\r\n</ul>\r\n<pre data-source-line="113"><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-title">project</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attribute">xmlns:xsi</span>=<span class="hljs-value">"http://www.w3.org/2001/XMLSchema-instance"</span>\r\n         <span class="hljs-attribute">xsi:schemaLocation</span>=<span class="hljs-value">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-title">modelVersion</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>cn.acheng1314<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 对应前面设置的GroupId --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>SSM_LOG<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>   <span class="hljs-comment">&lt;!-- 前面设置的artifactId--&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-title">packaging</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 打包方式war --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span> <span class="hljs-comment">&lt;!-- 版本号 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>SSM_LOG Maven Webapp<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span> <span class="hljs-comment">&lt;!-- 显示名字 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">url</span>&gt;</span>http://maven.apache.org<span class="hljs-tag">&lt;/<span class="hljs-title">url</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">dependencies</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 远程依赖库 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-title">scope</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 1.日志 --&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&amp;lt;!&amp;ndash; 实现slf4j接口并整合 &amp;ndash;&amp;gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;dependency&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;artifactId&gt;logback-classic&lt;/artifactId&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;version&gt;1.1.1&lt;/version&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;/dependency&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--log4j2支持--&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${org.apache.logging.log4j.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>log4j-api<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${org.apache.logging.log4j.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n\r\n\r\n        <span class="hljs-comment">&lt;!-- 2.数据库 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${mysql.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-title">scope</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!--druid==&gt;阿里巴巴数据库连接池--&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${com.alibaba.druid.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;dependency&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;groupId&gt;c3p0&lt;/groupId&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;artifactId&gt;c3p0&lt;/artifactId&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;version&gt;0.9.1.2&lt;/version&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;/dependency&gt;--&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- DAO: MyBatis --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${com.mybatis.mybatis.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${com.mybatis.mybatis_spring.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- 3.Servlet web --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!--json工具--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;dependency&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;version&gt;2.5.4&lt;/version&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;/dependency&gt;--&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>com.google.code.gson<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>gson<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${com.google.gson.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!--Servlet版本设置--&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${javax.servlet.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- 4.Spring --&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 1)Spring核心 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${org.springframework.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${org.springframework.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${org.springframework.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 2)Spring DAO层 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${org.springframework.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${org.springframework.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 3)Spring web --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${org.springframework.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${org.springframework.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 4)Spring test --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${org.springframework.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- redis客户端:Jedis --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${redis.clients.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>com.dyuproject.protostuff<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>protostuff-core<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${com.dyuproject.protostuff.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>com.dyuproject.protostuff<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>protostuff-runtime<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${com.dyuproject.protostuff.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- Map工具类 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!--文件上传工具--&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">dependencies</span>&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!-- 配置可变版本号,也就是常说的版本管理 （Spring、SpringMvc、Mybatis、Gson、Druid） --&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 要针对某个依赖进行升级的时候只需要更改下面对应的版本号 --&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 在上面使用版本号的时候需要用固定格式,如: ${包名.version} --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">properties</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">org.apache.logging.log4j.version</span>&gt;</span>2.6.2<span class="hljs-tag">&lt;/<span class="hljs-title">org.apache.logging.log4j.version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">mysql.version</span>&gt;</span>5.1.37<span class="hljs-tag">&lt;/<span class="hljs-title">mysql.version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">com.alibaba.druid.version</span>&gt;</span>1.0.25<span class="hljs-tag">&lt;/<span class="hljs-title">com.alibaba.druid.version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">com.mybatis.mybatis.version</span>&gt;</span>3.4.1<span class="hljs-tag">&lt;/<span class="hljs-title">com.mybatis.mybatis.version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">com.mybatis.mybatis_spring.version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-title">com.mybatis.mybatis_spring.version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">com.google.gson.version</span>&gt;</span>2.7<span class="hljs-tag">&lt;/<span class="hljs-title">com.google.gson.version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">javax.servlet.version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-title">javax.servlet.version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">org.springframework.version</span>&gt;</span>4.3.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-title">org.springframework.version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">redis.clients.version</span>&gt;</span>2.7.3<span class="hljs-tag">&lt;/<span class="hljs-title">redis.clients.version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">com.dyuproject.protostuff.version</span>&gt;</span>1.0.8<span class="hljs-tag">&lt;/<span class="hljs-title">com.dyuproject.protostuff.version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">developer.organization</span>&gt;</span><span class="hljs-cdata">&lt;![CDATA[scengine]]&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">developer.organization</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">properties</span>&gt;</span>\r\n    \r\n    <span class="hljs-comment">&lt;!-- 构建项目的最终名称 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">build</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">finalName</span>&gt;</span>SSM_LOG<span class="hljs-tag">&lt;/<span class="hljs-title">finalName</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">build</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">project</span>&gt;</span></code></pre>\r\n\r\n<hr />\r\n\r\n<h4 data-source-line="319">整合框架</h4>\r\n<p data-source-line="321">在上面,我们已经把基本的目录配置好了,现在我们在已经依赖了项目支援库,接下来我们需要做的是开始<strong>整合Spring+SpringMvc+Mybatis</strong></p>\r\n<p data-source-line="323">我们先<strong>打开webapp目录下面的WEB-INF目录中的web.xml文件</strong>,web.xml文件是整合web项目的配置中心.我们在web.xml中加入如下内容:</p>\r\n\r\n<pre data-source-line="325"><code class="hljs"><span class="hljs-doctype">&lt;!DOCTYPE web-app PUBLIC\r\n        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"\r\n        "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">web-app</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"http://xmlns.jcp.org/xml/ns/javaee"</span> <span class="hljs-attribute">xmlns:xsi</span>=<span class="hljs-value">"http://www.w3.org/2001/XMLSchema-instance"</span>\r\n         <span class="hljs-attribute">xsi:schemaLocation</span>=<span class="hljs-value">"http://xmlns.jcp.org/xml/ns/javaee\r\n                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span>\r\n         <span class="hljs-attribute">version</span>=<span class="hljs-value">"3.1"</span> <span class="hljs-attribute">metadata-complete</span>=<span class="hljs-value">"true"</span>&gt;</span>\r\n         \r\n    <span class="hljs-comment">&lt;!--默认的首页--&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file-list</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>index.html<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>index.htm<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>index.jsp<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>default.html<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>default.htm<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>default.jsp<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file-list</span>&gt;</span>\r\n    \r\n    <span class="hljs-comment">&lt;!-- 如果是用maven命令生成的xml，需要修改servlet版本为3.1 --&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 配置DispatcherServlet --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">servlet</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">display-name</span>&gt;</span>SSM_LOG<span class="hljs-tag">&lt;/<span class="hljs-title">display-name</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 项目名称 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>mvc-dispatcher<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span> <span class="hljs-comment">&lt;!-- mvc调度器 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-class</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 配置springMVC需要加载的配置文件\r\n            spring-dao.xml,spring-service.xml,spring-web.xml\r\n            Mybatis - &gt; spring -&gt; springmvc\r\n         --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>classpath:spring/spring-*.xml<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">servlet</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>mvc-dispatcher<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 默认匹配所有的静态资源,此处配置出错,会产生错误500 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/js/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/css/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/images/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/fonts/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!--druid ==&gt; WEB方式监控配置--&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">servlet</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>DruidStatView<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">servlet-class</span>&gt;</span>com.alibaba.druid.support.http.StatViewServlet<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-class</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">servlet</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>DruidStatView<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/druid/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">filter</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">filter-name</span>&gt;</span>druidWebStatFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-name</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">filter-class</span>&gt;</span>com.alibaba.druid.support.http.WebStatFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-class</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>exclusions<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>/public/*,*.js,*.css,/druid*,*.jsp,*.swf<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>principalSessionName<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>sessionInfo<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>profileEnable<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">filter</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">filter-mapping</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">filter-name</span>&gt;</span>druidWebStatFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-name</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">filter-mapping</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">web-app</span>&gt;</span></code></pre>\r\n<h4 data-source-line="401">快捷生成spring目录</h4>\r\n<ul data-source-line="402">\r\n 	<li>在上面的<code>&lt;param-value&gt;classpath:spring/spring-*.xml&lt;/param-value&gt;</code>处,我们选中前面一个spring,按下Alt+Enter自动生成spring目录.</li>\r\n 	<li>spring目录位于src→main→resources下.</li>\r\n</ul>\r\n<h4 data-source-line="405">在spring目录下创建spring相关的控制文件</h4>\r\n<ul data-source-line="406">\r\n 	<li>spring-dao.xml\r\n<pre data-source-line="407"><code class="hljs"><span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">beans</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans"</span>\r\n       <span class="hljs-attribute">xmlns:xsi</span>=<span class="hljs-value">"http://www.w3.org/2001/XMLSchema-instance"</span>\r\n       <span class="hljs-attribute">xmlns:context</span>=<span class="hljs-value">"http://www.springframework.org/schema/context"</span>\r\n       <span class="hljs-attribute">xsi:schemaLocation</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans\r\n    http://www.springframework.org/schema/beans/spring-beans.xsd\r\n    http://www.springframework.org/schema/context\r\n    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 配置整合mybatis过程 --&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 1.配置数据库相关参数properties的属性：${url} --&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 使用数据库配置文件解耦 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">context:property-placeholder</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"classpath:jdbc.properties"</span>/&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!-- 下面的druid配置都是基本配置,具体优化设置可以上网查询,也可以去github上面直接搜索druid --&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 2.数据库连接池 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"dataSource"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"com.alibaba.druid.pool.DruidDataSource"</span>\r\n          <span class="hljs-attribute">init-method</span>=<span class="hljs-value">"init"</span> <span class="hljs-attribute">destroy-method</span>=<span class="hljs-value">"close"</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 配置连接池属性 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"driverClassName"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"${jdbc.driver}"</span>/&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"url"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"${jdbc.url}"</span>/&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"username"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"${jdbc.username}"</span>/&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"password"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"${jdbc.password}"</span>/&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"initialSize"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"1"</span> /&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"minIdle"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"1"</span> /&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"maxActive"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"10"</span> /&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"maxWait"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"10000"</span> /&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"timeBetweenEvictionRunsMillis"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"60000"</span> /&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"minEvictableIdleTimeMillis"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"300000"</span> /&gt;</span>\r\n\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"testWhileIdle"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"true"</span> /&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- 这里建议配置为TRUE，防止取到的连接不可用 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"testOnBorrow"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"true"</span> /&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"testOnReturn"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"false"</span> /&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"poolPreparedStatements"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"true"</span> /&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"maxPoolPreparedStatementPerConnectionSize"</span>\r\n                  <span class="hljs-attribute">value</span>=<span class="hljs-value">"20"</span> /&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- 这里配置提交方式，默认就是TRUE，可以不用配置 --&gt;</span>\r\n\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"defaultAutoCommit"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"true"</span> /&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- 验证连接有效与否的SQL，不同的数据配置不同 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"validationQuery"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"select 1 "</span> /&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"filters"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"stat"</span> /&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"proxyFilters"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">list</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">ref</span> <span class="hljs-attribute">bean</span>=<span class="hljs-value">"logFilter"</span> /&gt;</span>\r\n            <span class="hljs-tag">&lt;/<span class="hljs-title">list</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"sqlSessionFactory"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 注入数据库连接池 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"dataSource"</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"dataSource"</span>/&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"configLocation"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"classpath:mybatis-config.xml"</span>/&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 扫描entity包 使用别名 --&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- cn.acheng1314是我的应用程序的包名,你们需要使用你们自己的包名,也就是前面我们提到过的GroupId --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"typeAliasesPackage"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"cn.acheng1314.domain"</span>/&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"mapperLocations"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"classpath:mapper/*.xml"</span>/&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 注入sqlSessionFactory --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"sqlSessionFactoryBeanName"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"sqlSessionFactory"</span>/&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"basePackage"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"cn.acheng1314.dao"</span>/&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!-- 上面的druid的配置 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"logFilter"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"com.alibaba.druid.filter.logging.Slf4jLogFilter"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"statementExecutableSqlLogEnable"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"false"</span> /&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">beans</span>&gt;</span></code></pre>\r\n</li>\r\n</ul>\r\n<p data-source-line="498">上面的配置中,肯定会出现报错的情况,这时候我们只需要选中报错的地方按下Alt+Enter就能生成相关的资源.</p>\r\n\r\n<ul data-source-line="500">\r\n 	<li>spring-service.xml\r\n<pre data-source-line="501"><code class="hljs"><span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">beans</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans"</span>\r\n       <span class="hljs-attribute">xmlns:xsi</span>=<span class="hljs-value">"http://www.w3.org/2001/XMLSchema-instance"</span>\r\n       <span class="hljs-attribute">xmlns:context</span>=<span class="hljs-value">"http://www.springframework.org/schema/context"</span>\r\n       <span class="hljs-attribute">xmlns:tx</span>=<span class="hljs-value">"http://www.springframework.org/schema/tx"</span>\r\n       <span class="hljs-attribute">xsi:schemaLocation</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans\r\n    http://www.springframework.org/schema/beans/spring-beans.xsd\r\n    http://www.springframework.org/schema/context\r\n    http://www.springframework.org/schema/context/spring-context.xsd\r\n    http://www.springframework.org/schema/tx\r\n    http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span>\r\n    \r\n    <span class="hljs-comment">&lt;!-- 扫描service包下所有使用注解的类型 --&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- cn.acheng1314为我们应用的包名,当然也是我们前面提到过的GroupId --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">context:component-scan</span> <span class="hljs-attribute">base-package</span>=<span class="hljs-value">"cn.acheng1314.service"</span> /&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!-- 配置事务管理器 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"transactionManager"</span>\r\n          <span class="hljs-attribute">class</span>=<span class="hljs-value">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 注入数据库连接池 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"dataSource"</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"dataSource"</span> /&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!-- 配置基于注解的声明式事务 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">tx:annotation-driven</span> <span class="hljs-attribute">transaction-manager</span>=<span class="hljs-value">"transactionManager"</span> /&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">beans</span>&gt;</span></code></pre>\r\n</li>\r\n</ul>\r\n<p data-source-line="530">上面的配置中,肯定会出现报错的情况,这时候我们只需要选中报错的地方按下Alt+Enter就能生成相关的资源.</p>\r\n<p data-source-line="532"><strong>基本的spring系列和druid</strong>已经配置完毕. 接着我们需要解决上面自动生成的一些问题.基本配置截图如下:</p>\r\n<p data-source-line="534"><img src="http://acheng1314.cn/wp-content/uploads/2016/09/%E5%9F%BA%E6%9C%AC%E7%9A%84spring%E9%85%8D%E7%BD%AE%E5%92%8Cdruid%E9%85%8D%E7%BD%AE%E5%90%8E%E6%88%AA%E5%9B%BE.png" alt="基本的spring配置和druid配置后截图" /></p>\r\n<p data-source-line="536">现在我们会发现我们的jdbc.properties和mybatis-config.xml文件都是空的,我们需要继续写入内容.</p>\r\n<p data-source-line="538">jdbc.properties是数据库连接的配置文件.如下:</p>\r\n\r\n<pre data-source-line="540"><code class="hljs">jdbc.driver=com<span class="hljs-class">.mysql</span><span class="hljs-class">.jdbc</span><span class="hljs-class">.Driver</span>\r\njdbc.url=jdbc:mysql:<span class="hljs-comment">//localhost:3307/wordpress?useUnicode=true&amp;characterEncoding=utf8</span>\r\njdbc.username=数据库用户名\r\njdbc.password=数据库用户名对应的密码</code></pre>\r\n<p data-source-line="547">上面的jdbc.driver为数据库连接的驱动,jdbc.url为数据库的连接地址.</p>\r\n<p data-source-line="549">mybatis-config.xml 顾名思义是mybatis的配置文件,如下:</p>\r\n\r\n<pre data-source-line="551"><code class="hljs"><span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span>\r\n<span class="hljs-doctype">&lt;!DOCTYPE configuration\r\n        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"\r\n        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">configuration</span>&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 配置全局属性 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">settings</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 使用jdbc的getGeneratedKeys获取数据库自增主键值 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">setting</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"useGeneratedKeys"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"true"</span> /&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- 使用列别名替换列名 默认:true --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">setting</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"useColumnLabel"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"true"</span> /&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- 开启驼峰命名转换:Table{create_time} -&gt; Entity{createTime} --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">setting</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"mapUnderscoreToCamelCase"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"true"</span> /&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">settings</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">configuration</span>&gt;</span></code></pre>\r\n<p data-source-line="571">配置完成上面的东西后,大体需要的我们已经完成了.但是,我们会看到我们的日志记录还没有配置,上面我们采用了log4j2,通过查看官网文档,我们发现只需要在资源目录下面添加一个默认的配置文件即可,如下:</p>\r\n<p data-source-line="573">配置文件文件名: <strong>log4j2.xml</strong> , 存放目录为<strong>src</strong>→<strong>main</strong>→<strong>resources</strong></p>\r\n\r\n<pre data-source-line="574"><code class="hljs"><span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>\r\n<span class="hljs-comment">&lt;!-- status=debug 可以查看log4j的装配过程 --&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">configuration</span> <span class="hljs-attribute">status</span>=<span class="hljs-value">"off"</span> <span class="hljs-attribute">monitorInterval</span>=<span class="hljs-value">"1800"</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">properties</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!--日志目录--&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"LOG_HOME"</span>&gt;</span>/logs/webLog<span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 日志备份目录 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"BACKUP_HOME"</span>&gt;</span>{LOG_HOME}/backup<span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"STAT_NAME"</span>&gt;</span>stat<span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"SERVER_NAME"</span>&gt;</span>global<span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">properties</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">appenders</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 定义控制台输出 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">Console</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"Console"</span> <span class="hljs-attribute">target</span>=<span class="hljs-value">"SYSTEM_OUT"</span> <span class="hljs-attribute">follow</span>=<span class="hljs-value">"true"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">PatternLayout</span> <span class="hljs-attribute">pattern</span>=<span class="hljs-value">"%date{yyyy-MM-dd HH:mm:ss.SSS} %level [%thread][%file:%line] - %msg%n"</span>/&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">Console</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 程序员调试日志 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">RollingRandomAccessFile</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"DevLog"</span> <span class="hljs-attribute">fileName</span>=<span class="hljs-value">"${LOG_HOME}/${SERVER_NAME}"</span>\r\n                                 <span class="hljs-attribute">filePattern</span>=<span class="hljs-value">"${LOG_HOME}/${SERVER_NAME}.%d{yyyy-MM-dd-HH}.log"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">PatternLayout</span> <span class="hljs-attribute">pattern</span>=<span class="hljs-value">"%date{yyyy-MM-dd HH:mm:ss.SSS} %level [%thread][%file:%line] - %msg%n"</span>/&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">Policies</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">TimeBasedTriggeringPolicy</span> <span class="hljs-attribute">interval</span>=<span class="hljs-value">"1"</span> <span class="hljs-attribute">modulate</span>=<span class="hljs-value">"true"</span>/&gt;</span>\r\n            <span class="hljs-tag">&lt;/<span class="hljs-title">Policies</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">RollingRandomAccessFile</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 游戏产品数据分析日志 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">RollingRandomAccessFile</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"ProductLog"</span>\r\n                                 <span class="hljs-attribute">fileName</span>=<span class="hljs-value">"${LOG_HOME}/${SERVER_NAME}_${STAT_NAME}"</span>\r\n                                 <span class="hljs-attribute">filePattern</span>=<span class="hljs-value">"${LOG_HOME}/${SERVER_NAME}_${STAT_NAME}.%d{yyyy-MM-dd-HH}.log"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">PatternLayout</span>\r\n                    <span class="hljs-attribute">pattern</span>=<span class="hljs-value">"%date{yyyy-MM-dd HH:mm:ss.SSS} %level [%thread][%file:%line] - %msg%n"</span>/&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">Policies</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">TimeBasedTriggeringPolicy</span> <span class="hljs-attribute">interval</span>=<span class="hljs-value">"1"</span>\r\n                                           <span class="hljs-attribute">modulate</span>=<span class="hljs-value">"true"</span>/&gt;</span>\r\n            <span class="hljs-tag">&lt;/<span class="hljs-title">Policies</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">RollingRandomAccessFile</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">appenders</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">loggers</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 3rdparty Loggers --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">logger</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"org.springframework.core"</span> <span class="hljs-attribute">level</span>=<span class="hljs-value">"info"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">logger</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">logger</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"org.springframework.beans"</span> <span class="hljs-attribute">level</span>=<span class="hljs-value">"info"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">logger</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">logger</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"org.springframework.context"</span> <span class="hljs-attribute">level</span>=<span class="hljs-value">"info"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">logger</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">logger</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"org.springframework.web"</span> <span class="hljs-attribute">level</span>=<span class="hljs-value">"info"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">logger</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">logger</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"org.jboss.netty"</span> <span class="hljs-attribute">level</span>=<span class="hljs-value">"warn"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">logger</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">logger</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"org.apache.http"</span> <span class="hljs-attribute">level</span>=<span class="hljs-value">"warn"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">logger</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">logger</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"com.mchange.v2"</span> <span class="hljs-attribute">level</span>=<span class="hljs-value">"warn"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">logger</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- Game Stat  logger --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">logger</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"com.u9.global.service.log"</span> <span class="hljs-attribute">level</span>=<span class="hljs-value">"info"</span>\r\n                <span class="hljs-attribute">additivity</span>=<span class="hljs-value">"false"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">appender-ref</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"ProductLog"</span>/&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">logger</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- Root Logger --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">root</span> <span class="hljs-attribute">level</span>=<span class="hljs-value">"DEBUG"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">appender-ref</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"DevLog"</span>/&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">appender-ref</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"Console"</span>/&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">root</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">loggers</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">configuration</span>&gt;</span></code></pre>\r\n\r\n<hr />\r\n<p data-source-line="642">至此,我们的基本配置就完成了,结果如下图所示:</p>\r\n<p data-source-line="644"><img src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88%E5%AE%8C%E6%AF%95%E6%88%AA%E5%9B%BE.png" alt="ssm框架整合完毕截图" /></p>\r\n<p data-source-line="646">具体基本配置完毕,下面我们需要进行实际演练方可知道效果,也能根据实际效果检查配置有没有出现问题.至于实际演练如何,且听下回分解.</p>', '[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis整合之路', '', 'publish', 'open', 'open', '', '%e6%89%8b%e6%8a%8a%e6%89%8b%e6%95%99%e7%a8%8bjavaweb%e4%bc%98%e9%9b%85%e7%9a%84springmvcmybatis%e6%95%b4%e5%90%88%e4%b9%8b%e8%b7%af', '', '', '2016-09-16 15:39:23', '2016-09-16 07:39:23', '', 0, 'http://acheng1314.cn/?p=228', 0, 'post', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(229, 1, '2016-09-16 15:39:23', '2016-09-16 07:39:23', '<p data-source-line="2">手把手教你整合最优雅SSM框架：SpringMVC + Spring + MyBatis</p>\r\n\r\n<ul data-source-line="3">\r\n 	<li>前面网友说我为啥很久不更新博客了,我告诉他们我准备潜修.其实是我的博客被人批评是在记流水账(<sub>一脸尴尬</sub>).</li>\r\n 	<li>再次安利一波,博客地址:<a href="http://acheng1314.cn/">acheng1314.cn</a></li>\r\n 	<li>本文中的图片用了个人服务器存储,网速较慢,各位老司机耐心等待.</li>\r\n</ul>\r\n<h4 data-source-line="7">工具</h4>\r\n<ul data-source-line="8">\r\n 	<li>IDE为<strong>idea15</strong></li>\r\n 	<li>JDK环境为<strong>1.8</strong></li>\r\n 	<li>maven版本为<strong>maven3</strong></li>\r\n</ul>\r\n<h4 data-source-line="12">目标</h4>\r\n<ul data-source-line="13">\r\n 	<li>完成基本的SpringMVC + Spring + MyBatis框架整合</li>\r\n 	<li>数据库使用mysql</li>\r\n 	<li>加入阿里巴巴的druid数据库连接池</li>\r\n 	<li>使用gson作为json解析工具</li>\r\n 	<li>实现日志输出</li>\r\n 	<li>maven依赖的版本管理</li>\r\n</ul>\r\n<h4 data-source-line="20">优点</h4>\r\n<pre data-source-line="21"><code class="hljs">此处省略若干字,观众们请脑补.</code></pre>\r\n\r\n<hr />\r\n\r\n<h4 data-source-line="27">SSM框架整合配置</h4>\r\n<p data-source-line="29">前面说了这么多,现在开始正式的干货.</p>\r\n\r\n<h5 data-source-line="31">第一步: 使用idea的maven创建一个基本的web工程.</h5>\r\n<ul data-source-line="32">\r\n 	<li>打开Idea在欢迎界面选择创建一个新的Project或者是(在菜单界面选择:New→Project),这是会出现一个界面如下图所示:</li>\r\n</ul>\r\n<p data-source-line="34"><img src="http://acheng1314.cn/wp-content/uploads/2016/09/maven%E6%96%B0%E5%BB%BAWebApp%E9%A1%B9%E7%9B%AE%E7%AC%AC%E4%B8%80%E6%AD%A5.png" alt="maven新建WebApp项目第一步" /></p>\r\n\r\n<ul data-source-line="36">\r\n 	<li>如上图所示,我们需要勾选的地方已经使用红色框标注出来.\r\n<ul>\r\n 	<li>最左边的是<strong>maven</strong>,是我们需要使用的项目构建工具.</li>\r\n 	<li>勾选右边上面的<strong>Create from archetype</strong>,我们才能在下面选择我们需要构建成什么类型的项目.</li>\r\n 	<li>接着我们选中<strong>maven-archetype-webapp</strong>,这时候我们的项目类型就确定为是web项目.</li>\r\n 	<li>需要注意一点,我上面图中没标注出来的<strong>Project SDK</strong>,这里是选择我们开发的JDK版本.</li>\r\n</ul>\r\n</li>\r\n 	<li>点击next后,如下图所示:</li>\r\n</ul>\r\n<p data-source-line="44"><img src="http://acheng1314.cn/wp-content/uploads/2016/09/maven%E6%96%B0%E5%BB%BAWebApp%E9%A1%B9%E7%9B%AE%E7%AC%AC%E4%BA%8C%E6%AD%A5.png" alt="maven新建WebApp项目第二步" /></p>\r\n\r\n<ul data-source-line="46">\r\n 	<li>上面图中,我们需要注意地方如下:\r\n<ul>\r\n 	<li><strong>GroupId</strong>也就是我们常说的组织ID,也可以理解为我们<strong>应用程序的包名</strong></li>\r\n 	<li><strong>ArtifactId</strong>是我们常说的产品名称(同一个组织下面可以有多个产品),也可以当作是我们的<strong>当前项目名称</strong></li>\r\n 	<li><strong>Version</strong>顾名思义就是版本号</li>\r\n 	<li>最下面的红色框中,Previous==&gt;返回上一步,Next==&gt;下一步,Cancel==&gt;取消,Help==&gt;帮助</li>\r\n</ul>\r\n</li>\r\n 	<li>接下来,我们继续点击Next后,如下图所示:</li>\r\n</ul>\r\n<p data-source-line="54"><img src="http://acheng1314.cn/wp-content/uploads/2016/09/maven%E6%96%B0%E5%BB%BAWebApp%E9%A1%B9%E7%9B%AE%E7%AC%AC%E4%B8%89%E6%AD%A5.png" alt="maven新建WebApp项目第三步" /></p>\r\n\r\n<ul data-source-line="56">\r\n 	<li>上面途中没啥好说的,圈出来部分就是我们的<strong>Maven目录</strong>.继续next后,如下图所示:</li>\r\n</ul>\r\n<p data-source-line="58"><img src="http://acheng1314.cn/wp-content/uploads/2016/09/maven%E6%96%B0%E5%BB%BAWebApp%E9%A1%B9%E7%9B%AE%E7%AC%AC%E5%9B%9B%E6%AD%A5.png" alt="maven新建WebApp项目第四步" /></p>\r\n\r\n<ul data-source-line="60">\r\n 	<li>上面选中部分,<strong>Project name</strong>为<strong>项目名称</strong>,<strong>Project location</strong>是项目的<strong>存储位置</strong>(<sub>右边的省略号意味着可以选择位置</sub>).</li>\r\n 	<li>接下来我们<strong>点击Finish</strong>,我们新建基本的web项目的步骤就完成了.</li>\r\n 	<li>这时候在Idea主窗口的右下角部分,我们可以看到一个滚动条在执行,说明我们的项目正在build中.右上角有一个提示框如下图所示:</li>\r\n</ul>\r\n<p data-source-line="64"><img src="http://acheng1314.cn/wp-content/uploads/2016/09/maven%E6%96%B0%E5%BB%BAWebApp%E9%A1%B9%E7%9B%AE%E5%AE%8C%E6%88%90%E5%90%8E%E7%9A%84%E8%87%AA%E5%8A%A8%E5%AF%BC%E5%85%A5%E6%8F%90%E7%A4%BA%E6%A1%86.png" alt="maven新建WebApp项目完成后的自动导入提示框" /></p>\r\n\r\n<ul data-source-line="66">\r\n 	<li>这个提示框大概意思是:Maven项目需要被导入.我建议勾选:<strong>Enable Auto-Import</strong>(<sub>自动导入</sub>)</li>\r\n</ul>\r\n<p data-source-line="68">此处,使用Idea创建一个<strong>Maven依赖的基本的WebApp项目</strong>已经完成.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h4 data-source-line="71">框架整合前的准备工作.</h4>\r\n<ul data-source-line="72">\r\n 	<li>整理项目文件组织结构.\r\n<ul>\r\n 	<li>通过观察目录结构,我们可以发现,需要的目录不齐全,我们需要手动补齐.初始结构图如下:\r\n\r\n<img src="http://acheng1314.cn/wp-content/uploads/2016/09/maven%E6%96%B0%E5%BB%BAWebApp%E9%A1%B9%E7%9B%AE%E5%AE%8C%E6%88%90%E5%90%8E%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="maven新建WebApp项目完成后的目录结构" /></li>\r\n 	<li>我们需要的主体结构图应如下:\r\n\r\n<img src="http://acheng1314.cn/wp-content/uploads/2016/09/WebApp%E9%A1%B9%E7%9B%AE%E6%95%B4%E5%90%88%E6%A1%86%E6%9E%B6%E5%89%8D%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="WebApp项目整合框架前的目录结构" />\r\n<h4>需要的主体结构目录解释:</h4>\r\n\r\n<hr />\r\n\r\n<table>\r\n<thead>\r\n<tr>\r\n<th>目录名称</th>\r\n<th>说明</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>src</td>\r\n<td>源码、资源等文件的根目录</td>\r\n</tr>\r\n<tr>\r\n<td>↓ main</td>\r\n<td>项目开发主要目录之一,可以放java代码和一些资源文件.</td>\r\n</tr>\r\n<tr>\r\n<td>↓↓java</td>\r\n<td>开发的主要的java代码存放目录</td>\r\n</tr>\r\n<tr>\r\n<td>↓↓↓cn.acheng1314</td>\r\n<td>我的应用程序的包名</td>\r\n</tr>\r\n<tr>\r\n<td>↓↓resources</td>\r\n<td>开发中的主要的资源文件存放目录</td>\r\n</tr>\r\n<tr>\r\n<td>↓↓sql</td>\r\n<td>开发中主要的sql语句文件存放目录</td>\r\n</tr>\r\n<tr>\r\n<td>↓↓webapp</td>\r\n<td>web页面和其他web配置、资源文件存放目录</td>\r\n</tr>\r\n<tr>\r\n<td>↓ test</td>\r\n<td>项目开发中的测试模块存放路径,包含java代码和资源文件.</td>\r\n</tr>\r\n<tr>\r\n<td>↓↓java</td>\r\n<td>测试代码存放目录</td>\r\n</tr>\r\n<tr>\r\n<td>↓↓resources</td>\r\n<td>测试资源文件存放目录</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</li>\r\n 	<li>配置目录:\r\n<ul>\r\n 	<li>创建main目录下的java目录(用于存放java源代码)\r\n\r\n<img src="http://acheng1314.cn/wp-content/uploads/2016/09/WebApp%E7%9B%AE%E5%BD%95%E8%B0%83%E6%95%B4%E7%AC%AC%E4%B8%80%E6%AD%A5%E5%88%9B%E5%BB%BAjava%E6%BA%90%E4%BB%A3%E7%A0%81%E7%9B%AE%E5%BD%95.png" alt="WebApp目录调整第一步创建java源代码目录" />\r\n\r\n我们先<strong>右键点击main目录</strong>,接着选中<strong>New</strong>→<strong>Directory</strong>,在弹出的对话框中输入java.</li>\r\n 	<li>接着我们需要把java目录标记为源文目录.\r\n\r\n<img src="http://acheng1314.cn/wp-content/uploads/2016/09/WebApp%E7%9B%AE%E5%BD%95%E8%B0%83%E6%95%B4%E7%AC%AC%E4%BA%8C%E6%AD%A5%E6%A0%87%E8%AE%B0java%E7%9B%AE%E5%BD%95%E4%B8%BA%E8%B5%84%E6%BA%90%E7%9B%AE%E5%BD%95.png" alt="WebApp目录调整第二步标记java目录为资源目录" />\r\n\r\n我们先<strong>右键点击java</strong>,然后选择<strong>Mark Directory As</strong>→<strong>Sources Root</strong>\r\n\r\n接着我们在src目录下创建test目录(注意: <strong>test目录和main目录同级</strong>),以及test下面的java和resources目录,分别标记为源文件目录和资源文件目录\r\n\r\n<strong>值得注意的是sql目录为普通文件目录</strong></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n 	<li>根据目标明白我们<strong>需要哪些支援库</strong>,具体结果如下:</li>\r\n</ul>\r\n<pre data-source-line="113"><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-title">project</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attribute">xmlns:xsi</span>=<span class="hljs-value">"http://www.w3.org/2001/XMLSchema-instance"</span>\r\n         <span class="hljs-attribute">xsi:schemaLocation</span>=<span class="hljs-value">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-title">modelVersion</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>cn.acheng1314<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 对应前面设置的GroupId --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>SSM_LOG<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>   <span class="hljs-comment">&lt;!-- 前面设置的artifactId--&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-title">packaging</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 打包方式war --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span> <span class="hljs-comment">&lt;!-- 版本号 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>SSM_LOG Maven Webapp<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span> <span class="hljs-comment">&lt;!-- 显示名字 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">url</span>&gt;</span>http://maven.apache.org<span class="hljs-tag">&lt;/<span class="hljs-title">url</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">dependencies</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 远程依赖库 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-title">scope</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 1.日志 --&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&amp;lt;!&amp;ndash; 实现slf4j接口并整合 &amp;ndash;&amp;gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;dependency&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;artifactId&gt;logback-classic&lt;/artifactId&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;version&gt;1.1.1&lt;/version&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;/dependency&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--log4j2支持--&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${org.apache.logging.log4j.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>log4j-api<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${org.apache.logging.log4j.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n\r\n\r\n        <span class="hljs-comment">&lt;!-- 2.数据库 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${mysql.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-title">scope</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!--druid==&gt;阿里巴巴数据库连接池--&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${com.alibaba.druid.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;dependency&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;groupId&gt;c3p0&lt;/groupId&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;artifactId&gt;c3p0&lt;/artifactId&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;version&gt;0.9.1.2&lt;/version&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;/dependency&gt;--&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- DAO: MyBatis --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${com.mybatis.mybatis.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${com.mybatis.mybatis_spring.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- 3.Servlet web --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!--json工具--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;dependency&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;version&gt;2.5.4&lt;/version&gt;--&gt;</span>\r\n        <span class="hljs-comment">&lt;!--&lt;/dependency&gt;--&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>com.google.code.gson<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>gson<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${com.google.gson.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!--Servlet版本设置--&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${javax.servlet.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- 4.Spring --&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 1)Spring核心 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${org.springframework.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${org.springframework.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${org.springframework.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 2)Spring DAO层 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${org.springframework.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${org.springframework.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 3)Spring web --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${org.springframework.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${org.springframework.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 4)Spring test --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${org.springframework.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- redis客户端:Jedis --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${redis.clients.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>com.dyuproject.protostuff<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>protostuff-core<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${com.dyuproject.protostuff.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>com.dyuproject.protostuff<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>protostuff-runtime<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${com.dyuproject.protostuff.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- Map工具类 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!--文件上传工具--&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">dependencies</span>&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!-- 配置可变版本号,也就是常说的版本管理 （Spring、SpringMvc、Mybatis、Gson、Druid） --&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 要针对某个依赖进行升级的时候只需要更改下面对应的版本号 --&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 在上面使用版本号的时候需要用固定格式,如: ${包名.version} --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">properties</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">org.apache.logging.log4j.version</span>&gt;</span>2.6.2<span class="hljs-tag">&lt;/<span class="hljs-title">org.apache.logging.log4j.version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">mysql.version</span>&gt;</span>5.1.37<span class="hljs-tag">&lt;/<span class="hljs-title">mysql.version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">com.alibaba.druid.version</span>&gt;</span>1.0.25<span class="hljs-tag">&lt;/<span class="hljs-title">com.alibaba.druid.version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">com.mybatis.mybatis.version</span>&gt;</span>3.4.1<span class="hljs-tag">&lt;/<span class="hljs-title">com.mybatis.mybatis.version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">com.mybatis.mybatis_spring.version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-title">com.mybatis.mybatis_spring.version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">com.google.gson.version</span>&gt;</span>2.7<span class="hljs-tag">&lt;/<span class="hljs-title">com.google.gson.version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">javax.servlet.version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-title">javax.servlet.version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">org.springframework.version</span>&gt;</span>4.3.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-title">org.springframework.version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">redis.clients.version</span>&gt;</span>2.7.3<span class="hljs-tag">&lt;/<span class="hljs-title">redis.clients.version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">com.dyuproject.protostuff.version</span>&gt;</span>1.0.8<span class="hljs-tag">&lt;/<span class="hljs-title">com.dyuproject.protostuff.version</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">developer.organization</span>&gt;</span><span class="hljs-cdata">&lt;![CDATA[scengine]]&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">developer.organization</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">properties</span>&gt;</span>\r\n    \r\n    <span class="hljs-comment">&lt;!-- 构建项目的最终名称 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">build</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">finalName</span>&gt;</span>SSM_LOG<span class="hljs-tag">&lt;/<span class="hljs-title">finalName</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">build</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">project</span>&gt;</span></code></pre>\r\n\r\n<hr />\r\n\r\n<h4 data-source-line="319">整合框架</h4>\r\n<p data-source-line="321">在上面,我们已经把基本的目录配置好了,现在我们在已经依赖了项目支援库,接下来我们需要做的是开始<strong>整合Spring+SpringMvc+Mybatis</strong></p>\r\n<p data-source-line="323">我们先<strong>打开webapp目录下面的WEB-INF目录中的web.xml文件</strong>,web.xml文件是整合web项目的配置中心.我们在web.xml中加入如下内容:</p>\r\n\r\n<pre data-source-line="325"><code class="hljs"><span class="hljs-doctype">&lt;!DOCTYPE web-app PUBLIC\r\n        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"\r\n        "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">web-app</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"http://xmlns.jcp.org/xml/ns/javaee"</span> <span class="hljs-attribute">xmlns:xsi</span>=<span class="hljs-value">"http://www.w3.org/2001/XMLSchema-instance"</span>\r\n         <span class="hljs-attribute">xsi:schemaLocation</span>=<span class="hljs-value">"http://xmlns.jcp.org/xml/ns/javaee\r\n                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span>\r\n         <span class="hljs-attribute">version</span>=<span class="hljs-value">"3.1"</span> <span class="hljs-attribute">metadata-complete</span>=<span class="hljs-value">"true"</span>&gt;</span>\r\n         \r\n    <span class="hljs-comment">&lt;!--默认的首页--&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file-list</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>index.html<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>index.htm<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>index.jsp<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>default.html<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>default.htm<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>default.jsp<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file-list</span>&gt;</span>\r\n    \r\n    <span class="hljs-comment">&lt;!-- 如果是用maven命令生成的xml，需要修改servlet版本为3.1 --&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 配置DispatcherServlet --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">servlet</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">display-name</span>&gt;</span>SSM_LOG<span class="hljs-tag">&lt;/<span class="hljs-title">display-name</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 项目名称 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>mvc-dispatcher<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span> <span class="hljs-comment">&lt;!-- mvc调度器 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-class</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 配置springMVC需要加载的配置文件\r\n            spring-dao.xml,spring-service.xml,spring-web.xml\r\n            Mybatis - &gt; spring -&gt; springmvc\r\n         --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>classpath:spring/spring-*.xml<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">servlet</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>mvc-dispatcher<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 默认匹配所有的静态资源,此处配置出错,会产生错误500 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/js/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/css/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/images/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/fonts/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!--druid ==&gt; WEB方式监控配置--&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">servlet</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>DruidStatView<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">servlet-class</span>&gt;</span>com.alibaba.druid.support.http.StatViewServlet<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-class</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">servlet</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>DruidStatView<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/druid/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">filter</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">filter-name</span>&gt;</span>druidWebStatFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-name</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">filter-class</span>&gt;</span>com.alibaba.druid.support.http.WebStatFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-class</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>exclusions<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>/public/*,*.js,*.css,/druid*,*.jsp,*.swf<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>principalSessionName<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>sessionInfo<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>profileEnable<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">filter</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">filter-mapping</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">filter-name</span>&gt;</span>druidWebStatFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-name</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">filter-mapping</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">web-app</span>&gt;</span></code></pre>\r\n<h4 data-source-line="401">快捷生成spring目录</h4>\r\n<ul data-source-line="402">\r\n 	<li>在上面的<code>&lt;param-value&gt;classpath:spring/spring-*.xml&lt;/param-value&gt;</code>处,我们选中前面一个spring,按下Alt+Enter自动生成spring目录.</li>\r\n 	<li>spring目录位于src→main→resources下.</li>\r\n</ul>\r\n<h4 data-source-line="405">在spring目录下创建spring相关的控制文件</h4>\r\n<ul data-source-line="406">\r\n 	<li>spring-dao.xml\r\n<pre data-source-line="407"><code class="hljs"><span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">beans</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans"</span>\r\n       <span class="hljs-attribute">xmlns:xsi</span>=<span class="hljs-value">"http://www.w3.org/2001/XMLSchema-instance"</span>\r\n       <span class="hljs-attribute">xmlns:context</span>=<span class="hljs-value">"http://www.springframework.org/schema/context"</span>\r\n       <span class="hljs-attribute">xsi:schemaLocation</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans\r\n    http://www.springframework.org/schema/beans/spring-beans.xsd\r\n    http://www.springframework.org/schema/context\r\n    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 配置整合mybatis过程 --&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 1.配置数据库相关参数properties的属性：${url} --&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 使用数据库配置文件解耦 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">context:property-placeholder</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"classpath:jdbc.properties"</span>/&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!-- 下面的druid配置都是基本配置,具体优化设置可以上网查询,也可以去github上面直接搜索druid --&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 2.数据库连接池 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"dataSource"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"com.alibaba.druid.pool.DruidDataSource"</span>\r\n          <span class="hljs-attribute">init-method</span>=<span class="hljs-value">"init"</span> <span class="hljs-attribute">destroy-method</span>=<span class="hljs-value">"close"</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 配置连接池属性 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"driverClassName"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"${jdbc.driver}"</span>/&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"url"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"${jdbc.url}"</span>/&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"username"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"${jdbc.username}"</span>/&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"password"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"${jdbc.password}"</span>/&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"initialSize"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"1"</span> /&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"minIdle"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"1"</span> /&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"maxActive"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"10"</span> /&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"maxWait"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"10000"</span> /&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"timeBetweenEvictionRunsMillis"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"60000"</span> /&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"minEvictableIdleTimeMillis"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"300000"</span> /&gt;</span>\r\n\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"testWhileIdle"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"true"</span> /&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- 这里建议配置为TRUE，防止取到的连接不可用 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"testOnBorrow"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"true"</span> /&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"testOnReturn"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"false"</span> /&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"poolPreparedStatements"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"true"</span> /&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"maxPoolPreparedStatementPerConnectionSize"</span>\r\n                  <span class="hljs-attribute">value</span>=<span class="hljs-value">"20"</span> /&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- 这里配置提交方式，默认就是TRUE，可以不用配置 --&gt;</span>\r\n\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"defaultAutoCommit"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"true"</span> /&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- 验证连接有效与否的SQL，不同的数据配置不同 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"validationQuery"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"select 1 "</span> /&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"filters"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"stat"</span> /&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"proxyFilters"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">list</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">ref</span> <span class="hljs-attribute">bean</span>=<span class="hljs-value">"logFilter"</span> /&gt;</span>\r\n            <span class="hljs-tag">&lt;/<span class="hljs-title">list</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"sqlSessionFactory"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 注入数据库连接池 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"dataSource"</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"dataSource"</span>/&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"configLocation"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"classpath:mybatis-config.xml"</span>/&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 扫描entity包 使用别名 --&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- cn.acheng1314是我的应用程序的包名,你们需要使用你们自己的包名,也就是前面我们提到过的GroupId --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"typeAliasesPackage"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"cn.acheng1314.domain"</span>/&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"mapperLocations"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"classpath:mapper/*.xml"</span>/&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 注入sqlSessionFactory --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"sqlSessionFactoryBeanName"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"sqlSessionFactory"</span>/&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"basePackage"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"cn.acheng1314.dao"</span>/&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!-- 上面的druid的配置 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"logFilter"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"com.alibaba.druid.filter.logging.Slf4jLogFilter"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"statementExecutableSqlLogEnable"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"false"</span> /&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">beans</span>&gt;</span></code></pre>\r\n</li>\r\n</ul>\r\n<p data-source-line="498">上面的配置中,肯定会出现报错的情况,这时候我们只需要选中报错的地方按下Alt+Enter就能生成相关的资源.</p>\r\n\r\n<ul data-source-line="500">\r\n 	<li>spring-service.xml\r\n<pre data-source-line="501"><code class="hljs"><span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">beans</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans"</span>\r\n       <span class="hljs-attribute">xmlns:xsi</span>=<span class="hljs-value">"http://www.w3.org/2001/XMLSchema-instance"</span>\r\n       <span class="hljs-attribute">xmlns:context</span>=<span class="hljs-value">"http://www.springframework.org/schema/context"</span>\r\n       <span class="hljs-attribute">xmlns:tx</span>=<span class="hljs-value">"http://www.springframework.org/schema/tx"</span>\r\n       <span class="hljs-attribute">xsi:schemaLocation</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans\r\n    http://www.springframework.org/schema/beans/spring-beans.xsd\r\n    http://www.springframework.org/schema/context\r\n    http://www.springframework.org/schema/context/spring-context.xsd\r\n    http://www.springframework.org/schema/tx\r\n    http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span>\r\n    \r\n    <span class="hljs-comment">&lt;!-- 扫描service包下所有使用注解的类型 --&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- cn.acheng1314为我们应用的包名,当然也是我们前面提到过的GroupId --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">context:component-scan</span> <span class="hljs-attribute">base-package</span>=<span class="hljs-value">"cn.acheng1314.service"</span> /&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!-- 配置事务管理器 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"transactionManager"</span>\r\n          <span class="hljs-attribute">class</span>=<span class="hljs-value">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 注入数据库连接池 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"dataSource"</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"dataSource"</span> /&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!-- 配置基于注解的声明式事务 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">tx:annotation-driven</span> <span class="hljs-attribute">transaction-manager</span>=<span class="hljs-value">"transactionManager"</span> /&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">beans</span>&gt;</span></code></pre>\r\n</li>\r\n</ul>\r\n<p data-source-line="530">上面的配置中,肯定会出现报错的情况,这时候我们只需要选中报错的地方按下Alt+Enter就能生成相关的资源.</p>\r\n<p data-source-line="532"><strong>基本的spring系列和druid</strong>已经配置完毕. 接着我们需要解决上面自动生成的一些问题.基本配置截图如下:</p>\r\n<p data-source-line="534"><img src="http://acheng1314.cn/wp-content/uploads/2016/09/%E5%9F%BA%E6%9C%AC%E7%9A%84spring%E9%85%8D%E7%BD%AE%E5%92%8Cdruid%E9%85%8D%E7%BD%AE%E5%90%8E%E6%88%AA%E5%9B%BE.png" alt="基本的spring配置和druid配置后截图" /></p>\r\n<p data-source-line="536">现在我们会发现我们的jdbc.properties和mybatis-config.xml文件都是空的,我们需要继续写入内容.</p>\r\n<p data-source-line="538">jdbc.properties是数据库连接的配置文件.如下:</p>\r\n\r\n<pre data-source-line="540"><code class="hljs">jdbc.driver=com<span class="hljs-class">.mysql</span><span class="hljs-class">.jdbc</span><span class="hljs-class">.Driver</span>\r\njdbc.url=jdbc:mysql:<span class="hljs-comment">//localhost:3307/wordpress?useUnicode=true&amp;characterEncoding=utf8</span>\r\njdbc.username=数据库用户名\r\njdbc.password=数据库用户名对应的密码</code></pre>\r\n<p data-source-line="547">上面的jdbc.driver为数据库连接的驱动,jdbc.url为数据库的连接地址.</p>\r\n<p data-source-line="549">mybatis-config.xml 顾名思义是mybatis的配置文件,如下:</p>\r\n\r\n<pre data-source-line="551"><code class="hljs"><span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span>\r\n<span class="hljs-doctype">&lt;!DOCTYPE configuration\r\n        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"\r\n        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">configuration</span>&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 配置全局属性 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">settings</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 使用jdbc的getGeneratedKeys获取数据库自增主键值 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">setting</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"useGeneratedKeys"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"true"</span> /&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- 使用列别名替换列名 默认:true --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">setting</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"useColumnLabel"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"true"</span> /&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!-- 开启驼峰命名转换:Table{create_time} -&gt; Entity{createTime} --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">setting</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"mapUnderscoreToCamelCase"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"true"</span> /&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">settings</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">configuration</span>&gt;</span></code></pre>\r\n<p data-source-line="571">配置完成上面的东西后,大体需要的我们已经完成了.但是,我们会看到我们的日志记录还没有配置,上面我们采用了log4j2,通过查看官网文档,我们发现只需要在资源目录下面添加一个默认的配置文件即可,如下:</p>\r\n<p data-source-line="573">配置文件文件名: <strong>log4j2.xml</strong> , 存放目录为<strong>src</strong>→<strong>main</strong>→<strong>resources</strong></p>\r\n\r\n<pre data-source-line="574"><code class="hljs"><span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>\r\n<span class="hljs-comment">&lt;!-- status=debug 可以查看log4j的装配过程 --&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">configuration</span> <span class="hljs-attribute">status</span>=<span class="hljs-value">"off"</span> <span class="hljs-attribute">monitorInterval</span>=<span class="hljs-value">"1800"</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">properties</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!--日志目录--&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"LOG_HOME"</span>&gt;</span>/logs/webLog<span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 日志备份目录 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"BACKUP_HOME"</span>&gt;</span>{LOG_HOME}/backup<span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"STAT_NAME"</span>&gt;</span>stat<span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"SERVER_NAME"</span>&gt;</span>global<span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">properties</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">appenders</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 定义控制台输出 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">Console</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"Console"</span> <span class="hljs-attribute">target</span>=<span class="hljs-value">"SYSTEM_OUT"</span> <span class="hljs-attribute">follow</span>=<span class="hljs-value">"true"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">PatternLayout</span> <span class="hljs-attribute">pattern</span>=<span class="hljs-value">"%date{yyyy-MM-dd HH:mm:ss.SSS} %level [%thread][%file:%line] - %msg%n"</span>/&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">Console</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 程序员调试日志 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">RollingRandomAccessFile</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"DevLog"</span> <span class="hljs-attribute">fileName</span>=<span class="hljs-value">"${LOG_HOME}/${SERVER_NAME}"</span>\r\n                                 <span class="hljs-attribute">filePattern</span>=<span class="hljs-value">"${LOG_HOME}/${SERVER_NAME}.%d{yyyy-MM-dd-HH}.log"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">PatternLayout</span> <span class="hljs-attribute">pattern</span>=<span class="hljs-value">"%date{yyyy-MM-dd HH:mm:ss.SSS} %level [%thread][%file:%line] - %msg%n"</span>/&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">Policies</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">TimeBasedTriggeringPolicy</span> <span class="hljs-attribute">interval</span>=<span class="hljs-value">"1"</span> <span class="hljs-attribute">modulate</span>=<span class="hljs-value">"true"</span>/&gt;</span>\r\n            <span class="hljs-tag">&lt;/<span class="hljs-title">Policies</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">RollingRandomAccessFile</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 游戏产品数据分析日志 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">RollingRandomAccessFile</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"ProductLog"</span>\r\n                                 <span class="hljs-attribute">fileName</span>=<span class="hljs-value">"${LOG_HOME}/${SERVER_NAME}_${STAT_NAME}"</span>\r\n                                 <span class="hljs-attribute">filePattern</span>=<span class="hljs-value">"${LOG_HOME}/${SERVER_NAME}_${STAT_NAME}.%d{yyyy-MM-dd-HH}.log"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">PatternLayout</span>\r\n                    <span class="hljs-attribute">pattern</span>=<span class="hljs-value">"%date{yyyy-MM-dd HH:mm:ss.SSS} %level [%thread][%file:%line] - %msg%n"</span>/&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">Policies</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">TimeBasedTriggeringPolicy</span> <span class="hljs-attribute">interval</span>=<span class="hljs-value">"1"</span>\r\n                                           <span class="hljs-attribute">modulate</span>=<span class="hljs-value">"true"</span>/&gt;</span>\r\n            <span class="hljs-tag">&lt;/<span class="hljs-title">Policies</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">RollingRandomAccessFile</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">appenders</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">loggers</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 3rdparty Loggers --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">logger</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"org.springframework.core"</span> <span class="hljs-attribute">level</span>=<span class="hljs-value">"info"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">logger</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">logger</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"org.springframework.beans"</span> <span class="hljs-attribute">level</span>=<span class="hljs-value">"info"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">logger</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">logger</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"org.springframework.context"</span> <span class="hljs-attribute">level</span>=<span class="hljs-value">"info"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">logger</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">logger</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"org.springframework.web"</span> <span class="hljs-attribute">level</span>=<span class="hljs-value">"info"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">logger</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">logger</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"org.jboss.netty"</span> <span class="hljs-attribute">level</span>=<span class="hljs-value">"warn"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">logger</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">logger</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"org.apache.http"</span> <span class="hljs-attribute">level</span>=<span class="hljs-value">"warn"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">logger</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">logger</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"com.mchange.v2"</span> <span class="hljs-attribute">level</span>=<span class="hljs-value">"warn"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">logger</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- Game Stat  logger --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">logger</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"com.u9.global.service.log"</span> <span class="hljs-attribute">level</span>=<span class="hljs-value">"info"</span>\r\n                <span class="hljs-attribute">additivity</span>=<span class="hljs-value">"false"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">appender-ref</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"ProductLog"</span>/&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">logger</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- Root Logger --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">root</span> <span class="hljs-attribute">level</span>=<span class="hljs-value">"DEBUG"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">appender-ref</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"DevLog"</span>/&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">appender-ref</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"Console"</span>/&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">root</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">loggers</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">configuration</span>&gt;</span></code></pre>\r\n\r\n<hr />\r\n<p data-source-line="642">至此,我们的基本配置就完成了,结果如下图所示:</p>\r\n<p data-source-line="644"><img src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88%E5%AE%8C%E6%AF%95%E6%88%AA%E5%9B%BE.png" alt="ssm框架整合完毕截图" /></p>\r\n<p data-source-line="646">具体基本配置完毕,下面我们需要进行实际演练方可知道效果,也能根据实际效果检查配置有没有出现问题.至于实际演练如何,且听下回分解.</p>', '[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis整合之路', '', 'inherit', 'closed', 'closed', '', '228-revision-v1', '', '', '2016-09-16 15:39:23', '2016-09-16 07:39:23', '', 228, 'http://acheng1314.cn/?p=229', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(231, 1, '2016-09-21 09:50:35', '0000-00-00 00:00:00', 'using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Day002_Ca\r\n{\r\nclass MainClass\r\n{\r\nstatic void Main(string[] args)\r\n{\r\n//调用计算器\r\n//new MainClass().mCaclulator();\r\n\r\n//员工工资\r\n//new MainClass().mMoney();\r\n\r\n//彩票摇奖\r\nnew MainClass().mLottery();\r\n}\r\n\r\n///\r\n/// 计算器\r\n///\r\n\r\npublic void mCaclulator()\r\n{ //设计一个计算器，实现整数的加减乘除和取余\r\n//在控制台上输入两个整数和运算符\r\n//输出运算结果\r\nList mList = new List();\r\nfor (int i = 0; i &lt; 2; i++)\r\n{\r\nConsole.WriteLine("请输入第个{0}操作数", i + 1);\r\nmList.Add(int.Parse(Console.ReadLine())); //输入的数值转换\r\n}\r\nConsole.WriteLine("请输入+、-、*、/、%当中的任意一个运算符");\r\nstring mOp = Console.ReadLine();\r\nif (mOp == "+")\r\n{\r\nConsole.WriteLine("您的运算结果为：{0} + {1} = {2}", mList[0], mList[1], mList[0] + mList[1]);\r\n}\r\nelse if (mOp == "-")\r\n{\r\nConsole.WriteLine("您的运算结果为：{0} - {1} = {2}", mList[0], mList[1], mList[0] - mList[1]);\r\n}\r\nelse if (mOp == "*")\r\n{\r\nConsole.WriteLine("您的运算结果为：{0} * {1} = {2}", mList[0], mList[1], mList[0] * mList[1]);\r\n}\r\nelse if (mOp == "/")\r\n{\r\nConsole.WriteLine("您的运算结果为：{0} / {1} = {2}", mList[0], mList[1], mList[0] / mList[1]);\r\n}\r\nelse if (mOp == "%")\r\n{\r\nConsole.WriteLine("您的运算结果为：{0} % {1} = {2}", mList[0], mList[1], mList[0] % mList[1]);\r\n}\r\nelse\r\n{\r\nConsole.WriteLine("您输入了非法运算符，程序意外结束！");\r\n}\r\nConsole.ReadKey();\r\n}\r\n\r\n///\r\n/// 计算员工工资\r\n/// 基本工资1000\r\n/// 不同级别奖金不同\r\n/// A占底薪的45%\r\n/// B占底薪的40%\r\n/// C占底薪的30%\r\n/// D占底薪的20%\r\n///\r\n\r\npublic void mMoney() {\r\ndouble mBaseMoney = 1000; //基本工资1000大洋\r\ndouble mAllMoney = 0; //每个月的总的工资,初始化为0\r\nConsole.WriteLine("下面请输入员工的级别！Bom，xia ka la ka");\r\nchar mLevel = (char)Console.Read();\r\nswitch(mLevel){\r\ncase ''a'':\r\ncase ''A'': { mAllMoney = mBaseMoney * (1 + 0.45); } break;\r\ncase ''b'':\r\ncase ''B'': { mAllMoney = mBaseMoney * (1 + 0.4); } break;\r\ncase ''c'':\r\ncase ''C'': { mAllMoney = mBaseMoney * (1 + 0.3); } break;\r\ncase ''d'':\r\ncase ''D'': { mAllMoney = mBaseMoney * (1 + 0.25); } break;\r\n}\r\nConsole.WriteLine("{0}级别员工的每月总收入为：{1}",mLevel,mAllMoney);\r\nConsole.ReadKey();\r\n\r\n}\r\n\r\n///\r\n/// 彩票模拟\r\n/// 随机产生6位数的彩票号码\r\n/// 猜中最后两位，三等奖\r\n/// 最后四位，二等奖\r\n/// 全部猜中，头奖\r\n///\r\n\r\npublic void mLottery() {\r\nRandom mRan = new Random();\r\nint mAnswer = mRan.Next(100000, 999999); //产生彩票的随机编号\r\nConsole.WriteLine("请输入你所购买的彩票号码：");\r\ntry {\r\nint mNum = int.Parse(Console.ReadLine()); //将我们输入的数据转换成int类型\r\nif (mAnswer == mNum)\r\n{\r\nConsole.WriteLine("恭喜你中了头奖！");\r\n}else {\r\nint mAnswer4 = mAnswer - mAnswer / 10000 * 10000;\r\nint mNum4 = mNum - mNum / 10000 * 10000;\r\n\r\nint mAnswer2 = mAnswer - mAnswer / 100 * 100;\r\nint mNum2 = mNum - mNum / 100 * 100;\r\n//二等奖\r\nif (mAnswer4 == mNum4) {\r\nConsole.WriteLine("恭喜你获得了二等奖");\r\n}\r\nelse if (mAnswer2 == mNum2)\r\n{\r\nConsole.WriteLine("恭喜你获得了三等奖");\r\n}\r\nelse\r\n{\r\nConsole.WriteLine("恭喜你没中奖，本次中奖号码为：{0}", mAnswer);\r\n}\r\n\r\n}\r\n}catch (Exception e){\r\nConsole.WriteLine("你输入的信息非法，程序异常结束");\r\n}\r\nConsole.ReadKey();\r\n\r\n}\r\n}\r\n}', '', '', 'draft', 'open', 'open', '', '', '', '', '2016-09-21 09:50:35', '2016-09-21 01:50:35', '', 0, 'http://acheng1314.cn/?p=231', 0, 'post', '', 0),
(232, 1, '2016-09-21 09:50:35', '2016-09-21 01:50:35', 'using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Day002_Ca\r\n{\r\nclass MainClass\r\n{\r\nstatic void Main(string[] args)\r\n{\r\n//调用计算器\r\n//new MainClass().mCaclulator();\r\n\r\n//员工工资\r\n//new MainClass().mMoney();\r\n\r\n//彩票摇奖\r\nnew MainClass().mLottery();\r\n}\r\n\r\n///\r\n/// 计算器\r\n///\r\n\r\npublic void mCaclulator()\r\n{ //设计一个计算器，实现整数的加减乘除和取余\r\n//在控制台上输入两个整数和运算符\r\n//输出运算结果\r\nList mList = new List();\r\nfor (int i = 0; i &lt; 2; i++)\r\n{\r\nConsole.WriteLine("请输入第个{0}操作数", i + 1);\r\nmList.Add(int.Parse(Console.ReadLine())); //输入的数值转换\r\n}\r\nConsole.WriteLine("请输入+、-、*、/、%当中的任意一个运算符");\r\nstring mOp = Console.ReadLine();\r\nif (mOp == "+")\r\n{\r\nConsole.WriteLine("您的运算结果为：{0} + {1} = {2}", mList[0], mList[1], mList[0] + mList[1]);\r\n}\r\nelse if (mOp == "-")\r\n{\r\nConsole.WriteLine("您的运算结果为：{0} - {1} = {2}", mList[0], mList[1], mList[0] - mList[1]);\r\n}\r\nelse if (mOp == "*")\r\n{\r\nConsole.WriteLine("您的运算结果为：{0} * {1} = {2}", mList[0], mList[1], mList[0] * mList[1]);\r\n}\r\nelse if (mOp == "/")\r\n{\r\nConsole.WriteLine("您的运算结果为：{0} / {1} = {2}", mList[0], mList[1], mList[0] / mList[1]);\r\n}\r\nelse if (mOp == "%")\r\n{\r\nConsole.WriteLine("您的运算结果为：{0} % {1} = {2}", mList[0], mList[1], mList[0] % mList[1]);\r\n}\r\nelse\r\n{\r\nConsole.WriteLine("您输入了非法运算符，程序意外结束！");\r\n}\r\nConsole.ReadKey();\r\n}\r\n\r\n///\r\n/// 计算员工工资\r\n/// 基本工资1000\r\n/// 不同级别奖金不同\r\n/// A占底薪的45%\r\n/// B占底薪的40%\r\n/// C占底薪的30%\r\n/// D占底薪的20%\r\n///\r\n\r\npublic void mMoney() {\r\ndouble mBaseMoney = 1000; //基本工资1000大洋\r\ndouble mAllMoney = 0; //每个月的总的工资,初始化为0\r\nConsole.WriteLine("下面请输入员工的级别！Bom，xia ka la ka");\r\nchar mLevel = (char)Console.Read();\r\nswitch(mLevel){\r\ncase ''a'':\r\ncase ''A'': { mAllMoney = mBaseMoney * (1 + 0.45); } break;\r\ncase ''b'':\r\ncase ''B'': { mAllMoney = mBaseMoney * (1 + 0.4); } break;\r\ncase ''c'':\r\ncase ''C'': { mAllMoney = mBaseMoney * (1 + 0.3); } break;\r\ncase ''d'':\r\ncase ''D'': { mAllMoney = mBaseMoney * (1 + 0.25); } break;\r\n}\r\nConsole.WriteLine("{0}级别员工的每月总收入为：{1}",mLevel,mAllMoney);\r\nConsole.ReadKey();\r\n\r\n}\r\n\r\n///\r\n/// 彩票模拟\r\n/// 随机产生6位数的彩票号码\r\n/// 猜中最后两位，三等奖\r\n/// 最后四位，二等奖\r\n/// 全部猜中，头奖\r\n///\r\n\r\npublic void mLottery() {\r\nRandom mRan = new Random();\r\nint mAnswer = mRan.Next(100000, 999999); //产生彩票的随机编号\r\nConsole.WriteLine("请输入你所购买的彩票号码：");\r\ntry {\r\nint mNum = int.Parse(Console.ReadLine()); //将我们输入的数据转换成int类型\r\nif (mAnswer == mNum)\r\n{\r\nConsole.WriteLine("恭喜你中了头奖！");\r\n}else {\r\nint mAnswer4 = mAnswer - mAnswer / 10000 * 10000;\r\nint mNum4 = mNum - mNum / 10000 * 10000;\r\n\r\nint mAnswer2 = mAnswer - mAnswer / 100 * 100;\r\nint mNum2 = mNum - mNum / 100 * 100;\r\n//二等奖\r\nif (mAnswer4 == mNum4) {\r\nConsole.WriteLine("恭喜你获得了二等奖");\r\n}\r\nelse if (mAnswer2 == mNum2)\r\n{\r\nConsole.WriteLine("恭喜你获得了三等奖");\r\n}\r\nelse\r\n{\r\nConsole.WriteLine("恭喜你没中奖，本次中奖号码为：{0}", mAnswer);\r\n}\r\n\r\n}\r\n}catch (Exception e){\r\nConsole.WriteLine("你输入的信息非法，程序异常结束");\r\n}\r\nConsole.ReadKey();\r\n\r\n}\r\n}\r\n}', '', '', 'inherit', 'closed', 'closed', '', '231-revision-v1', '', '', '2016-09-21 09:50:35', '2016-09-21 01:50:35', '', 231, 'http://acheng1314.cn/?p=232', 0, 'revision', '', 0),
(233, 1, '2016-09-23 22:35:36', '2016-09-23 14:35:36', '', 'ssm框架检测第一步', '', 'inherit', 'open', 'closed', '', 'ssm%e6%a1%86%e6%9e%b6%e6%a3%80%e6%b5%8b%e7%ac%ac%e4%b8%80%e6%ad%a5', '', '', '2016-09-23 22:35:36', '2016-09-23 14:35:36', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/09/ssm框架检测第一步.png', 0, 'attachment', 'image/png', 0),
(234, 1, '2016-09-23 22:39:47', '2016-09-23 14:39:47', '', 'ssm框架检测第二步', '', 'inherit', 'open', 'closed', '', 'ssm%e6%a1%86%e6%9e%b6%e6%a3%80%e6%b5%8b%e7%ac%ac%e4%ba%8c%e6%ad%a5', '', '', '2016-09-23 22:39:47', '2016-09-23 14:39:47', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/09/ssm框架检测第二步.png', 0, 'attachment', 'image/png', 0),
(235, 1, '2016-09-23 23:16:39', '2016-09-23 15:16:39', '', 'ssm框架检测第三步', '', 'inherit', 'open', 'closed', '', 'ssm%e6%a1%86%e6%9e%b6%e6%a3%80%e6%b5%8b%e7%ac%ac%e4%b8%89%e6%ad%a5', '', '', '2016-09-23 23:16:39', '2016-09-23 15:16:39', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/09/ssm框架检测第三步.png', 0, 'attachment', 'image/png', 0),
(236, 1, '2016-09-24 01:58:33', '2016-09-23 17:58:33', '', 'ssm框架检测404模版页面', '', 'inherit', 'open', 'closed', '', 'ssm%e6%a1%86%e6%9e%b6%e6%a3%80%e6%b5%8b404%e6%a8%a1%e7%89%88%e9%a1%b5%e9%9d%a2', '', '', '2016-09-24 01:58:33', '2016-09-23 17:58:33', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/09/ssm框架检测404模版页面.png', 0, 'attachment', 'image/png', 0),
(237, 1, '2016-09-24 18:50:15', '2016-09-24 10:50:15', '', 'ssm框架经典三层分析', '', 'inherit', 'open', 'closed', '', 'ssm%e6%a1%86%e6%9e%b6%e7%bb%8f%e5%85%b8%e4%b8%89%e5%b1%82%e5%88%86%e6%9e%90', '', '', '2016-09-24 18:50:15', '2016-09-24 10:50:15', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/09/ssm框架经典三层分析.png', 0, 'attachment', 'image/png', 0),
(238, 1, '2016-09-25 02:28:44', '2016-09-24 18:28:44', '', 'ssm框架经典三层分析对照Mvc', '', 'inherit', 'open', 'closed', '', 'ssm%e6%a1%86%e6%9e%b6%e7%bb%8f%e5%85%b8%e4%b8%89%e5%b1%82%e5%88%86%e6%9e%90%e5%af%b9%e7%85%a7mvc', '', '', '2016-09-25 02:28:44', '2016-09-24 18:28:44', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/09/ssm框架经典三层分析对照Mvc.png', 0, 'attachment', 'image/png', 0),
(240, 1, '2016-09-25 15:22:55', '2016-09-25 07:22:55', '', 'ssm框架用户行为解析流程图', '', 'inherit', 'open', 'closed', '', 'ssm%e6%a1%86%e6%9e%b6%e7%94%a8%e6%88%b7%e8%a1%8c%e4%b8%ba%e8%a7%a3%e6%9e%90%e6%b5%81%e7%a8%8b%e5%9b%be', '', '', '2016-09-25 15:22:55', '2016-09-25 07:22:55', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/09/ssm框架用户行为解析流程图.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(241, 1, '2016-09-25 20:59:38', '2016-09-25 12:59:38', '手把手<a href="http://www.jianshu.com/p/5124eef40bf0" target="_blank">上期的SSM项目：优雅的SpringMvc+Mybatis整合之路</a>框架。\r\n<ul>\r\n 	<li>说实话，这一期也应该算是上一期的，但是这起需要单独拿出来的原因有几个，最重要的是我个人讨厌长篇大论。（最简单的就是直接丢项目）</li>\r\n 	<li>但是，直接丢出来，未免太过粗糙，也不能体验出我们编程的思维养成，故此一步一步的走出来。</li>\r\n 	<li>对于很多哥们催更的事情，这个确实也不是那么容易出来的，前面的框架搭建是从网上找的资料一步一步的组合的，但是实际使用还是有很多问题，本篇文章将会解决这些问题。</li>\r\n 	<li>同时，兄弟们稍微耐心点，我这边也是一点点实现，还请客官们放下手中的西瓜刀。</li>\r\n 	<li>再次安利一波,博客地址:<a href="http://acheng1314.cn/" target="_blank">acheng1314.cn</a></li>\r\n</ul>\r\n<h4>工具</h4>\r\n<ul>\r\n 	<li>IDE为<strong>idea15</strong></li>\r\n 	<li>JDK环境为<strong>1.8</strong></li>\r\n 	<li>maven版本为<strong>maven3</strong></li>\r\n 	<li>Mysql版本为<strong>5.5.27</strong></li>\r\n 	<li>Tomcat版本为<strong>7.0.52</strong></li>\r\n</ul>\r\n<h4>本期目标</h4>\r\n<ul>\r\n 	<li>项目框架介绍和<strong>冲突解决</strong>。</li>\r\n 	<li>实例<strong>Service和Dao</strong>。项目框架测试。</li>\r\n 	<li>登录、注册<strong>业务的分析、创建和演示</strong>。</li>\r\n</ul>\r\n<h4>冲突解决</h4>\r\n为什么我把冲突解决放在第一位？\r\n\r\n因为在冲突解决后，我们可以进入测试阶段，同时在解决冲突的时候，我们会一点点的体会到SSM项目框架中各个框架之间是怎么协同工作的，也就可以完成项目介绍。\r\n\r\n重要的是，在实际生活中，我们去公司上班，一般也是先解决项目框架冲突问题。\r\n<ul>\r\n 	<li>打开项目后，随意选择一个Spring的配置文件，会弹出如下界面：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E6%A3%80%E6%B5%8B%E7%AC%AC%E4%B8%80%E6%AD%A5.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E6%A3%80%E6%B5%8B%E7%AC%AC%E4%B8%80%E6%AD%A5.png" />\r\n<div class="image-caption">ssm框架检测第一步</div>\r\n</div>\r\n我们<strong>点击图中右上角圈出来部分</strong>，会弹出如下界面：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E6%A3%80%E6%B5%8B%E7%AC%AC%E4%BA%8C%E6%AD%A5.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E6%A3%80%E6%B5%8B%E7%AC%AC%E4%BA%8C%E6%AD%A5.png" />\r\n<div class="image-caption">ssm框架检测第二步</div>\r\n</div>\r\n这里我们什么都不需要做，<strong>直接点击OK</strong>。\r\n\r\n上面两步是为了告诉Idea我们的Spring配置文件在哪。类似单一Spring配置文件的ApplicationContext.xml一样，我们只是将Spring根据模块分发而已。</li>\r\n 	<li>在Tomcat中运行本项目，运行结果应该是在浏览器中显示Hello World界面。\r\n<ul>\r\n 	<li>配置Tomcat</li>\r\n 	<li>配置项目的Tomcat启动设置。</li>\r\n 	<li>参考连接：<a href="http://jingyan.baidu.com/article/0a52e3f43d9f69bf62ed72f9.html" target="_blank">点击进入</a></li>\r\n 	<li>在web浏览器中输入：<strong>localhost:8080/druid</strong> ，查看druid是否配置成功。\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E6%A3%80%E6%B5%8B%E7%AC%AC%E4%B8%89%E6%AD%A5.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E6%A3%80%E6%B5%8B%E7%AC%AC%E4%B8%89%E6%AD%A5.png" />\r\n<div class="image-caption">ssm框架检测第三步</div>\r\n</div>\r\n如上面的图中，我们可以看到我们的druid并<strong>没有把JDBC驱动列出来</strong>。这说明我们的项目的JDBC驱动要么没有设置，要么是数据库驱动的配置文件没做好。</li>\r\n 	<li>随意输入一个localhost:8080/下的地址，至此我们要展示错误404页面。并且把Tomcat不友好的404页面替换。\r\n<ul>\r\n 	<li>替换思路：错误404这种常出现的页面，我们可以设置为静态资源，以加快网页访问。</li>\r\n 	<li>注意：我们需要先把WEB-IN\\Fweb.xml下面的mvc-dispatcher更改为全局配置。\r\n<pre class="hljs xml"><code class="xml">  <span class="hljs-tag">&lt;<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>mvc-dispatcher<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 默认匹配所有的请求 --&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 我们默认配置这个是为了让我们的Spring框架接管Servelt，实现Spring控制所有站点请求 --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;url-pattern&gt;/css/*&lt;/url-pattern&gt;--&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;url-pattern&gt;/images/*&lt;/url-pattern&gt;--&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;url-pattern&gt;/fonts/*&lt;/url-pattern&gt;--&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">servlet-mapping</span>&gt;</span></code></pre>\r\n配置了web.xml后，我们重启重启应用，输入一个错误的地址（跳转到404页面），会发现提示错误信息，主要报错如下\r\n<pre class="hljs xml"><code class="xml">   Exception encountered during context initialization - cancelling refresh attempt: \r\n      org.springframework.beans.factory.BeanCreationException: \r\n          Error creating bean with name ''dataSource'' defined in file [项目所在的物理地址\\WEB-INF\\classes\\spring\\spring-dao.xml]: \r\n              Initialization of bean failed; nested exception is java.lang.NoClassDefFoundError: org/slf4j/Logger\r\n\r\n      //上面这个错误主要是提示我们：NoClassDefFoundError: org/slf4j/这个类找不到。\r\n\r\n  解决办法：偷懒的把log4j2从maven配置文件中删除了，开启了logback，在maven的pom.xml中：\r\n\r\n      <span class="hljs-comment">&lt;!-- 1.日志 --&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;!– 实现slf4j接口并整合 –&gt;--&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${org.slf4j.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n\r\n      <span class="hljs-comment">&lt;!--log4j2支持--&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;dependency&gt;--&gt;</span>\r\n          <span class="hljs-comment">&lt;!--&lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;--&gt;</span>\r\n          <span class="hljs-comment">&lt;!--&lt;artifactId&gt;log4j-core&lt;/artifactId&gt;--&gt;</span>\r\n          <span class="hljs-comment">&lt;!--&lt;version&gt;${org.apache.logging.log4j.version}&lt;/version&gt;--&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;/dependency&gt;--&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;dependency&gt;--&gt;</span>\r\n          <span class="hljs-comment">&lt;!--&lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;--&gt;</span>\r\n          <span class="hljs-comment">&lt;!--&lt;artifactId&gt;log4j-api&lt;/artifactId&gt;--&gt;</span>\r\n          <span class="hljs-comment">&lt;!--&lt;version&gt;${org.apache.logging.log4j.version}&lt;/version&gt;--&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;/dependency&gt;--&gt;</span></code></pre>\r\n接着，我们重启Tomcat，等项目部署完成后，我们再次打开，再次输入错误地址，我们发现还是在报错，信息如下：\r\n<pre class="hljs xml"><code class="xml">  Exception encountered during context initialization - cancelling refresh attempt: \r\n      org.springframework.beans.factory.BeanCreationException: \r\n          Error creating bean with name ''sqlSessionFactory'' defined in file [项目物理地址\\WEB-INF\\classes\\spring\\spring-dao.xml]: Initialization of bean failed; nested exception is org.springframework.beans.TypeMismatchException: \r\n              Failed to convert property value of type [java.lang.String] to required type [org.springframework.core.io.Resource[]] for property ''mapperLocations''; \r\n                  nested exception is java.lang.IllegalArgumentException: \r\n                      Could not resolve resource location pattern [classpath:mapper/*.xml]: class path resource [mapper/] cannot be resolved to URL because it does not exist\r\n\r\n      根据上面的提示信息，我们可以看到提示的是mapper下面没有文件，那么我们就给他制定一个空的配置文件(BaseDao.xml)，内容如下：\r\n\r\n          <span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span>\r\n          <span class="hljs-doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"\r\n  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>\r\n          <span class="hljs-comment">&lt;!-- namespace是指明Mybatis扫描的目录，mapper是我们的Dao层的映射目录 --&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">mapper</span> <span class="hljs-attribute">namespace</span>=<span class="hljs-value">"cn.acheng1314.dao"</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;/<span class="hljs-title">mapper</span>&gt;</span></code></pre>\r\n同样的，我们再次重启服务器，并且输入错误的地址，现在能正常显示错误404的页面了，但是页面太过Low了，我们得<strong>重写一下web.xml的配置</strong>。404页面如下所示：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E6%A3%80%E6%B5%8B404%E6%A8%A1%E7%89%88%E9%A1%B5%E9%9D%A2.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E6%A3%80%E6%B5%8B404%E6%A8%A1%E7%89%88%E9%A1%B5%E9%9D%A2.png" />\r\n<div class="image-caption">ssm框架检测404模版页面</div>\r\n</div>\r\n解决思路：错误404的页面是常用页面之一，所以我们在项目的资源目录（webapp）下创建一个static目录，专门用来存放静态资源，如js、css、错误提示页面、登录、注册页面等等。\r\n<pre class="hljs xml"><code class="xml">  通过网上查阅资料，我们看到大部分人都是把404页面提示信息提交给Servelt自己管理，我们也依样画瓢，在web.xml中配置，如下：\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">error-page</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">error-code</span>&gt;</span>404<span class="hljs-tag">&lt;/<span class="hljs-title">error-code</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">Location</span>&gt;</span>/static/view/404.html<span class="hljs-tag">&lt;/<span class="hljs-title">Location</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">error-page</span>&gt;</span></code></pre>\r\n同时，我们需要给Spring写一个web的配置，控制哪些资源被拦截。spring-web.xml文件配置如下：\r\n<pre class="hljs xml"><code class="xml">  <span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">beans</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans"</span>\r\n         <span class="hljs-attribute">xmlns:xsi</span>=<span class="hljs-value">"http://www.w3.org/2001/XMLSchema-instance"</span>\r\n         <span class="hljs-attribute">xmlns:context</span>=<span class="hljs-value">"http://www.springframework.org/schema/context"</span>\r\n         <span class="hljs-attribute">xmlns:mvc</span>=<span class="hljs-value">"http://www.springframework.org/schema/mvc"</span>\r\n         <span class="hljs-attribute">xsi:schemaLocation</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans\r\n      http://www.springframework.org/schema/beans/spring-beans.xsd\r\n      http://www.springframework.org/schema/context\r\n      http://www.springframework.org/schema/context/spring-context.xsd\r\n      http://www.springframework.org/schema/mvc\r\n      http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 配置SpringMVC --&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 1.开启SpringMVC注解模式 --&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 简化配置：\r\n          (1)自动注册DefaultAnootationHandlerMapping,AnotationMethodHandlerAdapter\r\n          (2)提供一些列：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat, xml,json默认读写支持\r\n      --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:annotation-driven</span>/&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 2.静态资源默认servlet配置\r\n          (1)加入对静态资源的处理：js,gif,png\r\n          (2)允许使用"/"做整体映射\r\n       --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/css/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/css/"</span> /&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/images/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/images/"</span> /&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/view/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/view/"</span> /&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:default-servlet-handler</span>/&gt;</span>\r\n\r\n      <span class="hljs-comment">&lt;!-- 3.配置jsp 显示ViewResolver --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"viewClass"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"prefix"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"/WEB-INF/jsp/"</span>/&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"suffix"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">".jsp"</span>/&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n\r\n      <span class="hljs-comment">&lt;!-- 4.扫描web相关的bean配置 --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">context:component-scan</span> <span class="hljs-attribute">base-package</span>=<span class="hljs-value">"cn.acheng1314.mvc"</span>&gt;</span>\r\n          <span class="hljs-comment">&lt;!-- 制定扫包规则 ,只扫描使用@Controller注解的JAVA类 --&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">context:include-filter</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"annotation"</span> <span class="hljs-attribute">expression</span>=<span class="hljs-value">"org.springframework.stereotype.Controller"</span>/&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">context:component-scan</span>&gt;</span>\r\n\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">beans</span>&gt;</span></code></pre>\r\n以上文件配置好后，我们重启服务器，并输入错误地址，现在我们插入的404页面正常显示了。\r\n\r\n通过上面的资料，我们可以大胆整理下web请求的思路：\r\n\r\n<strong>用户发起请求→DNS解析发现服务器→建立链接发送请求→WEB服务器分发给应用服务器→MVC层框架处理请求过程→返回数据给用户</strong>\r\n\r\n而上面的SpringMvc作为框架层，我们也可以通过网上资料和我们目前的配置做出一些构想：\r\n\r\n<strong>Tomact分发请求→Servelt收到请求→Spring接管Servelt→DispatcherServlet处理请求分发→根据Spring配置找到对应的控制器（Controller）处理业务→返回对应数据。</strong>\r\n\r\n而下面有一张更加突出的图片说明了这一切：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://upload-images.jianshu.io/upload_images/2139601-1bb6d70b177cf924.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-original-src="http://upload-images.jianshu.io/upload_images/2139601-1bb6d70b177cf924.png?imageMogr2/auto-orient/strip%7CimageView2/2" />\r\n<div class="image-caption">SpringMVC详细运行流程图</div>\r\n</div>\r\n<strong>总结：</strong>目前项目中的静态资源我们已经处理完毕，<strong>加入了一部分Web的静态资源</strong>，<strong>增加了Spring的web处理配置</strong>，<strong>修改了web.xml</strong>,<strong>log4j2替换为LogBack，Junit版本提升为4.12</strong>，加入了一个<strong>BaseMapper.xml</strong>。\r\n\r\nweb.xml文件如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-doctype">&lt;!DOCTYPE web-app PUBLIC\r\n"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"\r\n"http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">web-app</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"http://xmlns.jcp.org/xml/ns/javaee"</span>\r\n <span class="hljs-attribute">xmlns:xsi</span>=<span class="hljs-value">"http://www.w3.org/2001/XMLSchema-instance"</span>\r\n <span class="hljs-attribute">xsi:schemaLocation</span>=<span class="hljs-value">"http://xmlns.jcp.org/xml/ns/javaee\r\n http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span>\r\n <span class="hljs-attribute">version</span>=<span class="hljs-value">"3.1"</span> <span class="hljs-attribute">metadata-complete</span>=<span class="hljs-value">"true"</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file-list</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>index.html<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>index.htm<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>index.jsp<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>default.html<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>default.htm<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>default.jsp<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file-list</span>&gt;</span>\r\n  <span class="hljs-comment">&lt;!-- 如果是用mvn命令生成的xml，需要修改servlet版本为3.1 --&gt;</span>\r\n  <span class="hljs-comment">&lt;!-- 配置DispatcherServlet --&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">servlet</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">display-name</span>&gt;</span>SSM<span class="hljs-tag">&lt;/<span class="hljs-title">display-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>mvc-dispatcher<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-class</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 配置springMVC需要加载的配置文件\r\n          spring-dao.xml,spring-service.xml,spring-web.xml\r\n          Mybatis - &gt; spring -&gt; springmvc\r\n       --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>classpath:spring/spring-*.xml<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">servlet</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>mvc-dispatcher<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 默认匹配所有的请求 --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;url-pattern&gt;/css/*&lt;/url-pattern&gt;--&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;url-pattern&gt;/images/*&lt;/url-pattern&gt;--&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;url-pattern&gt;/fonts/*&lt;/url-pattern&gt;--&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n\r\n  <span class="hljs-comment">&lt;!-- spring框架提供的字符集过滤器 --&gt;</span>\r\n  <span class="hljs-comment">&lt;!-- spring Web MVC框架提供了org.springframework.web.filter.CharacterEncodingFilter用于解决POST方式造成的中文乱码问题  --&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">filter</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-class</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- force强制，促使 --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>forceEncoding<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">filter</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">filter-mapping</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">filter-mapping</span>&gt;</span>\r\n\r\n  <span class="hljs-comment">&lt;!--druid ==&gt; WEB方式监控配置--&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">servlet</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>DruidStatView<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-class</span>&gt;</span>com.alibaba.druid.support.http.StatViewServlet<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-class</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">servlet</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>DruidStatView<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/druid/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">filter</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">filter-name</span>&gt;</span>druidWebStatFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">filter-class</span>&gt;</span>com.alibaba.druid.support.http.WebStatFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-class</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>exclusions<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>/public/*,*.js,*.css,/druid*,*.jsp,*.swf<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>principalSessionName<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>sessionInfo<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>profileEnable<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">filter</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">filter-mapping</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">filter-name</span>&gt;</span>druidWebStatFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">filter-mapping</span>&gt;</span>\r\n\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">error-page</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">error-code</span>&gt;</span>404<span class="hljs-tag">&lt;/<span class="hljs-title">error-code</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">location</span>&gt;</span>/static/view/404.html<span class="hljs-tag">&lt;/<span class="hljs-title">location</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">error-page</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">web-app</span>&gt;</span></code></pre>\r\nBaseMapper.xml如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span>\r\n<span class="hljs-doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"\r\n      "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- namespace指向我们的dao所在的地址 --&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">mapper</span> <span class="hljs-attribute">namespace</span>=<span class="hljs-value">"cn.acheng1314.dao"</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">mapper</span>&gt;</span></code></pre>\r\n其他的文件修改的信息都可以在上面看到就不再次贴出来了。</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<h4>SSM框架实例--仓库管理系统--登录注册的功能分析</h4>\r\n分析：\r\n<ul>\r\n 	<li>登录和注册，都是<strong>用户的行为</strong>，也是我们开发中常说的某个行为对应的<strong>业务</strong>。</li>\r\n 	<li>注册用户，意味着<strong>添加用户</strong>，添加了用户后，我们才有登录功能的继续执行的可能。</li>\r\n 	<li>用户登录，也是<strong>用户信息的查找和比对过程</strong>。一般来说<strong>用户先把信息提交给程序</strong>，然后<strong>程序按照流程执行后提交数据给服务器</strong>（~这个流程中程序可能会产生一些业务逻辑的判断~），<strong>服务器收到数据并进行数据对比</strong>，当<strong>用户信息存在且帐号和密码匹配</strong>才能登录成功，否则<strong>前面的任意条件不满足即为登录失败</strong>。</li>\r\n 	<li>我们可以<strong>依靠单一的用户表</strong>来实现用户的<strong>登录数据获取</strong>和<strong>注册信息的添加</strong>。</li>\r\n</ul>\r\n功能大概分析完毕后，我们就可以考虑下如何实现这些功能。大概图示如下：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E7%BB%8F%E5%85%B8%E4%B8%89%E5%B1%82%E5%88%86%E6%9E%90.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E7%BB%8F%E5%85%B8%E4%B8%89%E5%B1%82%E5%88%86%E6%9E%90.png" />\r\n<div class="image-caption">ssm框架经典三层分析</div>\r\n</div>\r\n<ul>\r\n 	<li>首先用户信息需要存储，我们需要数据库的支撑。</li>\r\n 	<li>有了数据库的支援后，我们需要先测试用户信息的添加和查找。就是我们常说的Dao层。</li>\r\n 	<li>当我们的Dao层拿到想要的数据，我们需要Service层将Dao层的操作作为服务提供给控制器，再由控制器提供给前台页面。</li>\r\n 	<li>同样的用户需要获取某个数据，先是浏览器获取到用户请求→web层→Service层→Dao层，再接着重复上面的操作。</li>\r\n</ul>\r\n上面一张图用模型已经很好的说明了java web后端各层的关系，下面一张图是经典三层对照MVC的描述。\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E7%BB%8F%E5%85%B8%E4%B8%89%E5%B1%82%E5%88%86%E6%9E%90%E5%AF%B9%E7%85%A7Mvc.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E7%BB%8F%E5%85%B8%E4%B8%89%E5%B1%82%E5%88%86%E6%9E%90%E5%AF%B9%E7%85%A7Mvc.png" />\r\n<div class="image-caption">ssm框架经典三层分析对照Mvc</div>\r\n</div>\r\n~上面的图引用自互联网资料，下面的黑色字是我添加上去的。~\r\n<ul>\r\n 	<li>上面图中，我们可以看到一部分MVC设计和图中标记的类似，但是这只是一种MVC模式的栗子。</li>\r\n 	<li>关于更加详细的MVC，我们可以<a href="http://baike.baidu.com/link?url=1PA-IByIX6CURKovUXuW8gfDpyqIVC6gZdLNT0DmCl4-2hQq8EB6KMeTKvFuhw2o4UUH6tV4AjVcKZtCr-MUEsn7qtVfTh2Y_L8H-FqtqHDXdstPtXDcUBRH_7mxPOyt" target="_blank">百度百科</a>查看。\r\n\r\n<hr />\r\n\r\n</li>\r\n</ul>\r\n上面提到的东西，我们适可而止就行了，很多东西现在还不是深究的时候，我们要先懂一个事物的外在表现，才有进一步的探索，所以我们需要等缘分的到来。\r\n<h4>SSM框架实例--仓库管理系统--注册、登录的功能模拟实现</h4>\r\n按照前面我们的分析来讲，我们需要先考虑Dao层的实现，毕竟有了Dao层对数据的封装，才可以有后面的操作，所以后面我的栗子中，一切都是按照<strong>Dao→Service→Controller→View</strong>这样的一个步骤来实现。\r\n<ul>\r\n 	<li>用户注册功能的Dao层实现。\r\n<ul>\r\n 	<li>数据库基本操作为：增删改查。</li>\r\n 	<li>我们根据数据库常规操作的类型，分别对其进行抽象，所以产生了Dao.java这个接口对象的基本模型。代码如下：\r\n<pre class="hljs java"><code class="java">  <span class="hljs-comment">/**\r\n   * 通过接口编程\r\n   * <span class="hljs-doctag">@param</span> &lt;T&gt; 泛型用于解耦，同时避免写重复代码\r\n   */</span>\r\n  <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Dao</span>&lt;<span class="hljs-title">T</span>&gt; </span>{\r\n      <span class="hljs-comment">/**\r\n       * 添加某个对象\r\n       * <span class="hljs-doctag">@param</span> t 待添加的对象\r\n       * <span class="hljs-doctag">@return</span>  返回受影响的行数\r\n       */</span>\r\n      <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(T t)</span></span>;\r\n\r\n      <span class="hljs-comment">/**\r\n       * 删除某个对象，在企业开发中，我们一般不做物理删除，只是添加某个字段对其数据进行可用控制\r\n       * <span class="hljs-doctag">@param</span> t 待删除对象\r\n       * <span class="hljs-doctag">@return</span> 返回受影响的条数\r\n       */</span>\r\n      <span class="hljs-function"><span class="hljs-keyword">int</span>  <span class="hljs-title">del</span><span class="hljs-params">(T t)</span></span>;\r\n\r\n      <span class="hljs-comment">/**\r\n       * 更新某个对象\r\n       * <span class="hljs-doctag">@param</span> t 待更新对象\r\n       * <span class="hljs-doctag">@return</span> 返回受影响的条数\r\n       */</span>\r\n      <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(T t)</span></span>;\r\n\r\n      <span class="hljs-comment">/**\r\n       * 通过ID查找一个对象\r\n       * <span class="hljs-doctag">@param</span> Id    待查询的对象的ID\r\n       * <span class="hljs-doctag">@return</span>  返回该ID对应的对象\r\n       */</span>\r\n      <span class="hljs-function">T <span class="hljs-title">findOneById</span><span class="hljs-params">(Serializable Id)</span></span>;\r\n\r\n      <span class="hljs-comment">/**\r\n       * 查找对象集合\r\n       * <span class="hljs-doctag">@return</span>  返回对象集合\r\n       */</span>\r\n      <span class="hljs-function">List&lt;T&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;\r\n  }</code></pre>\r\n</li>\r\n 	<li>实现用户的Dao层：\r\n<ul>\r\n 	<li>我们要针对用户写用户的Dao层，我们需要有一个用户对象的封装，直接在domain包下面创建User.java，代码如下：\r\n<pre class="hljs perl"><code class="perl">/***\r\n创建数据库用户表：\r\nCREATE TABLE <span class="hljs-string">`user`</span> (\r\n<span class="hljs-string">`login_id`</span> varchar(<span class="hljs-number">20</span>) NOT NULL COMMENT <span class="hljs-string">''登陆ID''</span>,\r\n<span class="hljs-string">`pwd`</span> varchar(<span class="hljs-number">20</span>) NOT NULL COMMENT <span class="hljs-string">''用户密码''</span>,\r\n<span class="hljs-string">`name`</span> varchar(<span class="hljs-number">100</span>) NOT NULL COMMENT <span class="hljs-string">''用户姓名''</span>,\r\n<span class="hljs-string">`age`</span> <span class="hljs-keyword">int</span>(<span class="hljs-number">3</span>) NOT NULL COMMENT <span class="hljs-string">''用户年龄''</span>,\r\n<span class="hljs-string">`sex`</span> varchar(<span class="hljs-number">3</span>) NOT NULL COMMENT <span class="hljs-string">''性别''</span>,\r\n<span class="hljs-string">`duty`</span> varchar(<span class="hljs-number">15</span>) COMMENT <span class="hljs-string">''职务''</span>,\r\n<span class="hljs-string">`cell_number`</span> varchar(<span class="hljs-number">15</span>) COMMENT <span class="hljs-string">''手机号''</span>,\r\n<span class="hljs-string">`photo_url`</span> varchar(<span class="hljs-number">75</span>) COMMENT <span class="hljs-string">''头像地址''</span>,\r\n<span class="hljs-string">`used`</span> boolean NOT NULL COMMENT <span class="hljs-string">''账号是否可用''</span>,\r\nPRIMARY KEY (<span class="hljs-string">`login_id`</span>)\r\n) ENGINE=InnoDB AUTO_INCREMENT=<span class="hljs-number">1000</span> DEFAULT CHARSET=utf8 COMMENT=<span class="hljs-string">''用户表''</span>;\r\n\r\n插入默认数据：\r\nINSERT INTO <span class="hljs-string">`user`</span> (<span class="hljs-string">`login_id`</span>,<span class="hljs-string">`pwd`</span>,<span class="hljs-string">`name`</span>,<span class="hljs-string">`age`</span>,<span class="hljs-string">`sex`</span>,<span class="hljs-string">`used`</span>)\r\nVALUES\r\n(<span class="hljs-string">''pc859107393''</span>,<span class="hljs-string">''123456''</span>,<span class="hljs-string">''阿程''</span>,<span class="hljs-number">20</span>,<span class="hljs-string">''男''</span>,true),\r\n(<span class="hljs-string">''pc228568859''</span>,<span class="hljs-string">''123456''</span>,<span class="hljs-string">''chengcheng''</span>,<span class="hljs-number">20</span>,<span class="hljs-string">''女''</span>,true),\r\n(<span class="hljs-string">''pangpang''</span>,<span class="hljs-string">''123456''</span>,<span class="hljs-string">''余下一整夜''</span>,<span class="hljs-number">25</span>,<span class="hljs-string">''男''</span>,true),\r\n(<span class="hljs-string">''111111''</span>,<span class="hljs-string">''123456''</span>,<span class="hljs-string">''手拉手系列教程''</span>,<span class="hljs-number">22</span>,<span class="hljs-string">''女''</span>,true);\r\n*<span class="hljs-regexp">/\r\n\r\npublic class User implements Serializable {\r\n  private String name;    /</span><span class="hljs-regexp">/名字\r\n  private String sex; /</span><span class="hljs-regexp">/性别\r\n  private String loginId; /</span><span class="hljs-regexp">/登陆ID\r\n  private String pwd;    /</span><span class="hljs-regexp">/密码\r\n  private String duty;    /</span><span class="hljs-regexp">/职务\r\n  private int age;    /</span><span class="hljs-regexp">/年龄\r\n  private String cellNumber;  /</span><span class="hljs-regexp">/手机号\r\n  private String photoUrl;    /</span><span class="hljs-regexp">/头像地址\r\n  private boolean used = true;   /</span><span class="hljs-regexp">/是否可用,默认值是true\r\n\r\n  ···省略get、set和toString\r\n}    \r\n\r\n/</span><span class="hljs-regexp">/推荐大家把每个bean对应的数据库操作备注到上面。\r\n/</span><span class="hljs-regexp">/打开Navicat For Mysql，链接上数据库，创建对应的数据库，并运行上面的sql产生数据库表和初始记录。</span></code></pre>\r\n</li>\r\n 	<li>当我们数据库创建完毕后，我们需要写一个接口对user表进行操作封装。我们在dao包下面创建<strong>UserDao接口</strong>，代码如下：\r\n<pre class="hljs java"><code class="java"><span class="hljs-comment">/**\r\n* 在传统的jdbc操作中，我们需要手动管理数据库连接的开关，数据库资源访问的开关等等\r\n* &lt;br/&gt;但是,我们这里采用了Mybatis和Druid这两个框架，那么我们可以完全不必理会数据库连接等等的控制，\r\n* &lt;br/&gt;我们只需要更加专注于业务实现的开发。\r\n*/</span>\r\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Dao</span>&lt;<span class="hljs-title">User</span>&gt; </span>{\r\n  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(User user)</span></span>;\r\n\r\n  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">del</span><span class="hljs-params">(User user)</span></span>;\r\n\r\n  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(User user)</span></span>;\r\n\r\n  <span class="hljs-function">User <span class="hljs-title">findOneById</span><span class="hljs-params">(Serializable Id)</span></span>;\r\n\r\n  <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;\r\n}</code></pre>\r\n</li>\r\n 	<li>完成UserDao的封装后，传统的操作这一步需要自己手动实现UserDao的Impl，并实现对数据库的操作等等。而我们使用Mybatis后，UserDao的Impl在Mybatis的mapper文件夹中指定为xml，我们的Dao文件除了数据库操作的语句其他的都无需关注,那么剩下的数据库操作什么的我们都无需关心，毕竟Mybatis和druid都把其他的事情帮我们做了。UserDao.xml如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span>\r\n<span class="hljs-doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"\r\n      "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>\r\n<span class="hljs-comment">&lt;!-- namespace指定我们的到具体的bean --&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">mapper</span> <span class="hljs-attribute">namespace</span>=<span class="hljs-value">"cn.acheng1314.dao.UserDao"</span>&gt;</span>\r\n\r\n  <span class="hljs-comment">&lt;!--查找--&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">select</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"findOneById"</span> <span class="hljs-attribute">resultType</span>=<span class="hljs-value">"User"</span> <span class="hljs-attribute">parameterType</span>=<span class="hljs-value">"String"</span>&gt;</span>\r\n      SELECT\r\n      *\r\n      FROM\r\n      `user`\r\n      WHERE\r\n      login_id = #{userId}\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">select</span>&gt;</span>\r\n\r\n  <span class="hljs-comment">&lt;!--增加语句--&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">insert</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"add"</span> <span class="hljs-attribute">parameterType</span>=<span class="hljs-value">"User"</span>&gt;</span>\r\n  INSERT INTO\r\n      `user`\r\n      (`login_id`,`name`,`age`,`sex`,`duty`,`cell_number`,`photo_url`,`pwd`,`used`)\r\n      VALUES\r\n      (#{loginId},#{name},#{age},#{sex},#{duty},#{cellNumber},#{photoUrl},#{pwd},#{used})\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">insert</span>&gt;</span>\r\n\r\n  <span class="hljs-comment">&lt;!-- 删除 --&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">update</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"del"</span> <span class="hljs-attribute">parameterType</span>=<span class="hljs-value">"User"</span>&gt;</span>\r\n      UPDATE\r\n      `user`\r\n      SET\r\n      `used`=FALSE\r\n      WHERE\r\n      `login_id`=#{loginId};\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">update</span>&gt;</span>\r\n\r\n  <span class="hljs-comment">&lt;!-- 更新用户信息 --&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">update</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"update"</span> <span class="hljs-attribute">parameterType</span>=<span class="hljs-value">"User"</span>&gt;</span>\r\n      UPDATE\r\n      `user`\r\n      SET\r\n      `name`=#{name}, `age`=#{age}, `sex`=#{sex}, `duty`=#{duty}, `cell_number`=#{cellNumber}, `photo_url`=#{photoUrl}\r\n      WHERE\r\n      `login_id`=#{loginId};\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">update</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">mapper</span>&gt;</span></code></pre>\r\n</li>\r\n 	<li>mapper下面的UserDao.xml已经完成，这就意味着我们的UserDao基本完成，那么我们应该来一次单元测试来看看效果如何。UserDaoTest.java如下：\r\n<pre class="hljs cs"><code class="cs">@RunWith(SpringJUnit4ClassRunner.class) <span class="hljs-comment">//spring的单元测试</span>\r\n@ContextConfiguration({<span class="hljs-string">"classpath:spring/spring-*.xml"</span>})    <span class="hljs-comment">//上下文配置</span>\r\n<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoTest</span> {\r\n\r\n  @Autowired\r\n  <span class="hljs-keyword">private</span> UserDao userDao;    <span class="hljs-comment">//初始化Dao层，面向接口编程</span>\r\n\r\n  <span class="hljs-comment">/**\r\n  * 添加用户的单元测试，添加成功与否会有对应的提示。\r\n  * 当然按照我这个配置一般会正确，如果说出错就需要你一步一步的看错误的提示代码了。\r\n  * 添加同样的LoginId的用户会添加失败，因为在上面把LoginId作为了数据库表的主键。\r\n  */</span>\r\n  @<span class="hljs-function">Test\r\n  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAdd</span>() </span>{\r\n      User user = <span class="hljs-keyword">new</span> User();\r\n      user.setLoginId(<span class="hljs-string">"pc147852369"</span>);\r\n      user.setName(<span class="hljs-string">"雨下一整夜"</span>);\r\n      user.setPwd(<span class="hljs-string">"123456"</span>);\r\n      user.setSex(<span class="hljs-string">"未知"</span>);\r\n      <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>; <span class="hljs-comment">//受影响的行数默认为0</span>\r\n      <span class="hljs-keyword">try</span> {\r\n          result = userDao.add(user);\r\n      } <span class="hljs-keyword">catch</span> (Exception e) {\r\n          e.printStackTrace();\r\n          System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"添加用户失败"</span>);\r\n      }\r\n      <span class="hljs-keyword">if</span> (result&gt;<span class="hljs-number">0</span>)\r\n          System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"添加用户成功"</span>);\r\n  }\r\n\r\n  <span class="hljs-comment">/**\r\n  * 查找用户测试，成功与否会有log输出\r\n  */</span>\r\n  @<span class="hljs-function">Test\r\n  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindOneId</span>() throws Exception </span>{\r\n      User user = <span class="hljs-keyword">new</span> User();\r\n      user.setLoginId(<span class="hljs-string">"pc147852369"</span>);\r\n      User result = <span class="hljs-keyword">null</span>; <span class="hljs-comment">//受影响的行数默认为0</span>\r\n      <span class="hljs-keyword">try</span> {\r\n          result = userDao.findOneById(user.getLoginId());\r\n      } <span class="hljs-keyword">catch</span> (Exception e) {\r\n          e.printStackTrace();\r\n          System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"查找用户失败"</span>);\r\n      }\r\n      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span>!=result)\r\n          System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"查找用户成功\\n"</span>+result.toString());\r\n  }\r\n\r\n  @<span class="hljs-function">Test\r\n  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDel</span>() </span>{\r\n      User user = <span class="hljs-keyword">new</span> User();\r\n      user.setLoginId(<span class="hljs-string">"pc147852369"</span>);\r\n      <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>; <span class="hljs-comment">//受影响的行数默认为0</span>\r\n      <span class="hljs-keyword">try</span> {\r\n          result = userDao.del(user);\r\n      } <span class="hljs-keyword">catch</span> (Exception e) {\r\n          e.printStackTrace();\r\n          System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"删除用户失败"</span>);\r\n      }\r\n      <span class="hljs-keyword">if</span> (result&gt;<span class="hljs-number">0</span>)\r\n          System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"删除用户成功"</span>);\r\n  }\r\n\r\n  @<span class="hljs-function">Test\r\n  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate</span>() </span>{\r\n      User user = <span class="hljs-keyword">new</span> User();\r\n      user.setLoginId(<span class="hljs-string">"pc147852369"</span>);\r\n      user.setName(<span class="hljs-string">"手把手教程"</span>);\r\n      user.setPwd(<span class="hljs-string">"123456"</span>);\r\n      user.setSex(<span class="hljs-string">"男"</span>);\r\n      <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>; <span class="hljs-comment">//受影响的行数默认为0</span>\r\n      <span class="hljs-keyword">try</span> {\r\n          result = userDao.update(user);\r\n      } <span class="hljs-keyword">catch</span> (Exception e) {\r\n          e.printStackTrace();\r\n          System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"更新用户信息用户失败"</span>);\r\n      }\r\n      <span class="hljs-keyword">if</span> (result&gt;<span class="hljs-number">0</span>)\r\n          System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"更新用户信息用户成功"</span>);\r\n\r\n  }\r\n}</code></pre>\r\n数据的操作结果我们都可以在mysql中查看，这里就不一一截图了。当然我们也可看到每次单元测试都需要<strong>在类上面注解spring单元测试和spring的上下文</strong>，按照我们编程的原则，一次编码处处运行，我们可以<strong>把这些注解放到BaseTest.java</strong>中，<strong>后面所有的单元测试都继承BaseTest.java即可避免大量重复编码</strong>。</li>\r\n</ul>\r\n</li>\r\n 	<li>UserService实现(<strong>注意编程思维的养成</strong>)\r\n<ul>\r\n 	<li>根据我们面向接口编程的思维来讲，我们在Service中核心是实现Dao层，并调用Dao层。</li>\r\n 	<li>刚才我们单元测试，我们的UserDao层通过测试了，我们现在中心就应该放在业务逻辑的实现，而不是继续纠缠Dao层，毕竟数据持久化已经实现了。</li>\r\n 	<li>从服务端程序的角度看来，用户的主要业务有注册、登录、注销登录、注销帐号等等，这里我们先拿注册来说事。</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<ul>\r\n 	<li><strong>用户注册流程分析（用户角度）：</strong>\r\n<ul>\r\n 	<li>填写帐号相关信息</li>\r\n 	<li>提交注册信息</li>\r\n 	<li>服务器返回是否注册成功</li>\r\n</ul>\r\n</li>\r\n 	<li><strong>用户注册流程分析（服务器角度）：</strong>\r\n<ul>\r\n 	<li>收到用户注册请求</li>\r\n 	<li>解包数据→封装到UserBean\r\n<ul>\r\n 	<li>解包数据失败(请求信息异常)，返回错误提示信息</li>\r\n</ul>\r\n</li>\r\n 	<li>针对具体的用户信息检查是否符合标准\r\n<ul>\r\n 	<li>不符合检查标准，返回对应的错误提示</li>\r\n</ul>\r\n</li>\r\n 	<li>通过检查，调用Dao检查是否存在同样的用户\r\n<ul>\r\n 	<li>数据库已经存在相同的用户信息，不能重复添加，返回错误提示信息</li>\r\n</ul>\r\n</li>\r\n 	<li>不存在同样的用户，添加新用户，并返回成功的提示信息</li>\r\n</ul>\r\n流程图反映如下：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E8%A7%A3%E6%9E%90%E6%B5%81%E7%A8%8B%E5%9B%BE.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E8%A7%A3%E6%9E%90%E6%B5%81%E7%A8%8B%E5%9B%BE.png" />\r\n<div class="image-caption">ssm框架用户行为解析流程图</div>\r\n</div></li>\r\n 	<li>代码实现用户注册的Service：\r\n<pre class="hljs java"><code class="java"><span class="hljs-comment">//创建一个BaseService接口，用泛型解耦</span>\r\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseService</span>&lt;<span class="hljs-title">User</span>&gt; </span>{\r\n  <span class="hljs-comment">//添加用户的实例</span>\r\n  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(User user)</span> <span class="hljs-keyword">throws</span> Exception</span>;\r\n}\r\n\r\n------------------------------分割线----------------------------------\r\n\r\n<span class="hljs-comment">//创建一个UserService继承BaseService，并指定具体的实体类型</span>\r\n<span class="hljs-comment">//为什么要再写一个UserService接口？不同对象的业务体系不同，BaseService并不能完全替代不同对象的具体行为表现</span>\r\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseService</span>&lt;<span class="hljs-title">User</span>&gt; </span>{\r\n\r\n  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(User user)</span> <span class="hljs-keyword">throws</span> Exception</span>;\r\n}\r\n\r\n------------------------------分割线----------------------------------\r\n\r\n<span class="hljs-comment">//创建UserServiceImpl实现UserService接口</span>\r\n<span class="hljs-annotation">@Service</span>(<span class="hljs-string">"userService"</span>)\r\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>{\r\n\r\n  <span class="hljs-annotation">@Autowired</span>\r\n  <span class="hljs-keyword">private</span> UserDao userDao;\r\n\r\n  <span class="hljs-comment">/**\r\n   * 添加用户，一般来说需要检查用户为空、用户名为空、密码为空\r\n   */</span>\r\n  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(User user)</span> <span class="hljs-keyword">throws</span> UserCanNotBeNullException, UserNameCanNotBeNullException, UserPwdCanNotBeNullException, UserAireadyExistException, OtherThingsException </span>{\r\n      <span class="hljs-comment">//先检查用户是否存在</span>\r\n      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == user) {\r\n          <span class="hljs-comment">//抛出用户为空的自定义异常</span>\r\n          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UserCanNotBeNullException(<span class="hljs-string">"User can not be Null"</span>);\r\n      }\r\n      <span class="hljs-comment">//用户名不能为空检查</span>\r\n      <span class="hljs-keyword">if</span> (StringUtils.isEmpty(user.getLoginId())) {\r\n          <span class="hljs-comment">//抛出用户名为空的自定义异常</span>\r\n          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UserNameCanNotBeNullException(<span class="hljs-string">"User name can not be Null"</span>);\r\n      }\r\n      <span class="hljs-comment">//用户密码不能为空检查</span>\r\n      <span class="hljs-keyword">if</span> (StringUtils.isEmpty(user.getPwd())) {\r\n          <span class="hljs-comment">//抛出用户密码为空的自定义异常</span>\r\n          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UserPwdCanNotBeNullException(<span class="hljs-string">"User name can not be Null"</span>);\r\n      }\r\n      <span class="hljs-comment">//由于我这个是仓库管理系统，根据业务需求来说，我们的用户基本信息都是不能为空的</span>\r\n      <span class="hljs-comment">//基本信息包括：姓名、年龄、用户名、密码、性别、手机号，年龄大于18</span>\r\n      <span class="hljs-keyword">if</span> (StringUtils.isEmpty(user.getDuty())\r\n              || StringUtils.isEmpty(user.getSex())\r\n              || user.getAge() &gt; <span class="hljs-number">18</span>\r\n              || StringUtils.isEmpty(user.getCellNumber())) {\r\n          <span class="hljs-comment">//其他综合异常</span>\r\n          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> OtherThingsException(<span class="hljs-string">"Some use''s base info can not be null"</span>);\r\n      }\r\n      <span class="hljs-comment">//已经存在相同用户</span>\r\n      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != userDao.findOneById(user.getLoginId())) {\r\n          <span class="hljs-comment">//存在相同的用户异常</span>\r\n          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UserAireadyExistException(<span class="hljs-string">"Register User Failed，Because the  user Aiready exist"</span>);\r\n      }\r\n      <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>; <span class="hljs-comment">//受影响的行数默认为0</span>\r\n      <span class="hljs-keyword">try</span> {\r\n          result = userDao.add(user);\r\n      } <span class="hljs-keyword">catch</span> (Exception e) {\r\n          System.out.println(<span class="hljs-string">"添加用户失败,用户已经存在"</span>);\r\n          <span class="hljs-comment">//其他用户添加失败异常</span>\r\n          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> OtherThingsException(e);\r\n      }\r\n      <span class="hljs-keyword">if</span> (result &gt; <span class="hljs-number">0</span>)\r\n          System.out.println(<span class="hljs-string">"添加用户成功"</span>);\r\n  }\r\n\r\n  <span class="hljs-comment">//···省略的其他方法···</span>\r\n\r\n}</code></pre>\r\n</li>\r\n 	<li>老规矩，写完每个Service后，都需要针对具体的对象的行为进行单元测试，UserServiceTest.java代码如下：\r\n<pre class="hljs scala"><code class="scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceTest</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span></span> <span class="hljs-title">BaseTest</span> {</span>\r\n  <span class="hljs-annotation">@Autowired</span>\r\n  <span class="hljs-keyword">private</span> <span class="hljs-type">UserServiceImpl</span> userService;    \r\n  <span class="hljs-comment">//此处直接使用UserService的实现类，主要是方便抛出异常，然后异常出现时候可以针对性的处理</span>\r\n\r\n  <span class="hljs-annotation">@Test</span>\r\n  public void testAdd() {\r\n      <span class="hljs-type">User</span> user = <span class="hljs-keyword">new</span> <span class="hljs-type">User</span>();\r\n      <span class="hljs-keyword">try</span> {\r\n          userService.add(user);\r\n      } <span class="hljs-keyword">catch</span> (<span class="hljs-type">UserCanNotBeNullException</span> e) {\r\n          <span class="hljs-comment">//用户不能为空异常抛出</span>\r\n          e.printStackTrace();\r\n      } <span class="hljs-keyword">catch</span> (<span class="hljs-type">UserNameCanNotBeNullException</span> e) {\r\n          <span class="hljs-comment">//用户名不能为空</span>\r\n          e.printStackTrace();\r\n      } <span class="hljs-keyword">catch</span> (<span class="hljs-type">UserPwdCanNotBeNullException</span> e) {\r\n          <span class="hljs-comment">//用户密码不能为空</span>\r\n          e.printStackTrace();\r\n      } <span class="hljs-keyword">catch</span> (<span class="hljs-type">UserAireadyExistException</span> e) {\r\n          <span class="hljs-comment">//用户存在抛出</span>\r\n          e.printStackTrace();\r\n      } <span class="hljs-keyword">catch</span> (<span class="hljs-type">OtherThingsException</span> e) {\r\n          <span class="hljs-comment">//其他综合异常或是不能处理的异常</span>\r\n          e.printStackTrace();\r\n      }\r\n  }\r\n\r\n  <span class="hljs-comment">//···省略的其他测试代码···</span>\r\n}</code></pre>\r\n</li>\r\n 	<li>同样的，我们的Service的测试代码执行后，我们可以在mysql中看到具体的数据变化，也不再一一贴图了。</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n因为篇幅和时间原因，我们暂时就不写具体功能的详细实现了，毕竟学习不是一朝一夕，多培养思维才是重要的事情。从这一期开始代码逐渐增多，毕竟学习过程就是这样的递增的，等熟悉以后可能很多地方就更多是培养思维方式，代码就直接贴上（详细的注释不会少）。\r\n\r\n<hr />\r\n\r\n这一期总结：\r\n<ul>\r\n 	<li>解决项目框架冲突解决，各个框架职能的简单介绍。</li>\r\n 	<li>简单的原理解释。</li>\r\n 	<li>java web经典mvc、三层架构简单介绍。</li>\r\n 	<li>部分简单的SQL语句。</li>\r\n 	<li>针对Dao层和Service层的单元测试。</li>\r\n 	<li>简单业务实现的流程分析。</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n下期预告：我们实现详细的功能和Controller(Url请求分发)，同时分出API接口为以后打下基础。\r\n\r\n项目地址：<a href="https://github.com/pc859107393/SpringMvcMybatis/tree/master" target="_blank">点击访问github</a>', '[手把手教程][JavaWeb]SSM框架验证、修复和实例', '', 'publish', 'open', 'open', '', '%e6%89%8b%e6%8a%8a%e6%89%8b%e6%95%99%e7%a8%8bjavawebssm%e6%a1%86%e6%9e%b6%e9%aa%8c%e8%af%81%e3%80%81%e4%bf%ae%e5%a4%8d%e5%92%8c%e5%ae%9e%e4%be%8b', '', '', '2016-09-25 20:59:38', '2016-09-25 12:59:38', '', 0, 'http://acheng1314.cn/?p=241', 0, 'post', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(242, 1, '2016-09-25 20:59:38', '2016-09-25 12:59:38', '手把手<a href="http://www.jianshu.com/p/5124eef40bf0" target="_blank">上期的SSM项目：优雅的SpringMvc+Mybatis整合之路</a>框架。\r\n<ul>\r\n 	<li>说实话，这一期也应该算是上一期的，但是这起需要单独拿出来的原因有几个，最重要的是我个人讨厌长篇大论。（最简单的就是直接丢项目）</li>\r\n 	<li>但是，直接丢出来，未免太过粗糙，也不能体验出我们编程的思维养成，故此一步一步的走出来。</li>\r\n 	<li>对于很多哥们催更的事情，这个确实也不是那么容易出来的，前面的框架搭建是从网上找的资料一步一步的组合的，但是实际使用还是有很多问题，本篇文章将会解决这些问题。</li>\r\n 	<li>同时，兄弟们稍微耐心点，我这边也是一点点实现，还请客官们放下手中的西瓜刀。</li>\r\n 	<li>再次安利一波,博客地址:<a href="http://acheng1314.cn/" target="_blank">acheng1314.cn</a></li>\r\n</ul>\r\n<h4>工具</h4>\r\n<ul>\r\n 	<li>IDE为<strong>idea15</strong></li>\r\n 	<li>JDK环境为<strong>1.8</strong></li>\r\n 	<li>maven版本为<strong>maven3</strong></li>\r\n 	<li>Mysql版本为<strong>5.5.27</strong></li>\r\n 	<li>Tomcat版本为<strong>7.0.52</strong></li>\r\n</ul>\r\n<h4>本期目标</h4>\r\n<ul>\r\n 	<li>项目框架介绍和<strong>冲突解决</strong>。</li>\r\n 	<li>实例<strong>Service和Dao</strong>。项目框架测试。</li>\r\n 	<li>登录、注册<strong>业务的分析、创建和演示</strong>。</li>\r\n</ul>\r\n<h4>冲突解决</h4>\r\n为什么我把冲突解决放在第一位？\r\n\r\n因为在冲突解决后，我们可以进入测试阶段，同时在解决冲突的时候，我们会一点点的体会到SSM项目框架中各个框架之间是怎么协同工作的，也就可以完成项目介绍。\r\n\r\n重要的是，在实际生活中，我们去公司上班，一般也是先解决项目框架冲突问题。\r\n<ul>\r\n 	<li>打开项目后，随意选择一个Spring的配置文件，会弹出如下界面：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E6%A3%80%E6%B5%8B%E7%AC%AC%E4%B8%80%E6%AD%A5.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E6%A3%80%E6%B5%8B%E7%AC%AC%E4%B8%80%E6%AD%A5.png" />\r\n<div class="image-caption">ssm框架检测第一步</div>\r\n</div>\r\n我们<strong>点击图中右上角圈出来部分</strong>，会弹出如下界面：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E6%A3%80%E6%B5%8B%E7%AC%AC%E4%BA%8C%E6%AD%A5.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E6%A3%80%E6%B5%8B%E7%AC%AC%E4%BA%8C%E6%AD%A5.png" />\r\n<div class="image-caption">ssm框架检测第二步</div>\r\n</div>\r\n这里我们什么都不需要做，<strong>直接点击OK</strong>。\r\n\r\n上面两步是为了告诉Idea我们的Spring配置文件在哪。类似单一Spring配置文件的ApplicationContext.xml一样，我们只是将Spring根据模块分发而已。</li>\r\n 	<li>在Tomcat中运行本项目，运行结果应该是在浏览器中显示Hello World界面。\r\n<ul>\r\n 	<li>配置Tomcat</li>\r\n 	<li>配置项目的Tomcat启动设置。</li>\r\n 	<li>参考连接：<a href="http://jingyan.baidu.com/article/0a52e3f43d9f69bf62ed72f9.html" target="_blank">点击进入</a></li>\r\n 	<li>在web浏览器中输入：<strong>localhost:8080/druid</strong> ，查看druid是否配置成功。\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E6%A3%80%E6%B5%8B%E7%AC%AC%E4%B8%89%E6%AD%A5.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E6%A3%80%E6%B5%8B%E7%AC%AC%E4%B8%89%E6%AD%A5.png" />\r\n<div class="image-caption">ssm框架检测第三步</div>\r\n</div>\r\n如上面的图中，我们可以看到我们的druid并<strong>没有把JDBC驱动列出来</strong>。这说明我们的项目的JDBC驱动要么没有设置，要么是数据库驱动的配置文件没做好。</li>\r\n 	<li>随意输入一个localhost:8080/下的地址，至此我们要展示错误404页面。并且把Tomcat不友好的404页面替换。\r\n<ul>\r\n 	<li>替换思路：错误404这种常出现的页面，我们可以设置为静态资源，以加快网页访问。</li>\r\n 	<li>注意：我们需要先把WEB-IN\\Fweb.xml下面的mvc-dispatcher更改为全局配置。\r\n<pre class="hljs xml"><code class="xml">  <span class="hljs-tag">&lt;<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>mvc-dispatcher<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 默认匹配所有的请求 --&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 我们默认配置这个是为了让我们的Spring框架接管Servelt，实现Spring控制所有站点请求 --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;url-pattern&gt;/css/*&lt;/url-pattern&gt;--&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;url-pattern&gt;/images/*&lt;/url-pattern&gt;--&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;url-pattern&gt;/fonts/*&lt;/url-pattern&gt;--&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">servlet-mapping</span>&gt;</span></code></pre>\r\n配置了web.xml后，我们重启重启应用，输入一个错误的地址（跳转到404页面），会发现提示错误信息，主要报错如下\r\n<pre class="hljs xml"><code class="xml">   Exception encountered during context initialization - cancelling refresh attempt: \r\n      org.springframework.beans.factory.BeanCreationException: \r\n          Error creating bean with name ''dataSource'' defined in file [项目所在的物理地址\\WEB-INF\\classes\\spring\\spring-dao.xml]: \r\n              Initialization of bean failed; nested exception is java.lang.NoClassDefFoundError: org/slf4j/Logger\r\n\r\n      //上面这个错误主要是提示我们：NoClassDefFoundError: org/slf4j/这个类找不到。\r\n\r\n  解决办法：偷懒的把log4j2从maven配置文件中删除了，开启了logback，在maven的pom.xml中：\r\n\r\n      <span class="hljs-comment">&lt;!-- 1.日志 --&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;!– 实现slf4j接口并整合 –&gt;--&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${org.slf4j.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>\r\n\r\n      <span class="hljs-comment">&lt;!--log4j2支持--&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;dependency&gt;--&gt;</span>\r\n          <span class="hljs-comment">&lt;!--&lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;--&gt;</span>\r\n          <span class="hljs-comment">&lt;!--&lt;artifactId&gt;log4j-core&lt;/artifactId&gt;--&gt;</span>\r\n          <span class="hljs-comment">&lt;!--&lt;version&gt;${org.apache.logging.log4j.version}&lt;/version&gt;--&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;/dependency&gt;--&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;dependency&gt;--&gt;</span>\r\n          <span class="hljs-comment">&lt;!--&lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;--&gt;</span>\r\n          <span class="hljs-comment">&lt;!--&lt;artifactId&gt;log4j-api&lt;/artifactId&gt;--&gt;</span>\r\n          <span class="hljs-comment">&lt;!--&lt;version&gt;${org.apache.logging.log4j.version}&lt;/version&gt;--&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;/dependency&gt;--&gt;</span></code></pre>\r\n接着，我们重启Tomcat，等项目部署完成后，我们再次打开，再次输入错误地址，我们发现还是在报错，信息如下：\r\n<pre class="hljs xml"><code class="xml">  Exception encountered during context initialization - cancelling refresh attempt: \r\n      org.springframework.beans.factory.BeanCreationException: \r\n          Error creating bean with name ''sqlSessionFactory'' defined in file [项目物理地址\\WEB-INF\\classes\\spring\\spring-dao.xml]: Initialization of bean failed; nested exception is org.springframework.beans.TypeMismatchException: \r\n              Failed to convert property value of type [java.lang.String] to required type [org.springframework.core.io.Resource[]] for property ''mapperLocations''; \r\n                  nested exception is java.lang.IllegalArgumentException: \r\n                      Could not resolve resource location pattern [classpath:mapper/*.xml]: class path resource [mapper/] cannot be resolved to URL because it does not exist\r\n\r\n      根据上面的提示信息，我们可以看到提示的是mapper下面没有文件，那么我们就给他制定一个空的配置文件(BaseDao.xml)，内容如下：\r\n\r\n          <span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span>\r\n          <span class="hljs-doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"\r\n  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>\r\n          <span class="hljs-comment">&lt;!-- namespace是指明Mybatis扫描的目录，mapper是我们的Dao层的映射目录 --&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">mapper</span> <span class="hljs-attribute">namespace</span>=<span class="hljs-value">"cn.acheng1314.dao"</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;/<span class="hljs-title">mapper</span>&gt;</span></code></pre>\r\n同样的，我们再次重启服务器，并且输入错误的地址，现在能正常显示错误404的页面了，但是页面太过Low了，我们得<strong>重写一下web.xml的配置</strong>。404页面如下所示：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E6%A3%80%E6%B5%8B404%E6%A8%A1%E7%89%88%E9%A1%B5%E9%9D%A2.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E6%A3%80%E6%B5%8B404%E6%A8%A1%E7%89%88%E9%A1%B5%E9%9D%A2.png" />\r\n<div class="image-caption">ssm框架检测404模版页面</div>\r\n</div>\r\n解决思路：错误404的页面是常用页面之一，所以我们在项目的资源目录（webapp）下创建一个static目录，专门用来存放静态资源，如js、css、错误提示页面、登录、注册页面等等。\r\n<pre class="hljs xml"><code class="xml">  通过网上查阅资料，我们看到大部分人都是把404页面提示信息提交给Servelt自己管理，我们也依样画瓢，在web.xml中配置，如下：\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">error-page</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">error-code</span>&gt;</span>404<span class="hljs-tag">&lt;/<span class="hljs-title">error-code</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">Location</span>&gt;</span>/static/view/404.html<span class="hljs-tag">&lt;/<span class="hljs-title">Location</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">error-page</span>&gt;</span></code></pre>\r\n同时，我们需要给Spring写一个web的配置，控制哪些资源被拦截。spring-web.xml文件配置如下：\r\n<pre class="hljs xml"><code class="xml">  <span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">beans</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans"</span>\r\n         <span class="hljs-attribute">xmlns:xsi</span>=<span class="hljs-value">"http://www.w3.org/2001/XMLSchema-instance"</span>\r\n         <span class="hljs-attribute">xmlns:context</span>=<span class="hljs-value">"http://www.springframework.org/schema/context"</span>\r\n         <span class="hljs-attribute">xmlns:mvc</span>=<span class="hljs-value">"http://www.springframework.org/schema/mvc"</span>\r\n         <span class="hljs-attribute">xsi:schemaLocation</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans\r\n      http://www.springframework.org/schema/beans/spring-beans.xsd\r\n      http://www.springframework.org/schema/context\r\n      http://www.springframework.org/schema/context/spring-context.xsd\r\n      http://www.springframework.org/schema/mvc\r\n      http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 配置SpringMVC --&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 1.开启SpringMVC注解模式 --&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 简化配置：\r\n          (1)自动注册DefaultAnootationHandlerMapping,AnotationMethodHandlerAdapter\r\n          (2)提供一些列：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat, xml,json默认读写支持\r\n      --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:annotation-driven</span>/&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 2.静态资源默认servlet配置\r\n          (1)加入对静态资源的处理：js,gif,png\r\n          (2)允许使用"/"做整体映射\r\n       --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/css/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/css/"</span> /&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/images/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/images/"</span> /&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/view/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/view/"</span> /&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:default-servlet-handler</span>/&gt;</span>\r\n\r\n      <span class="hljs-comment">&lt;!-- 3.配置jsp 显示ViewResolver --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"viewClass"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"prefix"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"/WEB-INF/jsp/"</span>/&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"suffix"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">".jsp"</span>/&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n\r\n      <span class="hljs-comment">&lt;!-- 4.扫描web相关的bean配置 --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">context:component-scan</span> <span class="hljs-attribute">base-package</span>=<span class="hljs-value">"cn.acheng1314.mvc"</span>&gt;</span>\r\n          <span class="hljs-comment">&lt;!-- 制定扫包规则 ,只扫描使用@Controller注解的JAVA类 --&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">context:include-filter</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"annotation"</span> <span class="hljs-attribute">expression</span>=<span class="hljs-value">"org.springframework.stereotype.Controller"</span>/&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">context:component-scan</span>&gt;</span>\r\n\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">beans</span>&gt;</span></code></pre>\r\n以上文件配置好后，我们重启服务器，并输入错误地址，现在我们插入的404页面正常显示了。\r\n\r\n通过上面的资料，我们可以大胆整理下web请求的思路：\r\n\r\n<strong>用户发起请求→DNS解析发现服务器→建立链接发送请求→WEB服务器分发给应用服务器→MVC层框架处理请求过程→返回数据给用户</strong>\r\n\r\n而上面的SpringMvc作为框架层，我们也可以通过网上资料和我们目前的配置做出一些构想：\r\n\r\n<strong>Tomact分发请求→Servelt收到请求→Spring接管Servelt→DispatcherServlet处理请求分发→根据Spring配置找到对应的控制器（Controller）处理业务→返回对应数据。</strong>\r\n\r\n而下面有一张更加突出的图片说明了这一切：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://upload-images.jianshu.io/upload_images/2139601-1bb6d70b177cf924.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-original-src="http://upload-images.jianshu.io/upload_images/2139601-1bb6d70b177cf924.png?imageMogr2/auto-orient/strip%7CimageView2/2" />\r\n<div class="image-caption">SpringMVC详细运行流程图</div>\r\n</div>\r\n<strong>总结：</strong>目前项目中的静态资源我们已经处理完毕，<strong>加入了一部分Web的静态资源</strong>，<strong>增加了Spring的web处理配置</strong>，<strong>修改了web.xml</strong>,<strong>log4j2替换为LogBack，Junit版本提升为4.12</strong>，加入了一个<strong>BaseMapper.xml</strong>。\r\n\r\nweb.xml文件如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-doctype">&lt;!DOCTYPE web-app PUBLIC\r\n"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"\r\n"http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">web-app</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"http://xmlns.jcp.org/xml/ns/javaee"</span>\r\n <span class="hljs-attribute">xmlns:xsi</span>=<span class="hljs-value">"http://www.w3.org/2001/XMLSchema-instance"</span>\r\n <span class="hljs-attribute">xsi:schemaLocation</span>=<span class="hljs-value">"http://xmlns.jcp.org/xml/ns/javaee\r\n http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span>\r\n <span class="hljs-attribute">version</span>=<span class="hljs-value">"3.1"</span> <span class="hljs-attribute">metadata-complete</span>=<span class="hljs-value">"true"</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file-list</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>index.html<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>index.htm<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>index.jsp<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>default.html<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>default.htm<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>default.jsp<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file-list</span>&gt;</span>\r\n  <span class="hljs-comment">&lt;!-- 如果是用mvn命令生成的xml，需要修改servlet版本为3.1 --&gt;</span>\r\n  <span class="hljs-comment">&lt;!-- 配置DispatcherServlet --&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">servlet</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">display-name</span>&gt;</span>SSM<span class="hljs-tag">&lt;/<span class="hljs-title">display-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>mvc-dispatcher<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-class</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 配置springMVC需要加载的配置文件\r\n          spring-dao.xml,spring-service.xml,spring-web.xml\r\n          Mybatis - &gt; spring -&gt; springmvc\r\n       --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>classpath:spring/spring-*.xml<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">servlet</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>mvc-dispatcher<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 默认匹配所有的请求 --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;url-pattern&gt;/css/*&lt;/url-pattern&gt;--&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;url-pattern&gt;/images/*&lt;/url-pattern&gt;--&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;url-pattern&gt;/fonts/*&lt;/url-pattern&gt;--&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n\r\n  <span class="hljs-comment">&lt;!-- spring框架提供的字符集过滤器 --&gt;</span>\r\n  <span class="hljs-comment">&lt;!-- spring Web MVC框架提供了org.springframework.web.filter.CharacterEncodingFilter用于解决POST方式造成的中文乱码问题  --&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">filter</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-class</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- force强制，促使 --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>forceEncoding<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">filter</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">filter-mapping</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">filter-mapping</span>&gt;</span>\r\n\r\n  <span class="hljs-comment">&lt;!--druid ==&gt; WEB方式监控配置--&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">servlet</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>DruidStatView<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-class</span>&gt;</span>com.alibaba.druid.support.http.StatViewServlet<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-class</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">servlet</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>DruidStatView<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/druid/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">filter</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">filter-name</span>&gt;</span>druidWebStatFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">filter-class</span>&gt;</span>com.alibaba.druid.support.http.WebStatFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-class</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>exclusions<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>/public/*,*.js,*.css,/druid*,*.jsp,*.swf<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>principalSessionName<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>sessionInfo<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>profileEnable<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">filter</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">filter-mapping</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">filter-name</span>&gt;</span>druidWebStatFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">filter-mapping</span>&gt;</span>\r\n\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">error-page</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">error-code</span>&gt;</span>404<span class="hljs-tag">&lt;/<span class="hljs-title">error-code</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">location</span>&gt;</span>/static/view/404.html<span class="hljs-tag">&lt;/<span class="hljs-title">location</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">error-page</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">web-app</span>&gt;</span></code></pre>\r\nBaseMapper.xml如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span>\r\n<span class="hljs-doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"\r\n      "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- namespace指向我们的dao所在的地址 --&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">mapper</span> <span class="hljs-attribute">namespace</span>=<span class="hljs-value">"cn.acheng1314.dao"</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">mapper</span>&gt;</span></code></pre>\r\n其他的文件修改的信息都可以在上面看到就不再次贴出来了。</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<h4>SSM框架实例--仓库管理系统--登录注册的功能分析</h4>\r\n分析：\r\n<ul>\r\n 	<li>登录和注册，都是<strong>用户的行为</strong>，也是我们开发中常说的某个行为对应的<strong>业务</strong>。</li>\r\n 	<li>注册用户，意味着<strong>添加用户</strong>，添加了用户后，我们才有登录功能的继续执行的可能。</li>\r\n 	<li>用户登录，也是<strong>用户信息的查找和比对过程</strong>。一般来说<strong>用户先把信息提交给程序</strong>，然后<strong>程序按照流程执行后提交数据给服务器</strong>（~这个流程中程序可能会产生一些业务逻辑的判断~），<strong>服务器收到数据并进行数据对比</strong>，当<strong>用户信息存在且帐号和密码匹配</strong>才能登录成功，否则<strong>前面的任意条件不满足即为登录失败</strong>。</li>\r\n 	<li>我们可以<strong>依靠单一的用户表</strong>来实现用户的<strong>登录数据获取</strong>和<strong>注册信息的添加</strong>。</li>\r\n</ul>\r\n功能大概分析完毕后，我们就可以考虑下如何实现这些功能。大概图示如下：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E7%BB%8F%E5%85%B8%E4%B8%89%E5%B1%82%E5%88%86%E6%9E%90.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E7%BB%8F%E5%85%B8%E4%B8%89%E5%B1%82%E5%88%86%E6%9E%90.png" />\r\n<div class="image-caption">ssm框架经典三层分析</div>\r\n</div>\r\n<ul>\r\n 	<li>首先用户信息需要存储，我们需要数据库的支撑。</li>\r\n 	<li>有了数据库的支援后，我们需要先测试用户信息的添加和查找。就是我们常说的Dao层。</li>\r\n 	<li>当我们的Dao层拿到想要的数据，我们需要Service层将Dao层的操作作为服务提供给控制器，再由控制器提供给前台页面。</li>\r\n 	<li>同样的用户需要获取某个数据，先是浏览器获取到用户请求→web层→Service层→Dao层，再接着重复上面的操作。</li>\r\n</ul>\r\n上面一张图用模型已经很好的说明了java web后端各层的关系，下面一张图是经典三层对照MVC的描述。\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E7%BB%8F%E5%85%B8%E4%B8%89%E5%B1%82%E5%88%86%E6%9E%90%E5%AF%B9%E7%85%A7Mvc.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E7%BB%8F%E5%85%B8%E4%B8%89%E5%B1%82%E5%88%86%E6%9E%90%E5%AF%B9%E7%85%A7Mvc.png" />\r\n<div class="image-caption">ssm框架经典三层分析对照Mvc</div>\r\n</div>\r\n~上面的图引用自互联网资料，下面的黑色字是我添加上去的。~\r\n<ul>\r\n 	<li>上面图中，我们可以看到一部分MVC设计和图中标记的类似，但是这只是一种MVC模式的栗子。</li>\r\n 	<li>关于更加详细的MVC，我们可以<a href="http://baike.baidu.com/link?url=1PA-IByIX6CURKovUXuW8gfDpyqIVC6gZdLNT0DmCl4-2hQq8EB6KMeTKvFuhw2o4UUH6tV4AjVcKZtCr-MUEsn7qtVfTh2Y_L8H-FqtqHDXdstPtXDcUBRH_7mxPOyt" target="_blank">百度百科</a>查看。\r\n\r\n<hr />\r\n\r\n</li>\r\n</ul>\r\n上面提到的东西，我们适可而止就行了，很多东西现在还不是深究的时候，我们要先懂一个事物的外在表现，才有进一步的探索，所以我们需要等缘分的到来。\r\n<h4>SSM框架实例--仓库管理系统--注册、登录的功能模拟实现</h4>\r\n按照前面我们的分析来讲，我们需要先考虑Dao层的实现，毕竟有了Dao层对数据的封装，才可以有后面的操作，所以后面我的栗子中，一切都是按照<strong>Dao→Service→Controller→View</strong>这样的一个步骤来实现。\r\n<ul>\r\n 	<li>用户注册功能的Dao层实现。\r\n<ul>\r\n 	<li>数据库基本操作为：增删改查。</li>\r\n 	<li>我们根据数据库常规操作的类型，分别对其进行抽象，所以产生了Dao.java这个接口对象的基本模型。代码如下：\r\n<pre class="hljs java"><code class="java">  <span class="hljs-comment">/**\r\n   * 通过接口编程\r\n   * <span class="hljs-doctag">@param</span> &lt;T&gt; 泛型用于解耦，同时避免写重复代码\r\n   */</span>\r\n  <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Dao</span>&lt;<span class="hljs-title">T</span>&gt; </span>{\r\n      <span class="hljs-comment">/**\r\n       * 添加某个对象\r\n       * <span class="hljs-doctag">@param</span> t 待添加的对象\r\n       * <span class="hljs-doctag">@return</span>  返回受影响的行数\r\n       */</span>\r\n      <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(T t)</span></span>;\r\n\r\n      <span class="hljs-comment">/**\r\n       * 删除某个对象，在企业开发中，我们一般不做物理删除，只是添加某个字段对其数据进行可用控制\r\n       * <span class="hljs-doctag">@param</span> t 待删除对象\r\n       * <span class="hljs-doctag">@return</span> 返回受影响的条数\r\n       */</span>\r\n      <span class="hljs-function"><span class="hljs-keyword">int</span>  <span class="hljs-title">del</span><span class="hljs-params">(T t)</span></span>;\r\n\r\n      <span class="hljs-comment">/**\r\n       * 更新某个对象\r\n       * <span class="hljs-doctag">@param</span> t 待更新对象\r\n       * <span class="hljs-doctag">@return</span> 返回受影响的条数\r\n       */</span>\r\n      <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(T t)</span></span>;\r\n\r\n      <span class="hljs-comment">/**\r\n       * 通过ID查找一个对象\r\n       * <span class="hljs-doctag">@param</span> Id    待查询的对象的ID\r\n       * <span class="hljs-doctag">@return</span>  返回该ID对应的对象\r\n       */</span>\r\n      <span class="hljs-function">T <span class="hljs-title">findOneById</span><span class="hljs-params">(Serializable Id)</span></span>;\r\n\r\n      <span class="hljs-comment">/**\r\n       * 查找对象集合\r\n       * <span class="hljs-doctag">@return</span>  返回对象集合\r\n       */</span>\r\n      <span class="hljs-function">List&lt;T&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;\r\n  }</code></pre>\r\n</li>\r\n 	<li>实现用户的Dao层：\r\n<ul>\r\n 	<li>我们要针对用户写用户的Dao层，我们需要有一个用户对象的封装，直接在domain包下面创建User.java，代码如下：\r\n<pre class="hljs perl"><code class="perl">/***\r\n创建数据库用户表：\r\nCREATE TABLE <span class="hljs-string">`user`</span> (\r\n<span class="hljs-string">`login_id`</span> varchar(<span class="hljs-number">20</span>) NOT NULL COMMENT <span class="hljs-string">''登陆ID''</span>,\r\n<span class="hljs-string">`pwd`</span> varchar(<span class="hljs-number">20</span>) NOT NULL COMMENT <span class="hljs-string">''用户密码''</span>,\r\n<span class="hljs-string">`name`</span> varchar(<span class="hljs-number">100</span>) NOT NULL COMMENT <span class="hljs-string">''用户姓名''</span>,\r\n<span class="hljs-string">`age`</span> <span class="hljs-keyword">int</span>(<span class="hljs-number">3</span>) NOT NULL COMMENT <span class="hljs-string">''用户年龄''</span>,\r\n<span class="hljs-string">`sex`</span> varchar(<span class="hljs-number">3</span>) NOT NULL COMMENT <span class="hljs-string">''性别''</span>,\r\n<span class="hljs-string">`duty`</span> varchar(<span class="hljs-number">15</span>) COMMENT <span class="hljs-string">''职务''</span>,\r\n<span class="hljs-string">`cell_number`</span> varchar(<span class="hljs-number">15</span>) COMMENT <span class="hljs-string">''手机号''</span>,\r\n<span class="hljs-string">`photo_url`</span> varchar(<span class="hljs-number">75</span>) COMMENT <span class="hljs-string">''头像地址''</span>,\r\n<span class="hljs-string">`used`</span> boolean NOT NULL COMMENT <span class="hljs-string">''账号是否可用''</span>,\r\nPRIMARY KEY (<span class="hljs-string">`login_id`</span>)\r\n) ENGINE=InnoDB AUTO_INCREMENT=<span class="hljs-number">1000</span> DEFAULT CHARSET=utf8 COMMENT=<span class="hljs-string">''用户表''</span>;\r\n\r\n插入默认数据：\r\nINSERT INTO <span class="hljs-string">`user`</span> (<span class="hljs-string">`login_id`</span>,<span class="hljs-string">`pwd`</span>,<span class="hljs-string">`name`</span>,<span class="hljs-string">`age`</span>,<span class="hljs-string">`sex`</span>,<span class="hljs-string">`used`</span>)\r\nVALUES\r\n(<span class="hljs-string">''pc859107393''</span>,<span class="hljs-string">''123456''</span>,<span class="hljs-string">''阿程''</span>,<span class="hljs-number">20</span>,<span class="hljs-string">''男''</span>,true),\r\n(<span class="hljs-string">''pc228568859''</span>,<span class="hljs-string">''123456''</span>,<span class="hljs-string">''chengcheng''</span>,<span class="hljs-number">20</span>,<span class="hljs-string">''女''</span>,true),\r\n(<span class="hljs-string">''pangpang''</span>,<span class="hljs-string">''123456''</span>,<span class="hljs-string">''余下一整夜''</span>,<span class="hljs-number">25</span>,<span class="hljs-string">''男''</span>,true),\r\n(<span class="hljs-string">''111111''</span>,<span class="hljs-string">''123456''</span>,<span class="hljs-string">''手拉手系列教程''</span>,<span class="hljs-number">22</span>,<span class="hljs-string">''女''</span>,true);\r\n*<span class="hljs-regexp">/\r\n\r\npublic class User implements Serializable {\r\n  private String name;    /</span><span class="hljs-regexp">/名字\r\n  private String sex; /</span><span class="hljs-regexp">/性别\r\n  private String loginId; /</span><span class="hljs-regexp">/登陆ID\r\n  private String pwd;    /</span><span class="hljs-regexp">/密码\r\n  private String duty;    /</span><span class="hljs-regexp">/职务\r\n  private int age;    /</span><span class="hljs-regexp">/年龄\r\n  private String cellNumber;  /</span><span class="hljs-regexp">/手机号\r\n  private String photoUrl;    /</span><span class="hljs-regexp">/头像地址\r\n  private boolean used = true;   /</span><span class="hljs-regexp">/是否可用,默认值是true\r\n\r\n  ···省略get、set和toString\r\n}    \r\n\r\n/</span><span class="hljs-regexp">/推荐大家把每个bean对应的数据库操作备注到上面。\r\n/</span><span class="hljs-regexp">/打开Navicat For Mysql，链接上数据库，创建对应的数据库，并运行上面的sql产生数据库表和初始记录。</span></code></pre>\r\n</li>\r\n 	<li>当我们数据库创建完毕后，我们需要写一个接口对user表进行操作封装。我们在dao包下面创建<strong>UserDao接口</strong>，代码如下：\r\n<pre class="hljs java"><code class="java"><span class="hljs-comment">/**\r\n* 在传统的jdbc操作中，我们需要手动管理数据库连接的开关，数据库资源访问的开关等等\r\n* &lt;br/&gt;但是,我们这里采用了Mybatis和Druid这两个框架，那么我们可以完全不必理会数据库连接等等的控制，\r\n* &lt;br/&gt;我们只需要更加专注于业务实现的开发。\r\n*/</span>\r\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Dao</span>&lt;<span class="hljs-title">User</span>&gt; </span>{\r\n  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(User user)</span></span>;\r\n\r\n  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">del</span><span class="hljs-params">(User user)</span></span>;\r\n\r\n  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(User user)</span></span>;\r\n\r\n  <span class="hljs-function">User <span class="hljs-title">findOneById</span><span class="hljs-params">(Serializable Id)</span></span>;\r\n\r\n  <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;\r\n}</code></pre>\r\n</li>\r\n 	<li>完成UserDao的封装后，传统的操作这一步需要自己手动实现UserDao的Impl，并实现对数据库的操作等等。而我们使用Mybatis后，UserDao的Impl在Mybatis的mapper文件夹中指定为xml，我们的Dao文件除了数据库操作的语句其他的都无需关注,那么剩下的数据库操作什么的我们都无需关心，毕竟Mybatis和druid都把其他的事情帮我们做了。UserDao.xml如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span>\r\n<span class="hljs-doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"\r\n      "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>\r\n<span class="hljs-comment">&lt;!-- namespace指定我们的到具体的bean --&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">mapper</span> <span class="hljs-attribute">namespace</span>=<span class="hljs-value">"cn.acheng1314.dao.UserDao"</span>&gt;</span>\r\n\r\n  <span class="hljs-comment">&lt;!--查找--&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">select</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"findOneById"</span> <span class="hljs-attribute">resultType</span>=<span class="hljs-value">"User"</span> <span class="hljs-attribute">parameterType</span>=<span class="hljs-value">"String"</span>&gt;</span>\r\n      SELECT\r\n      *\r\n      FROM\r\n      `user`\r\n      WHERE\r\n      login_id = #{userId}\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">select</span>&gt;</span>\r\n\r\n  <span class="hljs-comment">&lt;!--增加语句--&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">insert</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"add"</span> <span class="hljs-attribute">parameterType</span>=<span class="hljs-value">"User"</span>&gt;</span>\r\n  INSERT INTO\r\n      `user`\r\n      (`login_id`,`name`,`age`,`sex`,`duty`,`cell_number`,`photo_url`,`pwd`,`used`)\r\n      VALUES\r\n      (#{loginId},#{name},#{age},#{sex},#{duty},#{cellNumber},#{photoUrl},#{pwd},#{used})\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">insert</span>&gt;</span>\r\n\r\n  <span class="hljs-comment">&lt;!-- 删除 --&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">update</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"del"</span> <span class="hljs-attribute">parameterType</span>=<span class="hljs-value">"User"</span>&gt;</span>\r\n      UPDATE\r\n      `user`\r\n      SET\r\n      `used`=FALSE\r\n      WHERE\r\n      `login_id`=#{loginId};\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">update</span>&gt;</span>\r\n\r\n  <span class="hljs-comment">&lt;!-- 更新用户信息 --&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">update</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"update"</span> <span class="hljs-attribute">parameterType</span>=<span class="hljs-value">"User"</span>&gt;</span>\r\n      UPDATE\r\n      `user`\r\n      SET\r\n      `name`=#{name}, `age`=#{age}, `sex`=#{sex}, `duty`=#{duty}, `cell_number`=#{cellNumber}, `photo_url`=#{photoUrl}\r\n      WHERE\r\n      `login_id`=#{loginId};\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">update</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">mapper</span>&gt;</span></code></pre>\r\n</li>\r\n 	<li>mapper下面的UserDao.xml已经完成，这就意味着我们的UserDao基本完成，那么我们应该来一次单元测试来看看效果如何。UserDaoTest.java如下：\r\n<pre class="hljs cs"><code class="cs">@RunWith(SpringJUnit4ClassRunner.class) <span class="hljs-comment">//spring的单元测试</span>\r\n@ContextConfiguration({<span class="hljs-string">"classpath:spring/spring-*.xml"</span>})    <span class="hljs-comment">//上下文配置</span>\r\n<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoTest</span> {\r\n\r\n  @Autowired\r\n  <span class="hljs-keyword">private</span> UserDao userDao;    <span class="hljs-comment">//初始化Dao层，面向接口编程</span>\r\n\r\n  <span class="hljs-comment">/**\r\n  * 添加用户的单元测试，添加成功与否会有对应的提示。\r\n  * 当然按照我这个配置一般会正确，如果说出错就需要你一步一步的看错误的提示代码了。\r\n  * 添加同样的LoginId的用户会添加失败，因为在上面把LoginId作为了数据库表的主键。\r\n  */</span>\r\n  @<span class="hljs-function">Test\r\n  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAdd</span>() </span>{\r\n      User user = <span class="hljs-keyword">new</span> User();\r\n      user.setLoginId(<span class="hljs-string">"pc147852369"</span>);\r\n      user.setName(<span class="hljs-string">"雨下一整夜"</span>);\r\n      user.setPwd(<span class="hljs-string">"123456"</span>);\r\n      user.setSex(<span class="hljs-string">"未知"</span>);\r\n      <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>; <span class="hljs-comment">//受影响的行数默认为0</span>\r\n      <span class="hljs-keyword">try</span> {\r\n          result = userDao.add(user);\r\n      } <span class="hljs-keyword">catch</span> (Exception e) {\r\n          e.printStackTrace();\r\n          System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"添加用户失败"</span>);\r\n      }\r\n      <span class="hljs-keyword">if</span> (result&gt;<span class="hljs-number">0</span>)\r\n          System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"添加用户成功"</span>);\r\n  }\r\n\r\n  <span class="hljs-comment">/**\r\n  * 查找用户测试，成功与否会有log输出\r\n  */</span>\r\n  @<span class="hljs-function">Test\r\n  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindOneId</span>() throws Exception </span>{\r\n      User user = <span class="hljs-keyword">new</span> User();\r\n      user.setLoginId(<span class="hljs-string">"pc147852369"</span>);\r\n      User result = <span class="hljs-keyword">null</span>; <span class="hljs-comment">//受影响的行数默认为0</span>\r\n      <span class="hljs-keyword">try</span> {\r\n          result = userDao.findOneById(user.getLoginId());\r\n      } <span class="hljs-keyword">catch</span> (Exception e) {\r\n          e.printStackTrace();\r\n          System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"查找用户失败"</span>);\r\n      }\r\n      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span>!=result)\r\n          System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"查找用户成功\\n"</span>+result.toString());\r\n  }\r\n\r\n  @<span class="hljs-function">Test\r\n  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDel</span>() </span>{\r\n      User user = <span class="hljs-keyword">new</span> User();\r\n      user.setLoginId(<span class="hljs-string">"pc147852369"</span>);\r\n      <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>; <span class="hljs-comment">//受影响的行数默认为0</span>\r\n      <span class="hljs-keyword">try</span> {\r\n          result = userDao.del(user);\r\n      } <span class="hljs-keyword">catch</span> (Exception e) {\r\n          e.printStackTrace();\r\n          System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"删除用户失败"</span>);\r\n      }\r\n      <span class="hljs-keyword">if</span> (result&gt;<span class="hljs-number">0</span>)\r\n          System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"删除用户成功"</span>);\r\n  }\r\n\r\n  @<span class="hljs-function">Test\r\n  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate</span>() </span>{\r\n      User user = <span class="hljs-keyword">new</span> User();\r\n      user.setLoginId(<span class="hljs-string">"pc147852369"</span>);\r\n      user.setName(<span class="hljs-string">"手把手教程"</span>);\r\n      user.setPwd(<span class="hljs-string">"123456"</span>);\r\n      user.setSex(<span class="hljs-string">"男"</span>);\r\n      <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>; <span class="hljs-comment">//受影响的行数默认为0</span>\r\n      <span class="hljs-keyword">try</span> {\r\n          result = userDao.update(user);\r\n      } <span class="hljs-keyword">catch</span> (Exception e) {\r\n          e.printStackTrace();\r\n          System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"更新用户信息用户失败"</span>);\r\n      }\r\n      <span class="hljs-keyword">if</span> (result&gt;<span class="hljs-number">0</span>)\r\n          System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"更新用户信息用户成功"</span>);\r\n\r\n  }\r\n}</code></pre>\r\n数据的操作结果我们都可以在mysql中查看，这里就不一一截图了。当然我们也可看到每次单元测试都需要<strong>在类上面注解spring单元测试和spring的上下文</strong>，按照我们编程的原则，一次编码处处运行，我们可以<strong>把这些注解放到BaseTest.java</strong>中，<strong>后面所有的单元测试都继承BaseTest.java即可避免大量重复编码</strong>。</li>\r\n</ul>\r\n</li>\r\n 	<li>UserService实现(<strong>注意编程思维的养成</strong>)\r\n<ul>\r\n 	<li>根据我们面向接口编程的思维来讲，我们在Service中核心是实现Dao层，并调用Dao层。</li>\r\n 	<li>刚才我们单元测试，我们的UserDao层通过测试了，我们现在中心就应该放在业务逻辑的实现，而不是继续纠缠Dao层，毕竟数据持久化已经实现了。</li>\r\n 	<li>从服务端程序的角度看来，用户的主要业务有注册、登录、注销登录、注销帐号等等，这里我们先拿注册来说事。</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<ul>\r\n 	<li><strong>用户注册流程分析（用户角度）：</strong>\r\n<ul>\r\n 	<li>填写帐号相关信息</li>\r\n 	<li>提交注册信息</li>\r\n 	<li>服务器返回是否注册成功</li>\r\n</ul>\r\n</li>\r\n 	<li><strong>用户注册流程分析（服务器角度）：</strong>\r\n<ul>\r\n 	<li>收到用户注册请求</li>\r\n 	<li>解包数据→封装到UserBean\r\n<ul>\r\n 	<li>解包数据失败(请求信息异常)，返回错误提示信息</li>\r\n</ul>\r\n</li>\r\n 	<li>针对具体的用户信息检查是否符合标准\r\n<ul>\r\n 	<li>不符合检查标准，返回对应的错误提示</li>\r\n</ul>\r\n</li>\r\n 	<li>通过检查，调用Dao检查是否存在同样的用户\r\n<ul>\r\n 	<li>数据库已经存在相同的用户信息，不能重复添加，返回错误提示信息</li>\r\n</ul>\r\n</li>\r\n 	<li>不存在同样的用户，添加新用户，并返回成功的提示信息</li>\r\n</ul>\r\n流程图反映如下：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E8%A7%A3%E6%9E%90%E6%B5%81%E7%A8%8B%E5%9B%BE.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/09/ssm%E6%A1%86%E6%9E%B6%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E8%A7%A3%E6%9E%90%E6%B5%81%E7%A8%8B%E5%9B%BE.png" />\r\n<div class="image-caption">ssm框架用户行为解析流程图</div>\r\n</div></li>\r\n 	<li>代码实现用户注册的Service：\r\n<pre class="hljs java"><code class="java"><span class="hljs-comment">//创建一个BaseService接口，用泛型解耦</span>\r\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseService</span>&lt;<span class="hljs-title">User</span>&gt; </span>{\r\n  <span class="hljs-comment">//添加用户的实例</span>\r\n  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(User user)</span> <span class="hljs-keyword">throws</span> Exception</span>;\r\n}\r\n\r\n------------------------------分割线----------------------------------\r\n\r\n<span class="hljs-comment">//创建一个UserService继承BaseService，并指定具体的实体类型</span>\r\n<span class="hljs-comment">//为什么要再写一个UserService接口？不同对象的业务体系不同，BaseService并不能完全替代不同对象的具体行为表现</span>\r\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseService</span>&lt;<span class="hljs-title">User</span>&gt; </span>{\r\n\r\n  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(User user)</span> <span class="hljs-keyword">throws</span> Exception</span>;\r\n}\r\n\r\n------------------------------分割线----------------------------------\r\n\r\n<span class="hljs-comment">//创建UserServiceImpl实现UserService接口</span>\r\n<span class="hljs-annotation">@Service</span>(<span class="hljs-string">"userService"</span>)\r\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>{\r\n\r\n  <span class="hljs-annotation">@Autowired</span>\r\n  <span class="hljs-keyword">private</span> UserDao userDao;\r\n\r\n  <span class="hljs-comment">/**\r\n   * 添加用户，一般来说需要检查用户为空、用户名为空、密码为空\r\n   */</span>\r\n  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(User user)</span> <span class="hljs-keyword">throws</span> UserCanNotBeNullException, UserNameCanNotBeNullException, UserPwdCanNotBeNullException, UserAireadyExistException, OtherThingsException </span>{\r\n      <span class="hljs-comment">//先检查用户是否存在</span>\r\n      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == user) {\r\n          <span class="hljs-comment">//抛出用户为空的自定义异常</span>\r\n          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UserCanNotBeNullException(<span class="hljs-string">"User can not be Null"</span>);\r\n      }\r\n      <span class="hljs-comment">//用户名不能为空检查</span>\r\n      <span class="hljs-keyword">if</span> (StringUtils.isEmpty(user.getLoginId())) {\r\n          <span class="hljs-comment">//抛出用户名为空的自定义异常</span>\r\n          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UserNameCanNotBeNullException(<span class="hljs-string">"User name can not be Null"</span>);\r\n      }\r\n      <span class="hljs-comment">//用户密码不能为空检查</span>\r\n      <span class="hljs-keyword">if</span> (StringUtils.isEmpty(user.getPwd())) {\r\n          <span class="hljs-comment">//抛出用户密码为空的自定义异常</span>\r\n          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UserPwdCanNotBeNullException(<span class="hljs-string">"User name can not be Null"</span>);\r\n      }\r\n      <span class="hljs-comment">//由于我这个是仓库管理系统，根据业务需求来说，我们的用户基本信息都是不能为空的</span>\r\n      <span class="hljs-comment">//基本信息包括：姓名、年龄、用户名、密码、性别、手机号，年龄大于18</span>\r\n      <span class="hljs-keyword">if</span> (StringUtils.isEmpty(user.getDuty())\r\n              || StringUtils.isEmpty(user.getSex())\r\n              || user.getAge() &gt; <span class="hljs-number">18</span>\r\n              || StringUtils.isEmpty(user.getCellNumber())) {\r\n          <span class="hljs-comment">//其他综合异常</span>\r\n          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> OtherThingsException(<span class="hljs-string">"Some use''s base info can not be null"</span>);\r\n      }\r\n      <span class="hljs-comment">//已经存在相同用户</span>\r\n      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != userDao.findOneById(user.getLoginId())) {\r\n          <span class="hljs-comment">//存在相同的用户异常</span>\r\n          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UserAireadyExistException(<span class="hljs-string">"Register User Failed，Because the  user Aiready exist"</span>);\r\n      }\r\n      <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>; <span class="hljs-comment">//受影响的行数默认为0</span>\r\n      <span class="hljs-keyword">try</span> {\r\n          result = userDao.add(user);\r\n      } <span class="hljs-keyword">catch</span> (Exception e) {\r\n          System.out.println(<span class="hljs-string">"添加用户失败,用户已经存在"</span>);\r\n          <span class="hljs-comment">//其他用户添加失败异常</span>\r\n          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> OtherThingsException(e);\r\n      }\r\n      <span class="hljs-keyword">if</span> (result &gt; <span class="hljs-number">0</span>)\r\n          System.out.println(<span class="hljs-string">"添加用户成功"</span>);\r\n  }\r\n\r\n  <span class="hljs-comment">//···省略的其他方法···</span>\r\n\r\n}</code></pre>\r\n</li>\r\n 	<li>老规矩，写完每个Service后，都需要针对具体的对象的行为进行单元测试，UserServiceTest.java代码如下：\r\n<pre class="hljs scala"><code class="scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceTest</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span></span> <span class="hljs-title">BaseTest</span> {</span>\r\n  <span class="hljs-annotation">@Autowired</span>\r\n  <span class="hljs-keyword">private</span> <span class="hljs-type">UserServiceImpl</span> userService;    \r\n  <span class="hljs-comment">//此处直接使用UserService的实现类，主要是方便抛出异常，然后异常出现时候可以针对性的处理</span>\r\n\r\n  <span class="hljs-annotation">@Test</span>\r\n  public void testAdd() {\r\n      <span class="hljs-type">User</span> user = <span class="hljs-keyword">new</span> <span class="hljs-type">User</span>();\r\n      <span class="hljs-keyword">try</span> {\r\n          userService.add(user);\r\n      } <span class="hljs-keyword">catch</span> (<span class="hljs-type">UserCanNotBeNullException</span> e) {\r\n          <span class="hljs-comment">//用户不能为空异常抛出</span>\r\n          e.printStackTrace();\r\n      } <span class="hljs-keyword">catch</span> (<span class="hljs-type">UserNameCanNotBeNullException</span> e) {\r\n          <span class="hljs-comment">//用户名不能为空</span>\r\n          e.printStackTrace();\r\n      } <span class="hljs-keyword">catch</span> (<span class="hljs-type">UserPwdCanNotBeNullException</span> e) {\r\n          <span class="hljs-comment">//用户密码不能为空</span>\r\n          e.printStackTrace();\r\n      } <span class="hljs-keyword">catch</span> (<span class="hljs-type">UserAireadyExistException</span> e) {\r\n          <span class="hljs-comment">//用户存在抛出</span>\r\n          e.printStackTrace();\r\n      } <span class="hljs-keyword">catch</span> (<span class="hljs-type">OtherThingsException</span> e) {\r\n          <span class="hljs-comment">//其他综合异常或是不能处理的异常</span>\r\n          e.printStackTrace();\r\n      }\r\n  }\r\n\r\n  <span class="hljs-comment">//···省略的其他测试代码···</span>\r\n}</code></pre>\r\n</li>\r\n 	<li>同样的，我们的Service的测试代码执行后，我们可以在mysql中看到具体的数据变化，也不再一一贴图了。</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n因为篇幅和时间原因，我们暂时就不写具体功能的详细实现了，毕竟学习不是一朝一夕，多培养思维才是重要的事情。从这一期开始代码逐渐增多，毕竟学习过程就是这样的递增的，等熟悉以后可能很多地方就更多是培养思维方式，代码就直接贴上（详细的注释不会少）。\r\n\r\n<hr />\r\n\r\n这一期总结：\r\n<ul>\r\n 	<li>解决项目框架冲突解决，各个框架职能的简单介绍。</li>\r\n 	<li>简单的原理解释。</li>\r\n 	<li>java web经典mvc、三层架构简单介绍。</li>\r\n 	<li>部分简单的SQL语句。</li>\r\n 	<li>针对Dao层和Service层的单元测试。</li>\r\n 	<li>简单业务实现的流程分析。</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n下期预告：我们实现详细的功能和Controller(Url请求分发)，同时分出API接口为以后打下基础。\r\n\r\n项目地址：<a href="https://github.com/pc859107393/SpringMvcMybatis/tree/master" target="_blank">点击访问github</a>', '[手把手教程][JavaWeb]SSM框架验证、修复和实例', '', 'inherit', 'closed', 'closed', '', '241-revision-v1', '', '', '2016-09-25 20:59:38', '2016-09-25 12:59:38', '', 241, 'http://acheng1314.cn/?p=242', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(247, 1, '2016-10-08 10:46:48', '2016-10-08 02:46:48', '', 'ssm%e5%ba%94%e7%94%a8%e4%b8%89-%e6%b3%a8%e5%86%8c%e6%b5%81%e7%a8%8b', '', 'inherit', 'open', 'closed', '', 'ssm%e5%ba%94%e7%94%a8%e4%b8%89-%e6%b3%a8%e5%86%8c%e6%b5%81%e7%a8%8b', '', '', '2016-10-08 10:46:48', '2016-10-08 02:46:48', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/10/ssm应用三-注册流程.png', 0, 'attachment', 'image/png', 0),
(248, 1, '2016-10-09 00:36:50', '2016-10-08 16:36:50', '', 'ssm%e5%ba%94%e7%94%a8%e4%b8%89-%e7%99%bb%e5%bd%95%e6%b3%a8%e5%86%8c', '', 'inherit', 'open', 'closed', '', 'ssm%e5%ba%94%e7%94%a8%e4%b8%89-%e7%99%bb%e5%bd%95%e6%b3%a8%e5%86%8c', '', '', '2016-10-09 00:36:50', '2016-10-08 16:36:50', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/10/ssm应用三-登录注册.png', 0, 'attachment', 'image/png', 0),
(249, 1, '2016-10-09 00:42:47', '2016-10-08 16:42:47', '', 'ssm%e5%ba%94%e7%94%a8%e4%b8%89-%e7%99%bb%e5%bd%95%e6%b3%a8%e5%86%8c%e9%9d%99%e6%80%81%e8%b5%84%e6%ba%90', '', 'inherit', 'open', 'closed', '', 'ssm%e5%ba%94%e7%94%a8%e4%b8%89-%e7%99%bb%e5%bd%95%e6%b3%a8%e5%86%8c%e9%9d%99%e6%80%81%e8%b5%84%e6%ba%90', '', '', '2016-10-09 00:42:47', '2016-10-08 16:42:47', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/10/ssm应用三-登录注册静态资源.png', 0, 'attachment', 'image/png', 0),
(250, 1, '2016-10-09 01:48:23', '2016-10-08 17:48:23', '', 'ssm%e5%ba%94%e7%94%a8%e4%b8%89-%e6%b3%a8%e5%86%8c%e9%a1%b5%e9%9d%a2%e5%92%8c%e8%b0%83%e8%af%95', '', 'inherit', 'open', 'closed', '', 'ssm%e5%ba%94%e7%94%a8%e4%b8%89-%e6%b3%a8%e5%86%8c%e9%a1%b5%e9%9d%a2%e5%92%8c%e8%b0%83%e8%af%95', '', '', '2016-10-09 01:48:23', '2016-10-08 17:48:23', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/10/ssm应用三-注册页面和调试.png', 0, 'attachment', 'image/png', 0),
(251, 1, '2016-10-09 12:11:25', '2016-10-09 04:11:25', '<h4>[手把手教程][JavaWeb]优雅的SSM应用（三）</h4>\r\n文章正式改名为：[手把手教程][JavaWeb]优雅的SSM应用\r\n\r\n这几天一直在踩坑，为什么这么说呢，主要是一直自己没找到优雅的方式来实现一些东西。\r\n\r\n虽然说前面也做了一些功能模块，但是总感觉不对劲，毕竟也是刚转做后端。\r\n\r\n为了方便手机端用户，尽量使用简单的markdown语法和简单的页面结构。\r\n\r\n后面朋友给了我一些他们公司同事写的demo，虽然说不上是牛逼的作品，但是确实符合我现在的需要。毕竟人家的实现方式也是经过实战项目演练出来的。\r\n<ul>\r\n 	<li>再次安利一波,博客地址:<a href="http://acheng1314.cn/" target="_blank">acheng1314.cn</a></li>\r\n</ul>\r\n<h4>工具</h4>\r\n<ul>\r\n 	<li>IDE为<strong>idea15</strong></li>\r\n 	<li>JDK环境为<strong>1.8</strong></li>\r\n 	<li>maven版本为<strong>maven3</strong></li>\r\n 	<li>Mysql版本为<strong>5.5.27</strong></li>\r\n 	<li>Tomcat版本为<strong>7.0.52</strong></li>\r\n 	<li>流程图绘制（xmind）</li>\r\n</ul>\r\n<h4>本期目标</h4>\r\n<ul>\r\n 	<li>仓库管理系统的登录注册模块实现</li>\r\n 	<li>其他一些开发细节的体现</li>\r\n 	<li>功能模块分层设计的具体实现</li>\r\n</ul>\r\n<h4>其他</h4>\r\n<ul>\r\n 	<li>我这姑且算是文章吧，文章都是先用有道云笔记写的，然后在简书上面查看有没有冲突，最后再放到稀土掘金上面</li>\r\n 	<li>但是稀土掘金上面文章出问题了，反馈上去也没能解决，本来想抓包看看他们的数据的，后面还是没做</li>\r\n 	<li><strong>···</strong>其他想说的就太多了，但都是不是今天的主题。</li>\r\n</ul>\r\n<h4>注册</h4>\r\n首先，我们webapp要实现用户登录，必须得能新建用户。所以，我们先把注册用户放在前面。\r\n<ul>\r\n 	<li>预期功能：\r\n<ul>\r\n 	<li>打开注册页面</li>\r\n 	<li>填写注册信息</li>\r\n 	<li>点击注册</li>\r\n 	<li>显示注册后的提示信息</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n有了功能后，我们就能大概明白我们是想要一个什么样子的注册模块了。\r\n<ul>\r\n 	<li>一个web注册页面</li>\r\n 	<li>web页面能进行基本的数据效验</li>\r\n 	<li>服务器能存储用户的注册信息</li>\r\n 	<li>注册动作完成后，返回提示页面。</li>\r\n</ul>\r\n一般的，我们在开发中，有了大概样子的功能模块，我们需要整理一下业务流程和程序执行流程（在企业开发中，有项目经理的话，一般这些都是他们整理出来的，我们只需要开发实现就行。）经过一番挠头，大概的流程图如下所示：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E4%B8%89-%E6%B3%A8%E5%86%8C%E6%B5%81%E7%A8%8B.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E4%B8%89-%E6%B3%A8%E5%86%8C%E6%B5%81%E7%A8%8B.png" />\r\n<div class="image-caption">ssm应用三-注册流程</div>\r\n</div>\r\n上图说明：\r\n<ul>\r\n 	<li>我们在web页面完成注册信息的填写后，我们需要在web页面做一些基本的数据效验。当然后面我们会演示。</li>\r\n 	<li>注册信息通过基本的验证后，我们直接提交到服务器，<strong>tomact → servelt → spring</strong>。我们的后端程序，一切都被spring接管了，所以，我们需要在spring中完成这些功能。</li>\r\n 	<li>spring和外界通信，我们都是在Controller中完成。所以我们在Controller中处理数据。</li>\r\n 	<li>当数据通过了Controller中的校验后，我们需要在Controller中来查找数据库是否存在同样的用户名，<strong>通用的数据操作流程如：Controller → Service → Dao</strong>。</li>\r\n 	<li>前面我们提到过，<strong>Service是为我们的程序提供服务的，我们尽量每个Service对应一个Dao，这样我们只需要提供单一的数据驱动，在外层进行业务组装</strong>，这样就能达到我们的目的，同样的，我们这样也能将程序<a href="http://blog.csdn.net/hb0746/article/details/7410524" target="_blank"><strong>解耦</strong></a>，以后的维护也就相对简单了。</li>\r\n</ul>\r\n好的，我们上面已经把思路想明白了。现在我们接着就开始实战。\r\n<ul>\r\n 	<li>生成注册页面的连接。</li>\r\n</ul>\r\n我们要生成一个连接，经过查找资料，我们知道我们需要创建一个Controller的类。代码如下：\r\n<pre class="hljs java"><code class="java"><span class="hljs-annotation">@Controller</span>\r\n<span class="hljs-annotation">@RequestMapping</span>(<span class="hljs-string">"/mvc"</span>)\r\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainController</span> </span>{\r\n\r\n    <span class="hljs-comment">/**\r\n     * 登陆页面\r\n     * <span class="hljs-doctag">@return</span>\r\n     */</span>\r\n    <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/login"</span>,method = RequestMethod.GET)\r\n    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">()</span></span>{\r\n        <span class="hljs-keyword">return</span> <span class="hljs-string">"login"</span>;\r\n    }\r\n\r\n}</code></pre>\r\n在上面我们使用了@Controller和@RequestMapping("/mvc")注解。<a href="https://my.oschina.net/zhdkn/blog/316530" target="_blank">详细资料点这里。</a>\r\n\r\n通俗的来说，我们需要在我们前面配置的Controller路径中，建立<strong>使用@Controller的注解的类</strong>告诉Spring这是一个控制器。\r\n<pre class="hljs scala"><code class="scala">在类上面的 <span class="hljs-annotation">@RequestMapping</span>(<span class="hljs-string">"/mvc"</span>) ，是说明这个类的访问地址是 /mvc 。\r\n\r\n在方法上面的 <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/login"</span>,method = <span class="hljs-type">RequestMethod</span>.<span class="hljs-type">GET</span>) ，是说明我这个方法的访问地址是 /mvc/login ，请求方式是http请求的get方式。\r\n\r\n这里我的方法是<span class="hljs-type">String</span>方法，则是直接返回一个web页面的名字。\r\n\r\n当然，我们并不需要说直接去设定某个jsp文件。我们需要的是在这里指定好名称，然后使用对应的自动完成就能创建出那个jsp文件。\r\n\r\n然后我们直接在jsp文件中填写对应的代码就行了。</code></pre>\r\n好的，基本的东西我们都说了，那么我们先去百度找一个登录界面（一定要能看，不能那啥太直接的粗糙的东西，毕竟我们都是有品位的人）。如下图：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E4%B8%89-%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E4%B8%89-%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C.png" />\r\n<div class="image-caption">ssm应用三-登录注册页面</div>\r\n</div>\r\n上面的图中样子还不错的样子，同时他们还是同一个页面，这下就很nice了，又可以少写一个界面了。\r\n\r\n按照前面两期我们的东西综合起来，我们需要先<strong>把CSS、JS、图片等东西，扔到我们的静态目录中</strong>。如下图所示：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E4%B8%89-%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E4%B8%89-%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90.png" />\r\n<div class="image-caption">ssm应用三-登录注册静态资源</div>\r\n</div>\r\n接着我们把登录的html的页面的东西，全部放到login.jsp中。如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">%@</span> <span class="hljs-attribute">page</span> <span class="hljs-attribute">language</span>=<span class="hljs-value">"java"</span> <span class="hljs-attribute">import</span>=<span class="hljs-value">"java.util.*"</span> <span class="hljs-attribute">pageEncoding</span>=<span class="hljs-value">"UTF-8"</span> %&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">%@</span> <span class="hljs-attribute">taglib</span> <span class="hljs-attribute">uri</span>=<span class="hljs-value">"http://java.sun.com/jsp/jstl/core"</span> <span class="hljs-attribute">prefix</span>=<span class="hljs-value">"c"</span> %&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-title">%--</span> 上面这两行是<span class="hljs-attribute">java</span>代码的引用 <span class="hljs-attribute">--</span>%&gt;</span>\r\n\r\n<span class="hljs-doctype">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/javascript"</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"/static/js/jquery-3.1.1.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span>仓库管理系统→登录<span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span>\r\n\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">http-equiv</span>=<span class="hljs-value">"Content-Type"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"text/html; charset=utf-8"</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/javascript"</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"/static/js/login.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/static/css/login2.css"</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/css"</span>/&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>仓库管理系统登陆注册<span class="hljs-tag">&lt;<span class="hljs-title">sup</span>&gt;</span>2016<span class="hljs-tag">&lt;/<span class="hljs-title">sup</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"login"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"margin-top:50px;"</span>&gt;</span>\r\n\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"header"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"switch"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"switch"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"switch_btn_focus"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"switch_qlogin"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"javascript:void(0);"</span>\r\n                                           <span class="hljs-attribute">tabindex</span>=<span class="hljs-value">"7"</span>&gt;</span>快速登录<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"switch_btn"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"switch_login"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"javascript:void(0);"</span> <span class="hljs-attribute">tabindex</span>=<span class="hljs-value">"8"</span>&gt;</span>快速注册<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>\r\n\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"switch_bottom"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"switch_bottom"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"position: absolute; width: 64px; left: 0px;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"web_qr_login"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"web_qr_login"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"display: block; height: 235px;"</span>&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!--登录--&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"web_login"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"web_login"</span>&gt;</span>\r\n\r\n\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"login-box"</span>&gt;</span>\r\n\r\n\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"login_form"</span>&gt;</span>\r\n                    <span class="hljs-tag">&lt;<span class="hljs-title">form</span> <span class="hljs-attribute">action</span>=<span class="hljs-value">"&lt;%=request.getContextPath()%&gt;/userAction/login"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"loginform"</span>\r\n                          <span class="hljs-attribute">accept-charset</span>=<span class="hljs-value">"utf-8"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"login_form"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"loginForm"</span>\r\n                          <span class="hljs-attribute">method</span>=<span class="hljs-value">"post"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"hidden"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"did"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"0"</span>/&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"hidden"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"to"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"log"</span>/&gt;</span>\r\n\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"uinArea"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"uinArea"</span>&gt;</span>\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"input-tips"</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"u"</span>&gt;</span>帐号：<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>\r\n\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputOuter"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"uArea"</span>&gt;</span>\r\n\r\n                                <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"u"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"loginId"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputstyle"</span>/&gt;</span>\r\n                            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"pwdArea"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"pwdArea"</span>&gt;</span>\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"input-tips"</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"p"</span>&gt;</span>密码：<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>\r\n\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputOuter"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"pArea"</span>&gt;</span>\r\n\r\n                                <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"password"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"p"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"pwd"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputstyle"</span>/&gt;</span>\r\n                            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"padding-left:50px;margin-top:20px;"</span>&gt;</span>\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"submit"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"登 录"</span>\r\n                                   <span class="hljs-attribute">style</span>=<span class="hljs-value">"width:150px;"</span>\r\n                                   <span class="hljs-attribute">class</span>=<span class="hljs-value">"button_blue"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n                    <span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!--登录end--&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!--注册--&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"qlogin"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"qlogin"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"display: none; "</span>&gt;</span>\r\n\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"web_login"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">form</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"form2"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"regUser"</span> <span class="hljs-attribute">accept-charset</span>=<span class="hljs-value">"utf-8"</span> <span class="hljs-attribute">action</span>=<span class="hljs-value">"&lt;%=request.getContextPath()%&gt;/userAction/reg"</span>\r\n                  <span class="hljs-attribute">method</span>=<span class="hljs-value">"post"</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"hidden"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"to"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"reg"</span>/&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"hidden"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"did"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"0"</span>/&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"reg_form"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"reg-ul"</span>&gt;</span>\r\n                    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"userCue"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"cue"</span>&gt;</span>快速注册请注意格式<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n                    <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>\r\n\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"user"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"input-tips2"</span>&gt;</span>用户名：<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>\r\n\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputOuter2"</span>&gt;</span>\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"user"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"loginId"</span> <span class="hljs-attribute">maxlength</span>=<span class="hljs-value">"16"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputstyle2"</span>/&gt;</span>\r\n                        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\r\n                    <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>\r\n\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"user"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"input-tips2"</span>&gt;</span>姓名：<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>\r\n\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputOuter2"</span>&gt;</span>\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"name"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"name"</span> <span class="hljs-attribute">maxlength</span>=<span class="hljs-value">"16"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputstyle2"</span>/&gt;</span>\r\n                        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"passwd"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"input-tips2"</span>&gt;</span>密码：<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>\r\n\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputOuter2"</span>&gt;</span>\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"password"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"passwd"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"pwd"</span> <span class="hljs-attribute">maxlength</span>=<span class="hljs-value">"16"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputstyle2"</span>/&gt;</span>\r\n                        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\r\n                    <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"passwd2"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"input-tips2"</span>&gt;</span>确认密码：<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>\r\n\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputOuter2"</span>&gt;</span>\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"password"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"passwd2"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">""</span> <span class="hljs-attribute">maxlength</span>=<span class="hljs-value">"16"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputstyle2"</span>/&gt;</span>\r\n                        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"cellNumber"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"input-tips2"</span>&gt;</span>手机号：<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>\r\n\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputOuter2"</span>&gt;</span>\r\n\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"cellNumber"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"cellNumber"</span> <span class="hljs-attribute">maxlength</span>=<span class="hljs-value">"18"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputstyle2"</span>/&gt;</span>\r\n                        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"sex"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"input-tips2"</span>&gt;</span>性别：<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>\r\n\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputOuter2"</span>&gt;</span>\r\n\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"sex"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"sex"</span> <span class="hljs-attribute">maxlength</span>=<span class="hljs-value">"18"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputstyle2"</span>/&gt;</span>\r\n                        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"age"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"input-tips2"</span>&gt;</span>年龄：<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>\r\n\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputOuter2"</span>&gt;</span>\r\n\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"age"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"age"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"age"</span> <span class="hljs-attribute">maxlength</span>=<span class="hljs-value">"18"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputstyle2"</span>/&gt;</span>\r\n                        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputArea"</span>&gt;</span>\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"reg"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"margin-top:10px;margin-left:85px;"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"button_blue"</span>\r\n                                   <span class="hljs-attribute">value</span>=<span class="hljs-value">"同意协议并注册"</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"#"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"zcxy"</span> <span class="hljs-attribute">target</span>=<span class="hljs-value">"_blank"</span>&gt;</span>注册协议<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\r\n                    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"cl"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span>\r\n\r\n\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n    <span class="hljs-comment">&lt;!--注册end--&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"jianyi"</span>&gt;</span>*推荐使用ie8或以上版本ie浏览器或Chrome内核浏览器访问本站<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></code></pre>\r\n上面的网页代码中的东西，我们也可以不求甚解，只要会调用就行。调用地址是在我们的form表单的action那里填写我们的服务器地址。这里我们甚至可以做前后端分离，用纯粹的html+js来调用Api接口实现前后端分离。\r\n<pre class="hljs objectivec"><code class="objectivec">action=<span class="hljs-string">"&lt;%=request.getContextPath()%&gt;/userAction/reg"</span> method=<span class="hljs-string">"post"</span>\r\n\r\n&lt;%=request<span class="hljs-variable">.getContextPath</span>()%&gt; 这是指向我们应用的根路径\r\n\r\nmothod是说明我们请求的方式，我们这里才用了post，至于其他的方法就不一一介绍了，详细信息请百度查找“ http请求 ”\r\n\r\nform表单中，每个input的name我们需要和后端的接口那边的字段对应。\r\n\r\n当我们的字段对应后，spring可以自动把请求的内容转换为适应的对象。\r\n\r\n小提示：我们可以直接debug我们的程序，只要取消断点程序就可以顺序执行，加入断点只要程序流转到那里，他就会自动调试。</code></pre>\r\n当然，我们的jsp写完后，我们需要给我们的表单请求那里指定请求路径。由于上面我已经指定了路径，所以我们需要在对应的路径创建请求的接口（实际开发中都是先写好请求接口，再让程序调用。由于我这里是提前写好的，所以这里我们得照着路径写代码）。\r\n\r\n我们在Controller目录下创建一个UserController类，代码内容如下：\r\n<pre class="hljs java"><code class="java"><span class="hljs-keyword">package</span> cn.acheng1314.mvc.controller;\r\n\r\n<span class="hljs-keyword">import</span> cn.acheng1314.domain.ResponseObj;\r\n<span class="hljs-keyword">import</span> cn.acheng1314.domain.User;\r\n<span class="hljs-keyword">import</span> cn.acheng1314.exception.*;\r\n<span class="hljs-keyword">import</span> cn.acheng1314.service.serviceImpl.UserServiceImpl;\r\n<span class="hljs-keyword">import</span> cn.acheng1314.utils.GsonUtils;\r\n<span class="hljs-keyword">import</span> cn.acheng1314.utils.StringUtils;\r\n<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;\r\n<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;\r\n<span class="hljs-keyword">import</span> org.springframework.ui.ModelMap;\r\n<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;\r\n<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;\r\n<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;\r\n<span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;\r\n\r\n<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;\r\n\r\n<span class="hljs-comment">/**\r\n * 用户请求相关控制器\r\n * &lt;br/&gt;Created by acheng on 2016/9/26.\r\n */</span>\r\n<span class="hljs-annotation">@Controller</span>\r\n<span class="hljs-annotation">@RequestMapping</span>(<span class="hljs-string">"/userAction"</span>)\r\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>{\r\n\r\n    <span class="hljs-annotation">@Autowired</span>\r\n    <span class="hljs-keyword">private</span> UserServiceImpl userService;    <span class="hljs-comment">//自动载入Service对象</span>\r\n    <span class="hljs-keyword">private</span> ResponseObj responseObj;    <span class="hljs-comment">//bean对象</span>\r\n\r\n    <span class="hljs-comment">/**\r\n     * 为什么返回值是一个ModelAndView，ModelAndView代表一个web页面&lt;br/&gt;\r\n     * setViewName是设置一个jsp页面的名称\r\n     * <span class="hljs-doctag">@param</span> req   http请求\r\n     * <span class="hljs-doctag">@param</span> user  发起请求后，spring接收到请求，然后封装的bean数据\r\n     * <span class="hljs-doctag">@return</span>  返回一个web页面\r\n     * <span class="hljs-doctag">@throws</span> Exception    \r\n     */</span>\r\n    <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/reg"</span>, method = RequestMethod.POST)\r\n    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">reg</span><span class="hljs-params">(HttpServletRequest req, User user)</span> <span class="hljs-keyword">throws</span> Exception </span>{\r\n        ModelAndView mav = <span class="hljs-keyword">new</span> ModelAndView();  <span class="hljs-comment">//创建一个jsp页面对象</span>\r\n        mav.setViewName(<span class="hljs-string">"home"</span>);    <span class="hljs-comment">//设置JSP文件名</span>\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == user) {\r\n            mav.addObject(<span class="hljs-string">"message"</span>, <span class="hljs-string">"用户信息不能为空！"</span>);  <span class="hljs-comment">//加入提示信息，在jsp中我们直接使用${对象名称}就能获取对应的内容</span>\r\n            <span class="hljs-keyword">return</span> mav; <span class="hljs-comment">//返回页面</span>\r\n        }\r\n        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(user.getName()) || StringUtils.isEmpty(user.getPwd())) {\r\n            mav.addObject(<span class="hljs-string">"message"</span>, <span class="hljs-string">"用户名或密码不能为空！"</span>);\r\n            <span class="hljs-keyword">return</span> mav;\r\n        }\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != userService.findUser(user)) {\r\n            mav.addObject(<span class="hljs-string">"message"</span>, <span class="hljs-string">"用户已经存在！"</span>);\r\n            <span class="hljs-keyword">return</span> mav;\r\n        }\r\n        <span class="hljs-keyword">try</span> {\r\n            userService.add(user);\r\n        } <span class="hljs-keyword">catch</span> (Exception e) {\r\n            e.printStackTrace();\r\n            mav.addObject(<span class="hljs-string">"message"</span>, <span class="hljs-string">"错误：用户其他信息错误"</span>);\r\n            <span class="hljs-keyword">return</span> mav;\r\n        }\r\n        mav.addObject(<span class="hljs-string">"code"</span>, <span class="hljs-number">110</span>);\r\n        mav.addObject(<span class="hljs-string">"message"</span>, <span class="hljs-string">"恭喜。注册成功"</span>);\r\n        req.getSession().setAttribute(<span class="hljs-string">"user"</span>, user);\r\n        <span class="hljs-keyword">return</span> mav;\r\n    }\r\n\r\n    <span class="hljs-comment">/**\r\n     * 登录接口\r\n     * <span class="hljs-doctag">@param</span> req\r\n     * <span class="hljs-doctag">@param</span> user\r\n     * <span class="hljs-doctag">@return</span>\r\n     */</span>\r\n    <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/login"</span>, method = RequestMethod.POST, produces = {\r\n            <span class="hljs-string">"application/json; charset=utf-8"</span>})\r\n    <span class="hljs-annotation">@ResponseBody</span>\r\n    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">login</span><span class="hljs-params">(HttpServletRequest req, User user)</span> </span>{\r\n        ModelAndView mav = <span class="hljs-keyword">new</span> ModelAndView(<span class="hljs-string">"home"</span>);\r\n        String result;\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == user) {\r\n            responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n            responseObj.setCode(ResponseObj.EMPUTY);\r\n            responseObj.setMsg(<span class="hljs-string">"登录信息不能为空"</span>);\r\n            result = GsonUtils.gson.toJson(responseObj);    <span class="hljs-comment">//转换的json数据</span>\r\n            mav.addObject(<span class="hljs-string">"result"</span>, result);\r\n            <span class="hljs-keyword">return</span> mav; <span class="hljs-comment">//返回页面</span>\r\n        }\r\n        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(user.getLoginId()) || StringUtils.isEmpty(user.getPwd())) {\r\n            responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n            responseObj.setCode(ResponseObj.FAILED);\r\n            responseObj.setMsg(<span class="hljs-string">"用户名或密码不能为空"</span>);\r\n            result = GsonUtils.gson.toJson(responseObj);\r\n            mav.addObject(<span class="hljs-string">"result"</span>, result);\r\n            <span class="hljs-keyword">return</span> mav;\r\n        }\r\n        <span class="hljs-comment">//查找用户</span>\r\n        User user1 = userService.findUser(user);\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == user1) {\r\n            responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n            responseObj.setCode(ResponseObj.EMPUTY);\r\n            responseObj.setMsg(<span class="hljs-string">"未找到该用户"</span>);\r\n            result = GsonUtils.gson.toJson(responseObj);\r\n        } <span class="hljs-keyword">else</span> {\r\n            <span class="hljs-keyword">if</span> (user.getPwd().equals(user1.getPwd())) {\r\n                responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n                responseObj.setCode(ResponseObj.OK);\r\n                responseObj.setMsg(ResponseObj.OK_STR);\r\n                result = GsonUtils.gson.toJson(responseObj);\r\n            } <span class="hljs-keyword">else</span> {\r\n                responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n                responseObj.setCode(ResponseObj.FAILED);\r\n                responseObj.setMsg(<span class="hljs-string">"用户密码错误"</span>);\r\n                result = GsonUtils.gson.toJson(responseObj);\r\n            }\r\n        }\r\n        mav.addObject(<span class="hljs-string">"result"</span>, result);\r\n        <span class="hljs-keyword">return</span> mav;\r\n    }\r\n\r\n}</code></pre>\r\n当然很多数据效验我们不能只在后端做，我们需要将数据检查的粒度细化。\r\n\r\n不但要在后端做，而且我们的前端页面也要做的，比如说手机号、邮箱帐号、用户名规则等等，用的最多的也就是web页面上面拿到数据用js来判断，使用<a href="http://baike.baidu.com/link?url=tw3uQ7hzZQaXrKAz5EU700k9mZuE-2H3TvkLFYsZ2yjANLB0sVlnj-Ig7L0E8SwTf9gI-f_N65ud7tL3RW_SzD_bI6A7ozb7PNspH8aniRACUiYm16gl_NJ2RecEyzgmEdzLG6h3FftX1Ax0vXGLxK" target="_blank">正则表达式</a>来判断是否符合标准。\r\n\r\n具体的js我也就不写了，因为我也不是很了解JS，只能对着别人写的自己来做修改==\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://upload-images.jianshu.io/upload_images/2139601-413777ae46b83182.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-original-src="http://upload-images.jianshu.io/upload_images/2139601-413777ae46b83182.jpg?imageMogr2/auto-orient/strip%7CimageView2/2" />\r\n<div class="image-caption">蘑菇头-好伤心</div>\r\n</div>\r\n好的，我们现在已经把东西都弄完了，debug开启程序，然后加入断点调试。运行结果如下：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E4%B8%89-%E6%B3%A8%E5%86%8C%E9%A1%B5%E9%9D%A2%E5%92%8C%E8%B0%83%E8%AF%95.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E4%B8%89-%E6%B3%A8%E5%86%8C%E9%A1%B5%E9%9D%A2%E5%92%8C%E8%B0%83%E8%AF%95.png" />\r\n<div class="image-caption">ssm应用三-注册页面和调试</div>\r\n</div>\r\n这样我们现在能拿到对应的数据，并且在Controller中加入了数据校验。同时，我们的web页面中也加入了js验证。\r\n\r\n现在我们的注册页面也可以了，功能也有了。既然如此，我们应该接着把登录页面做成功，但是我们已经有了这个的思路，那么剩下的只需要依样画瓢就能完成。\r\n\r\n具体的东西，都已经在后面的代码中贴出来了。详情请看github：\r\n\r\n项目地址：<a href="https://github.com/pc859107393/SpringMvcMybatis/tree/master" target="_blank">点击访问github</a>\r\n\r\n总结：\r\n<ul>\r\n 	<li>URL生成</li>\r\n 	<li>注册登录完成</li>\r\n 	<li>简单的前端验证（在代码包中可以看到）</li>\r\n 	<li>form表单提交</li>\r\n 	<li>http请求</li>\r\n 	<li>功能模块分析</li>\r\n 	<li>流程图（使用xmind制作）</li>\r\n</ul>\r\n下期预告：完整的后台主页，前端使用json数据，列表数据分页。', '[手把手教程][JavaWeb]优雅的SSM应用（三）', '', 'publish', 'open', 'open', '', '%e6%89%8b%e6%8a%8a%e6%89%8b%e6%95%99%e7%a8%8bjavaweb%e4%bc%98%e9%9b%85%e7%9a%84ssm%e5%ba%94%e7%94%a8%ef%bc%88%e4%b8%89%ef%bc%89', '', '', '2016-10-09 12:11:25', '2016-10-09 04:11:25', '', 0, 'http://acheng1314.cn/?p=251', 0, 'post', '', 1);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(252, 1, '2016-10-09 11:25:46', '2016-10-09 03:25:46', '<h4>[手把手教程][JavaWeb]优雅的SSM应用（三）</h4>\n\n<p>文章正式改名为：[手把手教程][JavaWeb]优雅的SSM应用</p>\n\n<p>这几天一直在踩坑，为什么这么说呢，主要是一直自己没找到优雅的方式来实现一些东西。</p>\n\n<p>虽然说前面也做了一些功能模块，但是总感觉不对劲，毕竟也是刚转做后端。</p>\n\n<p>为了方便手机端用户，尽量使用简单的markdown语法和简单的页面结构。</p>\n\n<p>后面朋友给了我一些他们公司同事写的demo，虽然说不上是牛逼的作品，但是确实符合我现在的需要。毕竟人家的实现方式也是经过实战项目演练出来的。</p>\n\n<ul>\n<li>再次安利一波,博客地址:<a href="http://acheng1314.cn/">acheng1314.cn</a></li>\n</ul>\n\n<h4>工具</h4>\n\n<ul>\n<li>IDE为<strong>idea15</strong></li>\n<li>JDK环境为<strong>1.8</strong></li>\n<li>maven版本为<strong>maven3</strong></li>\n<li>Mysql版本为<strong>5.5.27</strong></li>\n<li>Tomcat版本为<strong>7.0.52</strong></li>\n<li>流程图绘制（xmind）</li>\n</ul>\n\n<h4>本期目标</h4>\n\n<ul>\n<li>仓库管理系统的登录注册模块实现</li>\n<li>其他一些开发细节的体现</li>\n<li>功能模块分层设计的具体实现</li>\n</ul>\n\n<h4>其他</h4>\n\n<ul>\n<li>我这姑且算是文章吧，文章都是先用有道云笔记写的，然后在简书上面查看有没有冲突，最后再放到稀土掘金上面</li>\n<li>但是稀土掘金上面文章出问题了，反馈上去也没能解决，本来想抓包看看他们的数据的，后面还是没做</li>\n<li><strong>···</strong>其他想说的就太多了，但都是不是今天的主题。</li>\n</ul>\n\n<h4>注册</h4>\n\n<p>首先，我们webapp要实现用户登录，必须得能新建用户。所以，我们先把注册用户放在前面。</p>\n\n<ul>\n<li>预期功能：\n\n<ul>\n<li>打开注册页面</li>\n<li>填写注册信息</li>\n<li>点击注册</li>\n<li>显示注册后的提示信息</li>\n</ul></li>\n</ul>\n\n<p>有了功能后，我们就能大概明白我们是想要一个什么样子的注册模块了。\n- 一个web注册页面\n- web页面能进行基本的数据效验\n- 服务器能存储用户的注册信息\n- 注册动作完成后，返回提示页面。</p>\n\n<p>一般的，我们在开发中，有了大概样子的功能模块，我们需要整理一下业务流程和程序执行流程（在企业开发中，有项目经理的话，一般这些都是他们整理出来的，我们只需要开发实现就行。）经过一番挠头，大概的流程图如下所示：</p>\n\n<p><img src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm应用三-注册流程.png" alt="ssm应用三-注册流程" /></p>\n\n<p>上图说明：\n- 我们在web页面完成注册信息的填写后，我们需要在web页面做一些基本的数据效验。当然后面我们会演示。\n- 注册信息通过基本的验证后，我们直接提交到服务器，<strong>tomact → servelt → spring</strong> 。我们的后端程序，一切都被spring接管了，所以，我们需要在spring中完成这些功能。\n- spring和外界通信，我们都是在Controller中完成。所以我们在Controller中处理数据。\n- 当数据通过了Controller中的校验后，我们需要在Controller中来查找数据库是否存在同样的用户名，<strong>通用的数据操作流程如：Controller → Service → Dao</strong>。\n- 前面我们提到过，<strong>Service是为我们的程序提供服务的，我们尽量每个Service对应一个Dao，这样我们只需要提供单一的数据驱动，在外层进行业务组装</strong>，这样就能达到我们的目的，同样的，我们这样也能将程序<a href="http://blog.csdn.net/hb0746/article/details/7410524"><strong>解耦</strong></a>，以后的维护也就相对简单了。</p>\n\n<p>好的，我们上面已经把思路想明白了。现在我们接着就开始实战。</p>\n\n<ul>\n<li>生成注册页面的连接。</li>\n</ul>\n\n<p>我们要生成一个连接，经过查找资料，我们知道我们需要创建一个Controller的类。代码如下：</p>\n\n<p>```</p>\n\n<p>@Controller\n@RequestMapping("/mvc")\npublic class MainController {\n    /**\n     * 登陆页面\n     * @return\n     */\n    @RequestMapping(value = "/login",method = RequestMethod.GET)\n    public String login(){\n        return "login";\n    }\n}</p>\n\n<p>```</p>\n\n<p>在上面我们使用了@Controller和@RequestMapping("/mvc")注解。<a href="https://my.oschina.net/zhdkn/blog/316530">详细资料点这里。</a></p>\n\n<p>通俗的来说，我们需要在我们前面配置的Controller路径中，建立<strong>使用@Controller的注解的类</strong>告诉Spring这是一个控制器。</p>\n\n<p>```\n在类上面的 @RequestMapping("/mvc") ，是说明这个类的访问地址是 /mvc 。</p>\n\n<p>在方法上面的 @RequestMapping(value = "/login",method = RequestMethod.GET) ，是说明我这个方法的访问地址是 /mvc/login ，请求方式是http请求的get方式。</p>\n\n<p>这里我的方法是String方法，则是直接返回一个web页面的名字。</p>\n\n<p>当然，我们并不需要说直接去设定某个jsp文件。我们需要的是在这里指定好名称，然后使用对应的自动完成就能创建出那个jsp文件。</p>\n\n<p>然后我们直接在jsp文件中填写对应的代码就行了。\n```</p>\n\n<p>好的，基本的东西我们都说了，那么我们先去百度找一个登录界面（一定要能看，不能那啥太直接的粗糙的东西，毕竟我们都是有品位的人）。如下图：</p>\n\n<p><img src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm应用三-登录注册.png" alt="ssm应用三-登录注册页面" /></p>\n\n<p>上面的图中样子还不错的样子，同时他们还是同一个页面，这下就很nice了，又可以少写一个界面了。</p>\n\n<p>按照前面两期我们的东西综合起来，我们需要先<strong>把CSS、JS、图片等东西，扔到我们的静态目录中</strong>。如下图所示：</p>\n\n<p><img src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm应用三-登录注册静态资源.png" alt="ssm应用三-登录注册静态资源" /></p>\n\n<p>接着我们把登录的html的页面的东西，全部放到login.jsp中。如下：</p>\n\n<p>```\n<%@ page language="java" import="java.util.*" pageEncoding="UTF-8" %>\n<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %></p>\n\n<p><%-- 上面这两行是java代码的引用 --%></p>\n\n<p><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">\n<script type="text/javascript" src="/static/js/jquery-3.1.1.min.js"></script></p>\n\n<p><head>\n    <title>仓库管理系统→登录</title></p>\n\n<pre><code>&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;\n&lt;script type="text/javascript" src="/static/js/login.js"&gt;&lt;/script&gt;\n&lt;link href="/static/css/login2.css" rel="stylesheet" type="text/css"/&gt;\n</code></pre>\n\n<p></head>\n<html>\n<body></p>\n\n<h1>仓库管理系统登陆注册<sup>2016</sup></h1>\n\n<div class="login" style="margin-top:50px;">\n\n    <div class="header">\n        <div class="switch" id="switch"><a class="switch_btn_focus" id="switch_qlogin" href="javascript:void(0);"\n                                           tabindex="7">快速登录</a>\n            <a class="switch_btn" id="switch_login" href="javascript:void(0);" tabindex="8">快速注册</a>\n\n            <div class="switch_bottom" id="switch_bottom" style="position: absolute; width: 64px; left: 0px;"></div>\n        </div>\n    </div>\n\n\n    <div class="web_qr_login" id="web_qr_login" style="display: block; height: 235px;">\n\n        <!--登录-->\n        <div class="web_login" id="web_login">\n\n\n            <div class="login-box">\n\n\n                <div class="login_form">\n                    <form action="<%=request.getContextPath()%>/userAction/login" name="loginform"\n                          accept-charset="utf-8" id="login_form" class="loginForm"\n                          method="post"><input type="hidden" name="did" value="0"/>\n                        <input type="hidden" name="to" value="log"/>\n\n                        <div class="uinArea" id="uinArea">\n                            <label class="input-tips" for="u">帐号：</label>\n\n                            <div class="inputOuter" id="uArea">\n\n                                <input type="text" id="u" name="loginId" class="inputstyle"/>\n                            </div>\n                        </div>\n                        <div class="pwdArea" id="pwdArea">\n                            <label class="input-tips" for="p">密码：</label>\n\n                            <div class="inputOuter" id="pArea">\n\n                                <input type="password" id="p" name="pwd" class="inputstyle"/>\n                            </div>\n                        </div>\n\n                        <div style="padding-left:50px;margin-top:20px;">\n                            <input type="submit" value="登 录"\n                                   style="width:150px;"\n                                   class="button_blue"/></div>\n                    </form>\n                </div>\n\n            </div>\n\n        </div>\n        <!--登录end-->\n    </div>\n\n    <!--注册-->\n    <div class="qlogin" id="qlogin" style="display: none; ">\n\n        <div class="web_login">\n            <form name="form2" id="regUser" accept-charset="utf-8" action="<%=request.getContextPath()%>/userAction/reg"\n                  method="post">\n                <input type="hidden" name="to" value="reg"/>\n                <input type="hidden" name="did" value="0"/>\n                <ul class="reg_form" id="reg-ul">\n                    <div id="userCue" class="cue">快速注册请注意格式</div>\n                    <li>\n\n                        <label for="user" class="input-tips2">用户名：</label>\n\n                        <div class="inputOuter2">\n                            <input type="text" id="user" name="loginId" maxlength="16" class="inputstyle2"/>\n                        </div>\n\n                    </li>\n                    <li>\n\n                        <label for="user" class="input-tips2">姓名：</label>\n\n                        <div class="inputOuter2">\n                            <input type="text" id="name" name="name" maxlength="16" class="inputstyle2"/>\n                        </div>\n\n                    </li>\n\n                    <li>\n                        <label for="passwd" class="input-tips2">密码：</label>\n\n                        <div class="inputOuter2">\n                            <input type="password" id="passwd" name="pwd" maxlength="16" class="inputstyle2"/>\n                        </div>\n\n                    </li>\n                    <li>\n                        <label for="passwd2" class="input-tips2">确认密码：</label>\n\n                        <div class="inputOuter2">\n                            <input type="password" id="passwd2" name="" maxlength="16" class="inputstyle2"/>\n                        </div>\n\n                    </li>\n\n                    <li>\n                        <label for="cellNumber" class="input-tips2">手机号：</label>\n\n                        <div class="inputOuter2">\n\n                            <input type="text" id="cellNumber" name="cellNumber" maxlength="18" class="inputstyle2"/>\n                        </div>\n\n                    </li>\n\n                    <li>\n                        <label for="sex" class="input-tips2">性别：</label>\n\n                        <div class="inputOuter2">\n\n                            <input type="text" id="sex" name="sex" maxlength="18" class="inputstyle2"/>\n                        </div>\n\n                    </li>\n\n                    <li>\n                        <label for="age" class="input-tips2">年龄：</label>\n\n                        <div class="inputOuter2">\n\n                            <input type="age" id="age" name="age" maxlength="18" class="inputstyle2"/>\n                        </div>\n\n                    </li>\n\n                    <li>\n                        <div class="inputArea">\n                            <input type="button" id="reg" style="margin-top:10px;margin-left:85px;" class="button_blue"\n                                   value="同意协议并注册"/> <a href="#" class="zcxy" target="_blank">注册协议</a>\n                        </div>\n\n                    </li>\n                    <div class="cl"></div>\n                </ul>\n            </form>\n\n\n        </div>\n\n\n    </div>\n    <!--注册end-->\n</div>\n\n<div class="jianyi">*推荐使用ie8或以上版本ie浏览器或Chrome内核浏览器访问本站</div>\n\n<p></body>\n</html></p>\n\n<p>```</p>\n\n<p>上面的网页代码中的东西，我们也可以不求甚解，只要会调用就行。调用地址是在我们的form表单的action那里填写我们的服务器地址。这里我们甚至可以做前后端分离，用纯粹的html+js来调用Api接口实现前后端分离。</p>\n\n<p>```\naction="<%=request.getContextPath()%>/userAction/reg" method="post"</p>\n\n<p><%=request.getContextPath()%> 这是指向我们应用的根路径</p>\n\n<p>mothod是说明我们请求的方式，我们这里才用了post，至于其他的方法就不一一介绍了，详细信息请百度查找“ http请求 ”</p>\n\n<p>form表单中，每个input的name我们需要和后端的接口那边的字段对应。</p>\n\n<p>当我们的字段对应后，spring可以自动把请求的内容转换为适应的对象。</p>\n\n<p>小提示：我们可以直接debug我们的程序，只要取消断点程序就可以顺序执行，加入断点只要程序流转到那里，他就会自动调试。\n```</p>\n\n<p>当然，我们的jsp写完后，我们需要给我们的表单请求那里指定请求路径。由于上面我已经指定了路径，所以我们需要在对应的路径创建请求的接口（实际开发中都是先写好请求接口，再让程序调用。由于我这里是提前写好的，所以这里我们得照着路径写代码）。</p>\n\n<p>我们在Controller目录下创建一个UserController类，代码内容如下：</p>\n\n<p>```\npackage cn.acheng1314.mvc.controller;</p>\n\n<p>import cn.acheng1314.domain.ResponseObj;\nimport cn.acheng1314.domain.User;\nimport cn.acheng1314.exception.*;\nimport cn.acheng1314.service.serviceImpl.UserServiceImpl;\nimport cn.acheng1314.utils.GsonUtils;\nimport cn.acheng1314.utils.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.ModelMap;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.servlet.ModelAndView;</p>\n\n<p>import javax.servlet.http.HttpServletRequest;</p>\n\n<p>/**\n * 用户请求相关控制器\n * <br/>Created by acheng on 2016/9/26.\n */\n@Controller\n@RequestMapping("/userAction")\npublic class UserController {</p>\n\n<pre><code>@Autowired\nprivate UserServiceImpl userService;    //自动载入Service对象\nprivate ResponseObj responseObj;    //bean对象\n\n/**\n * 为什么返回值是一个ModelAndView，ModelAndView代表一个web页面&lt;br/&gt;\n * setViewName是设置一个jsp页面的名称\n * @param req   http请求\n * @param user  发起请求后，spring接收到请求，然后封装的bean数据\n * @return  返回一个web页面\n * @throws Exception    \n */\n@RequestMapping(value = "/reg", method = RequestMethod.POST)\npublic ModelAndView reg(HttpServletRequest req, User user) throws Exception {\n    ModelAndView mav = new ModelAndView();  //创建一个jsp页面对象\n    mav.setViewName("home");    //设置JSP文件名\n    if (null == user) {\n        mav.addObject("message", "用户信息不能为空！");  //加入提示信息，在jsp中我们直接使用${对象名称}就能获取对应的内容\n        return mav; //返回页面\n    }\n    if (StringUtils.isEmpty(user.getName()) || StringUtils.isEmpty(user.getPwd())) {\n        mav.addObject("message", "用户名或密码不能为空！");\n        return mav;\n    }\n    if (null != userService.findUser(user)) {\n        mav.addObject("message", "用户已经存在！");\n        return mav;\n    }\n    try {\n        userService.add(user);\n    } catch (Exception e) {\n        e.printStackTrace();\n        mav.addObject("message", "错误：用户其他信息错误");\n        return mav;\n    }\n    mav.addObject("code", 110);\n    mav.addObject("message", "恭喜。注册成功");\n    req.getSession().setAttribute("user", user);\n    return mav;\n}\n\n/**\n * 登录接口\n * @param req\n * @param user\n * @return\n */\n@RequestMapping(value = "/login", method = RequestMethod.POST, produces = {\n        "application/json; charset=utf-8"})\n@ResponseBody\npublic ModelAndView login(HttpServletRequest req, User user) {\n    ModelAndView mav = new ModelAndView("home");\n    String result;\n    if (null == user) {\n        responseObj = new ResponseObj&lt;User&gt;();\n        responseObj.setCode(ResponseObj.EMPUTY);\n        responseObj.setMsg("登录信息不能为空");\n        result = GsonUtils.gson.toJson(responseObj);    //转换的json数据\n        mav.addObject("result", result);\n        return mav; //返回页面\n    }\n    if (StringUtils.isEmpty(user.getLoginId()) || StringUtils.isEmpty(user.getPwd())) {\n        responseObj = new ResponseObj&lt;User&gt;();\n        responseObj.setCode(ResponseObj.FAILED);\n        responseObj.setMsg("用户名或密码不能为空");\n        result = GsonUtils.gson.toJson(responseObj);\n        mav.addObject("result", result);\n        return mav;\n    }\n    //查找用户\n    User user1 = userService.findUser(user);\n    if (null == user1) {\n        responseObj = new ResponseObj&lt;User&gt;();\n        responseObj.setCode(ResponseObj.EMPUTY);\n        responseObj.setMsg("未找到该用户");\n        result = GsonUtils.gson.toJson(responseObj);\n    } else {\n        if (user.getPwd().equals(user1.getPwd())) {\n            responseObj = new ResponseObj&lt;User&gt;();\n            responseObj.setCode(ResponseObj.OK);\n            responseObj.setMsg(ResponseObj.OK_STR);\n            result = GsonUtils.gson.toJson(responseObj);\n        } else {\n            responseObj = new ResponseObj&lt;User&gt;();\n            responseObj.setCode(ResponseObj.FAILED);\n            responseObj.setMsg("用户密码错误");\n            result = GsonUtils.gson.toJson(responseObj);\n        }\n    }\n    mav.addObject("result", result);\n    return mav;\n}\n</code></pre>\n\n<p>}</p>\n\n<p>```</p>\n\n<p>当然很多数据效验我们不能只在后端做，我们需要将数据检查的粒度细化。</p>\n\n<p>不但要在后端做，而且我们的前端页面也要做的，比如说手机号、邮箱帐号、用户名规则等等，用的最多的也就是web页面上面拿到数据用js来判断，使用<a href="http://baike.baidu.com/link?url=tw3uQ7hzZQaXrKAz5EU700k9mZuE-2H3TvkLFYsZ2yjANLB0sVlnj-Ig7L0E8SwTf9gI-f_N65ud7tL3RW_SzD_bI6A7ozb7PNspH8aniRACUiYm16gl_NJ2RecEyzgmEdzLG6h3FftX1Ax0vXGLxK">正则表达式</a>来判断是否符合标准。</p>\n\n<p>具体的js我也就不写了，因为我也不是很了解JS，只能对着别人写的自己来做修改==</p>\n\n<p><img src="http://upload-images.jianshu.io/upload_images/2139601-413777ae46b83182.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="蘑菇头-好伤心" /></p>\n\n<p>好的，我们现在已经把东西都弄完了，debug开启程序，然后加入断点调试。运行结果如下：</p>\n\n<p><img src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm应用三-注册页面和调试.png" alt="ssm应用三-注册页面和调试" /></p>\n\n<p>这样我们现在能拿到对应的数据，并且在Controller中加入了数据校验。同时，我们的web页面中也加入了js验证。</p>\n\n<p>现在我们的注册页面也可以了，功能也有了。既然如此，我们应该接着把登录页面做成功，但是我们已经有了这个的思路，那么剩下的只需要依样画瓢就能完成。</p>\n\n<p>具体的东西，都已经在后面的代码中贴出来了。详情请看github：</p>\n\n<p>项目地址：<a href="https://github.com/pc859107393/SpringMvcMybatis/tree/master">点击访问github</a></p>\n\n<p>总结：\n- URL生成\n- 注册登录完成\n- 简单的前端验证（在代码包中可以看到）\n- form表单提交\n- http请求\n- 功能模块分析\n- 流程图（使用xmind制作）</p>\n\n<p>下期预告：完整的后台主页，前端使用json数据，列表数据分页。</p>\n', '[手把手教程][JavaWeb]优雅的SSM应用（三）', '', 'inherit', 'closed', 'closed', '', '251-revision-v1', '', '', '2016-10-09 11:25:46', '2016-10-09 03:25:46', '', 251, 'http://acheng1314.cn/?p=252', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(253, 1, '2016-10-09 12:11:25', '2016-10-09 04:11:25', '<h4>[手把手教程][JavaWeb]优雅的SSM应用（三）</h4>\r\n文章正式改名为：[手把手教程][JavaWeb]优雅的SSM应用\r\n\r\n这几天一直在踩坑，为什么这么说呢，主要是一直自己没找到优雅的方式来实现一些东西。\r\n\r\n虽然说前面也做了一些功能模块，但是总感觉不对劲，毕竟也是刚转做后端。\r\n\r\n为了方便手机端用户，尽量使用简单的markdown语法和简单的页面结构。\r\n\r\n后面朋友给了我一些他们公司同事写的demo，虽然说不上是牛逼的作品，但是确实符合我现在的需要。毕竟人家的实现方式也是经过实战项目演练出来的。\r\n<ul>\r\n 	<li>再次安利一波,博客地址:<a href="http://acheng1314.cn/" target="_blank">acheng1314.cn</a></li>\r\n</ul>\r\n<h4>工具</h4>\r\n<ul>\r\n 	<li>IDE为<strong>idea15</strong></li>\r\n 	<li>JDK环境为<strong>1.8</strong></li>\r\n 	<li>maven版本为<strong>maven3</strong></li>\r\n 	<li>Mysql版本为<strong>5.5.27</strong></li>\r\n 	<li>Tomcat版本为<strong>7.0.52</strong></li>\r\n 	<li>流程图绘制（xmind）</li>\r\n</ul>\r\n<h4>本期目标</h4>\r\n<ul>\r\n 	<li>仓库管理系统的登录注册模块实现</li>\r\n 	<li>其他一些开发细节的体现</li>\r\n 	<li>功能模块分层设计的具体实现</li>\r\n</ul>\r\n<h4>其他</h4>\r\n<ul>\r\n 	<li>我这姑且算是文章吧，文章都是先用有道云笔记写的，然后在简书上面查看有没有冲突，最后再放到稀土掘金上面</li>\r\n 	<li>但是稀土掘金上面文章出问题了，反馈上去也没能解决，本来想抓包看看他们的数据的，后面还是没做</li>\r\n 	<li><strong>···</strong>其他想说的就太多了，但都是不是今天的主题。</li>\r\n</ul>\r\n<h4>注册</h4>\r\n首先，我们webapp要实现用户登录，必须得能新建用户。所以，我们先把注册用户放在前面。\r\n<ul>\r\n 	<li>预期功能：\r\n<ul>\r\n 	<li>打开注册页面</li>\r\n 	<li>填写注册信息</li>\r\n 	<li>点击注册</li>\r\n 	<li>显示注册后的提示信息</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n有了功能后，我们就能大概明白我们是想要一个什么样子的注册模块了。\r\n<ul>\r\n 	<li>一个web注册页面</li>\r\n 	<li>web页面能进行基本的数据效验</li>\r\n 	<li>服务器能存储用户的注册信息</li>\r\n 	<li>注册动作完成后，返回提示页面。</li>\r\n</ul>\r\n一般的，我们在开发中，有了大概样子的功能模块，我们需要整理一下业务流程和程序执行流程（在企业开发中，有项目经理的话，一般这些都是他们整理出来的，我们只需要开发实现就行。）经过一番挠头，大概的流程图如下所示：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E4%B8%89-%E6%B3%A8%E5%86%8C%E6%B5%81%E7%A8%8B.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E4%B8%89-%E6%B3%A8%E5%86%8C%E6%B5%81%E7%A8%8B.png" />\r\n<div class="image-caption">ssm应用三-注册流程</div>\r\n</div>\r\n上图说明：\r\n<ul>\r\n 	<li>我们在web页面完成注册信息的填写后，我们需要在web页面做一些基本的数据效验。当然后面我们会演示。</li>\r\n 	<li>注册信息通过基本的验证后，我们直接提交到服务器，<strong>tomact → servelt → spring</strong>。我们的后端程序，一切都被spring接管了，所以，我们需要在spring中完成这些功能。</li>\r\n 	<li>spring和外界通信，我们都是在Controller中完成。所以我们在Controller中处理数据。</li>\r\n 	<li>当数据通过了Controller中的校验后，我们需要在Controller中来查找数据库是否存在同样的用户名，<strong>通用的数据操作流程如：Controller → Service → Dao</strong>。</li>\r\n 	<li>前面我们提到过，<strong>Service是为我们的程序提供服务的，我们尽量每个Service对应一个Dao，这样我们只需要提供单一的数据驱动，在外层进行业务组装</strong>，这样就能达到我们的目的，同样的，我们这样也能将程序<a href="http://blog.csdn.net/hb0746/article/details/7410524" target="_blank"><strong>解耦</strong></a>，以后的维护也就相对简单了。</li>\r\n</ul>\r\n好的，我们上面已经把思路想明白了。现在我们接着就开始实战。\r\n<ul>\r\n 	<li>生成注册页面的连接。</li>\r\n</ul>\r\n我们要生成一个连接，经过查找资料，我们知道我们需要创建一个Controller的类。代码如下：\r\n<pre class="hljs java"><code class="java"><span class="hljs-annotation">@Controller</span>\r\n<span class="hljs-annotation">@RequestMapping</span>(<span class="hljs-string">"/mvc"</span>)\r\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainController</span> </span>{\r\n\r\n    <span class="hljs-comment">/**\r\n     * 登陆页面\r\n     * <span class="hljs-doctag">@return</span>\r\n     */</span>\r\n    <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/login"</span>,method = RequestMethod.GET)\r\n    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">()</span></span>{\r\n        <span class="hljs-keyword">return</span> <span class="hljs-string">"login"</span>;\r\n    }\r\n\r\n}</code></pre>\r\n在上面我们使用了@Controller和@RequestMapping("/mvc")注解。<a href="https://my.oschina.net/zhdkn/blog/316530" target="_blank">详细资料点这里。</a>\r\n\r\n通俗的来说，我们需要在我们前面配置的Controller路径中，建立<strong>使用@Controller的注解的类</strong>告诉Spring这是一个控制器。\r\n<pre class="hljs scala"><code class="scala">在类上面的 <span class="hljs-annotation">@RequestMapping</span>(<span class="hljs-string">"/mvc"</span>) ，是说明这个类的访问地址是 /mvc 。\r\n\r\n在方法上面的 <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/login"</span>,method = <span class="hljs-type">RequestMethod</span>.<span class="hljs-type">GET</span>) ，是说明我这个方法的访问地址是 /mvc/login ，请求方式是http请求的get方式。\r\n\r\n这里我的方法是<span class="hljs-type">String</span>方法，则是直接返回一个web页面的名字。\r\n\r\n当然，我们并不需要说直接去设定某个jsp文件。我们需要的是在这里指定好名称，然后使用对应的自动完成就能创建出那个jsp文件。\r\n\r\n然后我们直接在jsp文件中填写对应的代码就行了。</code></pre>\r\n好的，基本的东西我们都说了，那么我们先去百度找一个登录界面（一定要能看，不能那啥太直接的粗糙的东西，毕竟我们都是有品位的人）。如下图：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E4%B8%89-%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E4%B8%89-%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C.png" />\r\n<div class="image-caption">ssm应用三-登录注册页面</div>\r\n</div>\r\n上面的图中样子还不错的样子，同时他们还是同一个页面，这下就很nice了，又可以少写一个界面了。\r\n\r\n按照前面两期我们的东西综合起来，我们需要先<strong>把CSS、JS、图片等东西，扔到我们的静态目录中</strong>。如下图所示：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E4%B8%89-%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E4%B8%89-%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90.png" />\r\n<div class="image-caption">ssm应用三-登录注册静态资源</div>\r\n</div>\r\n接着我们把登录的html的页面的东西，全部放到login.jsp中。如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">%@</span> <span class="hljs-attribute">page</span> <span class="hljs-attribute">language</span>=<span class="hljs-value">"java"</span> <span class="hljs-attribute">import</span>=<span class="hljs-value">"java.util.*"</span> <span class="hljs-attribute">pageEncoding</span>=<span class="hljs-value">"UTF-8"</span> %&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">%@</span> <span class="hljs-attribute">taglib</span> <span class="hljs-attribute">uri</span>=<span class="hljs-value">"http://java.sun.com/jsp/jstl/core"</span> <span class="hljs-attribute">prefix</span>=<span class="hljs-value">"c"</span> %&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-title">%--</span> 上面这两行是<span class="hljs-attribute">java</span>代码的引用 <span class="hljs-attribute">--</span>%&gt;</span>\r\n\r\n<span class="hljs-doctype">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/javascript"</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"/static/js/jquery-3.1.1.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span>仓库管理系统→登录<span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span>\r\n\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">http-equiv</span>=<span class="hljs-value">"Content-Type"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"text/html; charset=utf-8"</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/javascript"</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"/static/js/login.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"/static/css/login2.css"</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/css"</span>/&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>仓库管理系统登陆注册<span class="hljs-tag">&lt;<span class="hljs-title">sup</span>&gt;</span>2016<span class="hljs-tag">&lt;/<span class="hljs-title">sup</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"login"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"margin-top:50px;"</span>&gt;</span>\r\n\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"header"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"switch"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"switch"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"switch_btn_focus"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"switch_qlogin"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"javascript:void(0);"</span>\r\n                                           <span class="hljs-attribute">tabindex</span>=<span class="hljs-value">"7"</span>&gt;</span>快速登录<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"switch_btn"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"switch_login"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"javascript:void(0);"</span> <span class="hljs-attribute">tabindex</span>=<span class="hljs-value">"8"</span>&gt;</span>快速注册<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>\r\n\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"switch_bottom"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"switch_bottom"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"position: absolute; width: 64px; left: 0px;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"web_qr_login"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"web_qr_login"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"display: block; height: 235px;"</span>&gt;</span>\r\n\r\n        <span class="hljs-comment">&lt;!--登录--&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"web_login"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"web_login"</span>&gt;</span>\r\n\r\n\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"login-box"</span>&gt;</span>\r\n\r\n\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"login_form"</span>&gt;</span>\r\n                    <span class="hljs-tag">&lt;<span class="hljs-title">form</span> <span class="hljs-attribute">action</span>=<span class="hljs-value">"&lt;%=request.getContextPath()%&gt;/userAction/login"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"loginform"</span>\r\n                          <span class="hljs-attribute">accept-charset</span>=<span class="hljs-value">"utf-8"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"login_form"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"loginForm"</span>\r\n                          <span class="hljs-attribute">method</span>=<span class="hljs-value">"post"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"hidden"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"did"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"0"</span>/&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"hidden"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"to"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"log"</span>/&gt;</span>\r\n\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"uinArea"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"uinArea"</span>&gt;</span>\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"input-tips"</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"u"</span>&gt;</span>帐号：<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>\r\n\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputOuter"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"uArea"</span>&gt;</span>\r\n\r\n                                <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"u"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"loginId"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputstyle"</span>/&gt;</span>\r\n                            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"pwdArea"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"pwdArea"</span>&gt;</span>\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"input-tips"</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"p"</span>&gt;</span>密码：<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>\r\n\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputOuter"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"pArea"</span>&gt;</span>\r\n\r\n                                <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"password"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"p"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"pwd"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputstyle"</span>/&gt;</span>\r\n                            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"padding-left:50px;margin-top:20px;"</span>&gt;</span>\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"submit"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"登 录"</span>\r\n                                   <span class="hljs-attribute">style</span>=<span class="hljs-value">"width:150px;"</span>\r\n                                   <span class="hljs-attribute">class</span>=<span class="hljs-value">"button_blue"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n                    <span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!--登录end--&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!--注册--&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"qlogin"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"qlogin"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"display: none; "</span>&gt;</span>\r\n\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"web_login"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">form</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"form2"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"regUser"</span> <span class="hljs-attribute">accept-charset</span>=<span class="hljs-value">"utf-8"</span> <span class="hljs-attribute">action</span>=<span class="hljs-value">"&lt;%=request.getContextPath()%&gt;/userAction/reg"</span>\r\n                  <span class="hljs-attribute">method</span>=<span class="hljs-value">"post"</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"hidden"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"to"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"reg"</span>/&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"hidden"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"did"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"0"</span>/&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"reg_form"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"reg-ul"</span>&gt;</span>\r\n                    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"userCue"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"cue"</span>&gt;</span>快速注册请注意格式<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n                    <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>\r\n\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"user"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"input-tips2"</span>&gt;</span>用户名：<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>\r\n\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputOuter2"</span>&gt;</span>\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"user"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"loginId"</span> <span class="hljs-attribute">maxlength</span>=<span class="hljs-value">"16"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputstyle2"</span>/&gt;</span>\r\n                        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\r\n                    <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>\r\n\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"user"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"input-tips2"</span>&gt;</span>姓名：<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>\r\n\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputOuter2"</span>&gt;</span>\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"name"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"name"</span> <span class="hljs-attribute">maxlength</span>=<span class="hljs-value">"16"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputstyle2"</span>/&gt;</span>\r\n                        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"passwd"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"input-tips2"</span>&gt;</span>密码：<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>\r\n\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputOuter2"</span>&gt;</span>\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"password"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"passwd"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"pwd"</span> <span class="hljs-attribute">maxlength</span>=<span class="hljs-value">"16"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputstyle2"</span>/&gt;</span>\r\n                        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\r\n                    <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"passwd2"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"input-tips2"</span>&gt;</span>确认密码：<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>\r\n\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputOuter2"</span>&gt;</span>\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"password"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"passwd2"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">""</span> <span class="hljs-attribute">maxlength</span>=<span class="hljs-value">"16"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputstyle2"</span>/&gt;</span>\r\n                        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"cellNumber"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"input-tips2"</span>&gt;</span>手机号：<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>\r\n\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputOuter2"</span>&gt;</span>\r\n\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"cellNumber"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"cellNumber"</span> <span class="hljs-attribute">maxlength</span>=<span class="hljs-value">"18"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputstyle2"</span>/&gt;</span>\r\n                        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"sex"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"input-tips2"</span>&gt;</span>性别：<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>\r\n\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputOuter2"</span>&gt;</span>\r\n\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"sex"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"sex"</span> <span class="hljs-attribute">maxlength</span>=<span class="hljs-value">"18"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputstyle2"</span>/&gt;</span>\r\n                        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"age"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"input-tips2"</span>&gt;</span>年龄：<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>\r\n\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputOuter2"</span>&gt;</span>\r\n\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"age"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"age"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"age"</span> <span class="hljs-attribute">maxlength</span>=<span class="hljs-value">"18"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputstyle2"</span>/&gt;</span>\r\n                        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"inputArea"</span>&gt;</span>\r\n                            <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"reg"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"margin-top:10px;margin-left:85px;"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"button_blue"</span>\r\n                                   <span class="hljs-attribute">value</span>=<span class="hljs-value">"同意协议并注册"</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"#"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"zcxy"</span> <span class="hljs-attribute">target</span>=<span class="hljs-value">"_blank"</span>&gt;</span>注册协议<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\r\n                    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"cl"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span>\r\n\r\n\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n    <span class="hljs-comment">&lt;!--注册end--&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"jianyi"</span>&gt;</span>*推荐使用ie8或以上版本ie浏览器或Chrome内核浏览器访问本站<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></code></pre>\r\n上面的网页代码中的东西，我们也可以不求甚解，只要会调用就行。调用地址是在我们的form表单的action那里填写我们的服务器地址。这里我们甚至可以做前后端分离，用纯粹的html+js来调用Api接口实现前后端分离。\r\n<pre class="hljs objectivec"><code class="objectivec">action=<span class="hljs-string">"&lt;%=request.getContextPath()%&gt;/userAction/reg"</span> method=<span class="hljs-string">"post"</span>\r\n\r\n&lt;%=request<span class="hljs-variable">.getContextPath</span>()%&gt; 这是指向我们应用的根路径\r\n\r\nmothod是说明我们请求的方式，我们这里才用了post，至于其他的方法就不一一介绍了，详细信息请百度查找“ http请求 ”\r\n\r\nform表单中，每个input的name我们需要和后端的接口那边的字段对应。\r\n\r\n当我们的字段对应后，spring可以自动把请求的内容转换为适应的对象。\r\n\r\n小提示：我们可以直接debug我们的程序，只要取消断点程序就可以顺序执行，加入断点只要程序流转到那里，他就会自动调试。</code></pre>\r\n当然，我们的jsp写完后，我们需要给我们的表单请求那里指定请求路径。由于上面我已经指定了路径，所以我们需要在对应的路径创建请求的接口（实际开发中都是先写好请求接口，再让程序调用。由于我这里是提前写好的，所以这里我们得照着路径写代码）。\r\n\r\n我们在Controller目录下创建一个UserController类，代码内容如下：\r\n<pre class="hljs java"><code class="java"><span class="hljs-keyword">package</span> cn.acheng1314.mvc.controller;\r\n\r\n<span class="hljs-keyword">import</span> cn.acheng1314.domain.ResponseObj;\r\n<span class="hljs-keyword">import</span> cn.acheng1314.domain.User;\r\n<span class="hljs-keyword">import</span> cn.acheng1314.exception.*;\r\n<span class="hljs-keyword">import</span> cn.acheng1314.service.serviceImpl.UserServiceImpl;\r\n<span class="hljs-keyword">import</span> cn.acheng1314.utils.GsonUtils;\r\n<span class="hljs-keyword">import</span> cn.acheng1314.utils.StringUtils;\r\n<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;\r\n<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;\r\n<span class="hljs-keyword">import</span> org.springframework.ui.ModelMap;\r\n<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;\r\n<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;\r\n<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;\r\n<span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;\r\n\r\n<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;\r\n\r\n<span class="hljs-comment">/**\r\n * 用户请求相关控制器\r\n * &lt;br/&gt;Created by acheng on 2016/9/26.\r\n */</span>\r\n<span class="hljs-annotation">@Controller</span>\r\n<span class="hljs-annotation">@RequestMapping</span>(<span class="hljs-string">"/userAction"</span>)\r\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>{\r\n\r\n    <span class="hljs-annotation">@Autowired</span>\r\n    <span class="hljs-keyword">private</span> UserServiceImpl userService;    <span class="hljs-comment">//自动载入Service对象</span>\r\n    <span class="hljs-keyword">private</span> ResponseObj responseObj;    <span class="hljs-comment">//bean对象</span>\r\n\r\n    <span class="hljs-comment">/**\r\n     * 为什么返回值是一个ModelAndView，ModelAndView代表一个web页面&lt;br/&gt;\r\n     * setViewName是设置一个jsp页面的名称\r\n     * <span class="hljs-doctag">@param</span> req   http请求\r\n     * <span class="hljs-doctag">@param</span> user  发起请求后，spring接收到请求，然后封装的bean数据\r\n     * <span class="hljs-doctag">@return</span>  返回一个web页面\r\n     * <span class="hljs-doctag">@throws</span> Exception    \r\n     */</span>\r\n    <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/reg"</span>, method = RequestMethod.POST)\r\n    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">reg</span><span class="hljs-params">(HttpServletRequest req, User user)</span> <span class="hljs-keyword">throws</span> Exception </span>{\r\n        ModelAndView mav = <span class="hljs-keyword">new</span> ModelAndView();  <span class="hljs-comment">//创建一个jsp页面对象</span>\r\n        mav.setViewName(<span class="hljs-string">"home"</span>);    <span class="hljs-comment">//设置JSP文件名</span>\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == user) {\r\n            mav.addObject(<span class="hljs-string">"message"</span>, <span class="hljs-string">"用户信息不能为空！"</span>);  <span class="hljs-comment">//加入提示信息，在jsp中我们直接使用${对象名称}就能获取对应的内容</span>\r\n            <span class="hljs-keyword">return</span> mav; <span class="hljs-comment">//返回页面</span>\r\n        }\r\n        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(user.getName()) || StringUtils.isEmpty(user.getPwd())) {\r\n            mav.addObject(<span class="hljs-string">"message"</span>, <span class="hljs-string">"用户名或密码不能为空！"</span>);\r\n            <span class="hljs-keyword">return</span> mav;\r\n        }\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != userService.findUser(user)) {\r\n            mav.addObject(<span class="hljs-string">"message"</span>, <span class="hljs-string">"用户已经存在！"</span>);\r\n            <span class="hljs-keyword">return</span> mav;\r\n        }\r\n        <span class="hljs-keyword">try</span> {\r\n            userService.add(user);\r\n        } <span class="hljs-keyword">catch</span> (Exception e) {\r\n            e.printStackTrace();\r\n            mav.addObject(<span class="hljs-string">"message"</span>, <span class="hljs-string">"错误：用户其他信息错误"</span>);\r\n            <span class="hljs-keyword">return</span> mav;\r\n        }\r\n        mav.addObject(<span class="hljs-string">"code"</span>, <span class="hljs-number">110</span>);\r\n        mav.addObject(<span class="hljs-string">"message"</span>, <span class="hljs-string">"恭喜。注册成功"</span>);\r\n        req.getSession().setAttribute(<span class="hljs-string">"user"</span>, user);\r\n        <span class="hljs-keyword">return</span> mav;\r\n    }\r\n\r\n    <span class="hljs-comment">/**\r\n     * 登录接口\r\n     * <span class="hljs-doctag">@param</span> req\r\n     * <span class="hljs-doctag">@param</span> user\r\n     * <span class="hljs-doctag">@return</span>\r\n     */</span>\r\n    <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/login"</span>, method = RequestMethod.POST, produces = {\r\n            <span class="hljs-string">"application/json; charset=utf-8"</span>})\r\n    <span class="hljs-annotation">@ResponseBody</span>\r\n    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">login</span><span class="hljs-params">(HttpServletRequest req, User user)</span> </span>{\r\n        ModelAndView mav = <span class="hljs-keyword">new</span> ModelAndView(<span class="hljs-string">"home"</span>);\r\n        String result;\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == user) {\r\n            responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n            responseObj.setCode(ResponseObj.EMPUTY);\r\n            responseObj.setMsg(<span class="hljs-string">"登录信息不能为空"</span>);\r\n            result = GsonUtils.gson.toJson(responseObj);    <span class="hljs-comment">//转换的json数据</span>\r\n            mav.addObject(<span class="hljs-string">"result"</span>, result);\r\n            <span class="hljs-keyword">return</span> mav; <span class="hljs-comment">//返回页面</span>\r\n        }\r\n        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(user.getLoginId()) || StringUtils.isEmpty(user.getPwd())) {\r\n            responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n            responseObj.setCode(ResponseObj.FAILED);\r\n            responseObj.setMsg(<span class="hljs-string">"用户名或密码不能为空"</span>);\r\n            result = GsonUtils.gson.toJson(responseObj);\r\n            mav.addObject(<span class="hljs-string">"result"</span>, result);\r\n            <span class="hljs-keyword">return</span> mav;\r\n        }\r\n        <span class="hljs-comment">//查找用户</span>\r\n        User user1 = userService.findUser(user);\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == user1) {\r\n            responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n            responseObj.setCode(ResponseObj.EMPUTY);\r\n            responseObj.setMsg(<span class="hljs-string">"未找到该用户"</span>);\r\n            result = GsonUtils.gson.toJson(responseObj);\r\n        } <span class="hljs-keyword">else</span> {\r\n            <span class="hljs-keyword">if</span> (user.getPwd().equals(user1.getPwd())) {\r\n                responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n                responseObj.setCode(ResponseObj.OK);\r\n                responseObj.setMsg(ResponseObj.OK_STR);\r\n                result = GsonUtils.gson.toJson(responseObj);\r\n            } <span class="hljs-keyword">else</span> {\r\n                responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n                responseObj.setCode(ResponseObj.FAILED);\r\n                responseObj.setMsg(<span class="hljs-string">"用户密码错误"</span>);\r\n                result = GsonUtils.gson.toJson(responseObj);\r\n            }\r\n        }\r\n        mav.addObject(<span class="hljs-string">"result"</span>, result);\r\n        <span class="hljs-keyword">return</span> mav;\r\n    }\r\n\r\n}</code></pre>\r\n当然很多数据效验我们不能只在后端做，我们需要将数据检查的粒度细化。\r\n\r\n不但要在后端做，而且我们的前端页面也要做的，比如说手机号、邮箱帐号、用户名规则等等，用的最多的也就是web页面上面拿到数据用js来判断，使用<a href="http://baike.baidu.com/link?url=tw3uQ7hzZQaXrKAz5EU700k9mZuE-2H3TvkLFYsZ2yjANLB0sVlnj-Ig7L0E8SwTf9gI-f_N65ud7tL3RW_SzD_bI6A7ozb7PNspH8aniRACUiYm16gl_NJ2RecEyzgmEdzLG6h3FftX1Ax0vXGLxK" target="_blank">正则表达式</a>来判断是否符合标准。\r\n\r\n具体的js我也就不写了，因为我也不是很了解JS，只能对着别人写的自己来做修改==\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://upload-images.jianshu.io/upload_images/2139601-413777ae46b83182.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-original-src="http://upload-images.jianshu.io/upload_images/2139601-413777ae46b83182.jpg?imageMogr2/auto-orient/strip%7CimageView2/2" />\r\n<div class="image-caption">蘑菇头-好伤心</div>\r\n</div>\r\n好的，我们现在已经把东西都弄完了，debug开启程序，然后加入断点调试。运行结果如下：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E4%B8%89-%E6%B3%A8%E5%86%8C%E9%A1%B5%E9%9D%A2%E5%92%8C%E8%B0%83%E8%AF%95.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E4%B8%89-%E6%B3%A8%E5%86%8C%E9%A1%B5%E9%9D%A2%E5%92%8C%E8%B0%83%E8%AF%95.png" />\r\n<div class="image-caption">ssm应用三-注册页面和调试</div>\r\n</div>\r\n这样我们现在能拿到对应的数据，并且在Controller中加入了数据校验。同时，我们的web页面中也加入了js验证。\r\n\r\n现在我们的注册页面也可以了，功能也有了。既然如此，我们应该接着把登录页面做成功，但是我们已经有了这个的思路，那么剩下的只需要依样画瓢就能完成。\r\n\r\n具体的东西，都已经在后面的代码中贴出来了。详情请看github：\r\n\r\n项目地址：<a href="https://github.com/pc859107393/SpringMvcMybatis/tree/master" target="_blank">点击访问github</a>\r\n\r\n总结：\r\n<ul>\r\n 	<li>URL生成</li>\r\n 	<li>注册登录完成</li>\r\n 	<li>简单的前端验证（在代码包中可以看到）</li>\r\n 	<li>form表单提交</li>\r\n 	<li>http请求</li>\r\n 	<li>功能模块分析</li>\r\n 	<li>流程图（使用xmind制作）</li>\r\n</ul>\r\n下期预告：完整的后台主页，前端使用json数据，列表数据分页。', '[手把手教程][JavaWeb]优雅的SSM应用（三）', '', 'inherit', 'closed', 'closed', '', '251-revision-v1', '', '', '2016-10-09 12:11:25', '2016-10-09 04:11:25', '', 251, 'http://acheng1314.cn/?p=253', 0, 'revision', '', 0),
(255, 1, '2016-10-14 22:57:57', '2016-10-14 14:57:57', '', 'ssm%e5%ba%94%e7%94%a8%e5%9b%9b-%e6%b3%a8%e5%86%8c%e6%88%90%e5%8a%9f-%e5%9c%b0%e5%9d%80%e6%a0%8f%e9%94%99%e8%af%af', '', 'inherit', 'open', 'closed', '', 'ssm%e5%ba%94%e7%94%a8%e5%9b%9b-%e6%b3%a8%e5%86%8c%e6%88%90%e5%8a%9f-%e5%9c%b0%e5%9d%80%e6%a0%8f%e9%94%99%e8%af%af', '', '', '2016-10-14 22:57:57', '2016-10-14 14:57:57', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/10/ssm应用四-注册成功-地址栏错误.png', 0, 'attachment', 'image/png', 0),
(256, 1, '2016-10-14 23:56:25', '2016-10-14 15:56:25', '', 'ssm%e5%ba%94%e7%94%a8%e5%9b%9b-%e5%89%8d%e7%ab%afform%e9%94%99%e8%af%af-%e6%8f%90%e7%a4%ba%e7%a4%ba%e4%be%8b', '', 'inherit', 'open', 'closed', '', 'ssm%e5%ba%94%e7%94%a8%e5%9b%9b-%e5%89%8d%e7%ab%afform%e9%94%99%e8%af%af-%e6%8f%90%e7%a4%ba%e7%a4%ba%e4%be%8b', '', '', '2016-10-14 23:56:25', '2016-10-14 15:56:25', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/10/ssm应用四-前端form错误-提示示例.png', 0, 'attachment', 'image/png', 0),
(257, 1, '2016-10-18 12:30:39', '2016-10-18 04:30:39', '', 'ssm%e5%ba%94%e7%94%a8%e5%9b%9b-%e5%90%8e%e5%8f%b0%e4%b8%bb%e9%a1%b5-%e4%bf%ae%e6%94%b9%e4%b8%aa%e4%ba%ba%e4%bf%a1%e6%81%af', '', 'inherit', 'open', 'closed', '', 'ssm%e5%ba%94%e7%94%a8%e5%9b%9b-%e5%90%8e%e5%8f%b0%e4%b8%bb%e9%a1%b5-%e4%bf%ae%e6%94%b9%e4%b8%aa%e4%ba%ba%e4%bf%a1%e6%81%af', '', '', '2016-10-18 12:30:39', '2016-10-18 04:30:39', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/10/ssm应用四-后台主页-修改个人信息.png', 0, 'attachment', 'image/png', 0),
(258, 1, '2016-10-18 16:08:24', '2016-10-18 08:08:24', '', 'qq%e6%88%aa%e5%9b%be20161005115016', '', 'inherit', 'open', 'closed', '', 'qq%e6%88%aa%e5%9b%be20161005115016', '', '', '2016-10-18 16:08:24', '2016-10-18 08:08:24', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/10/QQ截图20161005115016.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(259, 1, '2016-10-21 02:17:07', '2016-10-20 18:17:07', '<h4>优雅的SpringMvc+Mybatis应用（四）</h4>\r\n转眼间文章已经到了第四期了。坚持做一件事，确实是很难的。特别是要不断的转换思维，一个习惯前端开发的人，做什么还是前端的考虑的多一点，后端的架构设计之类的，现在还谈不上，一切稳稳的前进就行了。\r\n\r\n关于上一期，本来是投了首页的，后来不知道什么原因没上，检查了一下，也就是推荐了下自己的博客和github，有点惆怅。\r\n<h4>工具</h4>\r\n<ul>\r\n 	<li>IDE为<strong>idea15</strong></li>\r\n 	<li>JDK环境为<strong>1.8</strong></li>\r\n 	<li>maven版本为<strong>maven3</strong></li>\r\n 	<li>Mysql版本为<strong>5.5.27</strong></li>\r\n 	<li>Tomcat版本为<strong>7.0.52</strong></li>\r\n 	<li>流程图绘制（xmind）</li>\r\n</ul>\r\n<h4>本期目标</h4>\r\n<ul>\r\n 	<li>登录注册的简单体验优化</li>\r\n 	<li>完整的后台主页</li>\r\n 	<li>前端使用json数据</li>\r\n 	<li>列表数据分页\r\n<h4>注册登录的简单体验优化</h4>\r\n</li>\r\n</ul>\r\n上一期我们<strong>注册登录都成功</strong>了，但是后台主页显示很丑陋，所以这里我换了个主页，但是前面没有注意到的细节又看到了。如下图：\r\n<div class="image-package imagebubble">\r\n\r\n<img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%9B%9B-%E6%B3%A8%E5%86%8C%E6%88%90%E5%8A%9F-%E5%9C%B0%E5%9D%80%E6%A0%8F%E9%94%99%E8%AF%AF.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%9B%9B-%E6%B3%A8%E5%86%8C%E6%88%90%E5%8A%9F-%E5%9C%B0%E5%9D%80%E6%A0%8F%E9%94%99%E8%AF%AF.png" />\r\n<div class="image-caption">ssm应用四-注册成功-地址栏错误</div>\r\n</div>\r\n在上面的图中，地址栏显示的地址是前面注册接口的地址，并不是我们常规看到的<strong>xxx/home</strong>这种主页地址。所以我们需要进行优化处理。\r\n\r\n同时，我们可以看到我们的Form表单提交的提示信息是在新产生的<strong>ModelAndView</strong>界面里面addObject("字段名",数据)，这样我们的数据都显示到新的界面去了。也就是说前面的设计不合符现在主流的开发思路，用户体验也相对糟糕。我们需要做到在登录界面前端效验数据，同时登录注册的提示信息也是在对应的界面完成的。如下：\r\n<div class="image-package imagebubble">\r\n\r\n<img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%9B%9B-%E5%89%8D%E7%AB%AFform%E9%94%99%E8%AF%AF-%E6%8F%90%E7%A4%BA%E7%A4%BA%E4%BE%8B.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%9B%9B-%E5%89%8D%E7%AB%AFform%E9%94%99%E8%AF%AF-%E6%8F%90%E7%A4%BA%E7%A4%BA%E4%BE%8B.png" />\r\n<div class="image-caption">ssm应用四-前端form错误-提示示例</div>\r\n</div>\r\n值得注意的是：为了程序执行效率、数据完整性和程序健壮性，我们的前端必须做对应的基础数据效验，后端的控制器必须做所有需要的数据的效验。\r\n<ul>\r\n 	<li>前端数据效验我们使用js完成</li>\r\n 	<li>前端界面样式是由CSS完成</li>\r\n 	<li>网络请求采用异步请求，具体的实现是使用的ajax完成</li>\r\n 	<li>js获取web页面数据统一使用标签的ID，格式为：<strong>$("#标签ID")</strong></li>\r\n 	<li>web页面标签最好一个标签一行，这样代码看起来更加舒服</li>\r\n</ul>\r\n我们先重构登录页面：\r\n首先，我不擅长写web页面，我能做的也就是少量的修改，CSS和js本身不是我的强项，需要大量的时间来磨合。\r\n\r\n所以，我选择了在网上找web界面，然后自己做少量的修改，同时一些简单的小控件我也从网络获取资源来解决需要，<strong>合理的查找资源是最快的学习方法</strong>。\r\n\r\n登录页面重构目标：\r\n<ul>\r\n 	<li>web前端完成基本的数据效验</li>\r\n 	<li>数据效验完成后，有基本的对应提示。如上面登录界面的小标签。</li>\r\n 	<li>异步登录</li>\r\n 	<li>后端接口返回数据为json</li>\r\n 	<li>前端页面解析json控制程序流转</li>\r\n</ul>\r\n首先，按照上面的提示，我们可以知道的是前端页面上面的基本数据效验是要使用js完成的，同时js中获取web页面标签的数据是需要使用标签的ID完成，简单的示例如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/javascript"</span>&gt;</span><span class="javascript">\r\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">webLogin</span>() </span>{   <span class="hljs-comment">//定义一个名为webLogin的js函数（在java中我们称呼函数为方法）</span>\r\n        <span class="hljs-keyword">var</span> loginname = $(<span class="hljs-string">"#u"</span>).val();  \r\n        <span class="hljs-comment">//var是申明一个变量的关键字，loginname为变量名，</span>\r\n        <span class="hljs-comment">//$("#u")是找到一个标签ID为"u"的标签，.val() 是获取对应ID标签的值</span>\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-string">""</span> == loginname) {  <span class="hljs-comment">//u标签的值为空</span>\r\n            <span class="hljs-comment">//只有通过 $("#u") 的形式才能获取一个标签。</span>\r\n            $(<span class="hljs-string">"#u"</span>).tips({  <span class="hljs-comment">// .tips 是js提示标签的调用方法，具体的轮廓如上面的登陆页面的提示标签</span>\r\n                side: <span class="hljs-number">2</span>,    \r\n                msg: <span class="hljs-string">''用户名不得为空''</span>,  <span class="hljs-comment">//提示的信息</span>\r\n                bg: <span class="hljs-string">''#AE81FF''</span>,  <span class="hljs-comment">//背景色</span>\r\n                time: <span class="hljs-number">3</span> <span class="hljs-comment">//呈现的时间</span>\r\n            });\r\n            $(<span class="hljs-string">"#u"</span>).focus();    <span class="hljs-comment">//让u标签获取输入焦点</span>\r\n            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;   <span class="hljs-comment">//返回false，打断js的执行</span>\r\n        }\r\n\r\n        <span class="hljs-keyword">var</span> loginpwd = $(<span class="hljs-string">"#p"</span>).val();  \r\n        <span class="hljs-keyword">if</span> (loginpwd == <span class="hljs-string">""</span>) {\r\n            $(<span class="hljs-string">"#p"</span>).tips({\r\n                side: <span class="hljs-number">2</span>,\r\n                msg: <span class="hljs-string">''密码不得为空''</span>,\r\n                bg: <span class="hljs-string">''#AE81FF''</span>,\r\n                time: <span class="hljs-number">3</span>\r\n            });\r\n            $(<span class="hljs-string">"#p"</span>).focus();\r\n            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;\r\n        }\r\n\r\n        $.ajax({    <span class="hljs-comment">//使用jquery下面的ajax开启网络请求</span>\r\n                type: <span class="hljs-string">"POST"</span>,   <span class="hljs-comment">//http请求方式为POST</span>\r\n                url: <span class="hljs-string">''&lt;%=request.getContextPath()%&gt;/userAction/login''</span>,  <span class="hljs-comment">//请求接口的地址</span>\r\n                data: {loginId: loginname, pwd: loginpwd},  <span class="hljs-comment">//存放的数据，服务器接口字段为loginId和pwd，分别对应用户登录名和密码</span>\r\n                dataType: <span class="hljs-string">''json''</span>,   <span class="hljs-comment">//当这里指定为json的时候，获取到了数据后会自动解析的，只需要 返回值.字段名称 就能使用了</span>\r\n                cache: <span class="hljs-literal">false</span>,   <span class="hljs-comment">//不用缓存</span>\r\n                success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{  <span class="hljs-comment">//请求成功，http状态码为200。返回的数据已经打包在data中了。</span>\r\n                    <span class="hljs-keyword">if</span> (data.code == <span class="hljs-number">1</span>) {   <span class="hljs-comment">//获判断json数据中的code是否为1，登录的用户名和密码匹配，通过效验，登陆成功</span>\r\n                        <span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">"&lt;%=request.getContextPath()%&gt;/mvc/home"</span>;    <span class="hljs-comment">//跳转到主页</span>\r\n                    } <span class="hljs-keyword">else</span> {    <span class="hljs-comment">//登录不成功</span>\r\n                        alert(data.msg);    <span class="hljs-comment">//弹出对话框，提示返回的错误信息</span>\r\n                        $(<span class="hljs-string">"#u"</span>).focus();\r\n                    }\r\n                }\r\n            });\r\n    }\r\n</span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span></code></pre>\r\n上面的注释已经能很明显的看出我们的 <strong>前端效验、网络请求和js解析json</strong>，下面我们在前端页面中调用这个js，如下：\r\n<pre class="hljs scala"><code class="scala">&lt;form action=<span class="hljs-string">""</span>     <span class="hljs-comment">//此处必须删掉form表单的地址</span>\r\n    name=<span class="hljs-string">"loginform"</span>\r\n    accept-charset=<span class="hljs-string">"utf-8"</span> \r\n    id=<span class="hljs-string">"login_form"</span> \r\n    <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"loginForm"</span>\r\n    method=<span class="hljs-string">"post"</span>&gt;\r\n        &lt;input <span class="hljs-class"><span class="hljs-keyword">type</span>=</span><span class="hljs-string">"hidden"</span> name=<span class="hljs-string">"did"</span> value=<span class="hljs-string">"0"</span>/&gt;\r\n        &lt;input <span class="hljs-class"><span class="hljs-keyword">type</span>=</span><span class="hljs-string">"hidden"</span> name=<span class="hljs-string">"to"</span> value=<span class="hljs-string">"log"</span>/&gt;\r\n\r\n        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"uinArea"</span> id=<span class="hljs-string">"uinArea"</span>&gt;\r\n            &lt;label <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"input-tips"</span> <span class="hljs-keyword">for</span>=<span class="hljs-string">"u"</span>&gt;帐号：&lt;/label&gt;\r\n            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"inputOuter"</span> id=<span class="hljs-string">"uArea"</span>&gt;\r\n                &lt;input <span class="hljs-class"><span class="hljs-keyword">type</span>=</span><span class="hljs-string">"text"</span> id=<span class="hljs-string">"u"</span> name=<span class="hljs-string">"loginId"</span> <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"inputstyle"</span>/&gt;\r\n            &lt;/div&gt;\r\n        &lt;/div&gt;\r\n\r\n        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"pwdArea"</span> id=<span class="hljs-string">"pwdArea"</span>&gt;\r\n            &lt;label <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"input-tips"</span> <span class="hljs-keyword">for</span>=<span class="hljs-string">"p"</span>&gt;密码：&lt;/label&gt;\r\n            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"inputOuter"</span> id=<span class="hljs-string">"pArea"</span>&gt;\r\n                &lt;input <span class="hljs-class"><span class="hljs-keyword">type</span>=</span><span class="hljs-string">"password"</span> id=<span class="hljs-string">"p"</span> name=<span class="hljs-string">"pwd"</span> <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"inputstyle"</span>/&gt;\r\n            &lt;/div&gt;\r\n        &lt;/div&gt;\r\n\r\n        &lt;div style=<span class="hljs-string">"padding-left:50px;margin-top:20px;"</span>&gt;\r\n            &lt;input <span class="hljs-class"><span class="hljs-keyword">type</span>=</span><span class="hljs-string">"button"</span>\r\n               id=<span class="hljs-string">"btn_login"</span>\r\n               value=<span class="hljs-string">"登 录"</span>\r\n               onclick=<span class="hljs-string">"webLogin();"</span>    <span class="hljs-comment">//此处调用我们上面写的js的登录方法</span>\r\n               style=<span class="hljs-string">"width:150px;"</span>\r\n               <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"button_blue"</span>/&gt;\r\n        &lt;/div&gt;\r\n&lt;/form&gt;</code></pre>\r\n上面就是web中调用js的简单实现，注意的是，<strong>FORM表单必须删除action的值，在点击后需要触发对应事件的地方调用js</strong>。\r\n\r\n当然，我们的前端页面完成后，我们必须在后端接口处，做出对应的修改，让他符合我们前端的调用规则。后端修改如下：\r\n<pre class="hljs java"><code class="java"><span class="hljs-comment">/**\r\n * 用户请求相关控制器\r\n * &lt;br/&gt;Created by acheng on 2016/9/26.\r\n */</span>\r\n<span class="hljs-annotation">@Controller</span> <span class="hljs-comment">//标明本类是控制器</span>\r\n<span class="hljs-annotation">@RequestMapping</span>(<span class="hljs-string">"/userAction"</span>)  <span class="hljs-comment">//外层地址</span>\r\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>{\r\n\r\n    <span class="hljs-annotation">@Autowired</span>\r\n    <span class="hljs-keyword">private</span> UserServiceImpl userService;    <span class="hljs-comment">//自动载入Service对象</span>\r\n    <span class="hljs-keyword">private</span> ResponseObj responseObj;    <span class="hljs-comment">//返回json数据的实体</span>\r\n\r\n    <span class="hljs-comment">/**\r\n     * 登录接口，因为json数据外层一般都是Object类型，所以返回值必须是Object&lt;br/&gt;\r\n     *  这里的地址是： 域名/userAction/login\r\n     *\r\n     * <span class="hljs-doctag">@param</span> req\r\n     * <span class="hljs-doctag">@param</span> user\r\n     * <span class="hljs-doctag">@return</span>\r\n     */</span>\r\n    <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/login"</span>    <span class="hljs-comment">//内层地址</span>\r\n            , method = RequestMethod.POST   <span class="hljs-comment">//限定请求方式</span>\r\n            , produces = <span class="hljs-string">"application/json; charset=utf-8"</span>) <span class="hljs-comment">//设置返回值是json数据类型</span>\r\n    <span class="hljs-annotation">@ResponseBody</span>\r\n    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">login</span><span class="hljs-params">(HttpServletRequest req, User user)</span> </span>{\r\n        Object result;\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == user) {\r\n            responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n            responseObj.setCode(ResponseObj.EMPUTY);\r\n            responseObj.setMsg(<span class="hljs-string">"登录信息不能为空"</span>);\r\n            result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);   <span class="hljs-comment">//通过gson把java bean转换为json</span>\r\n            <span class="hljs-keyword">return</span> result; <span class="hljs-comment">//返回json</span>\r\n        }\r\n        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(user.getLoginId()) || StringUtils.isEmpty(user.getPwd())) {\r\n            responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n            responseObj.setCode(ResponseObj.FAILED);\r\n            responseObj.setMsg(<span class="hljs-string">"用户名或密码不能为空"</span>);\r\n            result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n            <span class="hljs-keyword">return</span> result;\r\n        }\r\n        <span class="hljs-comment">//查找用户</span>\r\n        User user1 = userService.findUser(user);\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == user1) {\r\n            responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n            responseObj.setCode(ResponseObj.EMPUTY);\r\n            responseObj.setMsg(<span class="hljs-string">"未找到该用户"</span>);\r\n            result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n        } <span class="hljs-keyword">else</span> {\r\n            <span class="hljs-keyword">if</span> (user.getPwd().equals(user1.getPwd())) {\r\n                responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n                responseObj.setCode(ResponseObj.OK);    <span class="hljs-comment">//登录成功，状态为1</span>\r\n                responseObj.setMsg(ResponseObj.OK_STR);\r\n                responseObj.setData(user1); <span class="hljs-comment">//登陆成功后返回用户信息</span>\r\n                result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n            } <span class="hljs-keyword">else</span> {\r\n                responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n                responseObj.setCode(ResponseObj.FAILED);\r\n                responseObj.setMsg(<span class="hljs-string">"用户密码错误"</span>);\r\n                result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n            }\r\n        }\r\n        <span class="hljs-keyword">return</span> result;\r\n    }\r\n}</code></pre>\r\n注意：如果为了返回数据为json，那么我们需要设定某个方法对应的注解为：<strong>@ResponseBody</strong> 。 否则会<strong>产生404错误</strong>！\r\n\r\n我们通过上面的重构可以明白以下几点：\r\n<ul>\r\n 	<li>前端\r\n<ul>\r\n 	<li>js实现基本的数据效验</li>\r\n 	<li>js发起网络请求</li>\r\n 	<li>ajax发起网络请求，返回类型设置json能自动解析</li>\r\n 	<li>js获取页面控件</li>\r\n 	<li>页面控件调用js</li>\r\n 	<li>js获取解析后的json数据的值，进行程序流转控制</li>\r\n</ul>\r\n</li>\r\n 	<li>后端：\r\n<ul>\r\n 	<li>后端控制器必须申明</li>\r\n 	<li>后端的地址必须配置</li>\r\n 	<li>每个地址返回的数据类型要匹配</li>\r\n 	<li>返回json数据，方法上面必须配置：<strong>@ResponseBody</strong></li>\r\n 	<li>可以使用工具类来方便开发</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h4>后台主页→个人信息修改</h4>\r\n上期我们可以看到，我们的登录和注册都是已经OK了。现在我们登录和注册成功后，我们都让他跳转到主页去。同时完善登录和注册的错误提示页面。\r\n\r\n一般来说，大家更喜欢看到登录成功后的主页界面，毕竟大多数人都是有喜新厌旧之嫌。我也是一样的。哈哈。\r\n\r\n为了程序的执行逻辑，考虑后端需求都不是那么单一，我们先做一些公共的建设。比如说用户信息修改现实之类的。如下图：\r\n<div class="image-package imagebubble">\r\n\r\n<img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%9B%9B-%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A1%B5-%E4%BF%AE%E6%94%B9%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%9B%9B-%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A1%B5-%E4%BF%AE%E6%94%B9%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF.png" />\r\n<div class="image-caption">ssm应用四-后台主页-修改个人信息</div>\r\n</div>\r\n如上图所示，我们需要一个可以弹出的对话框，我去百度了一下，那个<a href="http://note.youdao.com/" target="_blank">“妹子UI”</a>还是很受人欢迎，所以就集成进来了。\r\n\r\n我们选取一个比较喜欢的后端主页，然后把对应的资源放入到对应的文件目录（js、css、images等），需要新加入的资源如果在以前的目录中没有的话，那么我们需要在里面进行配置。比如说这里我加入了字体文件，那么我现在需要先把字体文件指定目录为：\r\n<pre class="hljs objectivec"><code class="objectivec"><span class="hljs-keyword">static</span>/font/</code></pre>\r\n目录指定后我需要在Spring的配置文件，spring-web.xml中配置静态资源的目录如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/fonts/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/fonts/"</span>/&gt;</span></code></pre>\r\n剩下的就是写好jsp页面(Copy+Pause+修改资源文件路径)。然后我们在Controller中配置好路径\r\n<pre class="hljs cs"><code class="cs"><span class="hljs-comment">/**\r\n * 后台主页\r\n *\r\n * @return\r\n */</span>\r\n@RequestMapping(<span class="hljs-keyword">value</span> = <span class="hljs-string">"/home"</span>, method = RequestMethod.GET)\r\n<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">home</span>() </span>{\r\n    <span class="hljs-keyword">return</span> <span class="hljs-string">"home"</span>;\r\n}</code></pre>\r\n这样子配置好了后，我们就可以直接用“域名/mvc/home”来访问我们的主页了。同时按照上面的设置，我们登录成功后，直接解析json确认用户登录成功，然后前端使用js来进行页面跳转，如：\r\n<pre class="hljs javascript"><code class="javascript"><span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">"&lt;%=request.getContextPath()%&gt;/mvc/home"</span>;    <span class="hljs-comment">//跳转到主页</span></code></pre>\r\n这样，我们就能修复上面说道的页面和地址显示不匹配的问题。\r\n\r\n同时，通过上面的可以看出，我们在jsp页面中，纯粹没加入任何jsva代码，全是使用的前端+接口实现的功能。我们这样做，以后维护和重构中也能降低一部分压力。\r\n\r\n言归正传，我们这里主要是想做一个<strong>个人信息修改</strong>的功能。首先我们进行功能和业务流程分析。\r\n\r\n功能和业务流程分析：\r\n<ul>\r\n 	<li>1.web点击头像显示修改信息对话框。</li>\r\n 	<li>2.根据后端定义的用户信息表，得出用户信息修改需要填写的资料。</li>\r\n 	<li>3.用户上传个人资料，上传之前前端必须先进行基础信息验证。</li>\r\n 	<li>4.用户个人信息验证通过后，上传到服务器。（重点）</li>\r\n 	<li>5.服务器接收上传的信息，进行存储，并返回修改结果。（重点）</li>\r\n</ul>\r\n从上面我们可以看到我画出两个重点，而且这两个重点都是java web避免不了事情。为什么这样说呢？\r\n<ul>\r\n 	<li>1.任何一个动态的web服务器都免不了数据资料的更新，数据资料更新一般分为两种。\r\n<ul>\r\n 	<li>有文件的信息上传</li>\r\n 	<li>无文件的信息上传</li>\r\n</ul>\r\n</li>\r\n 	<li>2.可能其他童鞋看到http请求的方法有很多种，但是一般来说get和post我们能做出任何的操作。</li>\r\n 	<li>3.在大量数据的服务器中，考虑到很多因素（历史记录查询、数据库增量等），一般不会进行真正的物理数据删除，一般都是通过控制输出来实现的。（实战经验，血泪教训，切记）</li>\r\n</ul>\r\n现在我们开始实现对话框：\r\n\r\n打开<a href="http://amazeui.org/javascript" target="_blank">“妹子UI”的js插件页面</a>，我们找到<a href="http://amazeui.org/javascript/modal" target="_blank">模态窗口相关的文档</a>，在“模拟 Prompt”这里，我们可以看到具体的对话框的实现和调用如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-comment">&lt;!--这是html代码--&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">button</span>\r\n  <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span>\r\n  <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-btn am-btn-success"</span>\r\n  <span class="hljs-attribute">id</span>=<span class="hljs-value">"doc-prompt-toggle"</span>&gt;</span>\r\n  Prompt\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal am-modal-prompt"</span> <span class="hljs-attribute">tabindex</span>=<span class="hljs-value">"-1"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"my-prompt"</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-dialog"</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-hd"</span>&gt;</span>Amaze UI<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-bd"</span>&gt;</span>\r\n      来来来，吐槽点啥吧\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-prompt-input"</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-footer"</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-btn"</span> <span class="hljs-attribute">data-am-modal-cancel</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-btn"</span> <span class="hljs-attribute">data-am-modal-confirm</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n<span class="hljs-comment">&lt;!--这是js调用--&gt;</span>\r\n$(function() {\r\n  $(''#doc-prompt-toggle'').on(''click'', function() {  //在这里设定上面的按钮的点击函数\r\n    $(''#my-prompt'').modal({ //显示ID为my-prompt的窗口\r\n      relatedTarget: this,\r\n      onConfirm: function(e) {  //窗口的确定按钮的响应事件\r\n        alert(''你输入的是：'' + e.data || '''')\r\n      },\r\n      onCancel: function(e) {   //取消按钮的响应事件\r\n        alert(''不想说!'');\r\n      }\r\n    });\r\n  });\r\n});</code></pre>\r\n关于上面的相关代码，我们需要引入妹子UI后才能使用！！！接下来我们需要改造成符合我们实际需求的界面，如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-comment">&lt;!--这里是html代码--&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal am-modal-prompt"</span> <span class="hljs-attribute">tabindex</span>=<span class="hljs-value">"-1"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"my-prompt"</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-dialog"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-hd"</span>&gt;</span>用户信息修改<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-bd"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">form</span> <span class="hljs-attribute">enctype</span>=<span class="hljs-value">"multipart/form-data"</span> <span class="hljs-attribute">accept-charset</span>=<span class="hljs-value">"UTF-8"</span>&gt;</span>\r\n                姓名：\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-prompt-input"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"changeName"</span>&gt;</span>\r\n\r\n                性别：\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-prompt-input"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"changeSex"</span>&gt;</span>\r\n\r\n                手机号：\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-prompt-input"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"changeCell"</span>&gt;</span>\r\n\r\n                年龄：\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-prompt-input"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"changeAge"</span>&gt;</span>\r\n\r\n                头像：\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-prompt-input"</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"file"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"file"</span>\r\n                           <span class="hljs-attribute">id</span>=<span class="hljs-value">"changeHeadPic"</span> <span class="hljs-attribute">size</span>=<span class="hljs-value">"28"</span>/&gt;</span>\r\n\r\n                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-footer"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-btn"</span> <span class="hljs-attribute">data-am-modal-cancel</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-btn"</span> <span class="hljs-attribute">data-am-modal-confirm</span>&gt;</span>上传<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n<span class="hljs-comment">&lt;!--下面是js代码--&gt;</span>\r\n    var fileName;\r\n    <span class="hljs-comment">&lt;!--文件上传这里加入了js插件：jquery.ajaxfileupload.js--&gt;</span>\r\n    function uploadFile() {\r\n        //这里应该加入Loading 窗口开启\r\n        fileName = document.getElementById(''changeHeadPic'').value;\r\n        $.ajaxFileUpload({\r\n            url: "<span class="hljs-tag">&lt;<span class="hljs-title">%=request.getContextPath()%</span>&gt;</span>/userAction/uploadHeadPic",\r\n            secureuri: false, //是否需要安全协议，一般设置为false\r\n            fileElementId: ''changeHeadPic'', //文件上传域的ID\r\n            dataType: ''json'', //返回值类型 一般设置为json\r\n            contentType: "application/x-www-form-urlencoded; charset=utf-8",\r\n            success: function (data) {\r\n                alert(data.msg);\r\n                //先根据返回的code确定文件是否上传成功\r\n                //文件上传失败，直接弹出错误提示，根据错误进行相应的事物处理（关闭Loading窗口，弹出提示对话框）\r\n                //文件上传成功后，继续现实loading窗口，接着执行上传表单信息等事物\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    function changeUserInfo() { //显示个人信息修改窗口\r\n        $(''#my-prompt'').modal({\r\n            relatedTarget: this,\r\n            onConfirm: function () {\r\n                uploadFile();   //调用上面的文件上传函数\r\n            },\r\n            onCancel: function (e) {\r\n            }\r\n        });\r\n    }</code></pre>\r\n上面的代码，我们完成了控制窗口显示的函数，完成了修改个人信息界面的构建。现在我们需要的是找到执行程序入口。按照我的习惯，肯定是找到头像控件，然后设置点击事件为上面的changeUserInfo()。实现如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-comment">&lt;!--下面是头像的html代码，在头像控件后面的点击事件上面添加上函数就行了。--&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"user-img"</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"/static/images/avatar-1.jpg"</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"user-img"</span> <span class="hljs-attribute">title</span>=<span class="hljs-value">"Mat Helme"</span>\r\n         <span class="hljs-attribute">class</span>=<span class="hljs-value">"img-circle img-thumbnail img-responsive"</span> <span class="hljs-attribute">onclick</span>=<span class="hljs-value">"changeUserInfo()"</span>&gt;</span>    <span class="hljs-comment">&lt;!--在这里添加onclick方法的值为：changeUserInfo()--&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"user-status offline"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">i</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-icon-dot-circle-o"</span> <span class="hljs-attribute">aria-hidden</span>=<span class="hljs-value">"true"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">i</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></code></pre>\r\n好的，上面我们可以看到我的前端界面代码基本上完成了。接下来，我们需要在我们后端上面写上对应的程序接口，实现功能即可。\r\n\r\n本来计划文件上传单独使用commons-fileupload和commons-io完成的，毕竟这是在Servelt上面的老套路，但是我发现Spring里面已经考虑到这一点，有新的东西来完成，所以就使用了Spring的实现方式。具体代码如下：\r\n<pre class="hljs java"><code class="java">    <span class="hljs-comment">//我们在UserController这个控制器里添加这个方法</span>\r\n    <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/uploadHeadPic"</span>\r\n            , method = RequestMethod.POST\r\n            , produces = <span class="hljs-string">"application/json; charset=utf-8"</span>)\r\n    <span class="hljs-annotation">@ResponseBody</span>\r\n    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">uploadHeadPic</span><span class="hljs-params">(@RequestParam(required = <span class="hljs-keyword">false</span>)</span> MultipartFile file, HttpServletRequest request) </span>{\r\n        <span class="hljs-comment">//在这里面文件存储的方案一般是：收到文件→获取文件名→在本地存储目录建立防重名文件→写入文件→返回成功信息</span>\r\n        <span class="hljs-comment">//如果上面的步骤中在结束前任意一步失败，那就直接失败了。</span>\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == file || file.isEmpty()) {\r\n            responseObj = <span class="hljs-keyword">new</span> ResponseObj();\r\n            responseObj.setCode(ResponseObj.FAILED);\r\n            responseObj.setMsg(<span class="hljs-string">"文件不能为空"</span>);\r\n            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n        }\r\n        responseObj = <span class="hljs-keyword">new</span> ResponseObj();\r\n        responseObj.setCode(ResponseObj.OK);\r\n        responseObj.setMsg(<span class="hljs-string">"文件长度为："</span> + file.getSize());\r\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n    }</code></pre>\r\n完成了上面的方法后，我们觉得应该是没问题了，毕竟这样一个接口来接受请求是没问题的嘛，是的，我也是这么认为的。\r\n\r\n但是现实的打脸是很严重的，因为按照这么写后，<strong>我无论如何都收不到文件（文件一直为null）</strong>，Why？我的思路是正确的啊。经过我的仔细查找，发现我的Spring的配置文件中，没有添加文件的支持设置，所以我们又得补充配置文件，spring-web.xml新增配置如下：\r\n<pre class="hljs xml"><code class="xml">    <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"multipartResolver"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!--下面设置的是上传文件的最大大小--&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"maxUploadSize"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"10000000"</span>/&gt;</span>   \r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span></code></pre>\r\n经过上面的一番折腾，我们发现框架这个东西，也不是一劳永逸的，毕竟很多东西需要不断的增加。\r\n\r\n总结：\r\n<ul>\r\n 	<li>任何东西都需要根据需求不断的变化，可增可减，张弛有度。</li>\r\n 	<li>Spring接收文件上传时，Controller的具体方法的参数前面插入注解，同时数据类型是MultipartFile。</li>\r\n 	<li>引入第三方资源的时候，必须查看文档，根据说明文档好办事。</li>\r\n 	<li>js进行前端流程控制，后端接口隔离，前后端解耦。</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n前两天刮台风，停电导致数据丢失，是个很尴尬的事情，拖慢了进度。同时，朋友遇到点问题，我在开导他。文章写到现在也是凌晨4点过了，本期计划的列表分页也没做，很对不起大家对我的期待。真诚的说一声：对不起。对不起你们的期待。\r\n\r\n给朋友开导的时候，我也总结了下做人做事：<strong>随心、追梦、勇敢、独行</strong>。希望有心做事的，都用这几句话勉励自己吧。\r\n\r\n前行的路上不只是孤独，还有满山的鲜花，更有远方和诗。\r\n\r\n<hr />\r\n\r\n<h4>下期预告：</h4>\r\n<ul>\r\n 	<li>列表分页</li>\r\n 	<li>简易用户角色控制</li>\r\n 	<li>拦截器的使用</li>\r\n</ul>', '[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（四）', '', 'publish', 'open', 'open', '', '%e6%89%8b%e6%8a%8a%e6%89%8b%e6%95%99%e7%a8%8bjavaweb%e4%bc%98%e9%9b%85%e7%9a%84springmvcmybatis%e5%ba%94%e7%94%a8%ef%bc%88%e5%9b%9b%ef%bc%89', '', '', '2016-10-21 02:17:32', '2016-10-20 18:17:32', '', 0, 'http://acheng1314.cn/?p=259', 0, 'post', '', 1);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(260, 1, '2016-10-21 02:17:07', '2016-10-20 18:17:07', '<h4>优雅的SpringMvc+Mybatis应用（四）</h4>转眼间文章已经到了第四期了。坚持做一件事，确实是很难的。特别是要不断的转换思维，一个习惯前端开发的人，做什么还是前端的考虑的多一点，后端的架构设计之类的，现在还谈不上，一切稳稳的前进就行了。关于上一期，本来是投了首页的，后来不知道什么原因没上，检查了一下，也就是推荐了下自己的博客和github，有点惆怅。<h4>工具</h4><ul> 	<li>IDE为<strong>idea15</strong></li> 	<li>JDK环境为<strong>1.8</strong></li> 	<li>maven版本为<strong>maven3</strong></li> 	<li>Mysql版本为<strong>5.5.27</strong></li> 	<li>Tomcat版本为<strong>7.0.52</strong></li> 	<li>流程图绘制（xmind）</li></ul><h4>本期目标</h4><ul> 	<li>登录注册的简单体验优化</li> 	<li>完整的后台主页</li> 	<li>前端使用json数据</li> 	<li>列表数据分页<h4>注册登录的简单体验优化</h4></li></ul>上一期我们<strong>注册登录都成功</strong>了，但是后台主页显示很丑陋，所以这里我换了个主页，但是前面没有注意到的细节又看到了。如下图：<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%9B%9B-%E6%B3%A8%E5%86%8C%E6%88%90%E5%8A%9F-%E5%9C%B0%E5%9D%80%E6%A0%8F%E9%94%99%E8%AF%AF.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%9B%9B-%E6%B3%A8%E5%86%8C%E6%88%90%E5%8A%9F-%E5%9C%B0%E5%9D%80%E6%A0%8F%E9%94%99%E8%AF%AF.png" /><div class="image-caption">ssm应用四-注册成功-地址栏错误</div></div>在上面的图中，地址栏显示的地址是前面注册接口的地址，并不是我们常规看到的<strong>xxx/home</strong>这种主页地址。所以我们需要进行优化处理。同时，我们可以看到我们的Form表单提交的提示信息是在新产生的<strong>ModelAndView</strong>界面里面addObject("字段名",数据)，这样我们的数据都显示到新的界面去了。也就是说前面的设计不合符现在主流的开发思路，用户体验也相对糟糕。我们需要做到在登录界面前端效验数据，同时登录注册的提示信息也是在对应的界面完成的。如下：<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%9B%9B-%E5%89%8D%E7%AB%AFform%E9%94%99%E8%AF%AF-%E6%8F%90%E7%A4%BA%E7%A4%BA%E4%BE%8B.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%9B%9B-%E5%89%8D%E7%AB%AFform%E9%94%99%E8%AF%AF-%E6%8F%90%E7%A4%BA%E7%A4%BA%E4%BE%8B.png" /><div class="image-caption">ssm应用四-前端form错误-提示示例</div></div>值得注意的是：为了程序执行效率、数据完整性和程序健壮性，我们的前端必须做对应的基础数据效验，后端的控制器必须做所有需要的数据的效验。<ul> 	<li>前端数据效验我们使用js完成</li> 	<li>前端界面样式是由CSS完成</li> 	<li>网络请求采用异步请求，具体的实现是使用的ajax完成</li> 	<li>js获取web页面数据统一使用标签的ID，格式为：<strong>$("#标签ID")</strong></li> 	<li>web页面标签最好一个标签一行，这样代码看起来更加舒服</li></ul>我们先重构登录页面：首先，我不擅长写web页面，我能做的也就是少量的修改，CSS和js本身不是我的强项，需要大量的时间来磨合。所以，我选择了在网上找web界面，然后自己做少量的修改，同时一些简单的小控件我也从网络获取资源来解决需要，<strong>合理的查找资源是最快的学习方法</strong>。登录页面重构目标：<ul> 	<li>web前端完成基本的数据效验</li> 	<li>数据效验完成后，有基本的对应提示。如上面登录界面的小标签。</li> 	<li>异步登录</li> 	<li>后端接口返回数据为json</li> 	<li>前端页面解析json控制程序流转</li></ul>首先，按照上面的提示，我们可以知道的是前端页面上面的基本数据效验是要使用js完成的，同时js中获取web页面标签的数据是需要使用标签的ID完成，简单的示例如下：<pre class="hljs xml"><code class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/javascript"</span>&gt;</span><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">webLogin</span>() </span>{   <span class="hljs-comment">//定义一个名为webLogin的js函数（在java中我们称呼函数为方法）</span>        <span class="hljs-keyword">var</span> loginname = $(<span class="hljs-string">"#u"</span>).val();          <span class="hljs-comment">//var是申明一个变量的关键字，loginname为变量名，</span>        <span class="hljs-comment">//$("#u")是找到一个标签ID为"u"的标签，.val() 是获取对应ID标签的值</span>        <span class="hljs-keyword">if</span> (<span class="hljs-string">""</span> == loginname) {  <span class="hljs-comment">//u标签的值为空</span>            <span class="hljs-comment">//只有通过 $("#u") 的形式才能获取一个标签。</span>            $(<span class="hljs-string">"#u"</span>).tips({  <span class="hljs-comment">// .tips 是js提示标签的调用方法，具体的轮廓如上面的登陆页面的提示标签</span>                side: <span class="hljs-number">2</span>,                    msg: <span class="hljs-string">''用户名不得为空''</span>,  <span class="hljs-comment">//提示的信息</span>                bg: <span class="hljs-string">''#AE81FF''</span>,  <span class="hljs-comment">//背景色</span>                time: <span class="hljs-number">3</span> <span class="hljs-comment">//呈现的时间</span>            });            $(<span class="hljs-string">"#u"</span>).focus();    <span class="hljs-comment">//让u标签获取输入焦点</span>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;   <span class="hljs-comment">//返回false，打断js的执行</span>        }        <span class="hljs-keyword">var</span> loginpwd = $(<span class="hljs-string">"#p"</span>).val();          <span class="hljs-keyword">if</span> (loginpwd == <span class="hljs-string">""</span>) {            $(<span class="hljs-string">"#p"</span>).tips({                side: <span class="hljs-number">2</span>,                msg: <span class="hljs-string">''密码不得为空''</span>,                bg: <span class="hljs-string">''#AE81FF''</span>,                time: <span class="hljs-number">3</span>            });            $(<span class="hljs-string">"#p"</span>).focus();            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        }        $.ajax({    <span class="hljs-comment">//使用jquery下面的ajax开启网络请求</span>                type: <span class="hljs-string">"POST"</span>,   <span class="hljs-comment">//http请求方式为POST</span>                url: <span class="hljs-string">''&lt;%=request.getContextPath()%&gt;/userAction/login''</span>,  <span class="hljs-comment">//请求接口的地址</span>                data: {loginId: loginname, pwd: loginpwd},  <span class="hljs-comment">//存放的数据，服务器接口字段为loginId和pwd，分别对应用户登录名和密码</span>                dataType: <span class="hljs-string">''json''</span>,   <span class="hljs-comment">//当这里指定为json的时候，获取到了数据后会自动解析的，只需要 返回值.字段名称 就能使用了</span>                cache: <span class="hljs-literal">false</span>,   <span class="hljs-comment">//不用缓存</span>                success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{  <span class="hljs-comment">//请求成功，http状态码为200。返回的数据已经打包在data中了。</span>                    <span class="hljs-keyword">if</span> (data.code == <span class="hljs-number">1</span>) {   <span class="hljs-comment">//获判断json数据中的code是否为1，登录的用户名和密码匹配，通过效验，登陆成功</span>                        <span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">"&lt;%=request.getContextPath()%&gt;/mvc/home"</span>;    <span class="hljs-comment">//跳转到主页</span>                    } <span class="hljs-keyword">else</span> {    <span class="hljs-comment">//登录不成功</span>                        alert(data.msg);    <span class="hljs-comment">//弹出对话框，提示返回的错误信息</span>                        $(<span class="hljs-string">"#u"</span>).focus();                    }                }            });    }</span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span></code></pre>上面的注释已经能很明显的看出我们的 <strong>前端效验、网络请求和js解析json</strong>，下面我们在前端页面中调用这个js，如下：<pre class="hljs scala"><code class="scala">&lt;form action=<span class="hljs-string">""</span>     <span class="hljs-comment">//此处必须删掉form表单的地址</span>    name=<span class="hljs-string">"loginform"</span>    accept-charset=<span class="hljs-string">"utf-8"</span>     id=<span class="hljs-string">"login_form"</span>     <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"loginForm"</span>    method=<span class="hljs-string">"post"</span>&gt;        &lt;input <span class="hljs-class"><span class="hljs-keyword">type</span>=</span><span class="hljs-string">"hidden"</span> name=<span class="hljs-string">"did"</span> value=<span class="hljs-string">"0"</span>/&gt;        &lt;input <span class="hljs-class"><span class="hljs-keyword">type</span>=</span><span class="hljs-string">"hidden"</span> name=<span class="hljs-string">"to"</span> value=<span class="hljs-string">"log"</span>/&gt;        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"uinArea"</span> id=<span class="hljs-string">"uinArea"</span>&gt;            &lt;label <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"input-tips"</span> <span class="hljs-keyword">for</span>=<span class="hljs-string">"u"</span>&gt;帐号：&lt;/label&gt;            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"inputOuter"</span> id=<span class="hljs-string">"uArea"</span>&gt;                &lt;input <span class="hljs-class"><span class="hljs-keyword">type</span>=</span><span class="hljs-string">"text"</span> id=<span class="hljs-string">"u"</span> name=<span class="hljs-string">"loginId"</span> <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"inputstyle"</span>/&gt;            &lt;/div&gt;        &lt;/div&gt;        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"pwdArea"</span> id=<span class="hljs-string">"pwdArea"</span>&gt;            &lt;label <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"input-tips"</span> <span class="hljs-keyword">for</span>=<span class="hljs-string">"p"</span>&gt;密码：&lt;/label&gt;            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"inputOuter"</span> id=<span class="hljs-string">"pArea"</span>&gt;                &lt;input <span class="hljs-class"><span class="hljs-keyword">type</span>=</span><span class="hljs-string">"password"</span> id=<span class="hljs-string">"p"</span> name=<span class="hljs-string">"pwd"</span> <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"inputstyle"</span>/&gt;            &lt;/div&gt;        &lt;/div&gt;        &lt;div style=<span class="hljs-string">"padding-left:50px;margin-top:20px;"</span>&gt;            &lt;input <span class="hljs-class"><span class="hljs-keyword">type</span>=</span><span class="hljs-string">"button"</span>               id=<span class="hljs-string">"btn_login"</span>               value=<span class="hljs-string">"登 录"</span>               onclick=<span class="hljs-string">"webLogin();"</span>    <span class="hljs-comment">//此处调用我们上面写的js的登录方法</span>               style=<span class="hljs-string">"width:150px;"</span>               <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"button_blue"</span>/&gt;        &lt;/div&gt;&lt;/form&gt;</code></pre>上面就是web中调用js的简单实现，注意的是，<strong>FORM表单必须删除action的值，在点击后需要触发对应事件的地方调用js</strong>。当然，我们的前端页面完成后，我们必须在后端接口处，做出对应的修改，让他符合我们前端的调用规则。后端修改如下：<pre class="hljs java"><code class="java"><span class="hljs-comment">/** * 用户请求相关控制器 * &lt;br/&gt;Created by acheng on 2016/9/26. */</span><span class="hljs-annotation">@Controller</span> <span class="hljs-comment">//标明本类是控制器</span><span class="hljs-annotation">@RequestMapping</span>(<span class="hljs-string">"/userAction"</span>)  <span class="hljs-comment">//外层地址</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>{    <span class="hljs-annotation">@Autowired</span>    <span class="hljs-keyword">private</span> UserServiceImpl userService;    <span class="hljs-comment">//自动载入Service对象</span>    <span class="hljs-keyword">private</span> ResponseObj responseObj;    <span class="hljs-comment">//返回json数据的实体</span>    <span class="hljs-comment">/**     * 登录接口，因为json数据外层一般都是Object类型，所以返回值必须是Object&lt;br/&gt;     *  这里的地址是： 域名/userAction/login     *     * <span class="hljs-doctag">@param</span> req     * <span class="hljs-doctag">@param</span> user     * <span class="hljs-doctag">@return</span>     */</span>    <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/login"</span>    <span class="hljs-comment">//内层地址</span>            , method = RequestMethod.POST   <span class="hljs-comment">//限定请求方式</span>            , produces = <span class="hljs-string">"application/json; charset=utf-8"</span>) <span class="hljs-comment">//设置返回值是json数据类型</span>    <span class="hljs-annotation">@ResponseBody</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">login</span><span class="hljs-params">(HttpServletRequest req, User user)</span> </span>{        Object result;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == user) {            responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();            responseObj.setCode(ResponseObj.EMPUTY);            responseObj.setMsg(<span class="hljs-string">"登录信息不能为空"</span>);            result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);   <span class="hljs-comment">//通过gson把java bean转换为json</span>            <span class="hljs-keyword">return</span> result; <span class="hljs-comment">//返回json</span>        }        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(user.getLoginId()) || StringUtils.isEmpty(user.getPwd())) {            responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();            responseObj.setCode(ResponseObj.FAILED);            responseObj.setMsg(<span class="hljs-string">"用户名或密码不能为空"</span>);            result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);            <span class="hljs-keyword">return</span> result;        }        <span class="hljs-comment">//查找用户</span>        User user1 = userService.findUser(user);        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == user1) {            responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();            responseObj.setCode(ResponseObj.EMPUTY);            responseObj.setMsg(<span class="hljs-string">"未找到该用户"</span>);            result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);        } <span class="hljs-keyword">else</span> {            <span class="hljs-keyword">if</span> (user.getPwd().equals(user1.getPwd())) {                responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();                responseObj.setCode(ResponseObj.OK);    <span class="hljs-comment">//登录成功，状态为1</span>                responseObj.setMsg(ResponseObj.OK_STR);                responseObj.setData(user1); <span class="hljs-comment">//登陆成功后返回用户信息</span>                result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);            } <span class="hljs-keyword">else</span> {                responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();                responseObj.setCode(ResponseObj.FAILED);                responseObj.setMsg(<span class="hljs-string">"用户密码错误"</span>);                result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);            }        }        <span class="hljs-keyword">return</span> result;    }}</code></pre>注意：如果为了返回数据为json，那么我们需要设定某个方法对应的注解为：<strong>@ResponseBody</strong> 。 否则会<strong>产生404错误</strong>！我们通过上面的重构可以明白以下几点：<ul> 	<li>前端<ul> 	<li>js实现基本的数据效验</li> 	<li>js发起网络请求</li> 	<li>ajax发起网络请求，返回类型设置json能自动解析</li> 	<li>js获取页面控件</li> 	<li>页面控件调用js</li> 	<li>js获取解析后的json数据的值，进行程序流转控制</li></ul></li> 	<li>后端：<ul> 	<li>后端控制器必须申明</li> 	<li>后端的地址必须配置</li> 	<li>每个地址返回的数据类型要匹配</li> 	<li>返回json数据，方法上面必须配置：<strong>@ResponseBody</strong></li> 	<li>可以使用工具类来方便开发</li></ul></li></ul><hr /><h4>后台主页→个人信息修改</h4>上期我们可以看到，我们的登录和注册都是已经OK了。现在我们登录和注册成功后，我们都让他跳转到主页去。同时完善登录和注册的错误提示页面。一般来说，大家更喜欢看到登录成功后的主页界面，毕竟大多数人都是有喜新厌旧之嫌。我也是一样的。哈哈。为了程序的执行逻辑，考虑后端需求都不是那么单一，我们先做一些公共的建设。比如说用户信息修改现实之类的。如下图：<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%9B%9B-%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A1%B5-%E4%BF%AE%E6%94%B9%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%9B%9B-%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A1%B5-%E4%BF%AE%E6%94%B9%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF.png" /><div class="image-caption">ssm应用四-后台主页-修改个人信息</div></div>如上图所示，我们需要一个可以弹出的对话框，我去百度了一下，那个<a href="http://note.youdao.com/" target="_blank">“妹子UI”</a>还是很受人欢迎，所以就集成进来了。我们选取一个比较喜欢的后端主页，然后把对应的资源放入到对应的文件目录（js、css、images等），需要新加入的资源如果在以前的目录中没有的话，那么我们需要在里面进行配置。比如说这里我加入了字体文件，那么我现在需要先把字体文件指定目录为：<pre class="hljs objectivec"><code class="objectivec"><span class="hljs-keyword">static</span>/font/</code></pre>目录指定后我需要在Spring的配置文件，spring-web.xml中配置静态资源的目录如下：<pre class="hljs xml"><code class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/fonts/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/fonts/"</span>/&gt;</span></code></pre>剩下的就是写好jsp页面(Copy+Pause+修改资源文件路径)。然后我们在Controller中配置好路径<pre class="hljs cs"><code class="cs"><span class="hljs-comment">/** * 后台主页 * * @return */</span>@RequestMapping(<span class="hljs-keyword">value</span> = <span class="hljs-string">"/home"</span>, method = RequestMethod.GET)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">home</span>() </span>{    <span class="hljs-keyword">return</span> <span class="hljs-string">"home"</span>;}</code></pre>这样子配置好了后，我们就可以直接用“域名/mvc/home”来访问我们的主页了。同时按照上面的设置，我们登录成功后，直接解析json确认用户登录成功，然后前端使用js来进行页面跳转，如：<pre class="hljs javascript"><code class="javascript"><span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">"&lt;%=request.getContextPath()%&gt;/mvc/home"</span>;    <span class="hljs-comment">//跳转到主页</span></code></pre>这样，我们就能修复上面说道的页面和地址显示不匹配的问题。同时，通过上面的可以看出，我们在jsp页面中，纯粹没加入任何jsva代码，全是使用的前端+接口实现的功能。我们这样做，以后维护和重构中也能降低一部分压力。言归正传，我们这里主要是想做一个<strong>个人信息修改</strong>的功能。首先我们进行功能和业务流程分析。功能和业务流程分析：<ul> 	<li>1.web点击头像显示修改信息对话框。</li> 	<li>2.根据后端定义的用户信息表，得出用户信息修改需要填写的资料。</li> 	<li>3.用户上传个人资料，上传之前前端必须先进行基础信息验证。</li> 	<li>4.用户个人信息验证通过后，上传到服务器。（重点）</li> 	<li>5.服务器接收上传的信息，进行存储，并返回修改结果。（重点）</li></ul>从上面我们可以看到我画出两个重点，而且这两个重点都是java web避免不了事情。为什么这样说呢？<ul> 	<li>1.任何一个动态的web服务器都免不了数据资料的更新，数据资料更新一般分为两种。<ul> 	<li>有文件的信息上传</li> 	<li>无文件的信息上传</li></ul></li> 	<li>2.可能其他童鞋看到http请求的方法有很多种，但是一般来说get和post我们能做出任何的操作。</li> 	<li>3.在大量数据的服务器中，考虑到很多因素（历史记录查询、数据库增量等），一般不会进行真正的物理数据删除，一般都是通过控制输出来实现的。（实战经验，血泪教训，切记）</li></ul>现在我们开始实现对话框：打开<a href="http://amazeui.org/javascript" target="_blank">“妹子UI”的js插件页面</a>，我们找到<a href="http://amazeui.org/javascript/modal" target="_blank">模态窗口相关的文档</a>，在“模拟 Prompt”这里，我们可以看到具体的对话框的实现和调用如下：<pre class="hljs xml"><code class="xml"><span class="hljs-comment">&lt;!--这是html代码--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">button</span>  <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span>  <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-btn am-btn-success"</span>  <span class="hljs-attribute">id</span>=<span class="hljs-value">"doc-prompt-toggle"</span>&gt;</span>  Prompt<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal am-modal-prompt"</span> <span class="hljs-attribute">tabindex</span>=<span class="hljs-value">"-1"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"my-prompt"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-dialog"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-hd"</span>&gt;</span>Amaze UI<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-bd"</span>&gt;</span>      来来来，吐槽点啥吧      <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-prompt-input"</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-footer"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-btn"</span> <span class="hljs-attribute">data-am-modal-cancel</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-btn"</span> <span class="hljs-attribute">data-am-modal-confirm</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span><span class="hljs-comment">&lt;!--这是js调用--&gt;</span>$(function() {  $(''#doc-prompt-toggle'').on(''click'', function() {  //在这里设定上面的按钮的点击函数    $(''#my-prompt'').modal({ //显示ID为my-prompt的窗口      relatedTarget: this,      onConfirm: function(e) {  //窗口的确定按钮的响应事件        alert(''你输入的是：'' + e.data || '''')      },      onCancel: function(e) {   //取消按钮的响应事件        alert(''不想说!'');      }    });  });});</code></pre>关于上面的相关代码，我们需要引入妹子UI后才能使用！！！接下来我们需要改造成符合我们实际需求的界面，如下：<pre class="hljs xml"><code class="xml"><span class="hljs-comment">&lt;!--这里是html代码--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal am-modal-prompt"</span> <span class="hljs-attribute">tabindex</span>=<span class="hljs-value">"-1"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"my-prompt"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-dialog"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-hd"</span>&gt;</span>用户信息修改<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-bd"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-title">form</span> <span class="hljs-attribute">enctype</span>=<span class="hljs-value">"multipart/form-data"</span> <span class="hljs-attribute">accept-charset</span>=<span class="hljs-value">"UTF-8"</span>&gt;</span>                姓名：                <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-prompt-input"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"changeName"</span>&gt;</span>                性别：                <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-prompt-input"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"changeSex"</span>&gt;</span>                手机号：                <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-prompt-input"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"changeCell"</span>&gt;</span>                年龄：                <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-prompt-input"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"changeAge"</span>&gt;</span>                头像：                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-prompt-input"</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"file"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"file"</span>                           <span class="hljs-attribute">id</span>=<span class="hljs-value">"changeHeadPic"</span> <span class="hljs-attribute">size</span>=<span class="hljs-value">"28"</span>/&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-footer"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-btn"</span> <span class="hljs-attribute">data-am-modal-cancel</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-btn"</span> <span class="hljs-attribute">data-am-modal-confirm</span>&gt;</span>上传<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span><span class="hljs-comment">&lt;!--下面是js代码--&gt;</span>    var fileName;    <span class="hljs-comment">&lt;!--文件上传这里加入了js插件：jquery.ajaxfileupload.js--&gt;</span>    function uploadFile() {        //这里应该加入Loading 窗口开启        fileName = document.getElementById(''changeHeadPic'').value;        $.ajaxFileUpload({            url: "<span class="hljs-tag">&lt;<span class="hljs-title">%=request.getContextPath()%</span>&gt;</span>/userAction/uploadHeadPic",            secureuri: false, //是否需要安全协议，一般设置为false            fileElementId: ''changeHeadPic'', //文件上传域的ID            dataType: ''json'', //返回值类型 一般设置为json            contentType: "application/x-www-form-urlencoded; charset=utf-8",            success: function (data) {                alert(data.msg);                //先根据返回的code确定文件是否上传成功                //文件上传失败，直接弹出错误提示，根据错误进行相应的事物处理（关闭Loading窗口，弹出提示对话框）                //文件上传成功后，继续现实loading窗口，接着执行上传表单信息等事物            }        });    }    function changeUserInfo() { //显示个人信息修改窗口        $(''#my-prompt'').modal({            relatedTarget: this,            onConfirm: function () {                uploadFile();   //调用上面的文件上传函数            },            onCancel: function (e) {            }        });    }</code></pre>上面的代码，我们完成了控制窗口显示的函数，完成了修改个人信息界面的构建。现在我们需要的是找到执行程序入口。按照我的习惯，肯定是找到头像控件，然后设置点击事件为上面的changeUserInfo()。实现如下：<pre class="hljs xml"><code class="xml"><span class="hljs-comment">&lt;!--下面是头像的html代码，在头像控件后面的点击事件上面添加上函数就行了。--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"user-img"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"/static/images/avatar-1.jpg"</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"user-img"</span> <span class="hljs-attribute">title</span>=<span class="hljs-value">"Mat Helme"</span>         <span class="hljs-attribute">class</span>=<span class="hljs-value">"img-circle img-thumbnail img-responsive"</span> <span class="hljs-attribute">onclick</span>=<span class="hljs-value">"changeUserInfo()"</span>&gt;</span>    <span class="hljs-comment">&lt;!--在这里添加onclick方法的值为：changeUserInfo()--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"user-status offline"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-title">i</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-icon-dot-circle-o"</span> <span class="hljs-attribute">aria-hidden</span>=<span class="hljs-value">"true"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">i</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></code></pre>好的，上面我们可以看到我的前端界面代码基本上完成了。接下来，我们需要在我们后端上面写上对应的程序接口，实现功能即可。本来计划文件上传单独使用commons-fileupload和commons-io完成的，毕竟这是在Servelt上面的老套路，但是我发现Spring里面已经考虑到这一点，有新的东西来完成，所以就使用了Spring的实现方式。具体代码如下：<pre class="hljs java"><code class="java">    <span class="hljs-comment">//我们在UserController这个控制器里添加这个方法</span>    <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/uploadHeadPic"</span>            , method = RequestMethod.POST            , produces = <span class="hljs-string">"application/json; charset=utf-8"</span>)    <span class="hljs-annotation">@ResponseBody</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">uploadHeadPic</span><span class="hljs-params">(@RequestParam(required = <span class="hljs-keyword">false</span>)</span> MultipartFile file, HttpServletRequest request) </span>{        <span class="hljs-comment">//在这里面文件存储的方案一般是：收到文件→获取文件名→在本地存储目录建立防重名文件→写入文件→返回成功信息</span>        <span class="hljs-comment">//如果上面的步骤中在结束前任意一步失败，那就直接失败了。</span>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == file || file.isEmpty()) {            responseObj = <span class="hljs-keyword">new</span> ResponseObj();            responseObj.setCode(ResponseObj.FAILED);            responseObj.setMsg(<span class="hljs-string">"文件不能为空"</span>);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);        }        responseObj = <span class="hljs-keyword">new</span> ResponseObj();        responseObj.setCode(ResponseObj.OK);        responseObj.setMsg(<span class="hljs-string">"文件长度为："</span> + file.getSize());        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);    }</code></pre>完成了上面的方法后，我们觉得应该是没问题了，毕竟这样一个接口来接受请求是没问题的嘛，是的，我也是这么认为的。但是现实的打脸是很严重的，因为按照这么写后，<strong>我无论如何都收不到文件（文件一直为null）</strong>，Why？我的思路是正确的啊。经过我的仔细查找，发现我的Spring的配置文件中，没有添加文件的支持设置，所以我们又得补充配置文件，spring-web.xml新增配置如下：<pre class="hljs xml"><code class="xml">    <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"multipartResolver"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span>        <span class="hljs-comment">&lt;!--下面设置的是上传文件的最大大小--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"maxUploadSize"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"10000000"</span>/&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span></code></pre>经过上面的一番折腾，我们发现框架这个东西，也不是一劳永逸的，毕竟很多东西需要不断的增加。总结：<ul> 	<li>任何东西都需要根据需求不断的变化，可增可减，张弛有度。</li> 	<li>Spring接收文件上传时，Controller的具体方法的参数前面插入注解，同时数据类型是MultipartFile。</li> 	<li>引入第三方资源的时候，必须查看文档，根据说明文档好办事。</li> 	<li>js进行前端流程控制，后端接口隔离，前后端解耦。</li></ul><hr />前两天刮台风，停电导致数据丢失，是个很尴尬的事情，拖慢了进度。同时，朋友遇到点问题，我在开导他。文章写到现在也是凌晨4点过了，本期计划的列表分页也没做，很对不起大家对我的期待。真诚的说一声：对不起。对不起你们的期待。给朋友开导的时候，我也总结了下做人做事：<strong>随心、追梦、勇敢、独行</strong>。希望有心做事的，都用这几句话勉励自己吧。前行的路上不只是孤独，还有满山的鲜花，更有远方和诗。<hr /><h4>下期预告：</h4><ul> 	<li>列表分页</li> 	<li>简易用户角色控制</li> 	<li>拦截器的使用</li></ul>', '[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（四）', '', 'inherit', 'closed', 'closed', '', '259-revision-v1', '', '', '2016-10-21 02:17:07', '2016-10-20 18:17:07', '', 259, 'http://acheng1314.cn/?p=260', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(261, 1, '2016-10-21 02:17:32', '2016-10-20 18:17:32', '<h4>优雅的SpringMvc+Mybatis应用（四）</h4>\r\n转眼间文章已经到了第四期了。坚持做一件事，确实是很难的。特别是要不断的转换思维，一个习惯前端开发的人，做什么还是前端的考虑的多一点，后端的架构设计之类的，现在还谈不上，一切稳稳的前进就行了。\r\n\r\n关于上一期，本来是投了首页的，后来不知道什么原因没上，检查了一下，也就是推荐了下自己的博客和github，有点惆怅。\r\n<h4>工具</h4>\r\n<ul>\r\n 	<li>IDE为<strong>idea15</strong></li>\r\n 	<li>JDK环境为<strong>1.8</strong></li>\r\n 	<li>maven版本为<strong>maven3</strong></li>\r\n 	<li>Mysql版本为<strong>5.5.27</strong></li>\r\n 	<li>Tomcat版本为<strong>7.0.52</strong></li>\r\n 	<li>流程图绘制（xmind）</li>\r\n</ul>\r\n<h4>本期目标</h4>\r\n<ul>\r\n 	<li>登录注册的简单体验优化</li>\r\n 	<li>完整的后台主页</li>\r\n 	<li>前端使用json数据</li>\r\n 	<li>列表数据分页\r\n<h4>注册登录的简单体验优化</h4>\r\n</li>\r\n</ul>\r\n上一期我们<strong>注册登录都成功</strong>了，但是后台主页显示很丑陋，所以这里我换了个主页，但是前面没有注意到的细节又看到了。如下图：\r\n<div class="image-package imagebubble">\r\n\r\n<img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%9B%9B-%E6%B3%A8%E5%86%8C%E6%88%90%E5%8A%9F-%E5%9C%B0%E5%9D%80%E6%A0%8F%E9%94%99%E8%AF%AF.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%9B%9B-%E6%B3%A8%E5%86%8C%E6%88%90%E5%8A%9F-%E5%9C%B0%E5%9D%80%E6%A0%8F%E9%94%99%E8%AF%AF.png" />\r\n<div class="image-caption">ssm应用四-注册成功-地址栏错误</div>\r\n</div>\r\n在上面的图中，地址栏显示的地址是前面注册接口的地址，并不是我们常规看到的<strong>xxx/home</strong>这种主页地址。所以我们需要进行优化处理。\r\n\r\n同时，我们可以看到我们的Form表单提交的提示信息是在新产生的<strong>ModelAndView</strong>界面里面addObject("字段名",数据)，这样我们的数据都显示到新的界面去了。也就是说前面的设计不合符现在主流的开发思路，用户体验也相对糟糕。我们需要做到在登录界面前端效验数据，同时登录注册的提示信息也是在对应的界面完成的。如下：\r\n<div class="image-package imagebubble">\r\n\r\n<img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%9B%9B-%E5%89%8D%E7%AB%AFform%E9%94%99%E8%AF%AF-%E6%8F%90%E7%A4%BA%E7%A4%BA%E4%BE%8B.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%9B%9B-%E5%89%8D%E7%AB%AFform%E9%94%99%E8%AF%AF-%E6%8F%90%E7%A4%BA%E7%A4%BA%E4%BE%8B.png" />\r\n<div class="image-caption">ssm应用四-前端form错误-提示示例</div>\r\n</div>\r\n值得注意的是：为了程序执行效率、数据完整性和程序健壮性，我们的前端必须做对应的基础数据效验，后端的控制器必须做所有需要的数据的效验。\r\n<ul>\r\n 	<li>前端数据效验我们使用js完成</li>\r\n 	<li>前端界面样式是由CSS完成</li>\r\n 	<li>网络请求采用异步请求，具体的实现是使用的ajax完成</li>\r\n 	<li>js获取web页面数据统一使用标签的ID，格式为：<strong>$("#标签ID")</strong></li>\r\n 	<li>web页面标签最好一个标签一行，这样代码看起来更加舒服</li>\r\n</ul>\r\n我们先重构登录页面：\r\n首先，我不擅长写web页面，我能做的也就是少量的修改，CSS和js本身不是我的强项，需要大量的时间来磨合。\r\n\r\n所以，我选择了在网上找web界面，然后自己做少量的修改，同时一些简单的小控件我也从网络获取资源来解决需要，<strong>合理的查找资源是最快的学习方法</strong>。\r\n\r\n登录页面重构目标：\r\n<ul>\r\n 	<li>web前端完成基本的数据效验</li>\r\n 	<li>数据效验完成后，有基本的对应提示。如上面登录界面的小标签。</li>\r\n 	<li>异步登录</li>\r\n 	<li>后端接口返回数据为json</li>\r\n 	<li>前端页面解析json控制程序流转</li>\r\n</ul>\r\n首先，按照上面的提示，我们可以知道的是前端页面上面的基本数据效验是要使用js完成的，同时js中获取web页面标签的数据是需要使用标签的ID完成，简单的示例如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/javascript"</span>&gt;</span><span class="javascript">\r\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">webLogin</span>() </span>{   <span class="hljs-comment">//定义一个名为webLogin的js函数（在java中我们称呼函数为方法）</span>\r\n        <span class="hljs-keyword">var</span> loginname = $(<span class="hljs-string">"#u"</span>).val();  \r\n        <span class="hljs-comment">//var是申明一个变量的关键字，loginname为变量名，</span>\r\n        <span class="hljs-comment">//$("#u")是找到一个标签ID为"u"的标签，.val() 是获取对应ID标签的值</span>\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-string">""</span> == loginname) {  <span class="hljs-comment">//u标签的值为空</span>\r\n            <span class="hljs-comment">//只有通过 $("#u") 的形式才能获取一个标签。</span>\r\n            $(<span class="hljs-string">"#u"</span>).tips({  <span class="hljs-comment">// .tips 是js提示标签的调用方法，具体的轮廓如上面的登陆页面的提示标签</span>\r\n                side: <span class="hljs-number">2</span>,    \r\n                msg: <span class="hljs-string">''用户名不得为空''</span>,  <span class="hljs-comment">//提示的信息</span>\r\n                bg: <span class="hljs-string">''#AE81FF''</span>,  <span class="hljs-comment">//背景色</span>\r\n                time: <span class="hljs-number">3</span> <span class="hljs-comment">//呈现的时间</span>\r\n            });\r\n            $(<span class="hljs-string">"#u"</span>).focus();    <span class="hljs-comment">//让u标签获取输入焦点</span>\r\n            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;   <span class="hljs-comment">//返回false，打断js的执行</span>\r\n        }\r\n\r\n        <span class="hljs-keyword">var</span> loginpwd = $(<span class="hljs-string">"#p"</span>).val();  \r\n        <span class="hljs-keyword">if</span> (loginpwd == <span class="hljs-string">""</span>) {\r\n            $(<span class="hljs-string">"#p"</span>).tips({\r\n                side: <span class="hljs-number">2</span>,\r\n                msg: <span class="hljs-string">''密码不得为空''</span>,\r\n                bg: <span class="hljs-string">''#AE81FF''</span>,\r\n                time: <span class="hljs-number">3</span>\r\n            });\r\n            $(<span class="hljs-string">"#p"</span>).focus();\r\n            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;\r\n        }\r\n\r\n        $.ajax({    <span class="hljs-comment">//使用jquery下面的ajax开启网络请求</span>\r\n                type: <span class="hljs-string">"POST"</span>,   <span class="hljs-comment">//http请求方式为POST</span>\r\n                url: <span class="hljs-string">''&lt;%=request.getContextPath()%&gt;/userAction/login''</span>,  <span class="hljs-comment">//请求接口的地址</span>\r\n                data: {loginId: loginname, pwd: loginpwd},  <span class="hljs-comment">//存放的数据，服务器接口字段为loginId和pwd，分别对应用户登录名和密码</span>\r\n                dataType: <span class="hljs-string">''json''</span>,   <span class="hljs-comment">//当这里指定为json的时候，获取到了数据后会自动解析的，只需要 返回值.字段名称 就能使用了</span>\r\n                cache: <span class="hljs-literal">false</span>,   <span class="hljs-comment">//不用缓存</span>\r\n                success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{  <span class="hljs-comment">//请求成功，http状态码为200。返回的数据已经打包在data中了。</span>\r\n                    <span class="hljs-keyword">if</span> (data.code == <span class="hljs-number">1</span>) {   <span class="hljs-comment">//获判断json数据中的code是否为1，登录的用户名和密码匹配，通过效验，登陆成功</span>\r\n                        <span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">"&lt;%=request.getContextPath()%&gt;/mvc/home"</span>;    <span class="hljs-comment">//跳转到主页</span>\r\n                    } <span class="hljs-keyword">else</span> {    <span class="hljs-comment">//登录不成功</span>\r\n                        alert(data.msg);    <span class="hljs-comment">//弹出对话框，提示返回的错误信息</span>\r\n                        $(<span class="hljs-string">"#u"</span>).focus();\r\n                    }\r\n                }\r\n            });\r\n    }\r\n</span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span></code></pre>\r\n上面的注释已经能很明显的看出我们的 <strong>前端效验、网络请求和js解析json</strong>，下面我们在前端页面中调用这个js，如下：\r\n<pre class="hljs scala"><code class="scala">&lt;form action=<span class="hljs-string">""</span>     <span class="hljs-comment">//此处必须删掉form表单的地址</span>\r\n    name=<span class="hljs-string">"loginform"</span>\r\n    accept-charset=<span class="hljs-string">"utf-8"</span> \r\n    id=<span class="hljs-string">"login_form"</span> \r\n    <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"loginForm"</span>\r\n    method=<span class="hljs-string">"post"</span>&gt;\r\n        &lt;input <span class="hljs-class"><span class="hljs-keyword">type</span>=</span><span class="hljs-string">"hidden"</span> name=<span class="hljs-string">"did"</span> value=<span class="hljs-string">"0"</span>/&gt;\r\n        &lt;input <span class="hljs-class"><span class="hljs-keyword">type</span>=</span><span class="hljs-string">"hidden"</span> name=<span class="hljs-string">"to"</span> value=<span class="hljs-string">"log"</span>/&gt;\r\n\r\n        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"uinArea"</span> id=<span class="hljs-string">"uinArea"</span>&gt;\r\n            &lt;label <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"input-tips"</span> <span class="hljs-keyword">for</span>=<span class="hljs-string">"u"</span>&gt;帐号：&lt;/label&gt;\r\n            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"inputOuter"</span> id=<span class="hljs-string">"uArea"</span>&gt;\r\n                &lt;input <span class="hljs-class"><span class="hljs-keyword">type</span>=</span><span class="hljs-string">"text"</span> id=<span class="hljs-string">"u"</span> name=<span class="hljs-string">"loginId"</span> <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"inputstyle"</span>/&gt;\r\n            &lt;/div&gt;\r\n        &lt;/div&gt;\r\n\r\n        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"pwdArea"</span> id=<span class="hljs-string">"pwdArea"</span>&gt;\r\n            &lt;label <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"input-tips"</span> <span class="hljs-keyword">for</span>=<span class="hljs-string">"p"</span>&gt;密码：&lt;/label&gt;\r\n            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"inputOuter"</span> id=<span class="hljs-string">"pArea"</span>&gt;\r\n                &lt;input <span class="hljs-class"><span class="hljs-keyword">type</span>=</span><span class="hljs-string">"password"</span> id=<span class="hljs-string">"p"</span> name=<span class="hljs-string">"pwd"</span> <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"inputstyle"</span>/&gt;\r\n            &lt;/div&gt;\r\n        &lt;/div&gt;\r\n\r\n        &lt;div style=<span class="hljs-string">"padding-left:50px;margin-top:20px;"</span>&gt;\r\n            &lt;input <span class="hljs-class"><span class="hljs-keyword">type</span>=</span><span class="hljs-string">"button"</span>\r\n               id=<span class="hljs-string">"btn_login"</span>\r\n               value=<span class="hljs-string">"登 录"</span>\r\n               onclick=<span class="hljs-string">"webLogin();"</span>    <span class="hljs-comment">//此处调用我们上面写的js的登录方法</span>\r\n               style=<span class="hljs-string">"width:150px;"</span>\r\n               <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">"button_blue"</span>/&gt;\r\n        &lt;/div&gt;\r\n&lt;/form&gt;</code></pre>\r\n上面就是web中调用js的简单实现，注意的是，<strong>FORM表单必须删除action的值，在点击后需要触发对应事件的地方调用js</strong>。\r\n\r\n当然，我们的前端页面完成后，我们必须在后端接口处，做出对应的修改，让他符合我们前端的调用规则。后端修改如下：\r\n<pre class="hljs java"><code class="java"><span class="hljs-comment">/**\r\n * 用户请求相关控制器\r\n * &lt;br/&gt;Created by acheng on 2016/9/26.\r\n */</span>\r\n<span class="hljs-annotation">@Controller</span> <span class="hljs-comment">//标明本类是控制器</span>\r\n<span class="hljs-annotation">@RequestMapping</span>(<span class="hljs-string">"/userAction"</span>)  <span class="hljs-comment">//外层地址</span>\r\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>{\r\n\r\n    <span class="hljs-annotation">@Autowired</span>\r\n    <span class="hljs-keyword">private</span> UserServiceImpl userService;    <span class="hljs-comment">//自动载入Service对象</span>\r\n    <span class="hljs-keyword">private</span> ResponseObj responseObj;    <span class="hljs-comment">//返回json数据的实体</span>\r\n\r\n    <span class="hljs-comment">/**\r\n     * 登录接口，因为json数据外层一般都是Object类型，所以返回值必须是Object&lt;br/&gt;\r\n     *  这里的地址是： 域名/userAction/login\r\n     *\r\n     * <span class="hljs-doctag">@param</span> req\r\n     * <span class="hljs-doctag">@param</span> user\r\n     * <span class="hljs-doctag">@return</span>\r\n     */</span>\r\n    <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/login"</span>    <span class="hljs-comment">//内层地址</span>\r\n            , method = RequestMethod.POST   <span class="hljs-comment">//限定请求方式</span>\r\n            , produces = <span class="hljs-string">"application/json; charset=utf-8"</span>) <span class="hljs-comment">//设置返回值是json数据类型</span>\r\n    <span class="hljs-annotation">@ResponseBody</span>\r\n    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">login</span><span class="hljs-params">(HttpServletRequest req, User user)</span> </span>{\r\n        Object result;\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == user) {\r\n            responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n            responseObj.setCode(ResponseObj.EMPUTY);\r\n            responseObj.setMsg(<span class="hljs-string">"登录信息不能为空"</span>);\r\n            result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);   <span class="hljs-comment">//通过gson把java bean转换为json</span>\r\n            <span class="hljs-keyword">return</span> result; <span class="hljs-comment">//返回json</span>\r\n        }\r\n        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(user.getLoginId()) || StringUtils.isEmpty(user.getPwd())) {\r\n            responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n            responseObj.setCode(ResponseObj.FAILED);\r\n            responseObj.setMsg(<span class="hljs-string">"用户名或密码不能为空"</span>);\r\n            result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n            <span class="hljs-keyword">return</span> result;\r\n        }\r\n        <span class="hljs-comment">//查找用户</span>\r\n        User user1 = userService.findUser(user);\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == user1) {\r\n            responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n            responseObj.setCode(ResponseObj.EMPUTY);\r\n            responseObj.setMsg(<span class="hljs-string">"未找到该用户"</span>);\r\n            result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n        } <span class="hljs-keyword">else</span> {\r\n            <span class="hljs-keyword">if</span> (user.getPwd().equals(user1.getPwd())) {\r\n                responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n                responseObj.setCode(ResponseObj.OK);    <span class="hljs-comment">//登录成功，状态为1</span>\r\n                responseObj.setMsg(ResponseObj.OK_STR);\r\n                responseObj.setData(user1); <span class="hljs-comment">//登陆成功后返回用户信息</span>\r\n                result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n            } <span class="hljs-keyword">else</span> {\r\n                responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n                responseObj.setCode(ResponseObj.FAILED);\r\n                responseObj.setMsg(<span class="hljs-string">"用户密码错误"</span>);\r\n                result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n            }\r\n        }\r\n        <span class="hljs-keyword">return</span> result;\r\n    }\r\n}</code></pre>\r\n注意：如果为了返回数据为json，那么我们需要设定某个方法对应的注解为：<strong>@ResponseBody</strong> 。 否则会<strong>产生404错误</strong>！\r\n\r\n我们通过上面的重构可以明白以下几点：\r\n<ul>\r\n 	<li>前端\r\n<ul>\r\n 	<li>js实现基本的数据效验</li>\r\n 	<li>js发起网络请求</li>\r\n 	<li>ajax发起网络请求，返回类型设置json能自动解析</li>\r\n 	<li>js获取页面控件</li>\r\n 	<li>页面控件调用js</li>\r\n 	<li>js获取解析后的json数据的值，进行程序流转控制</li>\r\n</ul>\r\n</li>\r\n 	<li>后端：\r\n<ul>\r\n 	<li>后端控制器必须申明</li>\r\n 	<li>后端的地址必须配置</li>\r\n 	<li>每个地址返回的数据类型要匹配</li>\r\n 	<li>返回json数据，方法上面必须配置：<strong>@ResponseBody</strong></li>\r\n 	<li>可以使用工具类来方便开发</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h4>后台主页→个人信息修改</h4>\r\n上期我们可以看到，我们的登录和注册都是已经OK了。现在我们登录和注册成功后，我们都让他跳转到主页去。同时完善登录和注册的错误提示页面。\r\n\r\n一般来说，大家更喜欢看到登录成功后的主页界面，毕竟大多数人都是有喜新厌旧之嫌。我也是一样的。哈哈。\r\n\r\n为了程序的执行逻辑，考虑后端需求都不是那么单一，我们先做一些公共的建设。比如说用户信息修改现实之类的。如下图：\r\n<div class="image-package imagebubble">\r\n\r\n<img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%9B%9B-%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A1%B5-%E4%BF%AE%E6%94%B9%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%9B%9B-%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A1%B5-%E4%BF%AE%E6%94%B9%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF.png" />\r\n<div class="image-caption">ssm应用四-后台主页-修改个人信息</div>\r\n</div>\r\n如上图所示，我们需要一个可以弹出的对话框，我去百度了一下，那个<a href="http://note.youdao.com/" target="_blank">“妹子UI”</a>还是很受人欢迎，所以就集成进来了。\r\n\r\n我们选取一个比较喜欢的后端主页，然后把对应的资源放入到对应的文件目录（js、css、images等），需要新加入的资源如果在以前的目录中没有的话，那么我们需要在里面进行配置。比如说这里我加入了字体文件，那么我现在需要先把字体文件指定目录为：\r\n<pre class="hljs objectivec"><code class="objectivec"><span class="hljs-keyword">static</span>/font/</code></pre>\r\n目录指定后我需要在Spring的配置文件，spring-web.xml中配置静态资源的目录如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/fonts/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/fonts/"</span>/&gt;</span></code></pre>\r\n剩下的就是写好jsp页面(Copy+Pause+修改资源文件路径)。然后我们在Controller中配置好路径\r\n<pre class="hljs cs"><code class="cs"><span class="hljs-comment">/**\r\n * 后台主页\r\n *\r\n * @return\r\n */</span>\r\n@RequestMapping(<span class="hljs-keyword">value</span> = <span class="hljs-string">"/home"</span>, method = RequestMethod.GET)\r\n<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">home</span>() </span>{\r\n    <span class="hljs-keyword">return</span> <span class="hljs-string">"home"</span>;\r\n}</code></pre>\r\n这样子配置好了后，我们就可以直接用“域名/mvc/home”来访问我们的主页了。同时按照上面的设置，我们登录成功后，直接解析json确认用户登录成功，然后前端使用js来进行页面跳转，如：\r\n<pre class="hljs javascript"><code class="javascript"><span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">"&lt;%=request.getContextPath()%&gt;/mvc/home"</span>;    <span class="hljs-comment">//跳转到主页</span></code></pre>\r\n这样，我们就能修复上面说道的页面和地址显示不匹配的问题。\r\n\r\n同时，通过上面的可以看出，我们在jsp页面中，纯粹没加入任何jsva代码，全是使用的前端+接口实现的功能。我们这样做，以后维护和重构中也能降低一部分压力。\r\n\r\n言归正传，我们这里主要是想做一个<strong>个人信息修改</strong>的功能。首先我们进行功能和业务流程分析。\r\n\r\n功能和业务流程分析：\r\n<ul>\r\n 	<li>1.web点击头像显示修改信息对话框。</li>\r\n 	<li>2.根据后端定义的用户信息表，得出用户信息修改需要填写的资料。</li>\r\n 	<li>3.用户上传个人资料，上传之前前端必须先进行基础信息验证。</li>\r\n 	<li>4.用户个人信息验证通过后，上传到服务器。（重点）</li>\r\n 	<li>5.服务器接收上传的信息，进行存储，并返回修改结果。（重点）</li>\r\n</ul>\r\n从上面我们可以看到我画出两个重点，而且这两个重点都是java web避免不了事情。为什么这样说呢？\r\n<ul>\r\n 	<li>1.任何一个动态的web服务器都免不了数据资料的更新，数据资料更新一般分为两种。\r\n<ul>\r\n 	<li>有文件的信息上传</li>\r\n 	<li>无文件的信息上传</li>\r\n</ul>\r\n</li>\r\n 	<li>2.可能其他童鞋看到http请求的方法有很多种，但是一般来说get和post我们能做出任何的操作。</li>\r\n 	<li>3.在大量数据的服务器中，考虑到很多因素（历史记录查询、数据库增量等），一般不会进行真正的物理数据删除，一般都是通过控制输出来实现的。（实战经验，血泪教训，切记）</li>\r\n</ul>\r\n现在我们开始实现对话框：\r\n\r\n打开<a href="http://amazeui.org/javascript" target="_blank">“妹子UI”的js插件页面</a>，我们找到<a href="http://amazeui.org/javascript/modal" target="_blank">模态窗口相关的文档</a>，在“模拟 Prompt”这里，我们可以看到具体的对话框的实现和调用如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-comment">&lt;!--这是html代码--&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">button</span>\r\n  <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span>\r\n  <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-btn am-btn-success"</span>\r\n  <span class="hljs-attribute">id</span>=<span class="hljs-value">"doc-prompt-toggle"</span>&gt;</span>\r\n  Prompt\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal am-modal-prompt"</span> <span class="hljs-attribute">tabindex</span>=<span class="hljs-value">"-1"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"my-prompt"</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-dialog"</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-hd"</span>&gt;</span>Amaze UI<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-bd"</span>&gt;</span>\r\n      来来来，吐槽点啥吧\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-prompt-input"</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-footer"</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-btn"</span> <span class="hljs-attribute">data-am-modal-cancel</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-btn"</span> <span class="hljs-attribute">data-am-modal-confirm</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n<span class="hljs-comment">&lt;!--这是js调用--&gt;</span>\r\n$(function() {\r\n  $(''#doc-prompt-toggle'').on(''click'', function() {  //在这里设定上面的按钮的点击函数\r\n    $(''#my-prompt'').modal({ //显示ID为my-prompt的窗口\r\n      relatedTarget: this,\r\n      onConfirm: function(e) {  //窗口的确定按钮的响应事件\r\n        alert(''你输入的是：'' + e.data || '''')\r\n      },\r\n      onCancel: function(e) {   //取消按钮的响应事件\r\n        alert(''不想说!'');\r\n      }\r\n    });\r\n  });\r\n});</code></pre>\r\n关于上面的相关代码，我们需要引入妹子UI后才能使用！！！接下来我们需要改造成符合我们实际需求的界面，如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-comment">&lt;!--这里是html代码--&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal am-modal-prompt"</span> <span class="hljs-attribute">tabindex</span>=<span class="hljs-value">"-1"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"my-prompt"</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-dialog"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-hd"</span>&gt;</span>用户信息修改<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-bd"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">form</span> <span class="hljs-attribute">enctype</span>=<span class="hljs-value">"multipart/form-data"</span> <span class="hljs-attribute">accept-charset</span>=<span class="hljs-value">"UTF-8"</span>&gt;</span>\r\n                姓名：\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-prompt-input"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"changeName"</span>&gt;</span>\r\n\r\n                性别：\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-prompt-input"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"changeSex"</span>&gt;</span>\r\n\r\n                手机号：\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-prompt-input"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"changeCell"</span>&gt;</span>\r\n\r\n                年龄：\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-prompt-input"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"changeAge"</span>&gt;</span>\r\n\r\n                头像：\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-prompt-input"</span>&gt;</span>\r\n\r\n                    <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"file"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"file"</span>\r\n                           <span class="hljs-attribute">id</span>=<span class="hljs-value">"changeHeadPic"</span> <span class="hljs-attribute">size</span>=<span class="hljs-value">"28"</span>/&gt;</span>\r\n\r\n                <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-footer"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-btn"</span> <span class="hljs-attribute">data-am-modal-cancel</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-modal-btn"</span> <span class="hljs-attribute">data-am-modal-confirm</span>&gt;</span>上传<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n\r\n<span class="hljs-comment">&lt;!--下面是js代码--&gt;</span>\r\n    var fileName;\r\n    <span class="hljs-comment">&lt;!--文件上传这里加入了js插件：jquery.ajaxfileupload.js--&gt;</span>\r\n    function uploadFile() {\r\n        //这里应该加入Loading 窗口开启\r\n        fileName = document.getElementById(''changeHeadPic'').value;\r\n        $.ajaxFileUpload({\r\n            url: "<span class="hljs-tag">&lt;<span class="hljs-title">%=request.getContextPath()%</span>&gt;</span>/userAction/uploadHeadPic",\r\n            secureuri: false, //是否需要安全协议，一般设置为false\r\n            fileElementId: ''changeHeadPic'', //文件上传域的ID\r\n            dataType: ''json'', //返回值类型 一般设置为json\r\n            contentType: "application/x-www-form-urlencoded; charset=utf-8",\r\n            success: function (data) {\r\n                alert(data.msg);\r\n                //先根据返回的code确定文件是否上传成功\r\n                //文件上传失败，直接弹出错误提示，根据错误进行相应的事物处理（关闭Loading窗口，弹出提示对话框）\r\n                //文件上传成功后，继续现实loading窗口，接着执行上传表单信息等事物\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    function changeUserInfo() { //显示个人信息修改窗口\r\n        $(''#my-prompt'').modal({\r\n            relatedTarget: this,\r\n            onConfirm: function () {\r\n                uploadFile();   //调用上面的文件上传函数\r\n            },\r\n            onCancel: function (e) {\r\n            }\r\n        });\r\n    }</code></pre>\r\n上面的代码，我们完成了控制窗口显示的函数，完成了修改个人信息界面的构建。现在我们需要的是找到执行程序入口。按照我的习惯，肯定是找到头像控件，然后设置点击事件为上面的changeUserInfo()。实现如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-comment">&lt;!--下面是头像的html代码，在头像控件后面的点击事件上面添加上函数就行了。--&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"user-img"</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"/static/images/avatar-1.jpg"</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"user-img"</span> <span class="hljs-attribute">title</span>=<span class="hljs-value">"Mat Helme"</span>\r\n         <span class="hljs-attribute">class</span>=<span class="hljs-value">"img-circle img-thumbnail img-responsive"</span> <span class="hljs-attribute">onclick</span>=<span class="hljs-value">"changeUserInfo()"</span>&gt;</span>    <span class="hljs-comment">&lt;!--在这里添加onclick方法的值为：changeUserInfo()--&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"user-status offline"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">i</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-icon-dot-circle-o"</span> <span class="hljs-attribute">aria-hidden</span>=<span class="hljs-value">"true"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">i</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></code></pre>\r\n好的，上面我们可以看到我的前端界面代码基本上完成了。接下来，我们需要在我们后端上面写上对应的程序接口，实现功能即可。\r\n\r\n本来计划文件上传单独使用commons-fileupload和commons-io完成的，毕竟这是在Servelt上面的老套路，但是我发现Spring里面已经考虑到这一点，有新的东西来完成，所以就使用了Spring的实现方式。具体代码如下：\r\n<pre class="hljs java"><code class="java">    <span class="hljs-comment">//我们在UserController这个控制器里添加这个方法</span>\r\n    <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/uploadHeadPic"</span>\r\n            , method = RequestMethod.POST\r\n            , produces = <span class="hljs-string">"application/json; charset=utf-8"</span>)\r\n    <span class="hljs-annotation">@ResponseBody</span>\r\n    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">uploadHeadPic</span><span class="hljs-params">(@RequestParam(required = <span class="hljs-keyword">false</span>)</span> MultipartFile file, HttpServletRequest request) </span>{\r\n        <span class="hljs-comment">//在这里面文件存储的方案一般是：收到文件→获取文件名→在本地存储目录建立防重名文件→写入文件→返回成功信息</span>\r\n        <span class="hljs-comment">//如果上面的步骤中在结束前任意一步失败，那就直接失败了。</span>\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == file || file.isEmpty()) {\r\n            responseObj = <span class="hljs-keyword">new</span> ResponseObj();\r\n            responseObj.setCode(ResponseObj.FAILED);\r\n            responseObj.setMsg(<span class="hljs-string">"文件不能为空"</span>);\r\n            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n        }\r\n        responseObj = <span class="hljs-keyword">new</span> ResponseObj();\r\n        responseObj.setCode(ResponseObj.OK);\r\n        responseObj.setMsg(<span class="hljs-string">"文件长度为："</span> + file.getSize());\r\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n    }</code></pre>\r\n完成了上面的方法后，我们觉得应该是没问题了，毕竟这样一个接口来接受请求是没问题的嘛，是的，我也是这么认为的。\r\n\r\n但是现实的打脸是很严重的，因为按照这么写后，<strong>我无论如何都收不到文件（文件一直为null）</strong>，Why？我的思路是正确的啊。经过我的仔细查找，发现我的Spring的配置文件中，没有添加文件的支持设置，所以我们又得补充配置文件，spring-web.xml新增配置如下：\r\n<pre class="hljs xml"><code class="xml">    <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"multipartResolver"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!--下面设置的是上传文件的最大大小--&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"maxUploadSize"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"10000000"</span>/&gt;</span>   \r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span></code></pre>\r\n经过上面的一番折腾，我们发现框架这个东西，也不是一劳永逸的，毕竟很多东西需要不断的增加。\r\n\r\n总结：\r\n<ul>\r\n 	<li>任何东西都需要根据需求不断的变化，可增可减，张弛有度。</li>\r\n 	<li>Spring接收文件上传时，Controller的具体方法的参数前面插入注解，同时数据类型是MultipartFile。</li>\r\n 	<li>引入第三方资源的时候，必须查看文档，根据说明文档好办事。</li>\r\n 	<li>js进行前端流程控制，后端接口隔离，前后端解耦。</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n前两天刮台风，停电导致数据丢失，是个很尴尬的事情，拖慢了进度。同时，朋友遇到点问题，我在开导他。文章写到现在也是凌晨4点过了，本期计划的列表分页也没做，很对不起大家对我的期待。真诚的说一声：对不起。对不起你们的期待。\r\n\r\n给朋友开导的时候，我也总结了下做人做事：<strong>随心、追梦、勇敢、独行</strong>。希望有心做事的，都用这几句话勉励自己吧。\r\n\r\n前行的路上不只是孤独，还有满山的鲜花，更有远方和诗。\r\n\r\n<hr />\r\n\r\n<h4>下期预告：</h4>\r\n<ul>\r\n 	<li>列表分页</li>\r\n 	<li>简易用户角色控制</li>\r\n 	<li>拦截器的使用</li>\r\n</ul>', '[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（四）', '', 'inherit', 'closed', 'closed', '', '259-revision-v1', '', '', '2016-10-21 02:17:32', '2016-10-20 18:17:32', '', 259, 'http://acheng1314.cn/?p=261', 0, 'revision', '', 0),
(262, 1, '2016-10-21 02:33:22', '0000-00-00 00:00:00', ' ', '', '', 'draft', 'closed', 'closed', '', '', '', '', '2016-10-21 02:33:22', '0000-00-00 00:00:00', '', 0, 'http://acheng1314.cn/?p=262', 1, 'nav_menu_item', '', 0),
(264, 1, '2016-10-26 02:44:28', '2016-10-25 18:44:28', '', '%e8%a1%8c%e8%b5%b0%e7%9a%84java%e5%85%a8%e6%a0%88%e7%be%a4%e4%ba%8c%e7%bb%b4%e7%a0%81', '', 'inherit', 'open', 'closed', '', '%e8%a1%8c%e8%b5%b0%e7%9a%84java%e5%85%a8%e6%a0%88%e7%be%a4%e4%ba%8c%e7%bb%b4%e7%a0%81', '', '', '2016-10-26 02:44:28', '2016-10-25 18:44:28', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/10/行走的java全栈群二维码.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(265, 1, '2016-10-26 04:19:53', '2016-10-25 20:19:53', '<h1 class="title">[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（五）</h1>\r\n<div class="meta-top"><span class="wordage">字数1636</span> <span class="views-count">阅读0</span> <span class="comments-count">评论0</span> <span class="likes-count">喜欢0</span></div>\r\n<div class="show-content">\r\n<h4>优雅的SpringMvc+Mybatis应用（五）</h4>\r\n转眼间文章已经到了第五期了。这段时间一直在考虑考研的事情，周一请老师吃饭还喝醉了，到家就直接睡着了。十分抱歉。\r\n\r\n本来这次是攒着劲头要写很多东西，但是十分尴尬的事情是最近身边的事情太多了，十分抱歉，该做的事情，我一定不会推诿的，大家理解一下。谢谢你们的支持。\r\n\r\n感谢热心亲们的支持，你们的鼓励我才走到今天，很多时候感觉自己写代码还是经常踩坑，所以思前想后，问了些朋友。大家都让我建群，一起交流才是最快的进步。所以我们的QQ群开通了，扫描二维码：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/%E8%A1%8C%E8%B5%B0%E7%9A%84java%E5%85%A8%E6%A0%88%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/%E8%A1%8C%E8%B5%B0%E7%9A%84java%E5%85%A8%E6%A0%88%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81.png" />\r\n<div class="image-caption">行走的java全栈</div>\r\n</div>\r\n<h4>工具</h4>\r\n<ul>\r\n 	<li>IDE为<strong>idea16</strong></li>\r\n 	<li>JDK环境为<strong>1.8</strong></li>\r\n 	<li><del>maven版本为<strong>maven3</strong></del></li>\r\n 	<li>gradle构建，版本：2.14.1</li>\r\n 	<li>Mysql版本为<strong>5.5.27</strong></li>\r\n 	<li>Tomcat版本为<strong>7.0.52</strong></li>\r\n 	<li>流程图绘制（xmind）</li>\r\n</ul>\r\n<h4>本期目标</h4>\r\n<ul>\r\n 	<li>简单更改项目的构建工具</li>\r\n 	<li>列表分页</li>\r\n 	<li>简易用户角色控制</li>\r\n 	<li>拦截器的使用</li>\r\n</ul>\r\n<h4>简单更改项目的构建工具</h4>\r\n最近发现电脑突然变得很卡，所以专门把系统清理，顺带把Idea升级为16。接着事情就来了，发现在idea16里面能把项目升级为gradle构建，一番升级后，项目突然不能运行==，那么问题来了。整了半天也没发现问题所在，百度、谷歌也没找到答案，然后放出大招：\r\n<ul>\r\n 	<li>新建同样包名和项目名称的gradle构建的web工程</li>\r\n 	<li>把上一个项目中gradle自动生成的build.gradle中的支援库代码拷贝下来，如下：\r\n<pre class="hljs cs"><code class="cs">compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''ch.qos.logback''</span>, name: <span class="hljs-string">''logback-classic''</span>, version: <span class="hljs-string">''1.1.1''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.slf4j''</span>, name: <span class="hljs-string">''slf4j-api''</span>, version: <span class="hljs-string">''1.7.6''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''com.alibaba''</span>, name: <span class="hljs-string">''druid''</span>, version: <span class="hljs-string">''1.0.25''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.mybatis''</span>, name: <span class="hljs-string">''mybatis''</span>, version: <span class="hljs-string">''3.4.1''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.mybatis''</span>, name: <span class="hljs-string">''mybatis-spring''</span>, version: <span class="hljs-string">''1.3.0''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''taglibs''</span>, name: <span class="hljs-string">''standard''</span>, version: <span class="hljs-string">''1.1.2''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''jstl''</span>, name: <span class="hljs-string">''jstl''</span>, version: <span class="hljs-string">''1.2''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''com.google.code.gson''</span>, name: <span class="hljs-string">''gson''</span>, version: <span class="hljs-string">''2.7''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''javax.servlet''</span>, name: <span class="hljs-string">''javax.servlet-api''</span>, version: <span class="hljs-string">''3.1.0''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-core''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-beans''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-context''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-jdbc''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-tx''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-web''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-webmvc''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-test''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''redis.clients''</span>, name: <span class="hljs-string">''jedis''</span>, version: <span class="hljs-string">''2.7.3''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''com.dyuproject.protostuff''</span>, name: <span class="hljs-string">''protostuff-core''</span>, version: <span class="hljs-string">''1.0.8''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''com.dyuproject.protostuff''</span>, name: <span class="hljs-string">''protostuff-runtime''</span>, version: <span class="hljs-string">''1.0.8''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''commons-collections''</span>, name: <span class="hljs-string">''commons-collections''</span>, version: <span class="hljs-string">''3.2.2''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''commons-fileupload''</span>, name: <span class="hljs-string">''commons-fileupload''</span>, version: <span class="hljs-string">''1.3.2''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''commons-io''</span>, name: <span class="hljs-string">''commons-io''</span>, version: <span class="hljs-string">''2.5''</span>\r\nruntime <span class="hljs-keyword">group</span>: <span class="hljs-string">''mysql''</span>, name: <span class="hljs-string">''mysql-connector-java''</span>, version: <span class="hljs-string">''5.1.37''</span>\r\n<span class="hljs-comment">//关于具体的gradle构建，请百度一下。 一般来说在maven仓库里面有gradle引用的代码的，直接拷贝就行</span>\r\n<span class="hljs-comment">//可能我们的gradle构建包很难下载，建议直接用迅雷去下载对应的gradle版本，然后把gradle的压缩包放到我们程序的下载目录就可以了。</span></code></pre>\r\n</li>\r\n</ul>\r\n等项目构建完成后，我们把以前的项目直接把源码和资源文件什么的都直接拷贝过来，对应着目录就行了，然后接着build项目，最后就可以了。\r\n<h4>角色控制</h4>\r\n前面和读者交流了一下，他们建议在项目中加入角色控制。好吧，我们先看看简单的角色控制。\r\n\r\n角色控制，顾名思义就是不同的用户角色依赖于他的身份属性而做出具体的行为控制。具体的行为控制，往往取决于用户界面的操作。而还有一些更加复杂的东西，我们在以后的项目实战中再来阐述。\r\n\r\n在这个项目中，我们用户的角色分为以下几类：\r\n<ul>\r\n 	<li>超级管理员</li>\r\n 	<li>出入库人员</li>\r\n 	<li>仓库管理人员</li>\r\n 	<li>台账管理（账单汇总）</li>\r\n</ul>\r\n按照我们以前开发的一些经验来说，我们大概解决方法有下面的几种：\r\n<table>\r\n<thead>\r\n<tr>\r\n<th>用户访问路径</th>\r\n<th>举例说明</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>前端页面设定路径</td>\r\n<td>网页顶部的导航栏的操作跳转</td>\r\n</tr>\r\n<tr>\r\n<td>后端接口控制路径</td>\r\n<td>不同职位的用户登录后显示的界面</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n前端界面设置路径，也就是一个a标签写入地址为：<a href="http://acheng1314.cn/" target="_blank">http://acheng1314.cn</a> 这样就能实现跳转。\r\n\r\n后端接口控制路径，我们还是拿登录接口来说，我们在用户类中加入一个nextUrl字段，说明是下一步的地址，然后我们在控制器中完成写入，如下：\r\n<pre class="hljs java"><code class="java"><span class="hljs-comment">/**\r\n * 用户请求相关控制器\r\n * &lt;br/&gt;Created by acheng on 2016/9/26.\r\n */</span>\r\n<span class="hljs-annotation">@Controller</span>\r\n<span class="hljs-annotation">@RequestMapping</span>(<span class="hljs-string">"/userAction"</span>)\r\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>{\r\n\r\n    <span class="hljs-annotation">@Autowired</span>\r\n    <span class="hljs-keyword">private</span> UserServiceImpl userService;    <span class="hljs-comment">//自动载入Service对象</span>\r\n    <span class="hljs-keyword">private</span> ResponseObj responseObj;\r\n\r\n    <span class="hljs-comment">/**\r\n     * 为什么返回值是一个ModelAndView，ModelAndView代表一个web页面&lt;br/&gt;\r\n     * setViewName是设置一个jsp页面的名称\r\n     *\r\n     * <span class="hljs-doctag">@param</span> response http响应\r\n     * <span class="hljs-doctag">@param</span> user     发起请求后，spring接收到请求，然后封装的bean数据\r\n     * <span class="hljs-doctag">@return</span> 返回一个web页面\r\n     * <span class="hljs-doctag">@throws</span> Exception\r\n     */</span>\r\n    <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/reg"</span>\r\n            , method = RequestMethod.POST\r\n            , produces = <span class="hljs-string">"application/json; charset=utf-8"</span>)\r\n    <span class="hljs-annotation">@ResponseBody</span>\r\n    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">reg</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, User user, HttpSession session)</span> <span class="hljs-keyword">throws</span> Exception </span>{\r\n        Object result;\r\n        responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == user) {\r\n            responseObj.setCode(ResponseObj.FAILED);\r\n            responseObj.setMsg(<span class="hljs-string">"用户信息不能为空！"</span>);\r\n            result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n            <span class="hljs-keyword">return</span> result;\r\n        }\r\n        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(user.getLoginId()) || StringUtils.isEmpty(user.getPwd())) {\r\n            responseObj.setCode(ResponseObj.FAILED);\r\n            responseObj.setMsg(<span class="hljs-string">"用户名或密码不能为空！"</span>);\r\n            result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n            <span class="hljs-keyword">return</span> result;\r\n        }\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != userService.findUser(user)) {\r\n            responseObj.setCode(ResponseObj.FAILED);\r\n            responseObj.setMsg(<span class="hljs-string">"用户已经存在！"</span>);\r\n            result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n            <span class="hljs-keyword">return</span> result;\r\n        }\r\n        <span class="hljs-keyword">try</span> {\r\n            userService.add(user);\r\n        } <span class="hljs-keyword">catch</span> (Exception e) {\r\n            e.printStackTrace();\r\n            responseObj.setCode(ResponseObj.FAILED);\r\n            responseObj.setMsg(<span class="hljs-string">"其他错误！"</span>);\r\n            result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n            <span class="hljs-keyword">return</span> result;\r\n        }\r\n        responseObj.setCode(ResponseObj.OK);\r\n        responseObj.setMsg(<span class="hljs-string">"注册成功"</span>);\r\n        user.setPwd(session.getId());   <span class="hljs-comment">//单独设置密码为sessionId 误导黑客，前端访问服务器的时候必须有这个信息才能操作</span>\r\n        user.setNextUrl(request.getContextPath() + <span class="hljs-string">"/mvc/home"</span>);    <span class="hljs-comment">//单独控制地址</span>\r\n        responseObj.setData(user);\r\n        session.setAttribute(<span class="hljs-string">"userInfo"</span>, user); <span class="hljs-comment">//将一些基本信息写入到session中</span>\r\n        result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n        <span class="hljs-keyword">return</span> result;\r\n    }\r\n\r\n    <span class="hljs-comment">/**\r\n     * 登录接口\r\n     *\r\n     * <span class="hljs-doctag">@param</span> request\r\n     * <span class="hljs-doctag">@param</span> user\r\n     * <span class="hljs-doctag">@return</span>\r\n     */</span>\r\n    <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/login"</span>\r\n            , method = RequestMethod.POST\r\n            , produces = <span class="hljs-string">"application/json; charset=utf-8"</span>)\r\n    <span class="hljs-annotation">@ResponseBody</span>\r\n    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">login</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, User user, HttpSession session)</span> <span class="hljs-keyword">throws</span> Exception </span>{\r\n        Object result;\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == user) {\r\n            responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n            responseObj.setCode(ResponseObj.EMPUTY);\r\n            responseObj.setMsg(<span class="hljs-string">"登录信息不能为空"</span>);\r\n            result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n            <span class="hljs-keyword">return</span> result; <span class="hljs-comment">//返回json</span>\r\n        }\r\n        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(user.getLoginId()) || StringUtils.isEmpty(user.getPwd())) {\r\n            responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n            responseObj.setCode(ResponseObj.FAILED);\r\n            responseObj.setMsg(<span class="hljs-string">"用户名或密码不能为空"</span>);\r\n            result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n            <span class="hljs-keyword">return</span> result;\r\n        }\r\n        <span class="hljs-comment">//查找用户</span>\r\n        User user1 = userService.findUser(user);\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == user1) {\r\n            responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n            responseObj.setCode(ResponseObj.EMPUTY);\r\n            responseObj.setMsg(<span class="hljs-string">"未找到该用户"</span>);\r\n            result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n        } <span class="hljs-keyword">else</span> {\r\n            <span class="hljs-keyword">if</span> (user.getPwd().equals(user1.getPwd())) {\r\n                user1.setPwd(session.getId());\r\n                user1.setNextUrl(request.getContextPath() + <span class="hljs-string">"/mvc/home"</span>);\r\n                responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n                responseObj.setCode(ResponseObj.OK);\r\n                responseObj.setMsg(ResponseObj.OK_STR);\r\n                responseObj.setData(user1);\r\n                session.setAttribute(<span class="hljs-string">"userInfo"</span>, user1);\r\n                result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n            } <span class="hljs-keyword">else</span> {\r\n                responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n                responseObj.setCode(ResponseObj.FAILED);\r\n                responseObj.setMsg(<span class="hljs-string">"用户密码错误"</span>);\r\n                result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n            }\r\n        }\r\n        <span class="hljs-keyword">return</span> result;\r\n    }\r\n\r\n}</code></pre>\r\n我们前端接收到具体的json数据后，我们解析json数据，并实现相关功能，如下：\r\n<pre class="hljs javascript"><code class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">webLogin</span>() </span>{\r\n        <span class="hljs-keyword">if</span> (checkLoginInfo()) {\r\n            <span class="hljs-keyword">var</span> loginname = $(<span class="hljs-string">"#u"</span>).val();\r\n            <span class="hljs-keyword">var</span> password = $(<span class="hljs-string">"#p"</span>).val();\r\n            $.ajax({\r\n                type: <span class="hljs-string">"POST"</span>,\r\n                url: <span class="hljs-string">''&lt;%=request.getContextPath()%&gt;/userAction/login''</span>,\r\n                data: {loginId: loginname, pwd: password},\r\n                dataType: <span class="hljs-string">''json''</span>,   <span class="hljs-comment">//当这里指定为json的时候，获取到了数据后会自己解析的，只需要 返回值.字段名称 就能使用了</span>\r\n                cache: <span class="hljs-literal">false</span>,\r\n                success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{\r\n                    <span class="hljs-keyword">if</span> (data.code == <span class="hljs-number">1</span>) {\r\n                        <span class="hljs-built_in">window</span>.location.href = data.data.nextUrl;   <span class="hljs-comment">//这里拿到服务器返回的地址，然后进行跳转操作</span>\r\n                    } <span class="hljs-keyword">else</span> {\r\n                        alert(data.msg);\r\n                        $(<span class="hljs-string">"#u"</span>).focus();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    <span class="hljs-comment">//其他前端的相关代码省略，具体详情，请查看我们的放出的源码包。</span></code></pre>\r\n<h4>拦截器的使用</h4>\r\n拦截器的详细介绍，<a href="http://blog.csdn.net/tonytfjing/article/details/39207551" target="_blank">请参阅这里</a>，为了节省篇幅，本文不再介绍，只是放出如何使用。\r\n\r\n首先，在我们的spring-web.xml中配置拦截器，整体代码如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">beans</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans"</span>\r\n       <span class="hljs-attribute">xmlns:xsi</span>=<span class="hljs-value">"http://www.w3.org/2001/XMLSchema-instance"</span>\r\n       <span class="hljs-attribute">xmlns:context</span>=<span class="hljs-value">"http://www.springframework.org/schema/context"</span>\r\n       <span class="hljs-attribute">xmlns:mvc</span>=<span class="hljs-value">"http://www.springframework.org/schema/mvc"</span>\r\n       <span class="hljs-attribute">xsi:schemaLocation</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans\r\n    http://www.springframework.org/schema/beans/spring-beans.xsd\r\n    http://www.springframework.org/schema/context\r\n    http://www.springframework.org/schema/context/spring-context.xsd\r\n    http://www.springframework.org/schema/mvc\r\n    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"</span>&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 配置SpringMVC --&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 1.开启SpringMVC注解模式 --&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 简化配置：\r\n        (1)自动注册DefaultAnootationHandlerMapping,AnotationMethodHandlerAdapter\r\n        (2)提供一些列：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat, xml,json默认读写支持\r\n    --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">mvc:annotation-driven</span>/&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 2.静态资源默认servlet配置\r\n        (1)加入对静态资源的处理：js,gif,png\r\n        (2)允许使用"/"做整体映射\r\n     --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/css/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/css/"</span>/&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/images/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/images/"</span>/&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/view/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/view/"</span>/&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/js/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/js/"</span>/&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/fonts/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/fonts/"</span>/&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">mvc:default-servlet-handler</span>/&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!-- 访问拦截  --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">mvc:interceptors</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">mvc:interceptor</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">mvc:mapping</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/**/**"</span>/&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"cn.acheng1314.intercepter.LoginHandlerInterceptor"</span>/&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">mvc:interceptor</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">mvc:interceptors</span>&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!-- 3.配置jsp 显示ViewResolver --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"viewClass"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"prefix"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"/WEB-INF/jsp/"</span>/&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"suffix"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">".jsp"</span>/&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"multipartResolver"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"maxUploadSize"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"10000000"</span>/&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!-- 4.扫描web相关的bean --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">context:component-scan</span> <span class="hljs-attribute">base-package</span>=<span class="hljs-value">"cn.acheng1314.mvc"</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 制定扫包规则 ,只扫描使用@Controller注解的JAVA类 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">context:include-filter</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"annotation"</span> <span class="hljs-attribute">expression</span>=<span class="hljs-value">"org.springframework.stereotype.Controller"</span>/&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">context:component-scan</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">beans</span>&gt;</span></code></pre>\r\n具体的拦截器代码如下，因为我们已经在代码中加入了注释，所以不需要再次说明什么东西之类的。\r\n<pre class="hljs scala"><code class="scala"><span class="hljs-keyword">package</span> cn.acheng1314.intercepter;\r\n\r\n<span class="hljs-keyword">import</span> org.springframework.web.servlet.handler.<span class="hljs-type">HandlerInterceptorAdapter</span>;\r\n\r\n<span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletRequest</span>;\r\n<span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletResponse</span>;\r\n<span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>;\r\n\r\npublic <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginHandlerInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HandlerInterceptorAdapter</span> {</span>\r\n    <span class="hljs-type">String</span> <span class="hljs-type">NO_INTERCEPTOR_PATH</span> = <span class="hljs-string">".*/((login)|(reg)|(logout)|(code)|(app)|(weixin)|(static)|(main)|(websocket)).*"</span>;    <span class="hljs-comment">//不对匹配该值的访问路径拦截（正则）</span>\r\n\r\n    <span class="hljs-annotation">@Override</span>\r\n    public boolean preHandle(<span class="hljs-type">HttpServletRequest</span> request, <span class="hljs-type">HttpServletResponse</span> response, <span class="hljs-type">Object</span> handler) <span class="hljs-keyword">throws</span> <span class="hljs-type">Exception</span> {\r\n        <span class="hljs-comment">// TODO Auto-generated method stub</span>\r\n        <span class="hljs-type">String</span> path = request.getServletPath();\r\n        <span class="hljs-keyword">if</span> (path.matches(<span class="hljs-type">NO_INTERCEPTOR_PATH</span>)) {    <span class="hljs-comment">//匹配正则表达式的不拦截</span>\r\n            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;\r\n        } <span class="hljs-keyword">else</span> {    <span class="hljs-comment">//不匹配的进行处理</span>\r\n            <span class="hljs-keyword">try</span> {\r\n                <span class="hljs-keyword">if</span> (request.getSession().getAttribute(<span class="hljs-string">"userInfo"</span>) == <span class="hljs-literal">null</span>) { <span class="hljs-comment">//session中是否存在用户信息，不存在则是未登录状态</span>\r\n                    response.sendRedirect(request.getContextPath() + <span class="hljs-string">"/mvc/login"</span>);\r\n                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;\r\n                }\r\n            } <span class="hljs-keyword">catch</span> (<span class="hljs-type">IOException</span> e) {\r\n                response.sendRedirect(request.getContextPath() + <span class="hljs-string">"/mvc/login"</span>);\r\n                e.printStackTrace();\r\n                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;\r\n            }\r\n        }\r\n        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <span class="hljs-comment">//默认是不拦截···当然具体的还看一些需求设计啊  之类的</span>\r\n    }\r\n\r\n}</code></pre>\r\n看了下时间，已经是四点过了，今天只能先这样，这两天补一篇列表分页。这段时间很忙，快要毕业了，老师也找做东西，以前的团队项目做不过来也找我，然后还在准备考研的事情咨询，很多很多，望大家理解下，该做的事情，一定会完成，另外以后我们尽量缩短篇幅，但是，更多的是多次发文章，这样的话，相对来说感觉可能稍微舒服点。\r\n\r\n<hr />\r\n\r\n<h4>总结：</h4>\r\n<ul>\r\n 	<li>springMvc拦截器的基本使用</li>\r\n 	<li>简单的过滤器可以拦截简单的非法请求，防止越界操作</li>\r\n 	<li>gradle比maven更加方便配置</li>\r\n 	<li>角色控制的简单实现方式</li>\r\n</ul>\r\n</div>', '[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（五）', '', 'publish', 'open', 'open', '', '%e6%89%8b%e6%8a%8a%e6%89%8b%e6%95%99%e7%a8%8bjavaweb%e4%bc%98%e9%9b%85%e7%9a%84springmvcmybatis%e5%ba%94%e7%94%a8%ef%bc%88%e4%ba%94%ef%bc%89', '', '', '2016-10-26 04:20:31', '2016-10-25 20:20:31', '', 0, 'http://acheng1314.cn/?p=265', 0, 'post', '', 1),
(266, 1, '2016-10-26 04:19:53', '2016-10-25 20:19:53', '优雅的SpringMvc+Mybatis应用（五）\r\n转眼间文章已经到了第五期了。这段时间一直在考虑考研的事情，周一请老师吃饭还喝醉了，到家就直接睡着了。十分抱歉。\r\n\r\n本来这次是攒着劲头要写很多东西，但是十分尴尬的事情是最近身边的事情太多了，十分抱歉，该做的事情，我一定不会推诿的，大家理解一下。谢谢你们的支持。\r\n\r\n感谢热心亲们的支持，你们的鼓励我才走到今天，很多时候感觉自己写代码还是经常踩坑，所以思前想后，问了些朋友。大家都让我建群，一起交流才是最快的进步。所以我们的QQ群开通了，扫描二维码：\r\n\r\n行走的java全栈\r\n工具\r\nIDE为idea16\r\nJDK环境为1.8\r\nmaven版本为maven3\r\ngradle构建，版本：2.14.1\r\nMysql版本为5.5.27\r\nTomcat版本为7.0.52\r\n流程图绘制（xmind）\r\n本期目标\r\n简单更改项目的构建工具\r\n列表分页\r\n简易用户角色控制\r\n拦截器的使用\r\n简单更改项目的构建工具\r\n最近发现电脑突然变得很卡，所以专门把系统清理，顺带把Idea升级为16。接着事情就来了，发现在idea16里面能把项目升级为gradle构建，一番升级后，项目突然不能运行==，那么问题来了。整了半天也没发现问题所在，百度、谷歌也没找到答案，然后放出大招：\r\n\r\n新建同样包名和项目名称的gradle构建的web工程\r\n把上一个项目中gradle自动生成的build.gradle中的支援库代码拷贝下来，如下：\r\ncompile group: ''ch.qos.logback'', name: ''logback-classic'', version: ''1.1.1''\r\ncompile group: ''org.slf4j'', name: ''slf4j-api'', version: ''1.7.6''\r\ncompile group: ''com.alibaba'', name: ''druid'', version: ''1.0.25''\r\ncompile group: ''org.mybatis'', name: ''mybatis'', version: ''3.4.1''\r\ncompile group: ''org.mybatis'', name: ''mybatis-spring'', version: ''1.3.0''\r\ncompile group: ''taglibs'', name: ''standard'', version: ''1.1.2''\r\ncompile group: ''jstl'', name: ''jstl'', version: ''1.2''\r\ncompile group: ''com.google.code.gson'', name: ''gson'', version: ''2.7''\r\ncompile group: ''javax.servlet'', name: ''javax.servlet-api'', version: ''3.1.0''\r\ncompile group: ''org.springframework'', name: ''spring-core'', version: ''4.3.2.RELEASE''\r\ncompile group: ''org.springframework'', name: ''spring-beans'', version: ''4.3.2.RELEASE''\r\ncompile group: ''org.springframework'', name: ''spring-context'', version: ''4.3.2.RELEASE''\r\ncompile group: ''org.springframework'', name: ''spring-jdbc'', version: ''4.3.2.RELEASE''\r\ncompile group: ''org.springframework'', name: ''spring-tx'', version: ''4.3.2.RELEASE''\r\ncompile group: ''org.springframework'', name: ''spring-web'', version: ''4.3.2.RELEASE''\r\ncompile group: ''org.springframework'', name: ''spring-webmvc'', version: ''4.3.2.RELEASE''\r\ncompile group: ''org.springframework'', name: ''spring-test'', version: ''4.3.2.RELEASE''\r\ncompile group: ''redis.clients'', name: ''jedis'', version: ''2.7.3''\r\ncompile group: ''com.dyuproject.protostuff'', name: ''protostuff-core'', version: ''1.0.8''\r\ncompile group: ''com.dyuproject.protostuff'', name: ''protostuff-runtime'', version: ''1.0.8''\r\ncompile group: ''commons-collections'', name: ''commons-collections'', version: ''3.2.2''\r\ncompile group: ''commons-fileupload'', name: ''commons-fileupload'', version: ''1.3.2''\r\ncompile group: ''commons-io'', name: ''commons-io'', version: ''2.5''\r\nruntime group: ''mysql'', name: ''mysql-connector-java'', version: ''5.1.37''\r\n//关于具体的gradle构建，请百度一下。 一般来说在maven仓库里面有gradle引用的代码的，直接拷贝就行\r\n//可能我们的gradle构建包很难下载，建议直接用迅雷去下载对应的gradle版本，然后把gradle的压缩包放到我们程序的下载目录就可以了。\r\n等项目构建完成后，我们把以前的项目直接把源码和资源文件什么的都直接拷贝过来，对应着目录就行了，然后接着build项目，最后就可以了。\r\n\r\n角色控制\r\n前面和读者交流了一下，他们建议在项目中加入角色控制。好吧，我们先看看简单的角色控制。\r\n\r\n角色控制，顾名思义就是不同的用户角色依赖于他的身份属性而做出具体的行为控制。具体的行为控制，往往取决于用户界面的操作。而还有一些更加复杂的东西，我们在以后的项目实战中再来阐述。\r\n\r\n在这个项目中，我们用户的角色分为以下几类：\r\n\r\n超级管理员\r\n出入库人员\r\n仓库管理人员\r\n台账管理（账单汇总）\r\n按照我们以前开发的一些经验来说，我们大概解决方法有下面的几种：\r\n\r\n用户访问路径 举例说明\r\n前端页面设定路径 网页顶部的导航栏的操作跳转\r\n后端接口控制路径 不同职位的用户登录后显示的界面\r\n前端界面设置路径，也就是一个a标签写入地址为：http://acheng1314.cn 这样就能实现跳转。\r\n\r\n后端接口控制路径，我们还是拿登录接口来说，我们在用户类中加入一个nextUrl字段，说明是下一步的地址，然后我们在控制器中完成写入，如下：\r\n\r\n/**\r\n* 用户请求相关控制器\r\n*\r\nCreated by acheng on 2016/9/26.\r\n*/\r\n@Controller\r\n@RequestMapping("/userAction")\r\npublic class UserController {\r\n\r\n@Autowired\r\nprivate UserServiceImpl userService; //自动载入Service对象\r\nprivate ResponseObj responseObj;\r\n\r\n/**\r\n* 为什么返回值是一个ModelAndView，ModelAndView代表一个web页面\r\n* setViewName是设置一个jsp页面的名称\r\n*\r\n* @param response http响应\r\n* @param user 发起请求后，spring接收到请求，然后封装的bean数据\r\n* @return 返回一个web页面\r\n* @throws Exception\r\n*/\r\n@RequestMapping(value = "/reg"\r\n, method = RequestMethod.POST\r\n, produces = "application/json; charset=utf-8")\r\n@ResponseBody\r\npublic Object reg(HttpServletRequest request, HttpServletResponse response, User user, HttpSession session) throws Exception {\r\nObject result;\r\nresponseObj = new ResponseObj();\r\nif (null == user) {\r\nresponseObj.setCode(ResponseObj.FAILED);\r\nresponseObj.setMsg("用户信息不能为空！");\r\nresult = new GsonUtils().toJson(responseObj);\r\nreturn result;\r\n}\r\nif (StringUtils.isEmpty(user.getLoginId()) || StringUtils.isEmpty(user.getPwd())) {\r\nresponseObj.setCode(ResponseObj.FAILED);\r\nresponseObj.setMsg("用户名或密码不能为空！");\r\nresult = new GsonUtils().toJson(responseObj);\r\nreturn result;\r\n}\r\nif (null != userService.findUser(user)) {\r\nresponseObj.setCode(ResponseObj.FAILED);\r\nresponseObj.setMsg("用户已经存在！");\r\nresult = new GsonUtils().toJson(responseObj);\r\nreturn result;\r\n}\r\ntry {\r\nuserService.add(user);\r\n} catch (Exception e) {\r\ne.printStackTrace();\r\nresponseObj.setCode(ResponseObj.FAILED);\r\nresponseObj.setMsg("其他错误！");\r\nresult = new GsonUtils().toJson(responseObj);\r\nreturn result;\r\n}\r\nresponseObj.setCode(ResponseObj.OK);\r\nresponseObj.setMsg("注册成功");\r\nuser.setPwd(session.getId()); //单独设置密码为sessionId 误导黑客，前端访问服务器的时候必须有这个信息才能操作\r\nuser.setNextUrl(request.getContextPath() + "/mvc/home"); //单独控制地址\r\nresponseObj.setData(user);\r\nsession.setAttribute("userInfo", user); //将一些基本信息写入到session中\r\nresult = new GsonUtils().toJson(responseObj);\r\nreturn result;\r\n}\r\n\r\n/**\r\n* 登录接口\r\n*\r\n* @param request\r\n* @param user\r\n* @return\r\n*/\r\n@RequestMapping(value = "/login"\r\n, method = RequestMethod.POST\r\n, produces = "application/json; charset=utf-8")\r\n@ResponseBody\r\npublic Object login(HttpServletRequest request, HttpServletResponse response, User user, HttpSession session) throws Exception {\r\nObject result;\r\nif (null == user) {\r\nresponseObj = new ResponseObj();\r\nresponseObj.setCode(ResponseObj.EMPUTY);\r\nresponseObj.setMsg("登录信息不能为空");\r\nresult = new GsonUtils().toJson(responseObj);\r\nreturn result; //返回json\r\n}\r\nif (StringUtils.isEmpty(user.getLoginId()) || StringUtils.isEmpty(user.getPwd())) {\r\nresponseObj = new ResponseObj();\r\nresponseObj.setCode(ResponseObj.FAILED);\r\nresponseObj.setMsg("用户名或密码不能为空");\r\nresult = new GsonUtils().toJson(responseObj);\r\nreturn result;\r\n}\r\n//查找用户\r\nUser user1 = userService.findUser(user);\r\nif (null == user1) {\r\nresponseObj = new ResponseObj();\r\nresponseObj.setCode(ResponseObj.EMPUTY);\r\nresponseObj.setMsg("未找到该用户");\r\nresult = new GsonUtils().toJson(responseObj);\r\n} else {\r\nif (user.getPwd().equals(user1.getPwd())) {\r\nuser1.setPwd(session.getId());\r\nuser1.setNextUrl(request.getContextPath() + "/mvc/home");\r\nresponseObj = new ResponseObj();\r\nresponseObj.setCode(ResponseObj.OK);\r\nresponseObj.setMsg(ResponseObj.OK_STR);\r\nresponseObj.setData(user1);\r\nsession.setAttribute("userInfo", user1);\r\nresult = new GsonUtils().toJson(responseObj);\r\n} else {\r\nresponseObj = new ResponseObj();\r\nresponseObj.setCode(ResponseObj.FAILED);\r\nresponseObj.setMsg("用户密码错误");\r\nresult = new GsonUtils().toJson(responseObj);\r\n}\r\n}\r\nreturn result;\r\n}\r\n\r\n}\r\n我们前端接收到具体的json数据后，我们解析json数据，并实现相关功能，如下：\r\n\r\nfunction webLogin() {\r\nif (checkLoginInfo()) {\r\nvar loginname = $("#u").val();\r\nvar password = $("#p").val();\r\n$.ajax({\r\ntype: "POST",\r\nurl: ''&lt;%=request.getContextPath()%&gt;/userAction/login'',\r\ndata: {loginId: loginname, pwd: password},\r\ndataType: ''json'', //当这里指定为json的时候，获取到了数据后会自己解析的，只需要 返回值.字段名称 就能使用了\r\ncache: false,\r\nsuccess: function (data) {\r\nif (data.code == 1) {\r\nwindow.location.href = data.data.nextUrl; //这里拿到服务器返回的地址，然后进行跳转操作\r\n} else {\r\nalert(data.msg);\r\n$("#u").focus();\r\n}\r\n}\r\n});\r\n}\r\n}\r\n\r\n//其他前端的相关代码省略，具体详情，请查看我们的放出的源码包。\r\n拦截器的使用\r\n拦截器的详细介绍，请参阅这里，为了节省篇幅，本文不再介绍，只是放出如何使用。\r\n\r\n首先，在我们的spring-web.xml中配置拦截器，整体代码如下：\r\n\r\n<!--?xml version="1.0" encoding="UTF-8"?-->\r\n\r\n<!-- 配置SpringMVC -->\r\n<!-- 1.开启SpringMVC注解模式 -->\r\n<!-- 简化配置： (1)自动注册DefaultAnootationHandlerMapping,AnotationMethodHandlerAdapter (2)提供一些列：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat, xml,json默认读写支持 -->\r\n\r\n<!-- 2.静态资源默认servlet配置 (1)加入对静态资源的处理：js,gif,png (2)允许使用"/"做整体映射 -->\r\n\r\n\r\n\r\n\r\n<!-- 访问拦截 -->\r\n\r\n\r\n\r\n\r\n<!-- 3.配置jsp 显示ViewResolver -->\r\n&nbsp;\r\n\r\n<!-- 4.扫描web相关的bean -->\r\n\r\n<!-- 制定扫包规则 ,只扫描使用@Controller注解的JAVA类 -->\r\n\r\n具体的拦截器代码如下，因为我们已经在代码中加入了注释，所以不需要再次说明什么东西之类的。\r\n\r\npackage cn.acheng1314.intercepter;\r\n\r\nimport org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.io.IOException;\r\n\r\npublic class LoginHandlerInterceptor extends HandlerInterceptorAdapter {\r\nString NO_INTERCEPTOR_PATH = ".*/((login)|(reg)|(logout)|(code)|(app)|(weixin)|(static)|(main)|(websocket)).*"; //不对匹配该值的访问路径拦截（正则）\r\n\r\n@Override\r\npublic boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\r\n// TODO Auto-generated method stub\r\nString path = request.getServletPath();\r\nif (path.matches(NO_INTERCEPTOR_PATH)) { //匹配正则表达式的不拦截\r\nreturn true;\r\n} else { //不匹配的进行处理\r\ntry {\r\nif (request.getSession().getAttribute("userInfo") == null) { //session中是否存在用户信息，不存在则是未登录状态\r\nresponse.sendRedirect(request.getContextPath() + "/mvc/login");\r\nreturn false;\r\n}\r\n} catch (IOException e) {\r\nresponse.sendRedirect(request.getContextPath() + "/mvc/login");\r\ne.printStackTrace();\r\nreturn false;\r\n}\r\n}\r\nreturn true; //默认是不拦截···当然具体的还看一些需求设计啊 之类的\r\n}\r\n\r\n}\r\n看了下时间，已经是四点过了，今天只能先这样，这两天补一篇列表分页。这段时间很忙，快要毕业了，老师也找做东西，以前的团队项目做不过来也找我，然后还在准备考研的事情咨询，很多很多，望大家理解下，该做的事情，一定会完成，另外以后我们尽量缩短篇幅，但是，更多的是多次发文章，这样的话，相对来说感觉可能稍微舒服点。\r\n\r\n总结：\r\nspringMvc拦截器的基本使用\r\n简单的过滤器可以拦截简单的非法请求，防止越界操作\r\ngradle比maven更加方便配置\r\n角色控制的简单实现方式', '[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（五）', '', 'inherit', 'closed', 'closed', '', '265-revision-v1', '', '', '2016-10-26 04:19:53', '2016-10-25 20:19:53', '', 265, 'http://acheng1314.cn/?p=266', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(267, 1, '2016-10-26 04:20:31', '2016-10-25 20:20:31', '<h1 class="title">[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（五）</h1>\r\n<div class="meta-top"><span class="wordage">字数1636</span> <span class="views-count">阅读0</span> <span class="comments-count">评论0</span> <span class="likes-count">喜欢0</span></div>\r\n<div class="show-content">\r\n<h4>优雅的SpringMvc+Mybatis应用（五）</h4>\r\n转眼间文章已经到了第五期了。这段时间一直在考虑考研的事情，周一请老师吃饭还喝醉了，到家就直接睡着了。十分抱歉。\r\n\r\n本来这次是攒着劲头要写很多东西，但是十分尴尬的事情是最近身边的事情太多了，十分抱歉，该做的事情，我一定不会推诿的，大家理解一下。谢谢你们的支持。\r\n\r\n感谢热心亲们的支持，你们的鼓励我才走到今天，很多时候感觉自己写代码还是经常踩坑，所以思前想后，问了些朋友。大家都让我建群，一起交流才是最快的进步。所以我们的QQ群开通了，扫描二维码：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/%E8%A1%8C%E8%B5%B0%E7%9A%84java%E5%85%A8%E6%A0%88%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/%E8%A1%8C%E8%B5%B0%E7%9A%84java%E5%85%A8%E6%A0%88%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81.png" />\r\n<div class="image-caption">行走的java全栈</div>\r\n</div>\r\n<h4>工具</h4>\r\n<ul>\r\n 	<li>IDE为<strong>idea16</strong></li>\r\n 	<li>JDK环境为<strong>1.8</strong></li>\r\n 	<li><del>maven版本为<strong>maven3</strong></del></li>\r\n 	<li>gradle构建，版本：2.14.1</li>\r\n 	<li>Mysql版本为<strong>5.5.27</strong></li>\r\n 	<li>Tomcat版本为<strong>7.0.52</strong></li>\r\n 	<li>流程图绘制（xmind）</li>\r\n</ul>\r\n<h4>本期目标</h4>\r\n<ul>\r\n 	<li>简单更改项目的构建工具</li>\r\n 	<li>列表分页</li>\r\n 	<li>简易用户角色控制</li>\r\n 	<li>拦截器的使用</li>\r\n</ul>\r\n<h4>简单更改项目的构建工具</h4>\r\n最近发现电脑突然变得很卡，所以专门把系统清理，顺带把Idea升级为16。接着事情就来了，发现在idea16里面能把项目升级为gradle构建，一番升级后，项目突然不能运行==，那么问题来了。整了半天也没发现问题所在，百度、谷歌也没找到答案，然后放出大招：\r\n<ul>\r\n 	<li>新建同样包名和项目名称的gradle构建的web工程</li>\r\n 	<li>把上一个项目中gradle自动生成的build.gradle中的支援库代码拷贝下来，如下：\r\n<pre class="hljs cs"><code class="cs">compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''ch.qos.logback''</span>, name: <span class="hljs-string">''logback-classic''</span>, version: <span class="hljs-string">''1.1.1''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.slf4j''</span>, name: <span class="hljs-string">''slf4j-api''</span>, version: <span class="hljs-string">''1.7.6''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''com.alibaba''</span>, name: <span class="hljs-string">''druid''</span>, version: <span class="hljs-string">''1.0.25''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.mybatis''</span>, name: <span class="hljs-string">''mybatis''</span>, version: <span class="hljs-string">''3.4.1''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.mybatis''</span>, name: <span class="hljs-string">''mybatis-spring''</span>, version: <span class="hljs-string">''1.3.0''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''taglibs''</span>, name: <span class="hljs-string">''standard''</span>, version: <span class="hljs-string">''1.1.2''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''jstl''</span>, name: <span class="hljs-string">''jstl''</span>, version: <span class="hljs-string">''1.2''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''com.google.code.gson''</span>, name: <span class="hljs-string">''gson''</span>, version: <span class="hljs-string">''2.7''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''javax.servlet''</span>, name: <span class="hljs-string">''javax.servlet-api''</span>, version: <span class="hljs-string">''3.1.0''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-core''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-beans''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-context''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-jdbc''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-tx''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-web''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-webmvc''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-test''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''redis.clients''</span>, name: <span class="hljs-string">''jedis''</span>, version: <span class="hljs-string">''2.7.3''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''com.dyuproject.protostuff''</span>, name: <span class="hljs-string">''protostuff-core''</span>, version: <span class="hljs-string">''1.0.8''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''com.dyuproject.protostuff''</span>, name: <span class="hljs-string">''protostuff-runtime''</span>, version: <span class="hljs-string">''1.0.8''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''commons-collections''</span>, name: <span class="hljs-string">''commons-collections''</span>, version: <span class="hljs-string">''3.2.2''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''commons-fileupload''</span>, name: <span class="hljs-string">''commons-fileupload''</span>, version: <span class="hljs-string">''1.3.2''</span>\r\ncompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''commons-io''</span>, name: <span class="hljs-string">''commons-io''</span>, version: <span class="hljs-string">''2.5''</span>\r\nruntime <span class="hljs-keyword">group</span>: <span class="hljs-string">''mysql''</span>, name: <span class="hljs-string">''mysql-connector-java''</span>, version: <span class="hljs-string">''5.1.37''</span>\r\n<span class="hljs-comment">//关于具体的gradle构建，请百度一下。 一般来说在maven仓库里面有gradle引用的代码的，直接拷贝就行</span>\r\n<span class="hljs-comment">//可能我们的gradle构建包很难下载，建议直接用迅雷去下载对应的gradle版本，然后把gradle的压缩包放到我们程序的下载目录就可以了。</span></code></pre>\r\n</li>\r\n</ul>\r\n等项目构建完成后，我们把以前的项目直接把源码和资源文件什么的都直接拷贝过来，对应着目录就行了，然后接着build项目，最后就可以了。\r\n<h4>角色控制</h4>\r\n前面和读者交流了一下，他们建议在项目中加入角色控制。好吧，我们先看看简单的角色控制。\r\n\r\n角色控制，顾名思义就是不同的用户角色依赖于他的身份属性而做出具体的行为控制。具体的行为控制，往往取决于用户界面的操作。而还有一些更加复杂的东西，我们在以后的项目实战中再来阐述。\r\n\r\n在这个项目中，我们用户的角色分为以下几类：\r\n<ul>\r\n 	<li>超级管理员</li>\r\n 	<li>出入库人员</li>\r\n 	<li>仓库管理人员</li>\r\n 	<li>台账管理（账单汇总）</li>\r\n</ul>\r\n按照我们以前开发的一些经验来说，我们大概解决方法有下面的几种：\r\n<table>\r\n<thead>\r\n<tr>\r\n<th>用户访问路径</th>\r\n<th>举例说明</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>前端页面设定路径</td>\r\n<td>网页顶部的导航栏的操作跳转</td>\r\n</tr>\r\n<tr>\r\n<td>后端接口控制路径</td>\r\n<td>不同职位的用户登录后显示的界面</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n前端界面设置路径，也就是一个a标签写入地址为：<a href="http://acheng1314.cn/" target="_blank">http://acheng1314.cn</a> 这样就能实现跳转。\r\n\r\n后端接口控制路径，我们还是拿登录接口来说，我们在用户类中加入一个nextUrl字段，说明是下一步的地址，然后我们在控制器中完成写入，如下：\r\n<pre class="hljs java"><code class="java"><span class="hljs-comment">/**\r\n * 用户请求相关控制器\r\n * &lt;br/&gt;Created by acheng on 2016/9/26.\r\n */</span>\r\n<span class="hljs-annotation">@Controller</span>\r\n<span class="hljs-annotation">@RequestMapping</span>(<span class="hljs-string">"/userAction"</span>)\r\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>{\r\n\r\n    <span class="hljs-annotation">@Autowired</span>\r\n    <span class="hljs-keyword">private</span> UserServiceImpl userService;    <span class="hljs-comment">//自动载入Service对象</span>\r\n    <span class="hljs-keyword">private</span> ResponseObj responseObj;\r\n\r\n    <span class="hljs-comment">/**\r\n     * 为什么返回值是一个ModelAndView，ModelAndView代表一个web页面&lt;br/&gt;\r\n     * setViewName是设置一个jsp页面的名称\r\n     *\r\n     * <span class="hljs-doctag">@param</span> response http响应\r\n     * <span class="hljs-doctag">@param</span> user     发起请求后，spring接收到请求，然后封装的bean数据\r\n     * <span class="hljs-doctag">@return</span> 返回一个web页面\r\n     * <span class="hljs-doctag">@throws</span> Exception\r\n     */</span>\r\n    <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/reg"</span>\r\n            , method = RequestMethod.POST\r\n            , produces = <span class="hljs-string">"application/json; charset=utf-8"</span>)\r\n    <span class="hljs-annotation">@ResponseBody</span>\r\n    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">reg</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, User user, HttpSession session)</span> <span class="hljs-keyword">throws</span> Exception </span>{\r\n        Object result;\r\n        responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == user) {\r\n            responseObj.setCode(ResponseObj.FAILED);\r\n            responseObj.setMsg(<span class="hljs-string">"用户信息不能为空！"</span>);\r\n            result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n            <span class="hljs-keyword">return</span> result;\r\n        }\r\n        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(user.getLoginId()) || StringUtils.isEmpty(user.getPwd())) {\r\n            responseObj.setCode(ResponseObj.FAILED);\r\n            responseObj.setMsg(<span class="hljs-string">"用户名或密码不能为空！"</span>);\r\n            result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n            <span class="hljs-keyword">return</span> result;\r\n        }\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != userService.findUser(user)) {\r\n            responseObj.setCode(ResponseObj.FAILED);\r\n            responseObj.setMsg(<span class="hljs-string">"用户已经存在！"</span>);\r\n            result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n            <span class="hljs-keyword">return</span> result;\r\n        }\r\n        <span class="hljs-keyword">try</span> {\r\n            userService.add(user);\r\n        } <span class="hljs-keyword">catch</span> (Exception e) {\r\n            e.printStackTrace();\r\n            responseObj.setCode(ResponseObj.FAILED);\r\n            responseObj.setMsg(<span class="hljs-string">"其他错误！"</span>);\r\n            result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n            <span class="hljs-keyword">return</span> result;\r\n        }\r\n        responseObj.setCode(ResponseObj.OK);\r\n        responseObj.setMsg(<span class="hljs-string">"注册成功"</span>);\r\n        user.setPwd(session.getId());   <span class="hljs-comment">//单独设置密码为sessionId 误导黑客，前端访问服务器的时候必须有这个信息才能操作</span>\r\n        user.setNextUrl(request.getContextPath() + <span class="hljs-string">"/mvc/home"</span>);    <span class="hljs-comment">//单独控制地址</span>\r\n        responseObj.setData(user);\r\n        session.setAttribute(<span class="hljs-string">"userInfo"</span>, user); <span class="hljs-comment">//将一些基本信息写入到session中</span>\r\n        result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n        <span class="hljs-keyword">return</span> result;\r\n    }\r\n\r\n    <span class="hljs-comment">/**\r\n     * 登录接口\r\n     *\r\n     * <span class="hljs-doctag">@param</span> request\r\n     * <span class="hljs-doctag">@param</span> user\r\n     * <span class="hljs-doctag">@return</span>\r\n     */</span>\r\n    <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/login"</span>\r\n            , method = RequestMethod.POST\r\n            , produces = <span class="hljs-string">"application/json; charset=utf-8"</span>)\r\n    <span class="hljs-annotation">@ResponseBody</span>\r\n    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">login</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, User user, HttpSession session)</span> <span class="hljs-keyword">throws</span> Exception </span>{\r\n        Object result;\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == user) {\r\n            responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n            responseObj.setCode(ResponseObj.EMPUTY);\r\n            responseObj.setMsg(<span class="hljs-string">"登录信息不能为空"</span>);\r\n            result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n            <span class="hljs-keyword">return</span> result; <span class="hljs-comment">//返回json</span>\r\n        }\r\n        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(user.getLoginId()) || StringUtils.isEmpty(user.getPwd())) {\r\n            responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n            responseObj.setCode(ResponseObj.FAILED);\r\n            responseObj.setMsg(<span class="hljs-string">"用户名或密码不能为空"</span>);\r\n            result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n            <span class="hljs-keyword">return</span> result;\r\n        }\r\n        <span class="hljs-comment">//查找用户</span>\r\n        User user1 = userService.findUser(user);\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == user1) {\r\n            responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n            responseObj.setCode(ResponseObj.EMPUTY);\r\n            responseObj.setMsg(<span class="hljs-string">"未找到该用户"</span>);\r\n            result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n        } <span class="hljs-keyword">else</span> {\r\n            <span class="hljs-keyword">if</span> (user.getPwd().equals(user1.getPwd())) {\r\n                user1.setPwd(session.getId());\r\n                user1.setNextUrl(request.getContextPath() + <span class="hljs-string">"/mvc/home"</span>);\r\n                responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n                responseObj.setCode(ResponseObj.OK);\r\n                responseObj.setMsg(ResponseObj.OK_STR);\r\n                responseObj.setData(user1);\r\n                session.setAttribute(<span class="hljs-string">"userInfo"</span>, user1);\r\n                result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n            } <span class="hljs-keyword">else</span> {\r\n                responseObj = <span class="hljs-keyword">new</span> ResponseObj&lt;User&gt;();\r\n                responseObj.setCode(ResponseObj.FAILED);\r\n                responseObj.setMsg(<span class="hljs-string">"用户密码错误"</span>);\r\n                result = <span class="hljs-keyword">new</span> GsonUtils().toJson(responseObj);\r\n            }\r\n        }\r\n        <span class="hljs-keyword">return</span> result;\r\n    }\r\n\r\n}</code></pre>\r\n我们前端接收到具体的json数据后，我们解析json数据，并实现相关功能，如下：\r\n<pre class="hljs javascript"><code class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">webLogin</span>() </span>{\r\n        <span class="hljs-keyword">if</span> (checkLoginInfo()) {\r\n            <span class="hljs-keyword">var</span> loginname = $(<span class="hljs-string">"#u"</span>).val();\r\n            <span class="hljs-keyword">var</span> password = $(<span class="hljs-string">"#p"</span>).val();\r\n            $.ajax({\r\n                type: <span class="hljs-string">"POST"</span>,\r\n                url: <span class="hljs-string">''&lt;%=request.getContextPath()%&gt;/userAction/login''</span>,\r\n                data: {loginId: loginname, pwd: password},\r\n                dataType: <span class="hljs-string">''json''</span>,   <span class="hljs-comment">//当这里指定为json的时候，获取到了数据后会自己解析的，只需要 返回值.字段名称 就能使用了</span>\r\n                cache: <span class="hljs-literal">false</span>,\r\n                success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{\r\n                    <span class="hljs-keyword">if</span> (data.code == <span class="hljs-number">1</span>) {\r\n                        <span class="hljs-built_in">window</span>.location.href = data.data.nextUrl;   <span class="hljs-comment">//这里拿到服务器返回的地址，然后进行跳转操作</span>\r\n                    } <span class="hljs-keyword">else</span> {\r\n                        alert(data.msg);\r\n                        $(<span class="hljs-string">"#u"</span>).focus();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    <span class="hljs-comment">//其他前端的相关代码省略，具体详情，请查看我们的放出的源码包。</span></code></pre>\r\n<h4>拦截器的使用</h4>\r\n拦截器的详细介绍，<a href="http://blog.csdn.net/tonytfjing/article/details/39207551" target="_blank">请参阅这里</a>，为了节省篇幅，本文不再介绍，只是放出如何使用。\r\n\r\n首先，在我们的spring-web.xml中配置拦截器，整体代码如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">beans</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans"</span>\r\n       <span class="hljs-attribute">xmlns:xsi</span>=<span class="hljs-value">"http://www.w3.org/2001/XMLSchema-instance"</span>\r\n       <span class="hljs-attribute">xmlns:context</span>=<span class="hljs-value">"http://www.springframework.org/schema/context"</span>\r\n       <span class="hljs-attribute">xmlns:mvc</span>=<span class="hljs-value">"http://www.springframework.org/schema/mvc"</span>\r\n       <span class="hljs-attribute">xsi:schemaLocation</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans\r\n    http://www.springframework.org/schema/beans/spring-beans.xsd\r\n    http://www.springframework.org/schema/context\r\n    http://www.springframework.org/schema/context/spring-context.xsd\r\n    http://www.springframework.org/schema/mvc\r\n    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"</span>&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 配置SpringMVC --&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 1.开启SpringMVC注解模式 --&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 简化配置：\r\n        (1)自动注册DefaultAnootationHandlerMapping,AnotationMethodHandlerAdapter\r\n        (2)提供一些列：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat, xml,json默认读写支持\r\n    --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">mvc:annotation-driven</span>/&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 2.静态资源默认servlet配置\r\n        (1)加入对静态资源的处理：js,gif,png\r\n        (2)允许使用"/"做整体映射\r\n     --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/css/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/css/"</span>/&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/images/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/images/"</span>/&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/view/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/view/"</span>/&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/js/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/js/"</span>/&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/fonts/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/fonts/"</span>/&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">mvc:default-servlet-handler</span>/&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!-- 访问拦截  --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">mvc:interceptors</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">mvc:interceptor</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">mvc:mapping</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/**/**"</span>/&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"cn.acheng1314.intercepter.LoginHandlerInterceptor"</span>/&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">mvc:interceptor</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">mvc:interceptors</span>&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!-- 3.配置jsp 显示ViewResolver --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"viewClass"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"prefix"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"/WEB-INF/jsp/"</span>/&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"suffix"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">".jsp"</span>/&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"multipartResolver"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"maxUploadSize"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"10000000"</span>/&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!-- 4.扫描web相关的bean --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">context:component-scan</span> <span class="hljs-attribute">base-package</span>=<span class="hljs-value">"cn.acheng1314.mvc"</span>&gt;</span>\r\n        <span class="hljs-comment">&lt;!-- 制定扫包规则 ,只扫描使用@Controller注解的JAVA类 --&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">context:include-filter</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"annotation"</span> <span class="hljs-attribute">expression</span>=<span class="hljs-value">"org.springframework.stereotype.Controller"</span>/&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">context:component-scan</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">beans</span>&gt;</span></code></pre>\r\n具体的拦截器代码如下，因为我们已经在代码中加入了注释，所以不需要再次说明什么东西之类的。\r\n<pre class="hljs scala"><code class="scala"><span class="hljs-keyword">package</span> cn.acheng1314.intercepter;\r\n\r\n<span class="hljs-keyword">import</span> org.springframework.web.servlet.handler.<span class="hljs-type">HandlerInterceptorAdapter</span>;\r\n\r\n<span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletRequest</span>;\r\n<span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletResponse</span>;\r\n<span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>;\r\n\r\npublic <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginHandlerInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HandlerInterceptorAdapter</span> {</span>\r\n    <span class="hljs-type">String</span> <span class="hljs-type">NO_INTERCEPTOR_PATH</span> = <span class="hljs-string">".*/((login)|(reg)|(logout)|(code)|(app)|(weixin)|(static)|(main)|(websocket)).*"</span>;    <span class="hljs-comment">//不对匹配该值的访问路径拦截（正则）</span>\r\n\r\n    <span class="hljs-annotation">@Override</span>\r\n    public boolean preHandle(<span class="hljs-type">HttpServletRequest</span> request, <span class="hljs-type">HttpServletResponse</span> response, <span class="hljs-type">Object</span> handler) <span class="hljs-keyword">throws</span> <span class="hljs-type">Exception</span> {\r\n        <span class="hljs-comment">// TODO Auto-generated method stub</span>\r\n        <span class="hljs-type">String</span> path = request.getServletPath();\r\n        <span class="hljs-keyword">if</span> (path.matches(<span class="hljs-type">NO_INTERCEPTOR_PATH</span>)) {    <span class="hljs-comment">//匹配正则表达式的不拦截</span>\r\n            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;\r\n        } <span class="hljs-keyword">else</span> {    <span class="hljs-comment">//不匹配的进行处理</span>\r\n            <span class="hljs-keyword">try</span> {\r\n                <span class="hljs-keyword">if</span> (request.getSession().getAttribute(<span class="hljs-string">"userInfo"</span>) == <span class="hljs-literal">null</span>) { <span class="hljs-comment">//session中是否存在用户信息，不存在则是未登录状态</span>\r\n                    response.sendRedirect(request.getContextPath() + <span class="hljs-string">"/mvc/login"</span>);\r\n                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;\r\n                }\r\n            } <span class="hljs-keyword">catch</span> (<span class="hljs-type">IOException</span> e) {\r\n                response.sendRedirect(request.getContextPath() + <span class="hljs-string">"/mvc/login"</span>);\r\n                e.printStackTrace();\r\n                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;\r\n            }\r\n        }\r\n        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <span class="hljs-comment">//默认是不拦截···当然具体的还看一些需求设计啊  之类的</span>\r\n    }\r\n\r\n}</code></pre>\r\n看了下时间，已经是四点过了，今天只能先这样，这两天补一篇列表分页。这段时间很忙，快要毕业了，老师也找做东西，以前的团队项目做不过来也找我，然后还在准备考研的事情咨询，很多很多，望大家理解下，该做的事情，一定会完成，另外以后我们尽量缩短篇幅，但是，更多的是多次发文章，这样的话，相对来说感觉可能稍微舒服点。\r\n\r\n<hr />\r\n\r\n<h4>总结：</h4>\r\n<ul>\r\n 	<li>springMvc拦截器的基本使用</li>\r\n 	<li>简单的过滤器可以拦截简单的非法请求，防止越界操作</li>\r\n 	<li>gradle比maven更加方便配置</li>\r\n 	<li>角色控制的简单实现方式</li>\r\n</ul>\r\n</div>', '[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（五）', '', 'inherit', 'closed', 'closed', '', '265-revision-v1', '', '', '2016-10-26 04:20:31', '2016-10-25 20:20:31', '', 265, 'http://acheng1314.cn/?p=267', 0, 'revision', '', 0),
(268, 1, '2016-10-30 15:10:49', '2016-10-30 07:10:49', '', 'ssm%e5%ba%94%e7%94%a8%e5%85%ad-%e5%90%8e%e5%8f%b0%e4%b8%bb%e9%a1%b5-%e6%9c%80%e8%bf%91%e8%ae%bf%e9%97%ae%e5%88%97%e8%a1%a8%e6%88%aa%e5%9b%be', '', 'inherit', 'open', 'closed', '', 'ssm%e5%ba%94%e7%94%a8%e5%85%ad-%e5%90%8e%e5%8f%b0%e4%b8%bb%e9%a1%b5-%e6%9c%80%e8%bf%91%e8%ae%bf%e9%97%ae%e5%88%97%e8%a1%a8%e6%88%aa%e5%9b%be', '', '', '2016-10-30 15:10:49', '2016-10-30 07:10:49', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/10/ssm应用六-后台主页-最近访问列表截图.png', 0, 'attachment', 'image/png', 0),
(269, 1, '2016-10-30 15:13:59', '2016-10-30 07:13:59', '', 'ssm%e5%ba%94%e7%94%a8%e5%85%ad-%e5%90%8e%e5%8f%b0%e4%b8%bb%e9%a1%b5-%e5%88%97%e8%a1%a8%e4%bb%a3%e7%a0%81%e6%88%aa%e5%9b%be', '', 'inherit', 'open', 'closed', '', 'ssm%e5%ba%94%e7%94%a8%e5%85%ad-%e5%90%8e%e5%8f%b0%e4%b8%bb%e9%a1%b5-%e5%88%97%e8%a1%a8%e4%bb%a3%e7%a0%81%e6%88%aa%e5%9b%be', '', '', '2016-10-30 15:13:59', '2016-10-30 07:13:59', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/10/ssm应用六-后台主页-列表代码截图.png', 0, 'attachment', 'image/png', 0),
(270, 1, '2016-10-30 15:49:39', '2016-10-30 07:49:39', '', 'ssm%e5%ba%94%e7%94%a8%e5%85%ad-%e5%90%8e%e5%8f%b0%e4%b8%bb%e9%a1%b5-%e6%97%a5%e5%bf%97%e9%87%87%e9%9b%86%e6%b5%81%e7%a8%8b', '', 'inherit', 'open', 'closed', '', 'ssm%e5%ba%94%e7%94%a8%e5%85%ad-%e5%90%8e%e5%8f%b0%e4%b8%bb%e9%a1%b5-%e6%97%a5%e5%bf%97%e9%87%87%e9%9b%86%e6%b5%81%e7%a8%8b', '', '', '2016-10-30 15:49:39', '2016-10-30 07:49:39', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/10/ssm应用六-后台主页-日志采集流程.png', 0, 'attachment', 'image/png', 0),
(271, 1, '2016-10-30 15:59:37', '2016-10-30 07:59:37', '', 'ssm%e5%ba%94%e7%94%a8%e5%85%ad-%e5%90%8e%e5%8f%b0%e4%b8%bb%e9%a1%b5-%e5%88%86%e9%a1%b5%e5%88%97%e8%a1%a8%e6%b5%81%e7%a8%8b', '', 'inherit', 'open', 'closed', '', 'ssm%e5%ba%94%e7%94%a8%e5%85%ad-%e5%90%8e%e5%8f%b0%e4%b8%bb%e9%a1%b5-%e5%88%86%e9%a1%b5%e5%88%97%e8%a1%a8%e6%b5%81%e7%a8%8b', '', '', '2016-10-30 15:59:37', '2016-10-30 07:59:37', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/10/ssm应用六-后台主页-分页列表流程.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(272, 1, '2016-10-30 21:13:51', '2016-10-30 13:13:51', '<h4></h4>\r\n第六期文章也到了，其实这应该算是第五期续的。毕竟上次的列表分页还没做。\r\n\r\n后面可能还有几期，我们的仓库管理系统会结束的。按照老规矩，结束的时候肯定有项目总结解析。\r\n\r\n项目github地址：<a href="https://github.com/pc859107393/SpringMvcMybatis" target="_blank">https://github.com/pc859107393/SpringMvcMybatis</a>\r\n\r\n我的简书首页是：<a href="http://www.jianshu.com/users/86b79c50cfb3/latest_articles" target="_blank">http://www.jianshu.com/users/86b79c50cfb3/latest_articles</a>\r\n\r\n上一期是：<a href="http://www.jianshu.com/p/3c5888f30996" target="_blank">优雅的SpringMvc+Mybatis应用（五）</a>\r\n\r\n扫描下面二维码加入交流QQ群：\r\n<div class="image-package imagebubble">\r\n\r\n<img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/%E8%A1%8C%E8%B5%B0%E7%9A%84java%E5%85%A8%E6%A0%88%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/%E8%A1%8C%E8%B5%B0%E7%9A%84java%E5%85%A8%E6%A0%88%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81.png" />\r\n<div class="image-caption">行走的java全栈</div>\r\n</div>\r\n<h4>工具</h4>\r\n<ul>\r\n 	<li>IDE为<strong>idea16</strong></li>\r\n 	<li>JDK环境为<strong>1.8</strong></li>\r\n 	<li>gradle构建，版本：2.14.1</li>\r\n 	<li>Mysql版本为<strong>5.5.27</strong></li>\r\n 	<li>Tomcat版本为<strong>7.0.52</strong></li>\r\n 	<li>流程图绘制（xmind）</li>\r\n</ul>\r\n<h4>本期目标</h4>\r\n<ul>\r\n 	<li>列表分页</li>\r\n</ul>\r\n<h4>列表分页</h4>\r\n前面很早就说了列表分页，一直没怎么做，这一次就做一个登录的主机信息的分页。\r\n\r\n首先我们分析一下我们的功能设定：\r\n<ul>\r\n 	<li>记录基本主机信息\r\n<ul>\r\n 	<li>操作系统</li>\r\n 	<li>IP地址</li>\r\n 	<li>访问的浏览器内核</li>\r\n</ul>\r\n</li>\r\n 	<li>Session的Id</li>\r\n 	<li>发生时间</li>\r\n 	<li>其他信息</li>\r\n</ul>\r\n关于上面的东西，我们可以预设很多字段，唯一的注意的地方是我这边把记录行为日志的表做了个自增的ID。我这边是所有的请求目前都是加入了信息记录，实际项目中可不能这么搞（根据需求搞事情，搞事情，搞事情）。\r\n\r\n既然我们都说过我们是记录用户登录信息的列表，那么我们需要先获取用户的请求内部相关的信息。也就是说我们的这个信息获取是基于用户请求设定的，那么解决思路就是从拦截器来实现。\r\n\r\n既然上面我们分析了需要记录的信息，那么接着的思路应该是什么呢？\r\n<ul>\r\n 	<li>根据数据需求建表</li>\r\n 	<li>完成存储数据业务\r\n<ul>\r\n 	<li>Dao → Service → HandlerInterceptor（拦截器）</li>\r\n</ul>\r\n</li>\r\n 	<li>单元测试\r\n<ul>\r\n 	<li>因为我前面提过，我们尽量把service作为简单的数据驱动，也就是说不涉及到复杂事务，我们尽量写简单的service。</li>\r\n 	<li>简单的service情况下， 我们一个service对应一个dao，则一定程度上可以少写一点单元测试==、</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n日志获取大概流程图如下所示：\r\n<div class="image-package imagebubble">\r\n\r\n<img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%85%AD-%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A1%B5-%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E6%B5%81%E7%A8%8B.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%85%AD-%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A1%B5-%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E6%B5%81%E7%A8%8B.png" />\r\n<div class="image-caption">ssm应用六-后台主页-日志采集流程</div>\r\n</div>\r\n日志列表输出大概流程图如下所示：\r\n<div class="image-package imagebubble">\r\n\r\n<img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%85%AD-%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A1%B5-%E5%88%86%E9%A1%B5%E5%88%97%E8%A1%A8%E6%B5%81%E7%A8%8B.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%85%AD-%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A1%B5-%E5%88%86%E9%A1%B5%E5%88%97%E8%A1%A8%E6%B5%81%E7%A8%8B.png" />\r\n<div class="image-caption">ssm应用六-后台主页-分页列表流程</div>\r\n</div>\r\n具体的一些细节的东西没必要追究，先把数据库表建立起来，数据库：warehouse，建表代码如下：\r\n<pre class="hljs sql"><code class="sql"> <span class="hljs-operator"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`user_action_log`</span> (\r\n <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''自增ID''</span>,\r\n <span class="hljs-string">`login_id`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''登录ID''</span>,\r\n <span class="hljs-string">`session_id`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">45</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''访问session的ID\\r\\n''</span>,\r\n <span class="hljs-string">`time`</span> datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''操作时间''</span>,\r\n <span class="hljs-string">`ip_addr_v4`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">15</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''ipV4地址''</span>,\r\n <span class="hljs-string">`ip_addr_v6`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''ipv6地址\\r\\n''</span>,\r\n <span class="hljs-string">`os_name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''操作系统名称''</span>,\r\n <span class="hljs-string">`os_version`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,\r\n <span class="hljs-string">`bro_name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''浏览器名称''</span>,\r\n <span class="hljs-string">`bro_version`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''浏览器版本''</span>,\r\n <span class="hljs-string">`request_body`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">60</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''请求体信息''</span>,\r\n <span class="hljs-string">`description`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''操作描述''</span>,\r\n <span class="hljs-string">`other`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">150</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''其他描述''</span>,\r\n <span class="hljs-string">`method`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''HTTP请求方法''</span>,\r\n PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)\r\n ) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> AUTO_INCREMENT=<span class="hljs-number">109</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8 <span class="hljs-keyword">COMMENT</span>=<span class="hljs-string">''行为日志表''</span>;</span></code></pre>\r\n我们数据库建表完成后，只需要写对应的Dao层，按照我们前面的思路，那就是对应着写Bean → Dao → Service。然后Service提供给其他地方调用。\r\n\r\n既然如此，我们先实现我们的Bean和Dao层，因为我们在项目中使用了Mybatis这个持久化框架，所以我们需要去实现Mybatis的Mapper文件对应Dao层的接口就行，具体的代码如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-comment">&lt;!--下面是Bean：UserActionLog--&gt;</span>\r\npublic class UserActionLog implements Serializable {\r\n\r\n    private long id;\r\n    private String loginId, sessionId, ipAddrV4, ipAddrV6, osName, osVersion, broName, broVersion, requestBody, description, other, method;\r\n    private Date time;\r\n    //省略get和set以及toString方法\r\n}\r\n\r\n<span class="hljs-comment">&lt;!--下面是Dao层：ActionLogDao.java--&gt;</span>\r\npublic interface ActionLogDao extends Dao<span class="hljs-tag">&lt;<span class="hljs-title">UserActionLog</span>&gt;</span> {\r\n\r\n    int add(UserActionLog userActionLog);\r\n\r\n    UserActionLog findOneById(Serializable Id);\r\n\r\n    /**\r\n     * 分页查询\r\n     * @param offset    起始位置\r\n     * @param limit     每页数量\r\n     * @return\r\n     */\r\n    List<span class="hljs-tag">&lt;<span class="hljs-title">UserActionLog</span>&gt;</span> findAll(@Param("offset") int offset, @Param("limit") int limit);\r\n}\r\n\r\n<span class="hljs-comment">&lt;!--下面是mapper：ActionLogDao.xml--&gt;</span>\r\n<span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span>\r\n<span class="hljs-doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"\r\n        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">mapper</span> <span class="hljs-attribute">namespace</span>=<span class="hljs-value">"cn.acheng1314.dao.ActionLogDao"</span>&gt;</span>\r\n    <span class="hljs-comment">&lt;!--增加语句--&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">insert</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"add"</span> <span class="hljs-attribute">parameterType</span>=<span class="hljs-value">"cn.acheng1314.domain.UserActionLog"</span>&gt;</span>\r\n        INSERT INTO\r\n        `user_action_log`\r\n        (`login_id`,`session_id`,`time`,`ip_addr_v4`,`ip_addr_v6`,`os_name`,`os_version`,`bro_name`,`bro_version`,`request_body`,`description`,`other`,`method`)\r\n        VALUES\r\n        (#{loginId},#{sessionId},#{time},#{ipAddrV4},#{ipAddrV6},#{osName},#{osVersion},#{broName},#{broVersion},#{requestBody},#{description},#{other},#{method})\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">insert</span>&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!--分页列表：offset起始位置 limit每一页数据，DESC倒序排列--&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">select</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"findAll"</span> <span class="hljs-attribute">resultType</span>=<span class="hljs-value">"cn.acheng1314.domain.UserActionLog"</span> &gt;</span>\r\n        SELECT\r\n            *\r\n        FROM\r\n            `user_action_log`\r\n        ORDER BY\r\n            `id`\r\n        DESC\r\n        LIMIT #{offset}, #{limit}\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">select</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">mapper</span>&gt;</span></code></pre>\r\n上面我们可以看到Dao层基本上是简单的插入和分页查询，因为使用了Mysql数据库，所以我们使用 Select···Limit 起始位置,每页数量 这种方式进行列表查询。因为我们是需要查看最近信息，所以查询列表的数据是倒序排列的。\r\n\r\n现在我们的Dao层完成了，我们需要接着完成Service层实现外层调用的接口。Service层代码如下：\r\n<pre class="hljs cs"><code class="cs">@Service(<span class="hljs-string">"actionLogService"</span>)\r\n<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ActionLogServiceImpl</span> <span class="hljs-title">implements</span> <span class="hljs-title">ActionLogService</span> {\r\n\r\n    @Autowired\r\n    <span class="hljs-keyword">private</span> ActionLogDao actionLogDao;\r\n\r\n    <span class="hljs-keyword">private</span> UserActionLog userActionLog;\r\n\r\n    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span>(<span class="hljs-params">HttpServletRequest request</span>) </span>{\r\n        <span class="hljs-comment">//获取请求参数集合</span>\r\n        Map&lt;String, String[]&gt; <span class="hljs-keyword">params</span> = request.getParameterMap();\r\n        String queryString = <span class="hljs-string">""</span>;\r\n        <span class="hljs-keyword">for</span> (String key : <span class="hljs-keyword">params</span>.keySet()) {\r\n            String[] values = <span class="hljs-keyword">params</span>.<span class="hljs-keyword">get</span>(key);\r\n            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; values.length; i++) {\r\n                String <span class="hljs-keyword">value</span> = values[i];\r\n                queryString += key + <span class="hljs-string">"="</span> + <span class="hljs-keyword">value</span> + <span class="hljs-string">"&amp;"</span>;\r\n            }\r\n        }\r\n\r\n\r\n        userActionLog = <span class="hljs-keyword">new</span> UserActionLog();\r\n        userActionLog.setMethod(request.getMethod());   <span class="hljs-comment">//获取请求方式</span>\r\n        <span class="hljs-keyword">if</span> (request.getHeader(<span class="hljs-string">"x-forwarded-for"</span>) == <span class="hljs-keyword">null</span>) { <span class="hljs-comment">//获取请求IP</span>\r\n            userActionLog.setIpAddrV4(request.getRemoteAddr());\r\n        } <span class="hljs-keyword">else</span> {\r\n            userActionLog.setIpAddrV4(request.getHeader(<span class="hljs-string">"x-forwarded-for"</span>));\r\n        }\r\n        userActionLog.setOther(request.getHeader(<span class="hljs-string">"User-Agent"</span>));    <span class="hljs-comment">//获取user-agent</span>\r\n        userActionLog.setSessionId(request.getSession().getId());   <span class="hljs-comment">//获取用户操作的sessionID，必须</span>\r\n        userActionLog.setDescription(request.getRequestURI());  <span class="hljs-comment">//获取访问的地址</span>\r\n        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(queryString)) userActionLog.setRequestBody(queryString);   <span class="hljs-comment">//参数集合内容不为空存入数据库</span>\r\n\r\n        <span class="hljs-keyword">try</span> {\r\n            UserAgent agent = <span class="hljs-keyword">new</span> UserAgent(request.getHeader(<span class="hljs-string">"User-Agent"</span>));   <span class="hljs-comment">//载入user-agent</span>\r\n            userActionLog.setOsName(agent.getOperatingSystem().getName());  <span class="hljs-comment">//设定os名称</span>\r\n            userActionLog.setBroName(StringUtils.isEmpty(agent.getBrowser().getName()) ? <span class="hljs-string">""</span> : agent.getBrowser().getName()); <span class="hljs-comment">//设定浏览器名称</span>\r\n            userActionLog.setBroVersion(StringUtils.isEmpty(agent.getBrowserVersion().getVersion()) ? <span class="hljs-string">""</span> : agent.getBrowserVersion().getVersion());    <span class="hljs-comment">//设定浏览器版本</span>\r\n        } <span class="hljs-keyword">catch</span> (Exception e) {\r\n            e.printStackTrace();\r\n        } <span class="hljs-keyword">finally</span> {\r\n            actionLogDao.add(userActionLog);    <span class="hljs-comment">//UserAgent信息能否获取到，我们都需要存入数据库。</span>\r\n        }\r\n\r\n    }\r\n\r\n    @<span class="hljs-function">Deprecated\r\n    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span>(<span class="hljs-params">UserActionLog userActionLog</span>) throws Exception </span>{\r\n        <span class="hljs-comment">//其实在这里我们应该直接调用这个方法来实现功能。毕竟我们的原则是Service层是数据驱动服务。但是我们在这里写，也能实现功能</span>\r\n    }\r\n\r\n    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;UserActionLog&gt; <span class="hljs-title">findAll</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> pageNum, <span class="hljs-keyword">int</span> pageSize</span>) </span>{\r\n        <span class="hljs-comment">//因为数据库内容是从第一条出的数据，所以我们查询的 起始位置 = (页码-1) * 条数 + 1；</span>\r\n        pageNum -= <span class="hljs-number">1</span>;\r\n        <span class="hljs-keyword">return</span> actionLogDao.findAll(pageNum * pageSize + <span class="hljs-number">1</span>, pageSize);\r\n    }\r\n}</code></pre>\r\n好了，到现在我们的ActionLogServiceImpl也完成了。按照我们的需求来说，我们要在所有的请求上面加上一层访问日志监控，同时我们需要对外提供接口方便我们的查看数据。具体代码如下：\r\n<pre class="hljs scala"><code class="scala">&lt;!-- 下面的是拦截器：<span class="hljs-type">LoginHandlerInterceptor</span>.java --&gt;\r\npublic <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginHandlerInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HandlerInterceptorAdapter</span> {</span>\r\n    <span class="hljs-type">String</span> <span class="hljs-type">NO_INTERCEPTOR_PATH</span> = <span class="hljs-string">".*/((login)|(reg)|(logout)|(code)|(app)|(weixin)|(static)|(main)|(websocket)).*"</span>;       <span class="hljs-comment">//不对匹配该值的访问路径拦截（正则）</span>\r\n    <span class="hljs-annotation">@Autowired</span>\r\n    <span class="hljs-type">ActionLogServiceImpl</span> service;\r\n\r\n    <span class="hljs-annotation">@Override</span>\r\n    public boolean preHandle(<span class="hljs-type">HttpServletRequest</span> request, <span class="hljs-type">HttpServletResponse</span> response, <span class="hljs-type">Object</span> handler) <span class="hljs-keyword">throws</span> <span class="hljs-type">Exception</span> {\r\n        <span class="hljs-comment">// TODO Auto-generated method stub</span>\r\n        <span class="hljs-type">String</span> path = request.getServletPath();\r\n        <span class="hljs-keyword">if</span> (!path.matches(<span class="hljs-string">".*/((static)|(login)|(reg)).*"</span>)) service.add(request); <span class="hljs-comment">//不包含静态资源和登陆注册的请求</span>\r\n        <span class="hljs-keyword">if</span> (path.matches(<span class="hljs-type">NO_INTERCEPTOR_PATH</span>)) {    <span class="hljs-comment">//匹配正则表达式的不拦截</span>\r\n            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;\r\n        } <span class="hljs-keyword">else</span> {    <span class="hljs-comment">//不匹配的进行处理</span>\r\n            <span class="hljs-keyword">try</span> {\r\n                <span class="hljs-keyword">if</span> (request.getSession().getAttribute(<span class="hljs-string">"userInfo"</span>) == <span class="hljs-literal">null</span>) { <span class="hljs-comment">//session中是否存在用户信息，不存在则是未登录状态</span>\r\n                    response.sendRedirect(request.getContextPath() + <span class="hljs-string">"/mvc/login"</span>);\r\n                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;\r\n                }\r\n            } <span class="hljs-keyword">catch</span> (<span class="hljs-type">IOException</span> e) {\r\n                response.sendRedirect(request.getContextPath() + <span class="hljs-string">"/mvc/login"</span>);\r\n                e.printStackTrace();\r\n                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;\r\n            }\r\n        }\r\n        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <span class="hljs-comment">//默认是不拦截···当然具体的还看一些需求设计之类的</span>\r\n    }\r\n}\r\n\r\n&lt;!-- 下面的是行为日志的调用接口：<span class="hljs-type">ActionLogController</span>.java --&gt;\r\n<span class="hljs-annotation">@Controller</span>\r\n<span class="hljs-annotation">@RequestMapping</span>(<span class="hljs-string">"/actionLog"</span>)\r\npublic <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActionLogController</span> {</span>\r\n    <span class="hljs-annotation">@Autowired</span>\r\n    <span class="hljs-type">ActionLogService</span> actionLogService;\r\n\r\n    <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/findLogList"</span>\r\n            , produces = <span class="hljs-string">"application/json; charset=utf-8"</span>)\r\n    <span class="hljs-annotation">@ResponseBody</span>\r\n    public <span class="hljs-type">Object</span> findLog(<span class="hljs-annotation">@Param</span>(<span class="hljs-string">"pageNum"</span>) int pageNum, <span class="hljs-annotation">@Param</span>(<span class="hljs-string">"pageSize"</span>) int pageSize) {\r\n        <span class="hljs-keyword">if</span> (pageNum &lt;= <span class="hljs-number">0</span>) { <span class="hljs-comment">//错误页码默认跳转到第一页</span>\r\n            pageNum = <span class="hljs-number">1</span>;\r\n        }\r\n        <span class="hljs-keyword">if</span> (pageSize &lt;= <span class="hljs-number">0</span>) {    <span class="hljs-comment">//错误数据长度默认设置为10条</span>\r\n            pageSize = <span class="hljs-number">10</span>;\r\n        }\r\n\r\n        <span class="hljs-type">List</span>&lt;<span class="hljs-type">UserActionLog</span>&gt; result = actionLogService.findAll(pageNum, pageSize);\r\n        <span class="hljs-type">ResponseObj</span>&lt;<span class="hljs-type">UserActionLog</span>&gt; responseObj = <span class="hljs-keyword">new</span> <span class="hljs-type">ResponseObj</span>&lt;<span class="hljs-type">UserActionLog</span>&gt;();\r\n        <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span> || result.size() == <span class="hljs-number">0</span>) {\r\n            responseObj.setCode(<span class="hljs-type">ResponseObj</span>.<span class="hljs-type">EMPUTY</span>);\r\n            responseObj.setMsg(<span class="hljs-string">"查询结果为空"</span>);\r\n            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">GsonUtils</span>().toJson(responseObj);\r\n        }\r\n        responseObj.setCode(<span class="hljs-type">ResponseObj</span>.<span class="hljs-type">OK</span>);\r\n        responseObj.setMsg(<span class="hljs-string">"查询成功"</span>);\r\n        responseObj.setData(result);\r\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">GsonUtils</span>().toJson(responseObj);\r\n    }\r\n}</code></pre>\r\n上面设置完成后，我们运行项目，先输入错误的网址，大家会看到它先跳转到登录界面（因为现在的用户信息位空，所以默认需要用户登录），登录成功后，我们在浏览器中输入：\r\n<pre class="hljs objectivec"><code class="objectivec">http:<span class="hljs-comment">//localhost:8080/actionLog/findLogList?pageNum=1&amp;pageSize=10</span>\r\n<span class="hljs-comment">//因为我在Controller中没有配置具体的请求方法，那么我们这里gte和post都可以获取数据</span></code></pre>\r\n可以得到返回的json数据：\r\n<pre class="hljs json"><code class="json">{\r\n    "<span class="hljs-attribute">code</span>": <span class="hljs-value"><span class="hljs-number">1</span></span>,\r\n    "<span class="hljs-attribute">msg</span>": <span class="hljs-value"><span class="hljs-string">"查询成功"</span></span>,\r\n    "<span class="hljs-attribute">data</span>": <span class="hljs-value">[\r\n        {\r\n            "<span class="hljs-attribute">id</span>": <span class="hljs-number">212</span>,\r\n            "<span class="hljs-attribute">sessionId</span>": <span class="hljs-string">"A65E46FA47CBA4385FEA67594632FE2A"</span>,\r\n            "<span class="hljs-attribute">ipAddrV4</span>": <span class="hljs-string">"127.0.0.1"</span>,\r\n            "<span class="hljs-attribute">osName</span>": <span class="hljs-string">"Windows 10"</span>,\r\n            "<span class="hljs-attribute">broName</span>": <span class="hljs-string">"Microsoft Edge 14"</span>,\r\n            "<span class="hljs-attribute">broVersion</span>": <span class="hljs-string">"14.14393"</span>,\r\n            "<span class="hljs-attribute">description</span>": <span class="hljs-string">"/mvc/home"</span>,\r\n            "<span class="hljs-attribute">other</span>": <span class="hljs-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.79 Safari/537.36 Edge/14.14393"</span>,\r\n            "<span class="hljs-attribute">method</span>": <span class="hljs-string">"GET"</span>\r\n        }\r\n    ]\r\n</span>}</code></pre>\r\n然后我们可以设置其他的页码和条数测试，均可以通过，所以我们的分页的接口已经完成。但是，我们这样直接显示json肯定是不友好的，我们还需要找个地方显示，我把它显示在首页的默认位置，下一期再单独拿出一个页面来实现，具体如图：\r\n<div class="image-package imagebubble">\r\n\r\n<img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%85%AD-%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A1%B5-%E6%9C%80%E8%BF%91%E8%AE%BF%E9%97%AE%E5%88%97%E8%A1%A8%E6%88%AA%E5%9B%BE.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%85%AD-%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A1%B5-%E6%9C%80%E8%BF%91%E8%AE%BF%E9%97%AE%E5%88%97%E8%A1%A8%E6%88%AA%E5%9B%BE.png" />\r\n<div class="image-caption">ssm应用六-后台主页-最近访问列表截图</div>\r\n</div>\r\n首先我们需要先把以前列表找到，在home.jsp中如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">table</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-table   am-text-nowrap"</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">thead</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">tr</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>#<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>项目名称<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>开始时间<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>结束时间<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>状态<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>责任人<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">tr</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">thead</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">tbody</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">tr</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>Adminto Admin v1<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>01/01/2016<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>26/04/2016<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"label label-danger"</span>&gt;</span>已发布<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>Coderthemes<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">tr</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">tr</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>Adminto Frontend v1<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>01/01/2016<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>26/04/2016<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"label label-success"</span>&gt;</span>已发布<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>Adminto admin<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">tr</span>&gt;</span></code></pre>\r\n这就是以前的代码片段，我们不需要说什么精通前端，但是最基本的能看懂，能百度到解决方案也是不错的。\r\n\r\n<strong>注意：由于妹子UI封装了列表，然后我在js中要追加列表内容的时候，始终找不到Body一直报错null。解决办法是给tbody加上ID，然后直接给它追加内容。</strong>\r\n\r\n我们先删除原来tbody的内容，然后对应着格式js添加,如下：\r\n<pre class="hljs xml"><code class="xml">$("#log-table-body").append(    //log-table-body是我们列表的body的ID\r\n    "<span class="hljs-tag">&lt;<span class="hljs-title">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>" + data.data[i].id + "<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>"\r\n    + data.data[i].ipAddrV4 + "<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>01/01/2016<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>"\r\n    + data.data[i].osName + "<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">\\"label</span> <span class="hljs-attribute">label-danger</span>\\"&gt;</span>"\r\n    + data.data[i].description + "<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>"\r\n    + data.data[i].sessionId + "<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>"\r\n    + data.data[i].broName + "<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">tr</span>&gt;</span>");\r\n//注意：格式（标签结构）一定要和以前的一样，否则列表会走样的==</code></pre>\r\n我们知道应该怎么追加列表条目了，现在我们需要的是实现追加。按照代码结构观察我们可以发现，我们要想实现数据自动装载到页面上面，我们需要让程序顺序执行就对了。但是前面我们的JS是写在头部的，如果说自动执行肯定会找不到控件，所以我们需要让自动加载在页面完成后加载。如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>\r\n<span class="hljs-comment">&lt;!-- 注意了，我这里是把自动执行的js代码放到 html加载完成后的 --&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"application/javascript"</span>&gt;</span><span class="javascript">\r\n    $.ajax({\r\n        type: <span class="hljs-string">"GET"</span>,\r\n        url: <span class="hljs-string">''&lt;%=request.getContextPath()%&gt;/actionLog/findLogList?pageNum=1&amp;pageSize=10''</span>,\r\n        dataType: <span class="hljs-string">''json''</span>,   <span class="hljs-comment">//当这里指定为json的时候，获取到了数据后会自己解析的，只需要 返回值.字段名称 就能使用了</span>\r\n        cache: <span class="hljs-literal">false</span>,\r\n        success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{\r\n            <span class="hljs-keyword">if</span> (data.code == <span class="hljs-number">1</span>) {\r\n                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) {\r\n                    $(<span class="hljs-string">"#log-table-body"</span>).append(<span class="hljs-string">"&lt;tr&gt;&lt;td&gt;"</span> + data.data[i].id + <span class="hljs-string">"&lt;/td&gt;&lt;td&gt;"</span>\r\n                            + data.data[i].ipAddrV4 + <span class="hljs-string">"&lt;/td&gt;&lt;td&gt;01/01/2016&lt;/td&gt;&lt;td&gt;"</span>\r\n                            + data.data[i].osName + <span class="hljs-string">"&lt;/td&gt;&lt;td&gt;&lt;span class=\\"label label-danger\\"&gt;"</span>\r\n                            + data.data[i].description + <span class="hljs-string">"&lt;/span&gt;&lt;/td&gt;&lt;td&gt;"</span>\r\n                            + data.data[i].sessionId + <span class="hljs-string">"&lt;/td&gt;&lt;td&gt;"</span>\r\n                            + data.data[i].broName + <span class="hljs-string">"&lt;/td&gt;&lt;/tr&gt;"</span>);\r\n                }\r\n            }\r\n        }\r\n    });\r\n</span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span></code></pre>\r\n\r\n<hr />\r\n\r\n总结：\r\n<ul>\r\n 	<li>日志记录</li>\r\n 	<li>列表输出</li>\r\n 	<li>数据库查询分页</li>\r\n 	<li>web页面追加数据</li>\r\n 	<li>js位置对web页面的影响</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n仓库管理系统，应该快要完结了，后面做完整的博客后端+web前端(模版)+Android客户端。现在的仓库管理系统可以明显看到是为了实现而实现，至于所谓的程序设计，还有很多地方没使用。后面开发的时候，尽量使用程序设计的模式来实现。后面会专门针对这个仓库管理系统进行总结，好的不好的，都要一一找出来，在博客系统的实现上面尽量简单优越。\r\n\r\n只有不断的审视自己，才能找到自己的不足，并且长期前进。\r\n\r\n2016-10-30', '[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（六）', '', 'publish', 'open', 'open', '', '%e6%89%8b%e6%8a%8a%e6%89%8b%e6%95%99%e7%a8%8bjavaweb%e4%bc%98%e9%9b%85%e7%9a%84springmvcmybatis%e5%ba%94%e7%94%a8%ef%bc%88%e5%85%ad%ef%bc%89', '', '', '2016-10-30 21:16:17', '2016-10-30 13:16:17', '', 0, 'http://acheng1314.cn/?p=272', 0, 'post', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(273, 1, '2016-10-30 21:13:51', '2016-10-30 13:13:51', '<h4></h4>\r\n第六期文章也到了，其实这应该算是第五期续的。毕竟上次的列表分页还没做。\r\n\r\n后面可能还有几期，我们的仓库管理系统会结束的。按照老规矩，结束的时候肯定有项目总结解析。\r\n\r\n项目github地址：<a href="https://github.com/pc859107393/SpringMvcMybatis" target="_blank">https://github.com/pc859107393/SpringMvcMybatis</a>\r\n\r\n我的简书首页是：<a href="http://www.jianshu.com/users/86b79c50cfb3/latest_articles" target="_blank">http://www.jianshu.com/users/86b79c50cfb3/latest_articles</a>\r\n\r\n上一期是：<a href="http://www.jianshu.com/p/3c5888f30996" target="_blank">优雅的SpringMvc+Mybatis应用（五）</a>\r\n\r\n扫描下面二维码加入交流QQ群：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/%E8%A1%8C%E8%B5%B0%E7%9A%84java%E5%85%A8%E6%A0%88%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/%E8%A1%8C%E8%B5%B0%E7%9A%84java%E5%85%A8%E6%A0%88%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81.png" />\r\n<div class="image-caption">行走的java全栈</div>\r\n</div>\r\n<h4>工具</h4>\r\n<ul>\r\n 	<li>IDE为<strong>idea16</strong></li>\r\n 	<li>JDK环境为<strong>1.8</strong></li>\r\n 	<li>gradle构建，版本：2.14.1</li>\r\n 	<li>Mysql版本为<strong>5.5.27</strong></li>\r\n 	<li>Tomcat版本为<strong>7.0.52</strong></li>\r\n 	<li>流程图绘制（xmind）</li>\r\n</ul>\r\n<h4>本期目标</h4>\r\n<ul>\r\n 	<li>列表分页</li>\r\n</ul>\r\n<h4>列表分页</h4>\r\n前面很早就说了列表分页，一直没怎么做，这一次就做一个登录的主机信息的分页。\r\n\r\n首先我们分析一下我们的功能设定：\r\n<ul>\r\n 	<li>记录基本主机信息\r\n<ul>\r\n 	<li>操作系统</li>\r\n 	<li>IP地址</li>\r\n 	<li>访问的浏览器内核</li>\r\n</ul>\r\n</li>\r\n 	<li>Session的Id</li>\r\n 	<li>发生时间</li>\r\n 	<li>其他信息</li>\r\n</ul>\r\n关于上面的东西，我们可以预设很多字段，唯一的注意的地方是我这边把记录行为日志的表做了个自增的ID。我这边是所有的请求目前都是加入了信息记录，实际项目中可不能这么搞（根据需求搞事情，搞事情，搞事情）。\r\n\r\n既然我们都说过我们是记录用户登录信息的列表，那么我们需要先获取用户的请求内部相关的信息。也就是说我们的这个信息获取是基于用户请求设定的，那么解决思路就是从拦截器来实现。\r\n\r\n既然上面我们分析了需要记录的信息，那么接着的思路应该是什么呢？\r\n<ul>\r\n 	<li>根据数据需求建表</li>\r\n 	<li>完成存储数据业务\r\n<ul>\r\n 	<li>Dao → Service → HandlerInterceptor（拦截器）</li>\r\n</ul>\r\n</li>\r\n 	<li>单元测试\r\n<ul>\r\n 	<li>因为我前面提过，我们尽量把service作为简单的数据驱动，也就是说不涉及到复杂事务，我们尽量写简单的service。</li>\r\n 	<li>简单的service情况下， 我们一个service对应一个dao，则一定程度上可以少写一点单元测试==、</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n日志获取大概流程图如下所示：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%85%AD-%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A1%B5-%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E6%B5%81%E7%A8%8B.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%85%AD-%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A1%B5-%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E6%B5%81%E7%A8%8B.png" />\r\n<div class="image-caption">ssm应用六-后台主页-日志采集流程</div>\r\n</div>\r\n日志列表输出大概流程图如下所示：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%85%AD-%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A1%B5-%E5%88%86%E9%A1%B5%E5%88%97%E8%A1%A8%E6%B5%81%E7%A8%8B.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%85%AD-%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A1%B5-%E5%88%86%E9%A1%B5%E5%88%97%E8%A1%A8%E6%B5%81%E7%A8%8B.png" />\r\n<div class="image-caption">ssm应用六-后台主页-分页列表流程</div>\r\n</div>\r\n具体的一些细节的东西没必要追究，先把数据库表建立起来，数据库：warehouse，建表代码如下：\r\n<pre class="hljs sql"><code class="sql"> <span class="hljs-operator"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`user_action_log`</span> (\r\n <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''自增ID''</span>,\r\n <span class="hljs-string">`login_id`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''登录ID''</span>,\r\n <span class="hljs-string">`session_id`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">45</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''访问session的ID\\r\\n''</span>,\r\n <span class="hljs-string">`time`</span> datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''操作时间''</span>,\r\n <span class="hljs-string">`ip_addr_v4`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">15</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''ipV4地址''</span>,\r\n <span class="hljs-string">`ip_addr_v6`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''ipv6地址\\r\\n''</span>,\r\n <span class="hljs-string">`os_name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''操作系统名称''</span>,\r\n <span class="hljs-string">`os_version`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,\r\n <span class="hljs-string">`bro_name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''浏览器名称''</span>,\r\n <span class="hljs-string">`bro_version`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''浏览器版本''</span>,\r\n <span class="hljs-string">`request_body`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">60</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''请求体信息''</span>,\r\n <span class="hljs-string">`description`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''操作描述''</span>,\r\n <span class="hljs-string">`other`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">150</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''其他描述''</span>,\r\n <span class="hljs-string">`method`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''HTTP请求方法''</span>,\r\n PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)\r\n ) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> AUTO_INCREMENT=<span class="hljs-number">109</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8 <span class="hljs-keyword">COMMENT</span>=<span class="hljs-string">''行为日志表''</span>;</span></code></pre>\r\n我们数据库建表完成后，只需要写对应的Dao层，按照我们前面的思路，那就是对应着写Bean → Dao → Service。然后Service提供给其他地方调用。\r\n\r\n既然如此，我们先实现我们的Bean和Dao层，因为我们在项目中使用了Mybatis这个持久化框架，所以我们需要去实现Mybatis的Mapper文件对应Dao层的接口就行，具体的代码如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-comment">&lt;!--下面是Bean：UserActionLog--&gt;</span>\r\npublic class UserActionLog implements Serializable {\r\n\r\n    private long id;\r\n    private String loginId, sessionId, ipAddrV4, ipAddrV6, osName, osVersion, broName, broVersion, requestBody, description, other, method;\r\n    private Date time;\r\n    //省略get和set以及toString方法\r\n}\r\n\r\n<span class="hljs-comment">&lt;!--下面是Dao层：ActionLogDao.java--&gt;</span>\r\npublic interface ActionLogDao extends Dao<span class="hljs-tag">&lt;<span class="hljs-title">UserActionLog</span>&gt;</span> {\r\n\r\n    int add(UserActionLog userActionLog);\r\n\r\n    UserActionLog findOneById(Serializable Id);\r\n\r\n    /**\r\n     * 分页查询\r\n     * @param offset    起始位置\r\n     * @param limit     每页数量\r\n     * @return\r\n     */\r\n    List<span class="hljs-tag">&lt;<span class="hljs-title">UserActionLog</span>&gt;</span> findAll(@Param("offset") int offset, @Param("limit") int limit);\r\n}\r\n\r\n<span class="hljs-comment">&lt;!--下面是mapper：ActionLogDao.xml--&gt;</span>\r\n<span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span>\r\n<span class="hljs-doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"\r\n        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">mapper</span> <span class="hljs-attribute">namespace</span>=<span class="hljs-value">"cn.acheng1314.dao.ActionLogDao"</span>&gt;</span>\r\n    <span class="hljs-comment">&lt;!--增加语句--&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">insert</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"add"</span> <span class="hljs-attribute">parameterType</span>=<span class="hljs-value">"cn.acheng1314.domain.UserActionLog"</span>&gt;</span>\r\n        INSERT INTO\r\n        `user_action_log`\r\n        (`login_id`,`session_id`,`time`,`ip_addr_v4`,`ip_addr_v6`,`os_name`,`os_version`,`bro_name`,`bro_version`,`request_body`,`description`,`other`,`method`)\r\n        VALUES\r\n        (#{loginId},#{sessionId},#{time},#{ipAddrV4},#{ipAddrV6},#{osName},#{osVersion},#{broName},#{broVersion},#{requestBody},#{description},#{other},#{method})\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">insert</span>&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!--分页列表：offset起始位置 limit每一页数据，DESC倒序排列--&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">select</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"findAll"</span> <span class="hljs-attribute">resultType</span>=<span class="hljs-value">"cn.acheng1314.domain.UserActionLog"</span> &gt;</span>\r\n        SELECT\r\n            *\r\n        FROM\r\n            `user_action_log`\r\n        ORDER BY\r\n            `id`\r\n        DESC\r\n        LIMIT #{offset}, #{limit}\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">select</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">mapper</span>&gt;</span></code></pre>\r\n上面我们可以看到Dao层基本上是简单的插入和分页查询，因为使用了Mysql数据库，所以我们使用 Select···Limit 起始位置,每页数量 这种方式进行列表查询。因为我们是需要查看最近信息，所以查询列表的数据是倒序排列的。\r\n\r\n现在我们的Dao层完成了，我们需要接着完成Service层实现外层调用的接口。Service层代码如下：\r\n<pre class="hljs cs"><code class="cs">@Service(<span class="hljs-string">"actionLogService"</span>)\r\n<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ActionLogServiceImpl</span> <span class="hljs-title">implements</span> <span class="hljs-title">ActionLogService</span> {\r\n\r\n    @Autowired\r\n    <span class="hljs-keyword">private</span> ActionLogDao actionLogDao;\r\n\r\n    <span class="hljs-keyword">private</span> UserActionLog userActionLog;\r\n\r\n    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span>(<span class="hljs-params">HttpServletRequest request</span>) </span>{\r\n        <span class="hljs-comment">//获取请求参数集合</span>\r\n        Map&lt;String, String[]&gt; <span class="hljs-keyword">params</span> = request.getParameterMap();\r\n        String queryString = <span class="hljs-string">""</span>;\r\n        <span class="hljs-keyword">for</span> (String key : <span class="hljs-keyword">params</span>.keySet()) {\r\n            String[] values = <span class="hljs-keyword">params</span>.<span class="hljs-keyword">get</span>(key);\r\n            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; values.length; i++) {\r\n                String <span class="hljs-keyword">value</span> = values[i];\r\n                queryString += key + <span class="hljs-string">"="</span> + <span class="hljs-keyword">value</span> + <span class="hljs-string">"&amp;"</span>;\r\n            }\r\n        }\r\n\r\n\r\n        userActionLog = <span class="hljs-keyword">new</span> UserActionLog();\r\n        userActionLog.setMethod(request.getMethod());   <span class="hljs-comment">//获取请求方式</span>\r\n        <span class="hljs-keyword">if</span> (request.getHeader(<span class="hljs-string">"x-forwarded-for"</span>) == <span class="hljs-keyword">null</span>) { <span class="hljs-comment">//获取请求IP</span>\r\n            userActionLog.setIpAddrV4(request.getRemoteAddr());\r\n        } <span class="hljs-keyword">else</span> {\r\n            userActionLog.setIpAddrV4(request.getHeader(<span class="hljs-string">"x-forwarded-for"</span>));\r\n        }\r\n        userActionLog.setOther(request.getHeader(<span class="hljs-string">"User-Agent"</span>));    <span class="hljs-comment">//获取user-agent</span>\r\n        userActionLog.setSessionId(request.getSession().getId());   <span class="hljs-comment">//获取用户操作的sessionID，必须</span>\r\n        userActionLog.setDescription(request.getRequestURI());  <span class="hljs-comment">//获取访问的地址</span>\r\n        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(queryString)) userActionLog.setRequestBody(queryString);   <span class="hljs-comment">//参数集合内容不为空存入数据库</span>\r\n\r\n        <span class="hljs-keyword">try</span> {\r\n            UserAgent agent = <span class="hljs-keyword">new</span> UserAgent(request.getHeader(<span class="hljs-string">"User-Agent"</span>));   <span class="hljs-comment">//载入user-agent</span>\r\n            userActionLog.setOsName(agent.getOperatingSystem().getName());  <span class="hljs-comment">//设定os名称</span>\r\n            userActionLog.setBroName(StringUtils.isEmpty(agent.getBrowser().getName()) ? <span class="hljs-string">""</span> : agent.getBrowser().getName()); <span class="hljs-comment">//设定浏览器名称</span>\r\n            userActionLog.setBroVersion(StringUtils.isEmpty(agent.getBrowserVersion().getVersion()) ? <span class="hljs-string">""</span> : agent.getBrowserVersion().getVersion());    <span class="hljs-comment">//设定浏览器版本</span>\r\n        } <span class="hljs-keyword">catch</span> (Exception e) {\r\n            e.printStackTrace();\r\n        } <span class="hljs-keyword">finally</span> {\r\n            actionLogDao.add(userActionLog);    <span class="hljs-comment">//UserAgent信息能否获取到，我们都需要存入数据库。</span>\r\n        }\r\n\r\n    }\r\n\r\n    @<span class="hljs-function">Deprecated\r\n    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span>(<span class="hljs-params">UserActionLog userActionLog</span>) throws Exception </span>{\r\n        <span class="hljs-comment">//其实在这里我们应该直接调用这个方法来实现功能。毕竟我们的原则是Service层是数据驱动服务。但是我们在这里写，也能实现功能</span>\r\n    }\r\n\r\n    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;UserActionLog&gt; <span class="hljs-title">findAll</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> pageNum, <span class="hljs-keyword">int</span> pageSize</span>) </span>{\r\n        <span class="hljs-comment">//因为数据库内容是从第一条出的数据，所以我们查询的 起始位置 = (页码-1) * 条数 + 1；</span>\r\n        pageNum -= <span class="hljs-number">1</span>;\r\n        <span class="hljs-keyword">return</span> actionLogDao.findAll(pageNum * pageSize + <span class="hljs-number">1</span>, pageSize);\r\n    }\r\n}</code></pre>\r\n好了，到现在我们的ActionLogServiceImpl也完成了。按照我们的需求来说，我们要在所有的请求上面加上一层访问日志监控，同时我们需要对外提供接口方便我们的查看数据。具体代码如下：\r\n<pre class="hljs scala"><code class="scala">&lt;!-- 下面的是拦截器：<span class="hljs-type">LoginHandlerInterceptor</span>.java --&gt;\r\npublic <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginHandlerInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HandlerInterceptorAdapter</span> {</span>\r\n    <span class="hljs-type">String</span> <span class="hljs-type">NO_INTERCEPTOR_PATH</span> = <span class="hljs-string">".*/((login)|(reg)|(logout)|(code)|(app)|(weixin)|(static)|(main)|(websocket)).*"</span>;       <span class="hljs-comment">//不对匹配该值的访问路径拦截（正则）</span>\r\n    <span class="hljs-annotation">@Autowired</span>\r\n    <span class="hljs-type">ActionLogServiceImpl</span> service;\r\n\r\n    <span class="hljs-annotation">@Override</span>\r\n    public boolean preHandle(<span class="hljs-type">HttpServletRequest</span> request, <span class="hljs-type">HttpServletResponse</span> response, <span class="hljs-type">Object</span> handler) <span class="hljs-keyword">throws</span> <span class="hljs-type">Exception</span> {\r\n        <span class="hljs-comment">// TODO Auto-generated method stub</span>\r\n        <span class="hljs-type">String</span> path = request.getServletPath();\r\n        <span class="hljs-keyword">if</span> (!path.matches(<span class="hljs-string">".*/((static)|(login)|(reg)).*"</span>)) service.add(request); <span class="hljs-comment">//不包含静态资源和登陆注册的请求</span>\r\n        <span class="hljs-keyword">if</span> (path.matches(<span class="hljs-type">NO_INTERCEPTOR_PATH</span>)) {    <span class="hljs-comment">//匹配正则表达式的不拦截</span>\r\n            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;\r\n        } <span class="hljs-keyword">else</span> {    <span class="hljs-comment">//不匹配的进行处理</span>\r\n            <span class="hljs-keyword">try</span> {\r\n                <span class="hljs-keyword">if</span> (request.getSession().getAttribute(<span class="hljs-string">"userInfo"</span>) == <span class="hljs-literal">null</span>) { <span class="hljs-comment">//session中是否存在用户信息，不存在则是未登录状态</span>\r\n                    response.sendRedirect(request.getContextPath() + <span class="hljs-string">"/mvc/login"</span>);\r\n                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;\r\n                }\r\n            } <span class="hljs-keyword">catch</span> (<span class="hljs-type">IOException</span> e) {\r\n                response.sendRedirect(request.getContextPath() + <span class="hljs-string">"/mvc/login"</span>);\r\n                e.printStackTrace();\r\n                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;\r\n            }\r\n        }\r\n        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <span class="hljs-comment">//默认是不拦截···当然具体的还看一些需求设计之类的</span>\r\n    }\r\n}\r\n\r\n&lt;!-- 下面的是行为日志的调用接口：<span class="hljs-type">ActionLogController</span>.java --&gt;\r\n<span class="hljs-annotation">@Controller</span>\r\n<span class="hljs-annotation">@RequestMapping</span>(<span class="hljs-string">"/actionLog"</span>)\r\npublic <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActionLogController</span> {</span>\r\n    <span class="hljs-annotation">@Autowired</span>\r\n    <span class="hljs-type">ActionLogService</span> actionLogService;\r\n\r\n    <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/findLogList"</span>\r\n            , produces = <span class="hljs-string">"application/json; charset=utf-8"</span>)\r\n    <span class="hljs-annotation">@ResponseBody</span>\r\n    public <span class="hljs-type">Object</span> findLog(<span class="hljs-annotation">@Param</span>(<span class="hljs-string">"pageNum"</span>) int pageNum, <span class="hljs-annotation">@Param</span>(<span class="hljs-string">"pageSize"</span>) int pageSize) {\r\n        <span class="hljs-keyword">if</span> (pageNum &lt;= <span class="hljs-number">0</span>) { <span class="hljs-comment">//错误页码默认跳转到第一页</span>\r\n            pageNum = <span class="hljs-number">1</span>;\r\n        }\r\n        <span class="hljs-keyword">if</span> (pageSize &lt;= <span class="hljs-number">0</span>) {    <span class="hljs-comment">//错误数据长度默认设置为10条</span>\r\n            pageSize = <span class="hljs-number">10</span>;\r\n        }\r\n\r\n        <span class="hljs-type">List</span>&lt;<span class="hljs-type">UserActionLog</span>&gt; result = actionLogService.findAll(pageNum, pageSize);\r\n        <span class="hljs-type">ResponseObj</span>&lt;<span class="hljs-type">UserActionLog</span>&gt; responseObj = <span class="hljs-keyword">new</span> <span class="hljs-type">ResponseObj</span>&lt;<span class="hljs-type">UserActionLog</span>&gt;();\r\n        <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span> || result.size() == <span class="hljs-number">0</span>) {\r\n            responseObj.setCode(<span class="hljs-type">ResponseObj</span>.<span class="hljs-type">EMPUTY</span>);\r\n            responseObj.setMsg(<span class="hljs-string">"查询结果为空"</span>);\r\n            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">GsonUtils</span>().toJson(responseObj);\r\n        }\r\n        responseObj.setCode(<span class="hljs-type">ResponseObj</span>.<span class="hljs-type">OK</span>);\r\n        responseObj.setMsg(<span class="hljs-string">"查询成功"</span>);\r\n        responseObj.setData(result);\r\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">GsonUtils</span>().toJson(responseObj);\r\n    }\r\n}</code></pre>\r\n上面设置完成后，我们运行项目，先输入错误的网址，大家会看到它先跳转到登录界面（因为现在的用户信息位空，所以默认需要用户登录），登录成功后，我们在浏览器中输入：\r\n<pre class="hljs objectivec"><code class="objectivec">http:<span class="hljs-comment">//localhost:8080/actionLog/findLogList?pageNum=1&amp;pageSize=10</span>\r\n<span class="hljs-comment">//因为我在Controller中没有配置具体的请求方法，那么我们这里gte和post都可以获取数据</span></code></pre>\r\n可以得到返回的json数据：\r\n<pre class="hljs json"><code class="json">{\r\n    "<span class="hljs-attribute">code</span>": <span class="hljs-value"><span class="hljs-number">1</span></span>,\r\n    "<span class="hljs-attribute">msg</span>": <span class="hljs-value"><span class="hljs-string">"查询成功"</span></span>,\r\n    "<span class="hljs-attribute">data</span>": <span class="hljs-value">[\r\n        {\r\n            "<span class="hljs-attribute">id</span>": <span class="hljs-number">212</span>,\r\n            "<span class="hljs-attribute">sessionId</span>": <span class="hljs-string">"A65E46FA47CBA4385FEA67594632FE2A"</span>,\r\n            "<span class="hljs-attribute">ipAddrV4</span>": <span class="hljs-string">"127.0.0.1"</span>,\r\n            "<span class="hljs-attribute">osName</span>": <span class="hljs-string">"Windows 10"</span>,\r\n            "<span class="hljs-attribute">broName</span>": <span class="hljs-string">"Microsoft Edge 14"</span>,\r\n            "<span class="hljs-attribute">broVersion</span>": <span class="hljs-string">"14.14393"</span>,\r\n            "<span class="hljs-attribute">description</span>": <span class="hljs-string">"/mvc/home"</span>,\r\n            "<span class="hljs-attribute">other</span>": <span class="hljs-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.79 Safari/537.36 Edge/14.14393"</span>,\r\n            "<span class="hljs-attribute">method</span>": <span class="hljs-string">"GET"</span>\r\n        }\r\n    ]\r\n</span>}</code></pre>\r\n然后我们可以设置其他的页码和条数测试，均可以通过，所以我们的分页的接口已经完成。但是，我们这样直接显示json肯定是不友好的，我们还需要找个地方显示，我把它显示在首页的默认位置，下一期再单独拿出一个页面来实现，具体如图：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%85%AD-%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A1%B5-%E6%9C%80%E8%BF%91%E8%AE%BF%E9%97%AE%E5%88%97%E8%A1%A8%E6%88%AA%E5%9B%BE.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%85%AD-%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A1%B5-%E6%9C%80%E8%BF%91%E8%AE%BF%E9%97%AE%E5%88%97%E8%A1%A8%E6%88%AA%E5%9B%BE.png" />\r\n<div class="image-caption">ssm应用六-后台主页-最近访问列表截图</div>\r\n</div>\r\n首先我们需要先把以前列表找到，在home.jsp中如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">table</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-table   am-text-nowrap"</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">thead</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">tr</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>#<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>项目名称<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>开始时间<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>结束时间<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>状态<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>责任人<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">tr</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">thead</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">tbody</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">tr</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>Adminto Admin v1<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>01/01/2016<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>26/04/2016<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"label label-danger"</span>&gt;</span>已发布<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>Coderthemes<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">tr</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">tr</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>Adminto Frontend v1<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>01/01/2016<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>26/04/2016<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"label label-success"</span>&gt;</span>已发布<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>Adminto admin<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">tr</span>&gt;</span></code></pre>\r\n这就是以前的代码片段，我们不需要说什么精通前端，但是最基本的能看懂，能百度到解决方案也是不错的。\r\n\r\n<strong>注意：由于妹子UI封装了列表，然后我在js中要追加列表内容的时候，始终找不到Body一直报错null。解决办法是给tbody加上ID，然后直接给它追加内容。</strong>\r\n\r\n我们先删除原来tbody的内容，然后对应着格式js添加,如下：\r\n<pre class="hljs xml"><code class="xml">$("#log-table-body").append(    //log-table-body是我们列表的body的ID\r\n    "<span class="hljs-tag">&lt;<span class="hljs-title">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>" + data.data[i].id + "<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>"\r\n    + data.data[i].ipAddrV4 + "<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>01/01/2016<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>"\r\n    + data.data[i].osName + "<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">\\"label</span> <span class="hljs-attribute">label-danger</span>\\"&gt;</span>"\r\n    + data.data[i].description + "<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>"\r\n    + data.data[i].sessionId + "<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>"\r\n    + data.data[i].broName + "<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">tr</span>&gt;</span>");\r\n//注意：格式（标签结构）一定要和以前的一样，否则列表会走样的==</code></pre>\r\n我们知道应该怎么追加列表条目了，现在我们需要的是实现追加。按照代码结构观察我们可以发现，我们要想实现数据自动装载到页面上面，我们需要让程序顺序执行就对了。但是前面我们的JS是写在头部的，如果说自动执行肯定会找不到控件，所以我们需要让自动加载在页面完成后加载。如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>\r\n<span class="hljs-comment">&lt;!-- 注意了，我这里是把自动执行的js代码放到 html加载完成后的 --&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"application/javascript"</span>&gt;</span><span class="javascript">\r\n    $.ajax({\r\n        type: <span class="hljs-string">"GET"</span>,\r\n        url: <span class="hljs-string">''&lt;%=request.getContextPath()%&gt;/actionLog/findLogList?pageNum=1&amp;pageSize=10''</span>,\r\n        dataType: <span class="hljs-string">''json''</span>,   <span class="hljs-comment">//当这里指定为json的时候，获取到了数据后会自己解析的，只需要 返回值.字段名称 就能使用了</span>\r\n        cache: <span class="hljs-literal">false</span>,\r\n        success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{\r\n            <span class="hljs-keyword">if</span> (data.code == <span class="hljs-number">1</span>) {\r\n                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) {\r\n                    $(<span class="hljs-string">"#log-table-body"</span>).append(<span class="hljs-string">"&lt;tr&gt;&lt;td&gt;"</span> + data.data[i].id + <span class="hljs-string">"&lt;/td&gt;&lt;td&gt;"</span>\r\n                            + data.data[i].ipAddrV4 + <span class="hljs-string">"&lt;/td&gt;&lt;td&gt;01/01/2016&lt;/td&gt;&lt;td&gt;"</span>\r\n                            + data.data[i].osName + <span class="hljs-string">"&lt;/td&gt;&lt;td&gt;&lt;span class=\\"label label-danger\\"&gt;"</span>\r\n                            + data.data[i].description + <span class="hljs-string">"&lt;/span&gt;&lt;/td&gt;&lt;td&gt;"</span>\r\n                            + data.data[i].sessionId + <span class="hljs-string">"&lt;/td&gt;&lt;td&gt;"</span>\r\n                            + data.data[i].broName + <span class="hljs-string">"&lt;/td&gt;&lt;/tr&gt;"</span>);\r\n                }\r\n            }\r\n        }\r\n    });\r\n</span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span></code></pre>\r\n\r\n<hr />\r\n\r\n总结：\r\n<ul>\r\n 	<li>日志记录</li>\r\n 	<li>列表输出</li>\r\n 	<li>数据库查询分页</li>\r\n 	<li>web页面追加数据</li>\r\n 	<li>js位置对web页面的影响</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n仓库管理系统，应该快要完结了，后面做完整的博客后端+web前端(模版)+Android客户端。现在的仓库管理系统可以明显看到是为了实现而实现，至于所谓的程序设计，还有很多地方没使用。后面开发的时候，尽量使用程序设计的模式来实现。后面会专门针对这个仓库管理系统进行总结，好的不好的，都要一一找出来，在博客系统的实现上面尽量简单优越。\r\n\r\n只有不断的审视自己，才能找到自己的不足，并且长期前进。\r\n\r\n2016-10-30', '[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（六）', '', 'inherit', 'closed', 'closed', '', '272-revision-v1', '', '', '2016-10-30 21:13:51', '2016-10-30 13:13:51', '', 272, 'http://acheng1314.cn/?p=273', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(274, 1, '2016-10-30 21:16:17', '2016-10-30 13:16:17', '<h4></h4>\r\n第六期文章也到了，其实这应该算是第五期续的。毕竟上次的列表分页还没做。\r\n\r\n后面可能还有几期，我们的仓库管理系统会结束的。按照老规矩，结束的时候肯定有项目总结解析。\r\n\r\n项目github地址：<a href="https://github.com/pc859107393/SpringMvcMybatis" target="_blank">https://github.com/pc859107393/SpringMvcMybatis</a>\r\n\r\n我的简书首页是：<a href="http://www.jianshu.com/users/86b79c50cfb3/latest_articles" target="_blank">http://www.jianshu.com/users/86b79c50cfb3/latest_articles</a>\r\n\r\n上一期是：<a href="http://www.jianshu.com/p/3c5888f30996" target="_blank">优雅的SpringMvc+Mybatis应用（五）</a>\r\n\r\n扫描下面二维码加入交流QQ群：\r\n<div class="image-package imagebubble">\r\n\r\n<img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/%E8%A1%8C%E8%B5%B0%E7%9A%84java%E5%85%A8%E6%A0%88%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/%E8%A1%8C%E8%B5%B0%E7%9A%84java%E5%85%A8%E6%A0%88%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81.png" />\r\n<div class="image-caption">行走的java全栈</div>\r\n</div>\r\n<h4>工具</h4>\r\n<ul>\r\n 	<li>IDE为<strong>idea16</strong></li>\r\n 	<li>JDK环境为<strong>1.8</strong></li>\r\n 	<li>gradle构建，版本：2.14.1</li>\r\n 	<li>Mysql版本为<strong>5.5.27</strong></li>\r\n 	<li>Tomcat版本为<strong>7.0.52</strong></li>\r\n 	<li>流程图绘制（xmind）</li>\r\n</ul>\r\n<h4>本期目标</h4>\r\n<ul>\r\n 	<li>列表分页</li>\r\n</ul>\r\n<h4>列表分页</h4>\r\n前面很早就说了列表分页，一直没怎么做，这一次就做一个登录的主机信息的分页。\r\n\r\n首先我们分析一下我们的功能设定：\r\n<ul>\r\n 	<li>记录基本主机信息\r\n<ul>\r\n 	<li>操作系统</li>\r\n 	<li>IP地址</li>\r\n 	<li>访问的浏览器内核</li>\r\n</ul>\r\n</li>\r\n 	<li>Session的Id</li>\r\n 	<li>发生时间</li>\r\n 	<li>其他信息</li>\r\n</ul>\r\n关于上面的东西，我们可以预设很多字段，唯一的注意的地方是我这边把记录行为日志的表做了个自增的ID。我这边是所有的请求目前都是加入了信息记录，实际项目中可不能这么搞（根据需求搞事情，搞事情，搞事情）。\r\n\r\n既然我们都说过我们是记录用户登录信息的列表，那么我们需要先获取用户的请求内部相关的信息。也就是说我们的这个信息获取是基于用户请求设定的，那么解决思路就是从拦截器来实现。\r\n\r\n既然上面我们分析了需要记录的信息，那么接着的思路应该是什么呢？\r\n<ul>\r\n 	<li>根据数据需求建表</li>\r\n 	<li>完成存储数据业务\r\n<ul>\r\n 	<li>Dao → Service → HandlerInterceptor（拦截器）</li>\r\n</ul>\r\n</li>\r\n 	<li>单元测试\r\n<ul>\r\n 	<li>因为我前面提过，我们尽量把service作为简单的数据驱动，也就是说不涉及到复杂事务，我们尽量写简单的service。</li>\r\n 	<li>简单的service情况下， 我们一个service对应一个dao，则一定程度上可以少写一点单元测试==、</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n日志获取大概流程图如下所示：\r\n<div class="image-package imagebubble">\r\n\r\n<img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%85%AD-%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A1%B5-%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E6%B5%81%E7%A8%8B.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%85%AD-%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A1%B5-%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E6%B5%81%E7%A8%8B.png" />\r\n<div class="image-caption">ssm应用六-后台主页-日志采集流程</div>\r\n</div>\r\n日志列表输出大概流程图如下所示：\r\n<div class="image-package imagebubble">\r\n\r\n<img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%85%AD-%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A1%B5-%E5%88%86%E9%A1%B5%E5%88%97%E8%A1%A8%E6%B5%81%E7%A8%8B.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%85%AD-%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A1%B5-%E5%88%86%E9%A1%B5%E5%88%97%E8%A1%A8%E6%B5%81%E7%A8%8B.png" />\r\n<div class="image-caption">ssm应用六-后台主页-分页列表流程</div>\r\n</div>\r\n具体的一些细节的东西没必要追究，先把数据库表建立起来，数据库：warehouse，建表代码如下：\r\n<pre class="hljs sql"><code class="sql"> <span class="hljs-operator"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`user_action_log`</span> (\r\n <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''自增ID''</span>,\r\n <span class="hljs-string">`login_id`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''登录ID''</span>,\r\n <span class="hljs-string">`session_id`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">45</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''访问session的ID\\r\\n''</span>,\r\n <span class="hljs-string">`time`</span> datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''操作时间''</span>,\r\n <span class="hljs-string">`ip_addr_v4`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">15</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''ipV4地址''</span>,\r\n <span class="hljs-string">`ip_addr_v6`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''ipv6地址\\r\\n''</span>,\r\n <span class="hljs-string">`os_name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''操作系统名称''</span>,\r\n <span class="hljs-string">`os_version`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,\r\n <span class="hljs-string">`bro_name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''浏览器名称''</span>,\r\n <span class="hljs-string">`bro_version`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''浏览器版本''</span>,\r\n <span class="hljs-string">`request_body`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">60</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''请求体信息''</span>,\r\n <span class="hljs-string">`description`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''操作描述''</span>,\r\n <span class="hljs-string">`other`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">150</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''其他描述''</span>,\r\n <span class="hljs-string">`method`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">''HTTP请求方法''</span>,\r\n PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)\r\n ) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> AUTO_INCREMENT=<span class="hljs-number">109</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8 <span class="hljs-keyword">COMMENT</span>=<span class="hljs-string">''行为日志表''</span>;</span></code></pre>\r\n我们数据库建表完成后，只需要写对应的Dao层，按照我们前面的思路，那就是对应着写Bean → Dao → Service。然后Service提供给其他地方调用。\r\n\r\n既然如此，我们先实现我们的Bean和Dao层，因为我们在项目中使用了Mybatis这个持久化框架，所以我们需要去实现Mybatis的Mapper文件对应Dao层的接口就行，具体的代码如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-comment">&lt;!--下面是Bean：UserActionLog--&gt;</span>\r\npublic class UserActionLog implements Serializable {\r\n\r\n    private long id;\r\n    private String loginId, sessionId, ipAddrV4, ipAddrV6, osName, osVersion, broName, broVersion, requestBody, description, other, method;\r\n    private Date time;\r\n    //省略get和set以及toString方法\r\n}\r\n\r\n<span class="hljs-comment">&lt;!--下面是Dao层：ActionLogDao.java--&gt;</span>\r\npublic interface ActionLogDao extends Dao<span class="hljs-tag">&lt;<span class="hljs-title">UserActionLog</span>&gt;</span> {\r\n\r\n    int add(UserActionLog userActionLog);\r\n\r\n    UserActionLog findOneById(Serializable Id);\r\n\r\n    /**\r\n     * 分页查询\r\n     * @param offset    起始位置\r\n     * @param limit     每页数量\r\n     * @return\r\n     */\r\n    List<span class="hljs-tag">&lt;<span class="hljs-title">UserActionLog</span>&gt;</span> findAll(@Param("offset") int offset, @Param("limit") int limit);\r\n}\r\n\r\n<span class="hljs-comment">&lt;!--下面是mapper：ActionLogDao.xml--&gt;</span>\r\n<span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span>\r\n<span class="hljs-doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"\r\n        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">mapper</span> <span class="hljs-attribute">namespace</span>=<span class="hljs-value">"cn.acheng1314.dao.ActionLogDao"</span>&gt;</span>\r\n    <span class="hljs-comment">&lt;!--增加语句--&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">insert</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"add"</span> <span class="hljs-attribute">parameterType</span>=<span class="hljs-value">"cn.acheng1314.domain.UserActionLog"</span>&gt;</span>\r\n        INSERT INTO\r\n        `user_action_log`\r\n        (`login_id`,`session_id`,`time`,`ip_addr_v4`,`ip_addr_v6`,`os_name`,`os_version`,`bro_name`,`bro_version`,`request_body`,`description`,`other`,`method`)\r\n        VALUES\r\n        (#{loginId},#{sessionId},#{time},#{ipAddrV4},#{ipAddrV6},#{osName},#{osVersion},#{broName},#{broVersion},#{requestBody},#{description},#{other},#{method})\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">insert</span>&gt;</span>\r\n\r\n    <span class="hljs-comment">&lt;!--分页列表：offset起始位置 limit每一页数据，DESC倒序排列--&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">select</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"findAll"</span> <span class="hljs-attribute">resultType</span>=<span class="hljs-value">"cn.acheng1314.domain.UserActionLog"</span> &gt;</span>\r\n        SELECT\r\n            *\r\n        FROM\r\n            `user_action_log`\r\n        ORDER BY\r\n            `id`\r\n        DESC\r\n        LIMIT #{offset}, #{limit}\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">select</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">mapper</span>&gt;</span></code></pre>\r\n上面我们可以看到Dao层基本上是简单的插入和分页查询，因为使用了Mysql数据库，所以我们使用 Select···Limit 起始位置,每页数量 这种方式进行列表查询。因为我们是需要查看最近信息，所以查询列表的数据是倒序排列的。\r\n\r\n现在我们的Dao层完成了，我们需要接着完成Service层实现外层调用的接口。Service层代码如下：\r\n<pre class="hljs cs"><code class="cs">@Service(<span class="hljs-string">"actionLogService"</span>)\r\n<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ActionLogServiceImpl</span> <span class="hljs-title">implements</span> <span class="hljs-title">ActionLogService</span> {\r\n\r\n    @Autowired\r\n    <span class="hljs-keyword">private</span> ActionLogDao actionLogDao;\r\n\r\n    <span class="hljs-keyword">private</span> UserActionLog userActionLog;\r\n\r\n    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span>(<span class="hljs-params">HttpServletRequest request</span>) </span>{\r\n        <span class="hljs-comment">//获取请求参数集合</span>\r\n        Map&lt;String, String[]&gt; <span class="hljs-keyword">params</span> = request.getParameterMap();\r\n        String queryString = <span class="hljs-string">""</span>;\r\n        <span class="hljs-keyword">for</span> (String key : <span class="hljs-keyword">params</span>.keySet()) {\r\n            String[] values = <span class="hljs-keyword">params</span>.<span class="hljs-keyword">get</span>(key);\r\n            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; values.length; i++) {\r\n                String <span class="hljs-keyword">value</span> = values[i];\r\n                queryString += key + <span class="hljs-string">"="</span> + <span class="hljs-keyword">value</span> + <span class="hljs-string">"&amp;"</span>;\r\n            }\r\n        }\r\n\r\n\r\n        userActionLog = <span class="hljs-keyword">new</span> UserActionLog();\r\n        userActionLog.setMethod(request.getMethod());   <span class="hljs-comment">//获取请求方式</span>\r\n        <span class="hljs-keyword">if</span> (request.getHeader(<span class="hljs-string">"x-forwarded-for"</span>) == <span class="hljs-keyword">null</span>) { <span class="hljs-comment">//获取请求IP</span>\r\n            userActionLog.setIpAddrV4(request.getRemoteAddr());\r\n        } <span class="hljs-keyword">else</span> {\r\n            userActionLog.setIpAddrV4(request.getHeader(<span class="hljs-string">"x-forwarded-for"</span>));\r\n        }\r\n        userActionLog.setOther(request.getHeader(<span class="hljs-string">"User-Agent"</span>));    <span class="hljs-comment">//获取user-agent</span>\r\n        userActionLog.setSessionId(request.getSession().getId());   <span class="hljs-comment">//获取用户操作的sessionID，必须</span>\r\n        userActionLog.setDescription(request.getRequestURI());  <span class="hljs-comment">//获取访问的地址</span>\r\n        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(queryString)) userActionLog.setRequestBody(queryString);   <span class="hljs-comment">//参数集合内容不为空存入数据库</span>\r\n\r\n        <span class="hljs-keyword">try</span> {\r\n            UserAgent agent = <span class="hljs-keyword">new</span> UserAgent(request.getHeader(<span class="hljs-string">"User-Agent"</span>));   <span class="hljs-comment">//载入user-agent</span>\r\n            userActionLog.setOsName(agent.getOperatingSystem().getName());  <span class="hljs-comment">//设定os名称</span>\r\n            userActionLog.setBroName(StringUtils.isEmpty(agent.getBrowser().getName()) ? <span class="hljs-string">""</span> : agent.getBrowser().getName()); <span class="hljs-comment">//设定浏览器名称</span>\r\n            userActionLog.setBroVersion(StringUtils.isEmpty(agent.getBrowserVersion().getVersion()) ? <span class="hljs-string">""</span> : agent.getBrowserVersion().getVersion());    <span class="hljs-comment">//设定浏览器版本</span>\r\n        } <span class="hljs-keyword">catch</span> (Exception e) {\r\n            e.printStackTrace();\r\n        } <span class="hljs-keyword">finally</span> {\r\n            actionLogDao.add(userActionLog);    <span class="hljs-comment">//UserAgent信息能否获取到，我们都需要存入数据库。</span>\r\n        }\r\n\r\n    }\r\n\r\n    @<span class="hljs-function">Deprecated\r\n    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span>(<span class="hljs-params">UserActionLog userActionLog</span>) throws Exception </span>{\r\n        <span class="hljs-comment">//其实在这里我们应该直接调用这个方法来实现功能。毕竟我们的原则是Service层是数据驱动服务。但是我们在这里写，也能实现功能</span>\r\n    }\r\n\r\n    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;UserActionLog&gt; <span class="hljs-title">findAll</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> pageNum, <span class="hljs-keyword">int</span> pageSize</span>) </span>{\r\n        <span class="hljs-comment">//因为数据库内容是从第一条出的数据，所以我们查询的 起始位置 = (页码-1) * 条数 + 1；</span>\r\n        pageNum -= <span class="hljs-number">1</span>;\r\n        <span class="hljs-keyword">return</span> actionLogDao.findAll(pageNum * pageSize + <span class="hljs-number">1</span>, pageSize);\r\n    }\r\n}</code></pre>\r\n好了，到现在我们的ActionLogServiceImpl也完成了。按照我们的需求来说，我们要在所有的请求上面加上一层访问日志监控，同时我们需要对外提供接口方便我们的查看数据。具体代码如下：\r\n<pre class="hljs scala"><code class="scala">&lt;!-- 下面的是拦截器：<span class="hljs-type">LoginHandlerInterceptor</span>.java --&gt;\r\npublic <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginHandlerInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HandlerInterceptorAdapter</span> {</span>\r\n    <span class="hljs-type">String</span> <span class="hljs-type">NO_INTERCEPTOR_PATH</span> = <span class="hljs-string">".*/((login)|(reg)|(logout)|(code)|(app)|(weixin)|(static)|(main)|(websocket)).*"</span>;       <span class="hljs-comment">//不对匹配该值的访问路径拦截（正则）</span>\r\n    <span class="hljs-annotation">@Autowired</span>\r\n    <span class="hljs-type">ActionLogServiceImpl</span> service;\r\n\r\n    <span class="hljs-annotation">@Override</span>\r\n    public boolean preHandle(<span class="hljs-type">HttpServletRequest</span> request, <span class="hljs-type">HttpServletResponse</span> response, <span class="hljs-type">Object</span> handler) <span class="hljs-keyword">throws</span> <span class="hljs-type">Exception</span> {\r\n        <span class="hljs-comment">// TODO Auto-generated method stub</span>\r\n        <span class="hljs-type">String</span> path = request.getServletPath();\r\n        <span class="hljs-keyword">if</span> (!path.matches(<span class="hljs-string">".*/((static)|(login)|(reg)).*"</span>)) service.add(request); <span class="hljs-comment">//不包含静态资源和登陆注册的请求</span>\r\n        <span class="hljs-keyword">if</span> (path.matches(<span class="hljs-type">NO_INTERCEPTOR_PATH</span>)) {    <span class="hljs-comment">//匹配正则表达式的不拦截</span>\r\n            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;\r\n        } <span class="hljs-keyword">else</span> {    <span class="hljs-comment">//不匹配的进行处理</span>\r\n            <span class="hljs-keyword">try</span> {\r\n                <span class="hljs-keyword">if</span> (request.getSession().getAttribute(<span class="hljs-string">"userInfo"</span>) == <span class="hljs-literal">null</span>) { <span class="hljs-comment">//session中是否存在用户信息，不存在则是未登录状态</span>\r\n                    response.sendRedirect(request.getContextPath() + <span class="hljs-string">"/mvc/login"</span>);\r\n                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;\r\n                }\r\n            } <span class="hljs-keyword">catch</span> (<span class="hljs-type">IOException</span> e) {\r\n                response.sendRedirect(request.getContextPath() + <span class="hljs-string">"/mvc/login"</span>);\r\n                e.printStackTrace();\r\n                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;\r\n            }\r\n        }\r\n        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <span class="hljs-comment">//默认是不拦截···当然具体的还看一些需求设计之类的</span>\r\n    }\r\n}\r\n\r\n&lt;!-- 下面的是行为日志的调用接口：<span class="hljs-type">ActionLogController</span>.java --&gt;\r\n<span class="hljs-annotation">@Controller</span>\r\n<span class="hljs-annotation">@RequestMapping</span>(<span class="hljs-string">"/actionLog"</span>)\r\npublic <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActionLogController</span> {</span>\r\n    <span class="hljs-annotation">@Autowired</span>\r\n    <span class="hljs-type">ActionLogService</span> actionLogService;\r\n\r\n    <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/findLogList"</span>\r\n            , produces = <span class="hljs-string">"application/json; charset=utf-8"</span>)\r\n    <span class="hljs-annotation">@ResponseBody</span>\r\n    public <span class="hljs-type">Object</span> findLog(<span class="hljs-annotation">@Param</span>(<span class="hljs-string">"pageNum"</span>) int pageNum, <span class="hljs-annotation">@Param</span>(<span class="hljs-string">"pageSize"</span>) int pageSize) {\r\n        <span class="hljs-keyword">if</span> (pageNum &lt;= <span class="hljs-number">0</span>) { <span class="hljs-comment">//错误页码默认跳转到第一页</span>\r\n            pageNum = <span class="hljs-number">1</span>;\r\n        }\r\n        <span class="hljs-keyword">if</span> (pageSize &lt;= <span class="hljs-number">0</span>) {    <span class="hljs-comment">//错误数据长度默认设置为10条</span>\r\n            pageSize = <span class="hljs-number">10</span>;\r\n        }\r\n\r\n        <span class="hljs-type">List</span>&lt;<span class="hljs-type">UserActionLog</span>&gt; result = actionLogService.findAll(pageNum, pageSize);\r\n        <span class="hljs-type">ResponseObj</span>&lt;<span class="hljs-type">UserActionLog</span>&gt; responseObj = <span class="hljs-keyword">new</span> <span class="hljs-type">ResponseObj</span>&lt;<span class="hljs-type">UserActionLog</span>&gt;();\r\n        <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span> || result.size() == <span class="hljs-number">0</span>) {\r\n            responseObj.setCode(<span class="hljs-type">ResponseObj</span>.<span class="hljs-type">EMPUTY</span>);\r\n            responseObj.setMsg(<span class="hljs-string">"查询结果为空"</span>);\r\n            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">GsonUtils</span>().toJson(responseObj);\r\n        }\r\n        responseObj.setCode(<span class="hljs-type">ResponseObj</span>.<span class="hljs-type">OK</span>);\r\n        responseObj.setMsg(<span class="hljs-string">"查询成功"</span>);\r\n        responseObj.setData(result);\r\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">GsonUtils</span>().toJson(responseObj);\r\n    }\r\n}</code></pre>\r\n上面设置完成后，我们运行项目，先输入错误的网址，大家会看到它先跳转到登录界面（因为现在的用户信息位空，所以默认需要用户登录），登录成功后，我们在浏览器中输入：\r\n<pre class="hljs objectivec"><code class="objectivec">http:<span class="hljs-comment">//localhost:8080/actionLog/findLogList?pageNum=1&amp;pageSize=10</span>\r\n<span class="hljs-comment">//因为我在Controller中没有配置具体的请求方法，那么我们这里gte和post都可以获取数据</span></code></pre>\r\n可以得到返回的json数据：\r\n<pre class="hljs json"><code class="json">{\r\n    "<span class="hljs-attribute">code</span>": <span class="hljs-value"><span class="hljs-number">1</span></span>,\r\n    "<span class="hljs-attribute">msg</span>": <span class="hljs-value"><span class="hljs-string">"查询成功"</span></span>,\r\n    "<span class="hljs-attribute">data</span>": <span class="hljs-value">[\r\n        {\r\n            "<span class="hljs-attribute">id</span>": <span class="hljs-number">212</span>,\r\n            "<span class="hljs-attribute">sessionId</span>": <span class="hljs-string">"A65E46FA47CBA4385FEA67594632FE2A"</span>,\r\n            "<span class="hljs-attribute">ipAddrV4</span>": <span class="hljs-string">"127.0.0.1"</span>,\r\n            "<span class="hljs-attribute">osName</span>": <span class="hljs-string">"Windows 10"</span>,\r\n            "<span class="hljs-attribute">broName</span>": <span class="hljs-string">"Microsoft Edge 14"</span>,\r\n            "<span class="hljs-attribute">broVersion</span>": <span class="hljs-string">"14.14393"</span>,\r\n            "<span class="hljs-attribute">description</span>": <span class="hljs-string">"/mvc/home"</span>,\r\n            "<span class="hljs-attribute">other</span>": <span class="hljs-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.79 Safari/537.36 Edge/14.14393"</span>,\r\n            "<span class="hljs-attribute">method</span>": <span class="hljs-string">"GET"</span>\r\n        }\r\n    ]\r\n</span>}</code></pre>\r\n然后我们可以设置其他的页码和条数测试，均可以通过，所以我们的分页的接口已经完成。但是，我们这样直接显示json肯定是不友好的，我们还需要找个地方显示，我把它显示在首页的默认位置，下一期再单独拿出一个页面来实现，具体如图：\r\n<div class="image-package imagebubble">\r\n\r\n<img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%85%AD-%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A1%B5-%E6%9C%80%E8%BF%91%E8%AE%BF%E9%97%AE%E5%88%97%E8%A1%A8%E6%88%AA%E5%9B%BE.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/ssm%E5%BA%94%E7%94%A8%E5%85%AD-%E5%90%8E%E5%8F%B0%E4%B8%BB%E9%A1%B5-%E6%9C%80%E8%BF%91%E8%AE%BF%E9%97%AE%E5%88%97%E8%A1%A8%E6%88%AA%E5%9B%BE.png" />\r\n<div class="image-caption">ssm应用六-后台主页-最近访问列表截图</div>\r\n</div>\r\n首先我们需要先把以前列表找到，在home.jsp中如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">table</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-table   am-text-nowrap"</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">thead</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">tr</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>#<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>项目名称<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>开始时间<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>结束时间<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>状态<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>责任人<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">tr</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">thead</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">tbody</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">tr</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>Adminto Admin v1<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>01/01/2016<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>26/04/2016<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"label label-danger"</span>&gt;</span>已发布<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>Coderthemes<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">tr</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">tr</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>Adminto Frontend v1<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>01/01/2016<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>26/04/2016<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"label label-success"</span>&gt;</span>已发布<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>Adminto admin<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">tr</span>&gt;</span></code></pre>\r\n这就是以前的代码片段，我们不需要说什么精通前端，但是最基本的能看懂，能百度到解决方案也是不错的。\r\n\r\n<strong>注意：由于妹子UI封装了列表，然后我在js中要追加列表内容的时候，始终找不到Body一直报错null。解决办法是给tbody加上ID，然后直接给它追加内容。</strong>\r\n\r\n我们先删除原来tbody的内容，然后对应着格式js添加,如下：\r\n<pre class="hljs xml"><code class="xml">$("#log-table-body").append(    //log-table-body是我们列表的body的ID\r\n    "<span class="hljs-tag">&lt;<span class="hljs-title">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>" + data.data[i].id + "<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>"\r\n    + data.data[i].ipAddrV4 + "<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>01/01/2016<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>"\r\n    + data.data[i].osName + "<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">\\"label</span> <span class="hljs-attribute">label-danger</span>\\"&gt;</span>"\r\n    + data.data[i].description + "<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>"\r\n    + data.data[i].sessionId + "<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>"\r\n    + data.data[i].broName + "<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">tr</span>&gt;</span>");\r\n//注意：格式（标签结构）一定要和以前的一样，否则列表会走样的==</code></pre>\r\n我们知道应该怎么追加列表条目了，现在我们需要的是实现追加。按照代码结构观察我们可以发现，我们要想实现数据自动装载到页面上面，我们需要让程序顺序执行就对了。但是前面我们的JS是写在头部的，如果说自动执行肯定会找不到控件，所以我们需要让自动加载在页面完成后加载。如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>\r\n<span class="hljs-comment">&lt;!-- 注意了，我这里是把自动执行的js代码放到 html加载完成后的 --&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"application/javascript"</span>&gt;</span><span class="javascript">\r\n    $.ajax({\r\n        type: <span class="hljs-string">"GET"</span>,\r\n        url: <span class="hljs-string">''&lt;%=request.getContextPath()%&gt;/actionLog/findLogList?pageNum=1&amp;pageSize=10''</span>,\r\n        dataType: <span class="hljs-string">''json''</span>,   <span class="hljs-comment">//当这里指定为json的时候，获取到了数据后会自己解析的，只需要 返回值.字段名称 就能使用了</span>\r\n        cache: <span class="hljs-literal">false</span>,\r\n        success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{\r\n            <span class="hljs-keyword">if</span> (data.code == <span class="hljs-number">1</span>) {\r\n                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) {\r\n                    $(<span class="hljs-string">"#log-table-body"</span>).append(<span class="hljs-string">"&lt;tr&gt;&lt;td&gt;"</span> + data.data[i].id + <span class="hljs-string">"&lt;/td&gt;&lt;td&gt;"</span>\r\n                            + data.data[i].ipAddrV4 + <span class="hljs-string">"&lt;/td&gt;&lt;td&gt;01/01/2016&lt;/td&gt;&lt;td&gt;"</span>\r\n                            + data.data[i].osName + <span class="hljs-string">"&lt;/td&gt;&lt;td&gt;&lt;span class=\\"label label-danger\\"&gt;"</span>\r\n                            + data.data[i].description + <span class="hljs-string">"&lt;/span&gt;&lt;/td&gt;&lt;td&gt;"</span>\r\n                            + data.data[i].sessionId + <span class="hljs-string">"&lt;/td&gt;&lt;td&gt;"</span>\r\n                            + data.data[i].broName + <span class="hljs-string">"&lt;/td&gt;&lt;/tr&gt;"</span>);\r\n                }\r\n            }\r\n        }\r\n    });\r\n</span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span></code></pre>\r\n\r\n<hr />\r\n\r\n总结：\r\n<ul>\r\n 	<li>日志记录</li>\r\n 	<li>列表输出</li>\r\n 	<li>数据库查询分页</li>\r\n 	<li>web页面追加数据</li>\r\n 	<li>js位置对web页面的影响</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n仓库管理系统，应该快要完结了，后面做完整的博客后端+web前端(模版)+Android客户端。现在的仓库管理系统可以明显看到是为了实现而实现，至于所谓的程序设计，还有很多地方没使用。后面开发的时候，尽量使用程序设计的模式来实现。后面会专门针对这个仓库管理系统进行总结，好的不好的，都要一一找出来，在博客系统的实现上面尽量简单优越。\r\n\r\n只有不断的审视自己，才能找到自己的不足，并且长期前进。\r\n\r\n2016-10-30', '[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（六）', '', 'inherit', 'closed', 'closed', '', '272-revision-v1', '', '', '2016-10-30 21:16:17', '2016-10-30 13:16:17', '', 272, 'http://acheng1314.cn/?p=274', 0, 'revision', '', 0),
(276, 1, '2016-11-07 20:20:45', '2016-11-07 12:20:45', '', 'ssm%e5%ba%94%e7%94%a8%e4%b8%83-%e8%ae%bf%e9%97%ae%e5%88%97%e8%a1%a8-%e5%88%86%e9%a1%b5%e5%88%97%e8%a1%a8', '', 'inherit', 'open', 'closed', '', 'ssm%e5%ba%94%e7%94%a8%e4%b8%83-%e8%ae%bf%e9%97%ae%e5%88%97%e8%a1%a8-%e5%88%86%e9%a1%b5%e5%88%97%e8%a1%a8', '', '', '2016-11-07 20:20:45', '2016-11-07 12:20:45', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/11/ssm应用七-访问列表-分页列表.png', 0, 'attachment', 'image/png', 0),
(277, 1, '2016-11-08 00:37:07', '2016-11-07 16:37:07', '', 'ssm%e5%ba%94%e7%94%a8%e4%b8%83-%e8%ae%bf%e9%97%ae%e5%88%97%e8%a1%a8-%e6%b5%81%e7%a8%8b%e5%9b%be', '', 'inherit', 'open', 'closed', '', 'ssm%e5%ba%94%e7%94%a8%e4%b8%83-%e8%ae%bf%e9%97%ae%e5%88%97%e8%a1%a8-%e6%b5%81%e7%a8%8b%e5%9b%be', '', '', '2016-11-08 00:37:07', '2016-11-07 16:37:07', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/11/ssm应用七-访问列表-流程图.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(278, 1, '2016-11-09 20:46:18', '2016-11-09 12:46:18', '[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（七）\r\n\r\n项目github地址：<a href="https://github.com/pc859107393/SpringMvcMybatis" target="_blank">https://github.com/pc859107393/SpringMvcMybatis</a>\r\n\r\n我的简书首页是：<a href="http://www.jianshu.com/users/86b79c50cfb3/latest_articles" target="_blank">http://www.jianshu.com/users/86b79c50cfb3/latest_articles</a>\r\n\r\n上一期是：<a href="http://www.jianshu.com/p/e94541db9901" target="_blank">优雅的SpringMvc+Mybatis应用（六）</a>\r\n\r\n扫描下面二维码加入交流QQ群：\r\n<div class="image-package imagebubble">\r\n\r\n<img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/%E8%A1%8C%E8%B5%B0%E7%9A%84java%E5%85%A8%E6%A0%88%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/%E8%A1%8C%E8%B5%B0%E7%9A%84java%E5%85%A8%E6%A0%88%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81.png" />\r\n<div class="image-caption">行走的java全栈</div>\r\n</div>\r\n<h4>工具</h4>\r\n<ul>\r\n 	<li>IDE为<strong>idea16</strong></li>\r\n 	<li>JDK环境为<strong>1.8</strong></li>\r\n 	<li>gradle构建，版本：2.14.1</li>\r\n 	<li>Mysql版本为<strong>5.5.27</strong></li>\r\n 	<li>Tomcat版本为<strong>7.0.52</strong></li>\r\n 	<li>流程图绘制（xmind）</li>\r\n</ul>\r\n<h4>本期目标</h4>\r\n<ul>\r\n 	<li>完整列表分页</li>\r\n</ul>\r\n<h4>完整分页列表界面</h4>\r\n其实分页列表也没什么，重点在于做出<strong>列表局部刷新，减少页面请求</strong>。\r\n\r\n我们先要新建一个页面用来显示列表，由于我们的后台网页结构基本已经固定，所以我们在后台主页那边设定一个访问入口，然后链接上我们的网页。这里我把左边的一个菜单改成了列表，具体效果如图：\r\n<div class="image-package imagebubble">\r\n\r\n<img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/11/ssm%E5%BA%94%E7%94%A8%E4%B8%83-%E8%AE%BF%E9%97%AE%E5%88%97%E8%A1%A8-%E5%88%86%E9%A1%B5%E5%88%97%E8%A1%A8.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/11/ssm%E5%BA%94%E7%94%A8%E4%B8%83-%E8%AE%BF%E9%97%AE%E5%88%97%E8%A1%A8-%E5%88%86%E9%A1%B5%E5%88%97%E8%A1%A8.png" />\r\n<div class="image-caption">ssm应用七-访问列表-分页列表</div>\r\n</div>\r\n在上一期结束后，我已经在列表的返回数据中加入了总页码和当前页码。这是返回的json数据：\r\n<pre class="hljs json"><code class="json">{\r\n    "<span class="hljs-attribute">code</span>": <span class="hljs-value"><span class="hljs-number">1</span></span>,\r\n    "<span class="hljs-attribute">msg</span>": <span class="hljs-value"><span class="hljs-string">"查询成功"</span></span>,\r\n    "<span class="hljs-attribute">data</span>": <span class="hljs-value">[\r\n        {\r\n            "<span class="hljs-attribute">id</span>": <span class="hljs-number">713</span>,\r\n            "<span class="hljs-attribute">sessionId</span>": <span class="hljs-string">"35B4776D32F8E12679FBC8F45A11F8F1"</span>,\r\n            "<span class="hljs-attribute">ipAddrV4</span>": <span class="hljs-string">"127.0.0.1"</span>,\r\n            "<span class="hljs-attribute">osName</span>": <span class="hljs-string">"Windows 10"</span>,\r\n            "<span class="hljs-attribute">broName</span>": <span class="hljs-string">"Microsoft Edge 14"</span>,\r\n            "<span class="hljs-attribute">broVersion</span>": <span class="hljs-string">"14.14393"</span>,\r\n            "<span class="hljs-attribute">description</span>": <span class="hljs-string">"/mvc/listActionLog"</span>,\r\n            "<span class="hljs-attribute">other</span>": <span class="hljs-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.79 Safari/537.36 Edge/14.14393"</span>,\r\n            "<span class="hljs-attribute">method</span>": <span class="hljs-string">"GET"</span>\r\n        }\r\n    ]</span>,\r\n    "<span class="hljs-attribute">pageNum</span>": <span class="hljs-value"><span class="hljs-number">1</span></span>,\r\n    "<span class="hljs-attribute">pageSize</span>": <span class="hljs-value"><span class="hljs-number">15</span></span>,\r\n    "<span class="hljs-attribute">totalNum</span>": <span class="hljs-value"><span class="hljs-number">44</span>\r\n</span>}</code></pre>\r\n具体的流程图如下：\r\n<div class="image-package imagebubble">\r\n\r\n<img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/11/ssm%E5%BA%94%E7%94%A8%E4%B8%83-%E8%AE%BF%E9%97%AE%E5%88%97%E8%A1%A8-%E6%B5%81%E7%A8%8B%E5%9B%BE.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/11/ssm%E5%BA%94%E7%94%A8%E4%B8%83-%E8%AE%BF%E9%97%AE%E5%88%97%E8%A1%A8-%E6%B5%81%E7%A8%8B%E5%9B%BE.png" />\r\n<div class="image-caption">ssm应用七-访问列表-流程图</div>\r\n</div>\r\n按照上面我的截图中，我们可以看到我们只需要把上一页和下一页的ajax调用写好就能完成我们这个简单分页的网络请求。 至于第一页和最后一页的按钮事件也就是把页码设定为1和最后一页。那我们先看看下一页的js调用：\r\n<pre class="hljs javascript"><code class="javascript"><span class="hljs-keyword">var</span> pageNum;    <span class="hljs-comment">//页码变量</span>\r\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">goToNextPage</span>() </span>{\r\n        pageNum = <span class="hljs-built_in">parseInt</span>(pageNum) + <span class="hljs-number">1</span>;    <span class="hljs-comment">//这里必须用parseInt(pageNum)这样才能拿到int型值，否则这里拿出来的是字符串</span>\r\n        $.ajax({\r\n            type: <span class="hljs-string">"GET"</span>,    <span class="hljs-comment">//后端分页接口这里是没有指定请求方式</span>\r\n            url: <span class="hljs-string">''/actionLog/findLogList?pageNum=''</span> + pageNum + <span class="hljs-string">''&amp;pageSize=15''</span>,\r\n            dataType: <span class="hljs-string">''json''</span>, <span class="hljs-comment">//当这里指定为json的时候，获取到了数据后会自己解析的，只需要 返回值.字段名称 就能使用了</span>\r\n            cache: <span class="hljs-literal">false</span>,   <span class="hljs-comment">//不适用缓存</span>\r\n            success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{\r\n                <span class="hljs-keyword">if</span> (data.code == <span class="hljs-number">1</span>) {\r\n                    updateList(data);   <span class="hljs-comment">//更新列表界面</span>\r\n                    pageNum = data.pageNum;\r\n                    $(<span class="hljs-string">"#log-controller-now"</span>).html(pageNum); <span class="hljs-comment">//把当前页面输出到网页对应ID的标签上面</span>\r\n                }\r\n            }\r\n        });\r\n    }</code></pre>\r\n从上面我们可以看到，我们的分页列表的请求变化的是页码，然后每一页长度是固定（也可以按照你的喜好来）的，然后我们拿到返回的数据进行加载就行了。\r\n\r\n既然我们上面已经看到了下一页的界面数据加载了，同理我们可以得出上一页的代码如下：\r\n<pre class="hljs javascript"><code class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">goToLastPage</span>() </span>{\r\n        pageNum = <span class="hljs-built_in">parseInt</span>(pageNum) - <span class="hljs-number">1</span>;\r\n        $.ajax({\r\n            type: <span class="hljs-string">"GET"</span>,\r\n            url: <span class="hljs-string">''/actionLog/findLogList?pageNum=''</span> + pageNum + <span class="hljs-string">''&amp;pageSize=15''</span>,\r\n            dataType: <span class="hljs-string">''json''</span>, <span class="hljs-comment">//当这里指定为json的时候，获取到了数据后会自己解析的，只需要 返回值.字段名称 就能使用了</span>\r\n            cache: <span class="hljs-literal">false</span>,\r\n            success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{\r\n                <span class="hljs-keyword">if</span> (data.code == <span class="hljs-number">1</span>) {\r\n                    updateList(data);\r\n                    pageNum = data.pageNum;\r\n                    $(<span class="hljs-string">"#log-controller-now"</span>).html(pageNum);\r\n                }\r\n            }\r\n        });\r\n    }</code></pre>\r\n但是我们虽然说js写出来，但是怎么把网页数据加载进去呢？？？就这一点我踩了4个钟头的坑，然后问了下老司机，然后老司机告诉我<strong>使用模版</strong>进行网页数据的加载。<strong>在这里我们需要引入模版的js，js名称是：doT.min.js</strong>。<a href="http://dotjs.cn/" target="_blank">模版官方文档</a>。\r\n\r\n从上面的上一页和下一页访问的js方法中，我们可以看到都使用了updateList(data)这个方法，这个方法就是来加载界面的，具体如下：\r\n<pre class="hljs xml"><code class="xml">//这一点js我们写在网页的body后面，因为我们网页的列表数据是异步加载的。所以让他直接执行就好了\r\n<span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"application/javascript"</span>&gt;</span><span class="javascript">\r\n    $.ajax({\r\n        type: <span class="hljs-string">"GET"</span>,\r\n        url: <span class="hljs-string">''/actionLog/findLogList?pageNum=1&amp;pageSize=15''</span>,\r\n        dataType: <span class="hljs-string">''json''</span>, <span class="hljs-comment">//当这里指定为json的时候，获取到了数据后会自己解析的，只需要 返回值.字段名称 就能使用了</span>\r\n        cache: <span class="hljs-literal">false</span>,\r\n        success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{\r\n            <span class="hljs-keyword">if</span> (data.code == <span class="hljs-number">1</span>) {\r\n                pagefn = doT.template($(<span class="hljs-string">"#pagetmpl"</span>).html());   <span class="hljs-comment">//初始化列表模板，仅需要在某个页面初始化一次</span>\r\n                updateList(data);   <span class="hljs-comment">//更新数据</span>\r\n                pageNum = data.pageNum;\r\n            }\r\n        }\r\n    });\r\n\r\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateList</span>(<span class="hljs-params">data</span>) </span>{\r\n        $(<span class="hljs-string">"#pagetmpl"</span>).empty(); <span class="hljs-comment">//清空模板数据</span>\r\n        $(<span class="hljs-string">"#log-table-body"</span>).html(pagefn(data.data));   <span class="hljs-comment">//加入数据到模板</span>\r\n    }\r\n\r\n</span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span></code></pre>\r\n引入js后，我们需要开始写网页代码了，先建立一个table，然后写表头(head,因为我使用的是妹子UI，所以我的表头是thead)，接着写列表部分(body，妹子UI里列表位tbody)，最后再把上一页、下一页和当前页的标签写上，如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-scrollable-horizontal am-text-ms"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"font-family: ''微软雅黑'';"</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">table</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-table   am-text-nowrap"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">thead</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">tr</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>IP地址<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>系统名称<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>访问地址<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>SessionId<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>浏览器名<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;/<span class="hljs-title">tr</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">thead</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">tbody</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"log-table-body"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"pagetmpl"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/x-dot-template"</span>&gt;</span><span class="javascript">   <span class="hljs-comment">//这里js的ID为模版的id，type这个位模版类型，具体的大家可以查看我引入的模版js的官方资源</span>\r\n                {{<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i &lt; it.length ; i++){ }}  <span class="hljs-comment">//循环</span>\r\n                    &lt;tr&gt;\r\n                        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span> {{=it[i].id}}<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span> //这里取得全是json中的字段名称\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>{{=it[i].ipAddrV4}}<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>{{=it[i].osName}}<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"label label-danger"</span>&gt;</span> {{ =it[i].description }} <span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>{{=it[i].sessionId}}<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>{{=it[i].broName}}<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n                    <span class="hljs-tag">&lt;/<span class="hljs-title">tr</span>&gt;</span>\r\n                    //这上面的注释，在实习开发中都需要删掉，写在这是方便观看\r\n                {{ } }}\r\n            </span></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">tbody</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">table</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-cf"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-fr"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-pagination tpl-pagination"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"log-table-page-controller"</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"log-controller-last"</span> <span class="hljs-attribute">onclick</span>=<span class="hljs-value">''goToLastPage()''</span>&gt;</span>上一页<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">li</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-disabled"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"log-controller-now"</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"log-controller-next"</span> <span class="hljs-attribute">onclick</span>=<span class="hljs-value">"goToNextPage()"</span>&gt;</span>下一页<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></code></pre>\r\n可能上面的html中混合js代码会麻烦一点，看起来也不是那么清晰，但是我们只要细心体会也是没有问题的。网页中的js操作我都喜欢用标签的onclick属性，个人习惯纯属爱好，勿喷。\r\n\r\n同时插入一个<a href="http://www.csdn.net/article/2013-09-23/2817020-web-performance-optimization" target="_blank">web页面优化</a>的文章，有兴趣的可以看看。\r\n\r\n里面讲解的知识点有：\r\n<ul>\r\n 	<li>Google的Web优化最佳实践</li>\r\n 	<li>雅虎的Web优化最佳实践</li>\r\n 	<li>一些工具</li>\r\n</ul>\r\n虽然说文章很古老了，但是很多原理现在一样通用。\r\n\r\n<hr />\r\n\r\n这一期比较短，我这边很多事情花费的时间太多了，今天就先这样。等两天出多角色管理和权限控制。', '[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（七）', '', 'publish', 'open', 'open', '', '%e6%89%8b%e6%8a%8a%e6%89%8b%e6%95%99%e7%a8%8bjavaweb%e4%bc%98%e9%9b%85%e7%9a%84springmvcmybatis%e5%ba%94%e7%94%a8%ef%bc%88%e4%b8%83%ef%bc%89', '', '', '2016-11-13 12:17:02', '2016-11-13 04:17:02', '', 0, 'http://acheng1314.cn/?p=278', 0, 'post', '', 0),
(279, 1, '2016-11-09 20:46:18', '2016-11-09 12:46:18', '[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（七）\r\n\r\n项目github地址：<a href="https://github.com/pc859107393/SpringMvcMybatis" target="_blank">https://github.com/pc859107393/SpringMvcMybatis</a>\r\n\r\n我的简书首页是：<a href="http://www.jianshu.com/users/86b79c50cfb3/latest_articles" target="_blank">http://www.jianshu.com/users/86b79c50cfb3/latest_articles</a>\r\n\r\n上一期是：<a href="http://www.jianshu.com/p/e94541db9901" target="_blank">优雅的SpringMvc+Mybatis应用（六）</a>\r\n<h4>工具</h4>\r\n<ul>\r\n 	<li>IDE为<strong>idea16</strong></li>\r\n 	<li>JDK环境为<strong>1.8</strong></li>\r\n 	<li>gradle构建，版本：2.14.1</li>\r\n 	<li>Mysql版本为<strong>5.5.27</strong></li>\r\n 	<li>Tomcat版本为<strong>7.0.52</strong></li>\r\n 	<li>流程图绘制（xmind）</li>\r\n</ul>\r\n<h4>本期目标</h4>\r\n<ul>\r\n 	<li>完整列表分页</li>\r\n</ul>\r\n<h4>完整分页列表界面</h4>\r\n其实分页列表也没什么，重点在于做出<strong>列表局部刷新，减少页面请求</strong>。\r\n\r\n我们先要新建一个页面用来显示列表，由于我们的后台网页结构基本已经固定，所以我们在后台主页那边设定一个访问入口，然后链接上我们的网页。这里我把左边的一个菜单改成了列表，具体效果如图：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/11/ssm%E5%BA%94%E7%94%A8%E4%B8%83-%E8%AE%BF%E9%97%AE%E5%88%97%E8%A1%A8-%E5%88%86%E9%A1%B5%E5%88%97%E8%A1%A8.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/11/ssm%E5%BA%94%E7%94%A8%E4%B8%83-%E8%AE%BF%E9%97%AE%E5%88%97%E8%A1%A8-%E5%88%86%E9%A1%B5%E5%88%97%E8%A1%A8.png" />\r\n<div class="image-caption">ssm应用七-访问列表-分页列表</div>\r\n</div>\r\n在上一期结束后，我已经在列表的返回数据中加入了总页码和当前页码。这是返回的json数据：\r\n<pre class="hljs json"><code class="json">{\r\n    "<span class="hljs-attribute">code</span>": <span class="hljs-value"><span class="hljs-number">1</span></span>,\r\n    "<span class="hljs-attribute">msg</span>": <span class="hljs-value"><span class="hljs-string">"查询成功"</span></span>,\r\n    "<span class="hljs-attribute">data</span>": <span class="hljs-value">[\r\n        {\r\n            "<span class="hljs-attribute">id</span>": <span class="hljs-number">713</span>,\r\n            "<span class="hljs-attribute">sessionId</span>": <span class="hljs-string">"35B4776D32F8E12679FBC8F45A11F8F1"</span>,\r\n            "<span class="hljs-attribute">ipAddrV4</span>": <span class="hljs-string">"127.0.0.1"</span>,\r\n            "<span class="hljs-attribute">osName</span>": <span class="hljs-string">"Windows 10"</span>,\r\n            "<span class="hljs-attribute">broName</span>": <span class="hljs-string">"Microsoft Edge 14"</span>,\r\n            "<span class="hljs-attribute">broVersion</span>": <span class="hljs-string">"14.14393"</span>,\r\n            "<span class="hljs-attribute">description</span>": <span class="hljs-string">"/mvc/listActionLog"</span>,\r\n            "<span class="hljs-attribute">other</span>": <span class="hljs-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.79 Safari/537.36 Edge/14.14393"</span>,\r\n            "<span class="hljs-attribute">method</span>": <span class="hljs-string">"GET"</span>\r\n        }\r\n    ]</span>,\r\n    "<span class="hljs-attribute">pageNum</span>": <span class="hljs-value"><span class="hljs-number">1</span></span>,\r\n    "<span class="hljs-attribute">pageSize</span>": <span class="hljs-value"><span class="hljs-number">15</span></span>,\r\n    "<span class="hljs-attribute">totalNum</span>": <span class="hljs-value"><span class="hljs-number">44</span>\r\n</span>}</code></pre>\r\n具体的流程图如下：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/11/ssm%E5%BA%94%E7%94%A8%E4%B8%83-%E8%AE%BF%E9%97%AE%E5%88%97%E8%A1%A8-%E6%B5%81%E7%A8%8B%E5%9B%BE.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/11/ssm%E5%BA%94%E7%94%A8%E4%B8%83-%E8%AE%BF%E9%97%AE%E5%88%97%E8%A1%A8-%E6%B5%81%E7%A8%8B%E5%9B%BE.png" />\r\n<div class="image-caption">ssm应用七-访问列表-流程图</div>\r\n</div>\r\n按照上面我的截图中，我们可以看到我们只需要把上一页和下一页的ajax调用写好就能完成我们这个简单分页的网络请求。 至于第一页和最后一页的按钮事件也就是把页码设定为1和最后一页。那我们先看看下一页的js调用：\r\n<pre class="hljs javascript"><code class="javascript"><span class="hljs-keyword">var</span> pageNum;    <span class="hljs-comment">//页码变量</span>\r\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">goToNextPage</span>() </span>{\r\n        pageNum = <span class="hljs-built_in">parseInt</span>(pageNum) + <span class="hljs-number">1</span>;    <span class="hljs-comment">//这里必须用parseInt(pageNum)这样才能拿到int型值，否则这里拿出来的是字符串</span>\r\n        $.ajax({\r\n            type: <span class="hljs-string">"GET"</span>,    <span class="hljs-comment">//后端分页接口这里是没有指定请求方式</span>\r\n            url: <span class="hljs-string">''/actionLog/findLogList?pageNum=''</span> + pageNum + <span class="hljs-string">''&amp;pageSize=15''</span>,\r\n            dataType: <span class="hljs-string">''json''</span>, <span class="hljs-comment">//当这里指定为json的时候，获取到了数据后会自己解析的，只需要 返回值.字段名称 就能使用了</span>\r\n            cache: <span class="hljs-literal">false</span>,   <span class="hljs-comment">//不适用缓存</span>\r\n            success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{\r\n                <span class="hljs-keyword">if</span> (data.code == <span class="hljs-number">1</span>) {\r\n                    updateList(data);   <span class="hljs-comment">//更新列表界面</span>\r\n                    pageNum = data.pageNum;\r\n                    $(<span class="hljs-string">"#log-controller-now"</span>).html(pageNum); <span class="hljs-comment">//把当前页面输出到网页对应ID的标签上面</span>\r\n                }\r\n            }\r\n        });\r\n    }</code></pre>\r\n从上面我们可以看到，我们的分页列表的请求变化的是页码，然后每一页长度是固定（也可以按照你的喜好来）的，然后我们拿到返回的数据进行加载就行了。\r\n\r\n既然我们上面已经看到了下一页的界面数据加载了，同理我们可以得出上一页的代码如下：\r\n<pre class="hljs javascript"><code class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">goToLastPage</span>() </span>{\r\n        pageNum = <span class="hljs-built_in">parseInt</span>(pageNum) - <span class="hljs-number">1</span>;\r\n        $.ajax({\r\n            type: <span class="hljs-string">"GET"</span>,\r\n            url: <span class="hljs-string">''/actionLog/findLogList?pageNum=''</span> + pageNum + <span class="hljs-string">''&amp;pageSize=15''</span>,\r\n            dataType: <span class="hljs-string">''json''</span>, <span class="hljs-comment">//当这里指定为json的时候，获取到了数据后会自己解析的，只需要 返回值.字段名称 就能使用了</span>\r\n            cache: <span class="hljs-literal">false</span>,\r\n            success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{\r\n                <span class="hljs-keyword">if</span> (data.code == <span class="hljs-number">1</span>) {\r\n                    updateList(data);\r\n                    pageNum = data.pageNum;\r\n                    $(<span class="hljs-string">"#log-controller-now"</span>).html(pageNum);\r\n                }\r\n            }\r\n        });\r\n    }</code></pre>\r\n但是我们虽然说js写出来，但是怎么把网页数据加载进去呢？？？就这一点我踩了4个钟头的坑，然后问了下老司机，然后老司机告诉我<strong>使用模版</strong>进行网页数据的加载。<strong>在这里我们需要引入模版的js，js名称是：doT.min.js</strong>。<a href="http://dotjs.cn/" target="_blank">模版官方文档</a>。\r\n\r\n从上面的上一页和下一页访问的js方法中，我们可以看到都使用了updateList(data)这个方法，这个方法就是来加载界面的，具体如下：\r\n<pre class="hljs xml"><code class="xml">//这一点js我们写在网页的body后面，因为我们网页的列表数据是异步加载的。所以让他直接执行就好了\r\n<span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"application/javascript"</span>&gt;</span><span class="javascript">\r\n    $.ajax({\r\n        type: <span class="hljs-string">"GET"</span>,\r\n        url: <span class="hljs-string">''/actionLog/findLogList?pageNum=1&amp;pageSize=15''</span>,\r\n        dataType: <span class="hljs-string">''json''</span>, <span class="hljs-comment">//当这里指定为json的时候，获取到了数据后会自己解析的，只需要 返回值.字段名称 就能使用了</span>\r\n        cache: <span class="hljs-literal">false</span>,\r\n        success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{\r\n            <span class="hljs-keyword">if</span> (data.code == <span class="hljs-number">1</span>) {\r\n                pagefn = doT.template($(<span class="hljs-string">"#pagetmpl"</span>).html());   <span class="hljs-comment">//初始化列表模板，仅需要在某个页面初始化一次</span>\r\n                updateList(data);   <span class="hljs-comment">//更新数据</span>\r\n                pageNum = data.pageNum;\r\n            }\r\n        }\r\n    });\r\n\r\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateList</span>(<span class="hljs-params">data</span>) </span>{\r\n        $(<span class="hljs-string">"#pagetmpl"</span>).empty(); <span class="hljs-comment">//清空模板数据</span>\r\n        $(<span class="hljs-string">"#log-table-body"</span>).html(pagefn(data.data));   <span class="hljs-comment">//加入数据到模板</span>\r\n    }\r\n\r\n</span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span></code></pre>\r\n引入js后，我们需要开始写网页代码了，先建立一个table，然后写表头(head,因为我使用的是妹子UI，所以我的表头是thead)，接着写列表部分(body，妹子UI里列表位tbody)，最后再把上一页、下一页和当前页的标签写上，如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-scrollable-horizontal am-text-ms"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"font-family: ''微软雅黑'';"</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">table</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-table   am-text-nowrap"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">thead</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">tr</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>IP地址<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>系统名称<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>访问地址<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>SessionId<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>浏览器名<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;/<span class="hljs-title">tr</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">thead</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">tbody</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"log-table-body"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"pagetmpl"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/x-dot-template"</span>&gt;</span><span class="javascript">   <span class="hljs-comment">//这里js的ID为模版的id，type这个位模版类型，具体的大家可以查看我引入的模版js的官方资源</span>\r\n                {{<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i &lt; it.length ; i++){ }}  <span class="hljs-comment">//循环</span>\r\n                    &lt;tr&gt;\r\n                        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span> {{=it[i].id}}<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span> //这里取得全是json中的字段名称\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>{{=it[i].ipAddrV4}}<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>{{=it[i].osName}}<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"label label-danger"</span>&gt;</span> {{ =it[i].description }} <span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>{{=it[i].sessionId}}<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>{{=it[i].broName}}<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n                    <span class="hljs-tag">&lt;/<span class="hljs-title">tr</span>&gt;</span>\r\n                    //这上面的注释，在实习开发中都需要删掉，写在这是方便观看\r\n                {{ } }}\r\n            </span></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">tbody</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">table</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-cf"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-fr"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-pagination tpl-pagination"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"log-table-page-controller"</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"log-controller-last"</span> <span class="hljs-attribute">onclick</span>=<span class="hljs-value">''goToLastPage()''</span>&gt;</span>上一页<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">li</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-disabled"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"log-controller-now"</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"log-controller-next"</span> <span class="hljs-attribute">onclick</span>=<span class="hljs-value">"goToNextPage()"</span>&gt;</span>下一页<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></code></pre>\r\n可能上面的html中混合js代码会麻烦一点，看起来也不是那么清晰，但是我们只要细心体会也是没有问题的。网页中的js操作我都喜欢用标签的onclick属性，个人习惯纯属爱好，勿喷。\r\n\r\n同时插入一个<a href="http://www.csdn.net/article/2013-09-23/2817020-web-performance-optimization" target="_blank">web页面优化</a>的文章，有兴趣的可以看看。\r\n\r\n里面讲解的知识点有：\r\n<ul>\r\n 	<li>Google的Web优化最佳实践</li>\r\n 	<li>雅虎的Web优化最佳实践</li>\r\n 	<li>一些工具</li>\r\n</ul>\r\n虽然说文章很古老了，但是很多原理现在一样通用。\r\n\r\n<hr />\r\n\r\n这一期比较短，我这边很多事情花费的时间太多了，今天就先这样。等两天出多角色管理和权限控制。', '[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（七）', '', 'inherit', 'closed', 'closed', '', '278-revision-v1', '', '', '2016-11-09 20:46:18', '2016-11-09 12:46:18', '', 278, 'http://acheng1314.cn/?p=279', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(281, 1, '2016-11-13 12:17:02', '2016-11-13 04:17:02', '[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（七）\r\n\r\n项目github地址：<a href="https://github.com/pc859107393/SpringMvcMybatis" target="_blank">https://github.com/pc859107393/SpringMvcMybatis</a>\r\n\r\n我的简书首页是：<a href="http://www.jianshu.com/users/86b79c50cfb3/latest_articles" target="_blank">http://www.jianshu.com/users/86b79c50cfb3/latest_articles</a>\r\n\r\n上一期是：<a href="http://www.jianshu.com/p/e94541db9901" target="_blank">优雅的SpringMvc+Mybatis应用（六）</a>\r\n\r\n扫描下面二维码加入交流QQ群：\r\n<div class="image-package imagebubble">\r\n\r\n<img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/%E8%A1%8C%E8%B5%B0%E7%9A%84java%E5%85%A8%E6%A0%88%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/%E8%A1%8C%E8%B5%B0%E7%9A%84java%E5%85%A8%E6%A0%88%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81.png" />\r\n<div class="image-caption">行走的java全栈</div>\r\n</div>\r\n<h4>工具</h4>\r\n<ul>\r\n 	<li>IDE为<strong>idea16</strong></li>\r\n 	<li>JDK环境为<strong>1.8</strong></li>\r\n 	<li>gradle构建，版本：2.14.1</li>\r\n 	<li>Mysql版本为<strong>5.5.27</strong></li>\r\n 	<li>Tomcat版本为<strong>7.0.52</strong></li>\r\n 	<li>流程图绘制（xmind）</li>\r\n</ul>\r\n<h4>本期目标</h4>\r\n<ul>\r\n 	<li>完整列表分页</li>\r\n</ul>\r\n<h4>完整分页列表界面</h4>\r\n其实分页列表也没什么，重点在于做出<strong>列表局部刷新，减少页面请求</strong>。\r\n\r\n我们先要新建一个页面用来显示列表，由于我们的后台网页结构基本已经固定，所以我们在后台主页那边设定一个访问入口，然后链接上我们的网页。这里我把左边的一个菜单改成了列表，具体效果如图：\r\n<div class="image-package imagebubble">\r\n\r\n<img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/11/ssm%E5%BA%94%E7%94%A8%E4%B8%83-%E8%AE%BF%E9%97%AE%E5%88%97%E8%A1%A8-%E5%88%86%E9%A1%B5%E5%88%97%E8%A1%A8.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/11/ssm%E5%BA%94%E7%94%A8%E4%B8%83-%E8%AE%BF%E9%97%AE%E5%88%97%E8%A1%A8-%E5%88%86%E9%A1%B5%E5%88%97%E8%A1%A8.png" />\r\n<div class="image-caption">ssm应用七-访问列表-分页列表</div>\r\n</div>\r\n在上一期结束后，我已经在列表的返回数据中加入了总页码和当前页码。这是返回的json数据：\r\n<pre class="hljs json"><code class="json">{\r\n    "<span class="hljs-attribute">code</span>": <span class="hljs-value"><span class="hljs-number">1</span></span>,\r\n    "<span class="hljs-attribute">msg</span>": <span class="hljs-value"><span class="hljs-string">"查询成功"</span></span>,\r\n    "<span class="hljs-attribute">data</span>": <span class="hljs-value">[\r\n        {\r\n            "<span class="hljs-attribute">id</span>": <span class="hljs-number">713</span>,\r\n            "<span class="hljs-attribute">sessionId</span>": <span class="hljs-string">"35B4776D32F8E12679FBC8F45A11F8F1"</span>,\r\n            "<span class="hljs-attribute">ipAddrV4</span>": <span class="hljs-string">"127.0.0.1"</span>,\r\n            "<span class="hljs-attribute">osName</span>": <span class="hljs-string">"Windows 10"</span>,\r\n            "<span class="hljs-attribute">broName</span>": <span class="hljs-string">"Microsoft Edge 14"</span>,\r\n            "<span class="hljs-attribute">broVersion</span>": <span class="hljs-string">"14.14393"</span>,\r\n            "<span class="hljs-attribute">description</span>": <span class="hljs-string">"/mvc/listActionLog"</span>,\r\n            "<span class="hljs-attribute">other</span>": <span class="hljs-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.79 Safari/537.36 Edge/14.14393"</span>,\r\n            "<span class="hljs-attribute">method</span>": <span class="hljs-string">"GET"</span>\r\n        }\r\n    ]</span>,\r\n    "<span class="hljs-attribute">pageNum</span>": <span class="hljs-value"><span class="hljs-number">1</span></span>,\r\n    "<span class="hljs-attribute">pageSize</span>": <span class="hljs-value"><span class="hljs-number">15</span></span>,\r\n    "<span class="hljs-attribute">totalNum</span>": <span class="hljs-value"><span class="hljs-number">44</span>\r\n</span>}</code></pre>\r\n具体的流程图如下：\r\n<div class="image-package imagebubble">\r\n\r\n<img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/11/ssm%E5%BA%94%E7%94%A8%E4%B8%83-%E8%AE%BF%E9%97%AE%E5%88%97%E8%A1%A8-%E6%B5%81%E7%A8%8B%E5%9B%BE.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/11/ssm%E5%BA%94%E7%94%A8%E4%B8%83-%E8%AE%BF%E9%97%AE%E5%88%97%E8%A1%A8-%E6%B5%81%E7%A8%8B%E5%9B%BE.png" />\r\n<div class="image-caption">ssm应用七-访问列表-流程图</div>\r\n</div>\r\n按照上面我的截图中，我们可以看到我们只需要把上一页和下一页的ajax调用写好就能完成我们这个简单分页的网络请求。 至于第一页和最后一页的按钮事件也就是把页码设定为1和最后一页。那我们先看看下一页的js调用：\r\n<pre class="hljs javascript"><code class="javascript"><span class="hljs-keyword">var</span> pageNum;    <span class="hljs-comment">//页码变量</span>\r\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">goToNextPage</span>() </span>{\r\n        pageNum = <span class="hljs-built_in">parseInt</span>(pageNum) + <span class="hljs-number">1</span>;    <span class="hljs-comment">//这里必须用parseInt(pageNum)这样才能拿到int型值，否则这里拿出来的是字符串</span>\r\n        $.ajax({\r\n            type: <span class="hljs-string">"GET"</span>,    <span class="hljs-comment">//后端分页接口这里是没有指定请求方式</span>\r\n            url: <span class="hljs-string">''/actionLog/findLogList?pageNum=''</span> + pageNum + <span class="hljs-string">''&amp;pageSize=15''</span>,\r\n            dataType: <span class="hljs-string">''json''</span>, <span class="hljs-comment">//当这里指定为json的时候，获取到了数据后会自己解析的，只需要 返回值.字段名称 就能使用了</span>\r\n            cache: <span class="hljs-literal">false</span>,   <span class="hljs-comment">//不适用缓存</span>\r\n            success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{\r\n                <span class="hljs-keyword">if</span> (data.code == <span class="hljs-number">1</span>) {\r\n                    updateList(data);   <span class="hljs-comment">//更新列表界面</span>\r\n                    pageNum = data.pageNum;\r\n                    $(<span class="hljs-string">"#log-controller-now"</span>).html(pageNum); <span class="hljs-comment">//把当前页面输出到网页对应ID的标签上面</span>\r\n                }\r\n            }\r\n        });\r\n    }</code></pre>\r\n从上面我们可以看到，我们的分页列表的请求变化的是页码，然后每一页长度是固定（也可以按照你的喜好来）的，然后我们拿到返回的数据进行加载就行了。\r\n\r\n既然我们上面已经看到了下一页的界面数据加载了，同理我们可以得出上一页的代码如下：\r\n<pre class="hljs javascript"><code class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">goToLastPage</span>() </span>{\r\n        pageNum = <span class="hljs-built_in">parseInt</span>(pageNum) - <span class="hljs-number">1</span>;\r\n        $.ajax({\r\n            type: <span class="hljs-string">"GET"</span>,\r\n            url: <span class="hljs-string">''/actionLog/findLogList?pageNum=''</span> + pageNum + <span class="hljs-string">''&amp;pageSize=15''</span>,\r\n            dataType: <span class="hljs-string">''json''</span>, <span class="hljs-comment">//当这里指定为json的时候，获取到了数据后会自己解析的，只需要 返回值.字段名称 就能使用了</span>\r\n            cache: <span class="hljs-literal">false</span>,\r\n            success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{\r\n                <span class="hljs-keyword">if</span> (data.code == <span class="hljs-number">1</span>) {\r\n                    updateList(data);\r\n                    pageNum = data.pageNum;\r\n                    $(<span class="hljs-string">"#log-controller-now"</span>).html(pageNum);\r\n                }\r\n            }\r\n        });\r\n    }</code></pre>\r\n但是我们虽然说js写出来，但是怎么把网页数据加载进去呢？？？就这一点我踩了4个钟头的坑，然后问了下老司机，然后老司机告诉我<strong>使用模版</strong>进行网页数据的加载。<strong>在这里我们需要引入模版的js，js名称是：doT.min.js</strong>。<a href="http://dotjs.cn/" target="_blank">模版官方文档</a>。\r\n\r\n从上面的上一页和下一页访问的js方法中，我们可以看到都使用了updateList(data)这个方法，这个方法就是来加载界面的，具体如下：\r\n<pre class="hljs xml"><code class="xml">//这一点js我们写在网页的body后面，因为我们网页的列表数据是异步加载的。所以让他直接执行就好了\r\n<span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"application/javascript"</span>&gt;</span><span class="javascript">\r\n    $.ajax({\r\n        type: <span class="hljs-string">"GET"</span>,\r\n        url: <span class="hljs-string">''/actionLog/findLogList?pageNum=1&amp;pageSize=15''</span>,\r\n        dataType: <span class="hljs-string">''json''</span>, <span class="hljs-comment">//当这里指定为json的时候，获取到了数据后会自己解析的，只需要 返回值.字段名称 就能使用了</span>\r\n        cache: <span class="hljs-literal">false</span>,\r\n        success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{\r\n            <span class="hljs-keyword">if</span> (data.code == <span class="hljs-number">1</span>) {\r\n                pagefn = doT.template($(<span class="hljs-string">"#pagetmpl"</span>).html());   <span class="hljs-comment">//初始化列表模板，仅需要在某个页面初始化一次</span>\r\n                updateList(data);   <span class="hljs-comment">//更新数据</span>\r\n                pageNum = data.pageNum;\r\n            }\r\n        }\r\n    });\r\n\r\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateList</span>(<span class="hljs-params">data</span>) </span>{\r\n        $(<span class="hljs-string">"#pagetmpl"</span>).empty(); <span class="hljs-comment">//清空模板数据</span>\r\n        $(<span class="hljs-string">"#log-table-body"</span>).html(pagefn(data.data));   <span class="hljs-comment">//加入数据到模板</span>\r\n    }\r\n\r\n</span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span></code></pre>\r\n引入js后，我们需要开始写网页代码了，先建立一个table，然后写表头(head,因为我使用的是妹子UI，所以我的表头是thead)，接着写列表部分(body，妹子UI里列表位tbody)，最后再把上一页、下一页和当前页的标签写上，如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-scrollable-horizontal am-text-ms"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"font-family: ''微软雅黑'';"</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">table</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-table   am-text-nowrap"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">thead</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">tr</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>IP地址<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>系统名称<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>访问地址<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>SessionId<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">th</span>&gt;</span>浏览器名<span class="hljs-tag">&lt;/<span class="hljs-title">th</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;/<span class="hljs-title">tr</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">thead</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">tbody</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"log-table-body"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"pagetmpl"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/x-dot-template"</span>&gt;</span><span class="javascript">   <span class="hljs-comment">//这里js的ID为模版的id，type这个位模版类型，具体的大家可以查看我引入的模版js的官方资源</span>\r\n                {{<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i &lt; it.length ; i++){ }}  <span class="hljs-comment">//循环</span>\r\n                    &lt;tr&gt;\r\n                        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span> {{=it[i].id}}<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span> //这里取得全是json中的字段名称\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>{{=it[i].ipAddrV4}}<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>{{=it[i].osName}}<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"label label-danger"</span>&gt;</span> {{ =it[i].description }} <span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>{{=it[i].sessionId}}<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n                        <span class="hljs-tag">&lt;<span class="hljs-title">td</span>&gt;</span>{{=it[i].broName}}<span class="hljs-tag">&lt;/<span class="hljs-title">td</span>&gt;</span>\r\n                    <span class="hljs-tag">&lt;/<span class="hljs-title">tr</span>&gt;</span>\r\n                    //这上面的注释，在实习开发中都需要删掉，写在这是方便观看\r\n                {{ } }}\r\n            </span></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">tbody</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">table</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-cf"</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-fr"</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-pagination tpl-pagination"</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"log-table-page-controller"</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"log-controller-last"</span> <span class="hljs-attribute">onclick</span>=<span class="hljs-value">''goToLastPage()''</span>&gt;</span>上一页<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">li</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"am-disabled"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"log-controller-now"</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\r\n                <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"log-controller-next"</span> <span class="hljs-attribute">onclick</span>=<span class="hljs-value">"goToNextPage()"</span>&gt;</span>下一页<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></code></pre>\r\n可能上面的html中混合js代码会麻烦一点，看起来也不是那么清晰，但是我们只要细心体会也是没有问题的。网页中的js操作我都喜欢用标签的onclick属性，个人习惯纯属爱好，勿喷。\r\n\r\n同时插入一个<a href="http://www.csdn.net/article/2013-09-23/2817020-web-performance-optimization" target="_blank">web页面优化</a>的文章，有兴趣的可以看看。\r\n\r\n里面讲解的知识点有：\r\n<ul>\r\n 	<li>Google的Web优化最佳实践</li>\r\n 	<li>雅虎的Web优化最佳实践</li>\r\n 	<li>一些工具</li>\r\n</ul>\r\n虽然说文章很古老了，但是很多原理现在一样通用。\r\n\r\n<hr />\r\n\r\n这一期比较短，我这边很多事情花费的时间太多了，今天就先这样。等两天出多角色管理和权限控制。', '[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（七）', '', 'inherit', 'closed', 'closed', '', '278-revision-v1', '', '', '2016-11-13 12:17:02', '2016-11-13 04:17:02', '', 278, 'http://acheng1314.cn/?p=281', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(282, 1, '2016-11-16 00:51:13', '2016-11-15 16:51:13', '[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）\r\n\r\n项目github地址：<a href="https://github.com/pc859107393/SpringMvcMybatis" target="_blank">https://github.com/pc859107393/SpringMvcMybatis</a>\r\n\r\n我的简书首页是：<a href="http://www.jianshu.com/users/86b79c50cfb3/latest_articles" target="_blank">http://www.jianshu.com/users/86b79c50cfb3/latest_articles</a>\r\n\r\n上一期是：<a href="http://www.jianshu.com/p/def0076976aa" target="_blank">优雅的SpringMvc+Mybatis应用（七）</a>\r\n\r\n扫描下面二维码加入交流QQ群：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/%E8%A1%8C%E8%B5%B0%E7%9A%84java%E5%85%A8%E6%A0%88%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/%E8%A1%8C%E8%B5%B0%E7%9A%84java%E5%85%A8%E6%A0%88%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81.png" />\r\n<div class="image-caption">行走的java全栈</div>\r\n</div>\r\n<h4>工具</h4>\r\n<ul>\r\n 	<li>IDE为<strong>idea16</strong></li>\r\n 	<li>JDK环境为<strong>1.8</strong></li>\r\n 	<li>gradle构建，版本：2.14.1</li>\r\n 	<li>Mysql版本为<strong>5.5.27</strong></li>\r\n 	<li>Tomcat版本为<strong>7.0.52</strong></li>\r\n 	<li>流程图绘制（xmind）</li>\r\n</ul>\r\n<h4>本期目标</h4>\r\n<ul>\r\n 	<li>多角色控制思路整理</li>\r\n 	<li>第一季项目总结</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h3>多角色控制思路整理</h3>\r\n关于多角色控制，起始用户角色按照用户职能分工，一般来说思路如下：\r\n<ul>\r\n 	<li>登陆成功根据用户角色，跳转不同的界面模块</li>\r\n 	<li>每个界面模块都有用户权限校验，防止用户逾越雷池一步</li>\r\n 	<li>后端接口需要做用户角色校验，用户异常调用接口，就中断用户访问。</li>\r\n 	<li>后端的web页面根据不同用户分组存放，然后各个用户之间不做关联</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h3>第一季项目总结</h3>\r\n第一季的仓库管理系统到目前为止基本上算是结束了。虽然说不是完整的系统，但是我们在里面已经大概把基本的web开发的东西都梳理过了。我们现在来从头到尾的梳理一下吧。从我们项目从头到尾，我们分为几个阶段：\r\n<ul>\r\n 	<li>项目基本框架选择</li>\r\n 	<li>项目框架整合、验证</li>\r\n 	<li>项目需求分析</li>\r\n 	<li>功能模块开发思路整理</li>\r\n 	<li>Spring经典三层应用</li>\r\n 	<li>开发细节思考</li>\r\n 	<li>web页面简单优化</li>\r\n 	<li>js网络请求实现</li>\r\n 	<li><strong>···</strong> 等等\r\n\r\n<hr />\r\n\r\n项目基本框架选择：\r\n\r\n说实话这是一个技术活，我们程序员的角度来说无外乎就是实现容易、扩展便捷、运行稳定等等。按照软件工程的话来说就是节约成本、提高质量。\r\n\r\n说点人话就是：从产品设计到编码，这一切基本都是人的活动，所以我们选择的框架首先要降低学习技术成本、开发技术成本、设计转换编码的成本、不同应用(模块)整合成本等等。\r\n\r\n再总结一下：我们程序的编码语言应该是我们最熟悉的，应用的各个模块之间交互应该是我们擅长的。\r\n\r\n所以我选择了java作为主要的编程语言，后端框架就是Spring+SpringMVC+Mybatis，后端数据库为Mysql。\r\n\r\n项目框架整合、验证：\r\n\r\n首先我们需要使用构建工具引入Spring+SpringMVC+Mybatis这些框架的jar包，方式有大概两种：①自行下载jar包②使用自动化构建工具完成下载。方式一中需要我们自行选择jar包手动下载然后引入到lib文件夹。方式二我们只需要使用类似代码的方式控制程序自动下载。先进的工具能提高生产力，所以我们选择自动化构建完成jar包引入。\r\n\r\n第一步，引入jar包，我们在gradle中引入，代码如下：\r\n<pre class="hljs cs"><code class="cs">  testCompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''junit''</span>, name: <span class="hljs-string">''junit''</span>, version: <span class="hljs-string">''4.11''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''ch.qos.logback''</span>, name: <span class="hljs-string">''logback-classic''</span>, version: <span class="hljs-string">''1.1.1''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.slf4j''</span>, name: <span class="hljs-string">''slf4j-api''</span>, version: <span class="hljs-string">''1.7.6''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''com.alibaba''</span>, name: <span class="hljs-string">''druid''</span>, version: <span class="hljs-string">''1.0.25''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.mybatis''</span>, name: <span class="hljs-string">''mybatis''</span>, version: <span class="hljs-string">''3.4.1''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.mybatis''</span>, name: <span class="hljs-string">''mybatis-spring''</span>, version: <span class="hljs-string">''1.3.0''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''taglibs''</span>, name: <span class="hljs-string">''standard''</span>, version: <span class="hljs-string">''1.1.2''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''jstl''</span>, name: <span class="hljs-string">''jstl''</span>, version: <span class="hljs-string">''1.2''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''com.google.code.gson''</span>, name: <span class="hljs-string">''gson''</span>, version: <span class="hljs-string">''2.7''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''javax.servlet''</span>, name: <span class="hljs-string">''javax.servlet-api''</span>, version: <span class="hljs-string">''3.1.0''</span>\r\n  <span class="hljs-comment">//Spring 框架基本的核心工具类</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-core''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\n  <span class="hljs-comment">//访问配置文件、创建和管理bean 以及进行Inversion of Control / Dependency Injection（IoC/DI）操作相关的所有类。</span>\r\n  <span class="hljs-comment">//如果应用只需基本的IoC/DI 支持，引入spring-core.jar 及spring-beans.jar 文件就可以了。</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-beans''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\n  <span class="hljs-comment">//Spring 核心提供了大量扩展。可以找到使用Spring ApplicationContext特性时所需的全部类，JDNI 所需的全部类，instrumentation组件以及校验Validation 方面的相关类。</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-context''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\n  <span class="hljs-comment">//Spring 对JDBC 数据访问进行封装的所有类。</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-jdbc''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\n  <span class="hljs-comment">//spring-tx 事务管理</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-tx''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\n  <span class="hljs-comment">//Web 应用开发时，用到Spring 框架时所需的核心类，包括自动载入Web Application Context 特性的类、Struts 与JSF 集成类、文件上传的支持类、Filter 类和大量工具辅助类。</span>\r\n  <span class="hljs-comment">//外部依赖spring-context, Servlet API, (JSP API, JSTL, Commons FileUpload, COS)。</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-web''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\n  <span class="hljs-comment">//Spring MVC 框架相关的所有类。包括框架的Servlets，Web MVC框架，控制器和视图支持。</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-webmvc''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-test''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''redis.clients''</span>, name: <span class="hljs-string">''jedis''</span>, version: <span class="hljs-string">''2.7.3''</span>\r\n  <span class="hljs-comment">//序列化和反序列化工具</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''com.dyuproject.protostuff''</span>, name: <span class="hljs-string">''protostuff-core''</span>, version: <span class="hljs-string">''1.0.8''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''com.dyuproject.protostuff''</span>, name: <span class="hljs-string">''protostuff-runtime''</span>, version: <span class="hljs-string">''1.0.8''</span>\r\n  <span class="hljs-comment">//文件上传工具类，不过可以使用Spring自带的文件工具</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''commons-collections''</span>, name: <span class="hljs-string">''commons-collections''</span>, version: <span class="hljs-string">''3.2.2''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''commons-fileupload''</span>, name: <span class="hljs-string">''commons-fileupload''</span>, version: <span class="hljs-string">''1.3.2''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''commons-io''</span>, name: <span class="hljs-string">''commons-io''</span>, version: <span class="hljs-string">''2.5''</span>\r\n  <span class="hljs-comment">//请求的UserAgent拆装箱工具</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''eu.bitwalker''</span>, name: <span class="hljs-string">''UserAgentUtils''</span>, version: <span class="hljs-string">''1.20''</span>\r\n  runtime <span class="hljs-keyword">group</span>: <span class="hljs-string">''mysql''</span>, name: <span class="hljs-string">''mysql-connector-java''</span>, version: <span class="hljs-string">''5.1.37''</span></code></pre>\r\n第二步，设置各个框架，并保存到配置文件中，我们的WebApp最重要的最基本的配置是web.xml，这里配置了我们基本程序的设定，同样的我们需要在这里导入一些设置，如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-doctype">&lt;!DOCTYPE web-app PUBLIC\r\n      "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"\r\n      "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">web-app</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"http://xmlns.jcp.org/xml/ns/javaee"</span> <span class="hljs-attribute">xmlns:xsi</span>=<span class="hljs-value">"http://www.w3.org/2001/XMLSchema-instance"</span>\r\n       <span class="hljs-attribute">xsi:schemaLocation</span>=<span class="hljs-value">"http://xmlns.jcp.org/xml/ns/javaee\r\n                    http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span>\r\n       <span class="hljs-attribute">version</span>=<span class="hljs-value">"3.1"</span> <span class="hljs-attribute">metadata-complete</span>=<span class="hljs-value">"true"</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file-list</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>index.html<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>index.htm<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>index.jsp<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>default.html<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>default.htm<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>default.jsp<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file-list</span>&gt;</span>\r\n  <span class="hljs-comment">&lt;!-- 如果是用mvn命令生成的xml，需要修改servlet版本为3.1 --&gt;</span>\r\n  <span class="hljs-comment">&lt;!-- 配置DispatcherServlet --&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">servlet</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">display-name</span>&gt;</span>SSM<span class="hljs-tag">&lt;/<span class="hljs-title">display-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>mvc-dispatcher<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-class</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 配置springMVC需要加载的配置文件\r\n          spring-dao.xml,spring-service.xml,spring-web.xml\r\n          Mybatis - &gt; spring -&gt; springmvc\r\n       --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>classpath:spring/spring-*.xml<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">servlet</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>mvc-dispatcher<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 默认匹配所有的请求 --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;url-pattern&gt;/css/*&lt;/url-pattern&gt;--&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;url-pattern&gt;/images/*&lt;/url-pattern&gt;--&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;url-pattern&gt;/fonts/*&lt;/url-pattern&gt;--&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n\r\n  <span class="hljs-comment">&lt;!-- spring框架提供的字符集过滤器 --&gt;</span>\r\n  <span class="hljs-comment">&lt;!-- spring Web MVC框架提供了org.springframework.web.filter.CharacterEncodingFilter用于解决POST方式造成的中文乱码问题  --&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">filter</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-class</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- force强制，促使 --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>forceEncoding<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">filter</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">filter-mapping</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">filter-mapping</span>&gt;</span>\r\n\r\n  <span class="hljs-comment">&lt;!--druid ==&gt; WEB方式监控配置--&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">servlet</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>DruidStatView<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-class</span>&gt;</span>com.alibaba.druid.support.http.StatViewServlet<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-class</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-comment">&lt;!-- 用户名 --&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>loginUsername<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>pc859107393<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-comment">&lt;!-- 密码 --&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>loginPassword<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>laopo5201314<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">servlet</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>DruidStatView<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/druid/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">filter</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">filter-name</span>&gt;</span>druidWebStatFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">filter-class</span>&gt;</span>com.alibaba.druid.support.http.WebStatFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-class</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>exclusions<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>/public/*,*.js,*.css,/druid*,*.jsp,*.swf<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>principalSessionName<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>sessionInfo<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>profileEnable<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">filter</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">filter-mapping</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">filter-name</span>&gt;</span>druidWebStatFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">filter-mapping</span>&gt;</span>\r\n\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">error-page</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">error-code</span>&gt;</span>404<span class="hljs-tag">&lt;/<span class="hljs-title">error-code</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">location</span>&gt;</span>/static/view/404.html<span class="hljs-tag">&lt;/<span class="hljs-title">location</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">error-page</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">web-app</span>&gt;</span></code></pre>\r\n按照上面所说的，我们生成spring文件的存放路径后，我们接着应该做的是控制spring，那么spring的配置文件如下(很多时候我们可以看到他们有的只有一个配置文件，而我将它们拆分成为三个配置文件)，具体实现如下：\r\n<ul>\r\n 	<li>spring-dao.xml配置文件\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">beans</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans"</span>\r\n  <span class="hljs-attribute">xmlns:xsi</span>=<span class="hljs-value">"http://www.w3.org/2001/XMLSchema-instance"</span>\r\n  <span class="hljs-attribute">xmlns:context</span>=<span class="hljs-value">"http://www.springframework.org/schema/context"</span>\r\n  <span class="hljs-attribute">xsi:schemaLocation</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans\r\nhttp://www.springframework.org/schema/beans/spring-beans.xsd\r\nhttp://www.springframework.org/schema/context\r\nhttp://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span>\r\n<span class="hljs-comment">&lt;!-- 配置整合mybatis过程 --&gt;</span>\r\n<span class="hljs-comment">&lt;!-- 1.配置数据库相关参数properties的属性：${url} --&gt;</span>\r\n<span class="hljs-comment">&lt;!-- 这里使用代码提示工具可以直接生成jdbc的配置文件 --&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">context:property-placeholder</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"classpath:jdbc.properties"</span>/&gt;</span>\r\n\r\n<span class="hljs-comment">&lt;!-- 2.数据库连接池，采用阿里巴巴的Druid --&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"dataSource"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"com.alibaba.druid.pool.DruidDataSource"</span>\r\n     <span class="hljs-attribute">init-method</span>=<span class="hljs-value">"init"</span> <span class="hljs-attribute">destroy-method</span>=<span class="hljs-value">"close"</span>&gt;</span>\r\n   <span class="hljs-comment">&lt;!-- 配置连接池属性 --&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"driverClassName"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"${jdbc.driver}"</span>/&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"url"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"${jdbc.url}"</span>/&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"username"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"${jdbc.username}"</span>/&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"password"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"${jdbc.password}"</span>/&gt;</span>\r\n\r\n   <span class="hljs-comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"initialSize"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"1"</span> /&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"minIdle"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"1"</span> /&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"maxActive"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"10"</span> /&gt;</span>\r\n\r\n   <span class="hljs-comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"maxWait"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"10000"</span> /&gt;</span>\r\n\r\n   <span class="hljs-comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"timeBetweenEvictionRunsMillis"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"60000"</span> /&gt;</span>\r\n\r\n   <span class="hljs-comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"minEvictableIdleTimeMillis"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"300000"</span> /&gt;</span>\r\n\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"testWhileIdle"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"true"</span> /&gt;</span>\r\n\r\n   <span class="hljs-comment">&lt;!-- 这里建议配置为TRUE，防止取到的连接不可用 --&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"testOnBorrow"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"true"</span> /&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"testOnReturn"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"false"</span> /&gt;</span>\r\n\r\n   <span class="hljs-comment">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"poolPreparedStatements"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"true"</span> /&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"maxPoolPreparedStatementPerConnectionSize"</span>\r\n             <span class="hljs-attribute">value</span>=<span class="hljs-value">"20"</span> /&gt;</span>\r\n\r\n   <span class="hljs-comment">&lt;!-- 这里配置提交方式，默认就是TRUE，可以不用配置 --&gt;</span>\r\n\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"defaultAutoCommit"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"true"</span> /&gt;</span>\r\n\r\n   <span class="hljs-comment">&lt;!-- 验证连接有效与否的SQL，不同的数据配置不同 --&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"validationQuery"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"select 1 "</span> /&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"filters"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"stat"</span> /&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"proxyFilters"</span>&gt;</span>\r\n       <span class="hljs-tag">&lt;<span class="hljs-title">list</span>&gt;</span>\r\n           <span class="hljs-tag">&lt;<span class="hljs-title">ref</span> <span class="hljs-attribute">bean</span>=<span class="hljs-value">"logFilter"</span> /&gt;</span>\r\n       <span class="hljs-tag">&lt;/<span class="hljs-title">list</span>&gt;</span>\r\n   <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n<span class="hljs-comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"sqlSessionFactory"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 注入数据库连接池 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"dataSource"</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"dataSource"</span>/&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"configLocation"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"classpath:mybatis-config.xml"</span>/&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 扫描entity包 使用别名 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"typeAliasesPackage"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"cn.acheng1314.domain"</span>/&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"mapperLocations"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"classpath:mapper/*.xml"</span>/&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n\r\n<span class="hljs-comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 --&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 注入sqlSessionFactory --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"sqlSessionFactoryBeanName"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"sqlSessionFactory"</span>/&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"basePackage"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"cn.acheng1314.dao"</span>/&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"logFilter"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"com.alibaba.druid.filter.logging.Slf4jLogFilter"</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"statementExecutableSqlLogEnable"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"false"</span> /&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">beans</span>&gt;</span></code></pre>\r\n</li>\r\n</ul>\r\n</li>\r\n 	<li>spring-service.xml配置文件\r\n<pre class="hljs xml"><code class="xml">  <span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">beans</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans"</span>\r\n         <span class="hljs-attribute">xmlns:xsi</span>=<span class="hljs-value">"http://www.w3.org/2001/XMLSchema-instance"</span>\r\n         <span class="hljs-attribute">xmlns:context</span>=<span class="hljs-value">"http://www.springframework.org/schema/context"</span>\r\n         <span class="hljs-attribute">xmlns:tx</span>=<span class="hljs-value">"http://www.springframework.org/schema/tx"</span>\r\n         <span class="hljs-attribute">xsi:schemaLocation</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans\r\n      http://www.springframework.org/schema/beans/spring-beans.xsd\r\n      http://www.springframework.org/schema/context\r\n      http://www.springframework.org/schema/context/spring-context.xsd\r\n      http://www.springframework.org/schema/tx\r\n      http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 扫描service包下所有使用注解的类型 --&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- cn.acheng1314为我们应用的包名,当然也是我们前面提到过的GroupId --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">context:component-scan</span> <span class="hljs-attribute">base-package</span>=<span class="hljs-value">"cn.acheng1314.service"</span>&gt;</span>\r\n          <span class="hljs-comment">&lt;!-- 只扫描标记了Service的类 --&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">context:include-filter</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"annotation"</span> <span class="hljs-attribute">expression</span>=<span class="hljs-value">"org.springframework.stereotype.Service"</span>/&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">context:component-scan</span>&gt;</span>\r\n\r\n      <span class="hljs-comment">&lt;!-- 配置事务管理器 --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"transactionManager"</span>\r\n            <span class="hljs-attribute">class</span>=<span class="hljs-value">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span>\r\n          <span class="hljs-comment">&lt;!-- 注入数据库连接池 --&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"dataSource"</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"dataSource"</span>/&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n\r\n      <span class="hljs-comment">&lt;!-- 配置基于注解的声明式事务 --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">tx:annotation-driven</span> <span class="hljs-attribute">transaction-manager</span>=<span class="hljs-value">"transactionManager"</span>/&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">beans</span>&gt;</span></code></pre>\r\n</li>\r\n 	<li>spring-web.xml配置文件\r\n<pre class="hljs xml"><code class="xml">  <span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">beans</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans"</span>\r\n         <span class="hljs-attribute">xmlns:xsi</span>=<span class="hljs-value">"http://www.w3.org/2001/XMLSchema-instance"</span>\r\n         <span class="hljs-attribute">xmlns:context</span>=<span class="hljs-value">"http://www.springframework.org/schema/context"</span>\r\n         <span class="hljs-attribute">xmlns:mvc</span>=<span class="hljs-value">"http://www.springframework.org/schema/mvc"</span>\r\n         <span class="hljs-attribute">xsi:schemaLocation</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans\r\n      http://www.springframework.org/schema/beans/spring-beans.xsd\r\n      http://www.springframework.org/schema/context\r\n      http://www.springframework.org/schema/context/spring-context.xsd\r\n      http://www.springframework.org/schema/mvc\r\n      http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 配置SpringMVC --&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 1.开启SpringMVC注解模式 --&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 简化配置：\r\n          (1)自动注册DefaultAnootationHandlerMapping,AnotationMethodHandlerAdapter\r\n          (2)提供一些列：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat, xml,json默认读写支持\r\n      --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:annotation-driven</span>/&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 2.静态资源默认servlet配置\r\n          (1)加入对静态资源的处理：js,gif,png\r\n          (2)允许使用"/"做整体映射\r\n       --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/css/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/css/"</span>/&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/images/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/images/"</span>/&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/view/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/view/"</span>/&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/js/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/js/"</span>/&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/fonts/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/fonts/"</span>/&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:default-servlet-handler</span>/&gt;</span>\r\n\r\n      <span class="hljs-comment">&lt;!-- 访问拦截  --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:interceptors</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">mvc:interceptor</span>&gt;</span>\r\n              <span class="hljs-tag">&lt;<span class="hljs-title">mvc:mapping</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/**/**"</span>/&gt;</span>\r\n              <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"cn.acheng1314.intercepter.LoginHandlerInterceptor"</span>/&gt;</span>\r\n          <span class="hljs-tag">&lt;/<span class="hljs-title">mvc:interceptor</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">mvc:interceptors</span>&gt;</span>\r\n\r\n      <span class="hljs-comment">&lt;!-- 3.配置jsp 显示ViewResolver --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"viewClass"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"prefix"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"/WEB-INF/jsp/"</span>/&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"suffix"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">".jsp"</span>/&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"multipartResolver"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"maxUploadSize"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"10000000"</span>/&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n\r\n      <span class="hljs-comment">&lt;!-- 4.扫描web相关的bean --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">context:component-scan</span> <span class="hljs-attribute">base-package</span>=<span class="hljs-value">"cn.acheng1314.mvc"</span>&gt;</span>\r\n          <span class="hljs-comment">&lt;!-- 制定扫包规则 ,只扫描使用@Controller注解的JAVA类 --&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">context:include-filter</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"annotation"</span> <span class="hljs-attribute">expression</span>=<span class="hljs-value">"org.springframework.stereotype.Controller"</span>/&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">context:component-scan</span>&gt;</span>\r\n\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">beans</span>&gt;</span></code></pre>\r\n上面的Spring的配置文件我们完成后，我们需要把对应的其他文件配置好，如jdbc、mapper、mybatis等的配置文件，以及开发、测试的代码和资源文件的存放目录等等。这些在我们的第一期就能看到了，这里不再赘述。\r\n\r\n关于项目框架验证，我们需要在搭建完成后，打开日志调试来看信息，有这几点原则：\r\n<ul>\r\n 	<li>数据库链接正常\r\n<ul>\r\n 	<li>数据库驱动、数据库服务</li>\r\n 	<li>数据库配置文件</li>\r\n 	<li>数据库测试</li>\r\n</ul>\r\n</li>\r\n 	<li>网页资源访问正常\r\n<ul>\r\n 	<li>静态html、js、css、font、image、MP3等</li>\r\n 	<li>动态的接口</li>\r\n 	<li>动态页面如：jsp</li>\r\n</ul>\r\n</li>\r\n 	<li>提示信息正常\r\n<ul>\r\n 	<li>异常输出</li>\r\n 	<li>log输出</li>\r\n</ul>\r\n</li>\r\n 	<li>等等···</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n具体的检测我们在第二期里面提到过，这里我们也就跳过吧，毕竟主角还在后面。\r\n\r\n项目需求分析，本身来说也不是我们作为程序员应该考虑的，毕竟涉及到的东西很多，这里我么略过，我们在以后的开发中再提。\r\n\r\n起始这里我最想说的额就是前面开发的细节，也就是我们当中用到的知识点。按照我们开发的思路来说，我们先从Dao层来实现，来一起看看前面用到的知识点。\r\n\r\n首先我们需要一个基类的Dao接口，同时我们需要用泛型来解耦，告诉程序我们这里需要的什么样的对象来存入数据库，同时某些对象特有的方法那么就在该对象的自身的接口中实现。我们的基类Dao层如下：\r\n<pre class="hljs java"><code class="java"><span class="hljs-comment">/**\r\n * 通过接口编程\r\n *\r\n * <span class="hljs-doctag">@param</span> &lt;T&gt; 泛型用于解耦，同时避免写重复代码\r\n */</span>\r\n<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Dao</span>&lt;<span class="hljs-title">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Serializable</span>&gt; </span>{\r\n    <span class="hljs-comment">/**\r\n     * 添加某个对象\r\n     *\r\n     * <span class="hljs-doctag">@param</span> t 待添加的对象\r\n     * <span class="hljs-doctag">@return</span> 返回受影响的行数\r\n     */</span>\r\n    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(T t)</span></span>;\r\n\r\n    <span class="hljs-comment">/**\r\n     * 删除某个对象，在企业开发中，我们一般不做物理删除，只是添加某个字段对其数据进行可用控制\r\n     *\r\n     * <span class="hljs-doctag">@param</span> t 待删除对象\r\n     * <span class="hljs-doctag">@return</span> 返回受影响的条数\r\n     */</span>\r\n    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">del</span><span class="hljs-params">(T t)</span></span>;\r\n\r\n    <span class="hljs-comment">/**\r\n     * 更新某个对象\r\n     *\r\n     * <span class="hljs-doctag">@param</span> t 待更新对象\r\n     * <span class="hljs-doctag">@return</span> 返回受影响的条数\r\n     */</span>\r\n    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(T t)</span></span>;\r\n\r\n    <span class="hljs-comment">/**\r\n     * 通过ID查找一个对象\r\n     *\r\n     * <span class="hljs-doctag">@param</span> Id 待查询的对象的ID\r\n     * <span class="hljs-doctag">@return</span> 返回该ID对应的对象\r\n     */</span>\r\n    <span class="hljs-function">T <span class="hljs-title">findOneById</span><span class="hljs-params">(Serializable Id)</span></span>;\r\n\r\n    <span class="hljs-comment">/**\r\n     * 查找对象集合\r\n     *\r\n     * <span class="hljs-doctag">@return</span> 返回对象集合\r\n     */</span>\r\n    <span class="hljs-function">List&lt;T&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;\r\n}</code></pre>\r\n这里我们需要重点说一下多参数的Dao方法和返回List的Dao方法，话不多说，直接上代码：\r\n<pre class="hljs cs"><code class="cs"><span class="hljs-comment">//Dao层中，多参数的方法如何让Mybatis响应？</span>\r\n    <span class="hljs-comment">/**\r\n     * 分页查询\r\n     * @param offset    起始位置\r\n     * @param limit     每页数量\r\n     * @return\r\n     */</span>\r\n    <span class="hljs-function">List&lt;UserActionLog&gt; <span class="hljs-title">findAll</span>(<span class="hljs-params">@Param(<span class="hljs-string">"offset"</span></span>) <span class="hljs-keyword">int</span> offset, @<span class="hljs-title">Param</span>(<span class="hljs-params"><span class="hljs-string">"limit"</span></span>) <span class="hljs-keyword">int</span> limit)</span>;\r\n<span class="hljs-comment">//从上面我们可以看到，我们方法参数的前面都加上了注解@Param()，同时在注解中填写了对应的名字，这是为何？请看下面的Mybatis的xml中的内容：</span>\r\n\r\n    &lt;<span class="hljs-keyword">select</span> id=<span class="hljs-string">"findAll"</span> resultType=<span class="hljs-string">"cn.acheng1314.domain.UserActionLog"</span> &gt;\r\n        SELECT\r\n            *\r\n        FROM\r\n            `user_action_log`\r\n        ORDER BY\r\n            `id`\r\n        DESC\r\n        LIMIT <span class="hljs-preprocessor">#{offset}, #{limit}</span>\r\n    &lt;/<span class="hljs-keyword">select</span>&gt;\r\n<span class="hljs-comment">//在上面的Mybatis的xml中的内容看来，我们是需要拿到上面参数对应的注解名字。</span>\r\n<span class="hljs-comment">//同时，我在xml文件中的select语句的id为findAll也和Dao中的方法相对应，resultType返回数据类型设定为UserActionLog。</span>\r\n<span class="hljs-comment">//通过这样简单的设定就可以实现列表查找了。</span>\r\n\r\n<span class="hljs-comment">//我们接着看看下面的Dao层的代码：</span>\r\n<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">update</span>(<span class="hljs-params">User user</span>)</span>;\r\n\r\n<span class="hljs-comment">//上面的是在UserDao里复制出来的，它对应的mapper为UserDao.xml，对应的方法为：</span>\r\n    &lt;!-- 更新用户信息 --&gt;\r\n    &lt;update id=<span class="hljs-string">"update"</span> parameterType=<span class="hljs-string">"User"</span>&gt;\r\n        UPDATE\r\n        `user`\r\n        SET\r\n        `name`=<span class="hljs-preprocessor">#{name}, `age`=#{age}, `sex`=#{sex}, `duty`=#{duty}, `cell_number`=#{cellNumber}, `photo_url`=#{photoUrl}</span>\r\n        WHERE\r\n        `login_id`=<span class="hljs-preprocessor">#{loginId};</span>\r\n    &lt;/update&gt;\r\n<span class="hljs-comment">//注意我前面提到过mapper中的id必须和方法名一样的，“#{字段名}”这种格式表示：</span>\r\n<span class="hljs-comment">//①如果接口的方法中传递的是对象，则表示该字段为对象的某一个属性</span>\r\n<span class="hljs-comment">//②如果接口的方法中传递的是一个或者多个参数，则该字段对应为接口中参数的注解，如上面的findAll</span></code></pre>\r\nService层基本没啥好复习的，毕竟现在是直接调用Dao层。 Service层作为web应用的数据驱动层，我们需要在当中加入事务管理、考虑在Dao层中使用存储过程等设计来使我们程序执行更加高效。一般来说在java web中，我们后端开发长提的是面向接口编程，同理我们需要通过泛型解耦然后继承和实现BaseService接口。我们要使框架自动加载我们的Service我们需要做到以下几点：\r\n<ul>\r\n 	<li>在Service的实现上面使用@Service("xxxService")注解</li>\r\n 	<li>在Dao层调用的地方打上注解@Autowired</li>\r\n 	<li>在controller里面调用Service这里同样需要在定义的地方注解@Autowired</li>\r\n</ul>\r\n起始我们应该重点强调下Controller层，毕竟我们web服务的动态资源都是从Controller层这里出来的，好的闲话不说，直接从代码走起：\r\n<pre class="hljs java"><code class="java"><span class="hljs-annotation">@Controller</span> <span class="hljs-comment">//表明这个是Controller，只要这个类放在Spring配置文件指定的Controller路径中就能自动装载</span>\r\n<span class="hljs-annotation">@RequestMapping</span>(<span class="hljs-string">"/actionLog"</span>)   <span class="hljs-comment">//域名后面跟的最外层地址</span>\r\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActionLogController</span> </span>{\r\n    <span class="hljs-annotation">@Autowired</span>\r\n    ActionLogService actionLogService;  <span class="hljs-comment">//自动注入ActionLogService</span>\r\n\r\n    <span class="hljs-comment">/**\r\n     * 分页查找行为日志，其实druid里面已经包含了行为日志\r\n     *\r\n     * <span class="hljs-doctag">@param</span> pageNum  页码\r\n     * <span class="hljs-doctag">@param</span> pageSize 每一页的条数\r\n     * <span class="hljs-doctag">@return</span>\r\n     */</span>\r\n    <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/findLogList"</span>\r\n            , produces = <span class="hljs-string">"application/json; charset=utf-8"</span>) <span class="hljs-comment">//这里访问地址的形式是：http://xxx.cn/actionLog/findLogList，响应请求头的ContentType表明响应是json数据，字符编码为utf8</span>\r\n    <span class="hljs-annotation">@ResponseBody</span>   <span class="hljs-comment">//表明这个方法直接返回的是响应体的内容</span>\r\n    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">findLog</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageNum, <span class="hljs-keyword">int</span> pageSize)</span> </span>{  \r\n        <span class="hljs-comment">//···代码省略</span>\r\n        <span class="hljs-keyword">return</span> json数据;\r\n    }\r\n<span class="hljs-comment">//关于请求的参数说明：</span>\r\n    <span class="hljs-comment">//①当请求的解析方法中有基本数据类型的参数(无论个数)时候，mvc框架会自动把请求数据存储为名称相同的变量的值</span>\r\n        <span class="hljs-comment">//比如说上面我们的访问为：http://域名/actionLog/findLogList?pageNum=10&amp;pageSize=10</span>\r\n    <span class="hljs-comment">//②当请求的解析方法中有封装数据类型的参数(无论个数)时候，mvc框架会自动根据请求数据的名字查找封装数据的对应字段并且自动存值，且无论该数据使用了几次。</span>\r\n        <span class="hljs-comment">// 比如说我网页登陆的时候有两个用户体系，但是他们是通过用户名关联在一起的，那么如下：</span>\r\n\r\n        <span class="hljs-comment">//请求为：http:acheng1314.cn/user/login?userId=acheng&amp;pwd=123456</span>\r\n\r\n        <span class="hljs-comment">//请求的解析方法是:</span>\r\n        <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/login"</span>\r\n            , produces = <span class="hljs-string">"application/json; charset=utf-8"</span>)\r\n        <span class="hljs-annotation">@ResponseBody</span>   <span class="hljs-comment">//表明这个方法直接返回的是响应体的内容</span>\r\n        <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">findLog</span><span class="hljs-params">(User user, Person person)</span> </span>{  \r\n            <span class="hljs-comment">//···代码省略</span>\r\n            System.out.printf(<span class="hljs-string">"log:\\t"</span>+user.toString());\r\n            System.out.printf(<span class="hljs-string">"log:\\t"</span>+person.toString());\r\n            <span class="hljs-keyword">return</span> json数据;\r\n        }\r\n            <span class="hljs-comment">//我们可以看到输出的日志为：</span>\r\n            User{<span class="hljs-string">"userId=acheng, pwd=123456, xxx=xxx···"</span>}\r\n            Person{<span class="hljs-string">"userId=acheng, pwd=123456, xxx=xxx···"</span>}\r\n        <span class="hljs-comment">//所以当你后端接收这里无论你又多少实体，但是只要包含对应的字段，那么就会自动赋值。</span>\r\n}</code></pre>\r\n在Controller里面我们要注意的是：\r\n<ul>\r\n 	<li>@RequestMapping 注解在类上</li>\r\n 	<li>@RequestMapping 注解在方法上</li>\r\n 	<li>方法里的参数前面的@RequestParam注解</li>\r\n 	<li>URI模板完成RESTful风格的站点和API → 下一季会详细介绍\r\n\r\n<hr />\r\n\r\n关于web只有大概下面几点：</li>\r\n 	<li>减少每个页面的请求数。</li>\r\n 	<li>js方法整合到页面，工具js封装成工具。</li>\r\n 	<li>js方法一般写在页面头部</li>\r\n 	<li>web页面除非整体刷新，其他情况考虑异步请求。</li>\r\n 	<li>页面图片资源整合到一起，然后根据位置取图片</li>\r\n 	<li>web页面良好体验可以考虑组件引入</li>\r\n 	<li>页面需要大量重用的地方可以考虑模板完成\r\n\r\n<hr />\r\n\r\n其实很多东西这个总结都没详细的说出来，毕竟开发细节的东西都不是三言两语说的明白的，但是完全不慌，即将开始第二季《完整的博客后端+Android客户端+分模块开发+七牛云存储+微信支付宝整合》正在蕴量，小伙伴们请鼓励我一下。</li>\r\n</ul>\r\n希望喜欢我的这个系列的读者，可以点击喜欢和收藏。谢谢。\r\n\r\n本期项目包里面有福利，后端请求兼容Form表单提交、json数据post接收，请大家自行查找。拜拜，下期见。', '[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）', '', 'publish', 'open', 'open', '', '%e6%89%8b%e6%8a%8a%e6%89%8b%e6%95%99%e7%a8%8bjavaweb%e4%bc%98%e9%9b%85%e7%9a%84springmvcmybatis%e5%ba%94%e7%94%a8%ef%bc%88%e5%85%ab%ef%bc%89', '', '', '2016-11-16 00:51:13', '2016-11-15 16:51:13', '', 0, 'http://acheng1314.cn/?p=282', 0, 'post', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(283, 1, '2016-11-16 00:51:13', '2016-11-15 16:51:13', '[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）\r\n\r\n项目github地址：<a href="https://github.com/pc859107393/SpringMvcMybatis" target="_blank">https://github.com/pc859107393/SpringMvcMybatis</a>\r\n\r\n我的简书首页是：<a href="http://www.jianshu.com/users/86b79c50cfb3/latest_articles" target="_blank">http://www.jianshu.com/users/86b79c50cfb3/latest_articles</a>\r\n\r\n上一期是：<a href="http://www.jianshu.com/p/def0076976aa" target="_blank">优雅的SpringMvc+Mybatis应用（七）</a>\r\n\r\n扫描下面二维码加入交流QQ群：\r\n<div class="image-package imagebubble"><img class="imagebubble-image" src="http://acheng1314.cn/wp-content/uploads/2016/10/%E8%A1%8C%E8%B5%B0%E7%9A%84java%E5%85%A8%E6%A0%88%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81.png" data-original-src="http://acheng1314.cn/wp-content/uploads/2016/10/%E8%A1%8C%E8%B5%B0%E7%9A%84java%E5%85%A8%E6%A0%88%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81.png" />\r\n<div class="image-caption">行走的java全栈</div>\r\n</div>\r\n<h4>工具</h4>\r\n<ul>\r\n 	<li>IDE为<strong>idea16</strong></li>\r\n 	<li>JDK环境为<strong>1.8</strong></li>\r\n 	<li>gradle构建，版本：2.14.1</li>\r\n 	<li>Mysql版本为<strong>5.5.27</strong></li>\r\n 	<li>Tomcat版本为<strong>7.0.52</strong></li>\r\n 	<li>流程图绘制（xmind）</li>\r\n</ul>\r\n<h4>本期目标</h4>\r\n<ul>\r\n 	<li>多角色控制思路整理</li>\r\n 	<li>第一季项目总结</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h3>多角色控制思路整理</h3>\r\n关于多角色控制，起始用户角色按照用户职能分工，一般来说思路如下：\r\n<ul>\r\n 	<li>登陆成功根据用户角色，跳转不同的界面模块</li>\r\n 	<li>每个界面模块都有用户权限校验，防止用户逾越雷池一步</li>\r\n 	<li>后端接口需要做用户角色校验，用户异常调用接口，就中断用户访问。</li>\r\n 	<li>后端的web页面根据不同用户分组存放，然后各个用户之间不做关联</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h3>第一季项目总结</h3>\r\n第一季的仓库管理系统到目前为止基本上算是结束了。虽然说不是完整的系统，但是我们在里面已经大概把基本的web开发的东西都梳理过了。我们现在来从头到尾的梳理一下吧。从我们项目从头到尾，我们分为几个阶段：\r\n<ul>\r\n 	<li>项目基本框架选择</li>\r\n 	<li>项目框架整合、验证</li>\r\n 	<li>项目需求分析</li>\r\n 	<li>功能模块开发思路整理</li>\r\n 	<li>Spring经典三层应用</li>\r\n 	<li>开发细节思考</li>\r\n 	<li>web页面简单优化</li>\r\n 	<li>js网络请求实现</li>\r\n 	<li><strong>···</strong> 等等\r\n\r\n<hr />\r\n\r\n项目基本框架选择：\r\n\r\n说实话这是一个技术活，我们程序员的角度来说无外乎就是实现容易、扩展便捷、运行稳定等等。按照软件工程的话来说就是节约成本、提高质量。\r\n\r\n说点人话就是：从产品设计到编码，这一切基本都是人的活动，所以我们选择的框架首先要降低学习技术成本、开发技术成本、设计转换编码的成本、不同应用(模块)整合成本等等。\r\n\r\n再总结一下：我们程序的编码语言应该是我们最熟悉的，应用的各个模块之间交互应该是我们擅长的。\r\n\r\n所以我选择了java作为主要的编程语言，后端框架就是Spring+SpringMVC+Mybatis，后端数据库为Mysql。\r\n\r\n项目框架整合、验证：\r\n\r\n首先我们需要使用构建工具引入Spring+SpringMVC+Mybatis这些框架的jar包，方式有大概两种：①自行下载jar包②使用自动化构建工具完成下载。方式一中需要我们自行选择jar包手动下载然后引入到lib文件夹。方式二我们只需要使用类似代码的方式控制程序自动下载。先进的工具能提高生产力，所以我们选择自动化构建完成jar包引入。\r\n\r\n第一步，引入jar包，我们在gradle中引入，代码如下：\r\n<pre class="hljs cs"><code class="cs">  testCompile <span class="hljs-keyword">group</span>: <span class="hljs-string">''junit''</span>, name: <span class="hljs-string">''junit''</span>, version: <span class="hljs-string">''4.11''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''ch.qos.logback''</span>, name: <span class="hljs-string">''logback-classic''</span>, version: <span class="hljs-string">''1.1.1''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.slf4j''</span>, name: <span class="hljs-string">''slf4j-api''</span>, version: <span class="hljs-string">''1.7.6''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''com.alibaba''</span>, name: <span class="hljs-string">''druid''</span>, version: <span class="hljs-string">''1.0.25''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.mybatis''</span>, name: <span class="hljs-string">''mybatis''</span>, version: <span class="hljs-string">''3.4.1''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.mybatis''</span>, name: <span class="hljs-string">''mybatis-spring''</span>, version: <span class="hljs-string">''1.3.0''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''taglibs''</span>, name: <span class="hljs-string">''standard''</span>, version: <span class="hljs-string">''1.1.2''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''jstl''</span>, name: <span class="hljs-string">''jstl''</span>, version: <span class="hljs-string">''1.2''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''com.google.code.gson''</span>, name: <span class="hljs-string">''gson''</span>, version: <span class="hljs-string">''2.7''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''javax.servlet''</span>, name: <span class="hljs-string">''javax.servlet-api''</span>, version: <span class="hljs-string">''3.1.0''</span>\r\n  <span class="hljs-comment">//Spring 框架基本的核心工具类</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-core''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\n  <span class="hljs-comment">//访问配置文件、创建和管理bean 以及进行Inversion of Control / Dependency Injection（IoC/DI）操作相关的所有类。</span>\r\n  <span class="hljs-comment">//如果应用只需基本的IoC/DI 支持，引入spring-core.jar 及spring-beans.jar 文件就可以了。</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-beans''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\n  <span class="hljs-comment">//Spring 核心提供了大量扩展。可以找到使用Spring ApplicationContext特性时所需的全部类，JDNI 所需的全部类，instrumentation组件以及校验Validation 方面的相关类。</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-context''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\n  <span class="hljs-comment">//Spring 对JDBC 数据访问进行封装的所有类。</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-jdbc''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\n  <span class="hljs-comment">//spring-tx 事务管理</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-tx''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\n  <span class="hljs-comment">//Web 应用开发时，用到Spring 框架时所需的核心类，包括自动载入Web Application Context 特性的类、Struts 与JSF 集成类、文件上传的支持类、Filter 类和大量工具辅助类。</span>\r\n  <span class="hljs-comment">//外部依赖spring-context, Servlet API, (JSP API, JSTL, Commons FileUpload, COS)。</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-web''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\n  <span class="hljs-comment">//Spring MVC 框架相关的所有类。包括框架的Servlets，Web MVC框架，控制器和视图支持。</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-webmvc''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''org.springframework''</span>, name: <span class="hljs-string">''spring-test''</span>, version: <span class="hljs-string">''4.3.2.RELEASE''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''redis.clients''</span>, name: <span class="hljs-string">''jedis''</span>, version: <span class="hljs-string">''2.7.3''</span>\r\n  <span class="hljs-comment">//序列化和反序列化工具</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''com.dyuproject.protostuff''</span>, name: <span class="hljs-string">''protostuff-core''</span>, version: <span class="hljs-string">''1.0.8''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''com.dyuproject.protostuff''</span>, name: <span class="hljs-string">''protostuff-runtime''</span>, version: <span class="hljs-string">''1.0.8''</span>\r\n  <span class="hljs-comment">//文件上传工具类，不过可以使用Spring自带的文件工具</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''commons-collections''</span>, name: <span class="hljs-string">''commons-collections''</span>, version: <span class="hljs-string">''3.2.2''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''commons-fileupload''</span>, name: <span class="hljs-string">''commons-fileupload''</span>, version: <span class="hljs-string">''1.3.2''</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''commons-io''</span>, name: <span class="hljs-string">''commons-io''</span>, version: <span class="hljs-string">''2.5''</span>\r\n  <span class="hljs-comment">//请求的UserAgent拆装箱工具</span>\r\n  compile <span class="hljs-keyword">group</span>: <span class="hljs-string">''eu.bitwalker''</span>, name: <span class="hljs-string">''UserAgentUtils''</span>, version: <span class="hljs-string">''1.20''</span>\r\n  runtime <span class="hljs-keyword">group</span>: <span class="hljs-string">''mysql''</span>, name: <span class="hljs-string">''mysql-connector-java''</span>, version: <span class="hljs-string">''5.1.37''</span></code></pre>\r\n第二步，设置各个框架，并保存到配置文件中，我们的WebApp最重要的最基本的配置是web.xml，这里配置了我们基本程序的设定，同样的我们需要在这里导入一些设置，如下：\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-doctype">&lt;!DOCTYPE web-app PUBLIC\r\n      "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"\r\n      "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">web-app</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"http://xmlns.jcp.org/xml/ns/javaee"</span> <span class="hljs-attribute">xmlns:xsi</span>=<span class="hljs-value">"http://www.w3.org/2001/XMLSchema-instance"</span>\r\n       <span class="hljs-attribute">xsi:schemaLocation</span>=<span class="hljs-value">"http://xmlns.jcp.org/xml/ns/javaee\r\n                    http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span>\r\n       <span class="hljs-attribute">version</span>=<span class="hljs-value">"3.1"</span> <span class="hljs-attribute">metadata-complete</span>=<span class="hljs-value">"true"</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file-list</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>index.html<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>index.htm<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>index.jsp<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>default.html<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>default.htm<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">welcome-file</span>&gt;</span>default.jsp<span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">welcome-file-list</span>&gt;</span>\r\n  <span class="hljs-comment">&lt;!-- 如果是用mvn命令生成的xml，需要修改servlet版本为3.1 --&gt;</span>\r\n  <span class="hljs-comment">&lt;!-- 配置DispatcherServlet --&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">servlet</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">display-name</span>&gt;</span>SSM<span class="hljs-tag">&lt;/<span class="hljs-title">display-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>mvc-dispatcher<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-class</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 配置springMVC需要加载的配置文件\r\n          spring-dao.xml,spring-service.xml,spring-web.xml\r\n          Mybatis - &gt; spring -&gt; springmvc\r\n       --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>classpath:spring/spring-*.xml<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">servlet</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>mvc-dispatcher<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 默认匹配所有的请求 --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;url-pattern&gt;/css/*&lt;/url-pattern&gt;--&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;url-pattern&gt;/images/*&lt;/url-pattern&gt;--&gt;</span>\r\n      <span class="hljs-comment">&lt;!--&lt;url-pattern&gt;/fonts/*&lt;/url-pattern&gt;--&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n\r\n  <span class="hljs-comment">&lt;!-- spring框架提供的字符集过滤器 --&gt;</span>\r\n  <span class="hljs-comment">&lt;!-- spring Web MVC框架提供了org.springframework.web.filter.CharacterEncodingFilter用于解决POST方式造成的中文乱码问题  --&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">filter</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-class</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- force强制，促使 --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>forceEncoding<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">filter</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">filter-mapping</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">filter-mapping</span>&gt;</span>\r\n\r\n  <span class="hljs-comment">&lt;!--druid ==&gt; WEB方式监控配置--&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">servlet</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>DruidStatView<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-class</span>&gt;</span>com.alibaba.druid.support.http.StatViewServlet<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-class</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-comment">&lt;!-- 用户名 --&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>loginUsername<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>pc859107393<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-comment">&lt;!-- 密码 --&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>loginPassword<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>laopo5201314<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">servlet</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">servlet-name</span>&gt;</span>DruidStatView<span class="hljs-tag">&lt;/<span class="hljs-title">servlet-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/druid/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">servlet-mapping</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">filter</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">filter-name</span>&gt;</span>druidWebStatFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">filter-class</span>&gt;</span>com.alibaba.druid.support.http.WebStatFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-class</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>exclusions<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>/public/*,*.js,*.css,/druid*,*.jsp,*.swf<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>principalSessionName<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>sessionInfo<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">init-param</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-name</span>&gt;</span>profileEnable<span class="hljs-tag">&lt;/<span class="hljs-title">param-name</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-title">param-value</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">init-param</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">filter</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">filter-mapping</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">filter-name</span>&gt;</span>druidWebStatFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-name</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">filter-mapping</span>&gt;</span>\r\n\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">error-page</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">error-code</span>&gt;</span>404<span class="hljs-tag">&lt;/<span class="hljs-title">error-code</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">location</span>&gt;</span>/static/view/404.html<span class="hljs-tag">&lt;/<span class="hljs-title">location</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">error-page</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">web-app</span>&gt;</span></code></pre>\r\n按照上面所说的，我们生成spring文件的存放路径后，我们接着应该做的是控制spring，那么spring的配置文件如下(很多时候我们可以看到他们有的只有一个配置文件，而我将它们拆分成为三个配置文件)，具体实现如下：\r\n<ul>\r\n 	<li>spring-dao.xml配置文件\r\n<pre class="hljs xml"><code class="xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">beans</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans"</span>\r\n  <span class="hljs-attribute">xmlns:xsi</span>=<span class="hljs-value">"http://www.w3.org/2001/XMLSchema-instance"</span>\r\n  <span class="hljs-attribute">xmlns:context</span>=<span class="hljs-value">"http://www.springframework.org/schema/context"</span>\r\n  <span class="hljs-attribute">xsi:schemaLocation</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans\r\nhttp://www.springframework.org/schema/beans/spring-beans.xsd\r\nhttp://www.springframework.org/schema/context\r\nhttp://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span>\r\n<span class="hljs-comment">&lt;!-- 配置整合mybatis过程 --&gt;</span>\r\n<span class="hljs-comment">&lt;!-- 1.配置数据库相关参数properties的属性：${url} --&gt;</span>\r\n<span class="hljs-comment">&lt;!-- 这里使用代码提示工具可以直接生成jdbc的配置文件 --&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">context:property-placeholder</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"classpath:jdbc.properties"</span>/&gt;</span>\r\n\r\n<span class="hljs-comment">&lt;!-- 2.数据库连接池，采用阿里巴巴的Druid --&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"dataSource"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"com.alibaba.druid.pool.DruidDataSource"</span>\r\n     <span class="hljs-attribute">init-method</span>=<span class="hljs-value">"init"</span> <span class="hljs-attribute">destroy-method</span>=<span class="hljs-value">"close"</span>&gt;</span>\r\n   <span class="hljs-comment">&lt;!-- 配置连接池属性 --&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"driverClassName"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"${jdbc.driver}"</span>/&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"url"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"${jdbc.url}"</span>/&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"username"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"${jdbc.username}"</span>/&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"password"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"${jdbc.password}"</span>/&gt;</span>\r\n\r\n   <span class="hljs-comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"initialSize"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"1"</span> /&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"minIdle"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"1"</span> /&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"maxActive"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"10"</span> /&gt;</span>\r\n\r\n   <span class="hljs-comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"maxWait"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"10000"</span> /&gt;</span>\r\n\r\n   <span class="hljs-comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"timeBetweenEvictionRunsMillis"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"60000"</span> /&gt;</span>\r\n\r\n   <span class="hljs-comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"minEvictableIdleTimeMillis"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"300000"</span> /&gt;</span>\r\n\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"testWhileIdle"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"true"</span> /&gt;</span>\r\n\r\n   <span class="hljs-comment">&lt;!-- 这里建议配置为TRUE，防止取到的连接不可用 --&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"testOnBorrow"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"true"</span> /&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"testOnReturn"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"false"</span> /&gt;</span>\r\n\r\n   <span class="hljs-comment">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"poolPreparedStatements"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"true"</span> /&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"maxPoolPreparedStatementPerConnectionSize"</span>\r\n             <span class="hljs-attribute">value</span>=<span class="hljs-value">"20"</span> /&gt;</span>\r\n\r\n   <span class="hljs-comment">&lt;!-- 这里配置提交方式，默认就是TRUE，可以不用配置 --&gt;</span>\r\n\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"defaultAutoCommit"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"true"</span> /&gt;</span>\r\n\r\n   <span class="hljs-comment">&lt;!-- 验证连接有效与否的SQL，不同的数据配置不同 --&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"validationQuery"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"select 1 "</span> /&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"filters"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"stat"</span> /&gt;</span>\r\n   <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"proxyFilters"</span>&gt;</span>\r\n       <span class="hljs-tag">&lt;<span class="hljs-title">list</span>&gt;</span>\r\n           <span class="hljs-tag">&lt;<span class="hljs-title">ref</span> <span class="hljs-attribute">bean</span>=<span class="hljs-value">"logFilter"</span> /&gt;</span>\r\n       <span class="hljs-tag">&lt;/<span class="hljs-title">list</span>&gt;</span>\r\n   <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n<span class="hljs-comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"sqlSessionFactory"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 注入数据库连接池 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"dataSource"</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"dataSource"</span>/&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"configLocation"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"classpath:mybatis-config.xml"</span>/&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 扫描entity包 使用别名 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"typeAliasesPackage"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"cn.acheng1314.domain"</span>/&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"mapperLocations"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"classpath:mapper/*.xml"</span>/&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n\r\n<span class="hljs-comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 --&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 注入sqlSessionFactory --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"sqlSessionFactoryBeanName"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"sqlSessionFactory"</span>/&gt;</span>\r\n    <span class="hljs-comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"basePackage"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"cn.acheng1314.dao"</span>/&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"logFilter"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"com.alibaba.druid.filter.logging.Slf4jLogFilter"</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"statementExecutableSqlLogEnable"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"false"</span> /&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-title">beans</span>&gt;</span></code></pre>\r\n</li>\r\n</ul>\r\n</li>\r\n 	<li>spring-service.xml配置文件\r\n<pre class="hljs xml"><code class="xml">  <span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">beans</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans"</span>\r\n         <span class="hljs-attribute">xmlns:xsi</span>=<span class="hljs-value">"http://www.w3.org/2001/XMLSchema-instance"</span>\r\n         <span class="hljs-attribute">xmlns:context</span>=<span class="hljs-value">"http://www.springframework.org/schema/context"</span>\r\n         <span class="hljs-attribute">xmlns:tx</span>=<span class="hljs-value">"http://www.springframework.org/schema/tx"</span>\r\n         <span class="hljs-attribute">xsi:schemaLocation</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans\r\n      http://www.springframework.org/schema/beans/spring-beans.xsd\r\n      http://www.springframework.org/schema/context\r\n      http://www.springframework.org/schema/context/spring-context.xsd\r\n      http://www.springframework.org/schema/tx\r\n      http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 扫描service包下所有使用注解的类型 --&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- cn.acheng1314为我们应用的包名,当然也是我们前面提到过的GroupId --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">context:component-scan</span> <span class="hljs-attribute">base-package</span>=<span class="hljs-value">"cn.acheng1314.service"</span>&gt;</span>\r\n          <span class="hljs-comment">&lt;!-- 只扫描标记了Service的类 --&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">context:include-filter</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"annotation"</span> <span class="hljs-attribute">expression</span>=<span class="hljs-value">"org.springframework.stereotype.Service"</span>/&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">context:component-scan</span>&gt;</span>\r\n\r\n      <span class="hljs-comment">&lt;!-- 配置事务管理器 --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"transactionManager"</span>\r\n            <span class="hljs-attribute">class</span>=<span class="hljs-value">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span>\r\n          <span class="hljs-comment">&lt;!-- 注入数据库连接池 --&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"dataSource"</span> <span class="hljs-attribute">ref</span>=<span class="hljs-value">"dataSource"</span>/&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n\r\n      <span class="hljs-comment">&lt;!-- 配置基于注解的声明式事务 --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">tx:annotation-driven</span> <span class="hljs-attribute">transaction-manager</span>=<span class="hljs-value">"transactionManager"</span>/&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">beans</span>&gt;</span></code></pre>\r\n</li>\r\n 	<li>spring-web.xml配置文件\r\n<pre class="hljs xml"><code class="xml">  <span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-title">beans</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans"</span>\r\n         <span class="hljs-attribute">xmlns:xsi</span>=<span class="hljs-value">"http://www.w3.org/2001/XMLSchema-instance"</span>\r\n         <span class="hljs-attribute">xmlns:context</span>=<span class="hljs-value">"http://www.springframework.org/schema/context"</span>\r\n         <span class="hljs-attribute">xmlns:mvc</span>=<span class="hljs-value">"http://www.springframework.org/schema/mvc"</span>\r\n         <span class="hljs-attribute">xsi:schemaLocation</span>=<span class="hljs-value">"http://www.springframework.org/schema/beans\r\n      http://www.springframework.org/schema/beans/spring-beans.xsd\r\n      http://www.springframework.org/schema/context\r\n      http://www.springframework.org/schema/context/spring-context.xsd\r\n      http://www.springframework.org/schema/mvc\r\n      http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 配置SpringMVC --&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 1.开启SpringMVC注解模式 --&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 简化配置：\r\n          (1)自动注册DefaultAnootationHandlerMapping,AnotationMethodHandlerAdapter\r\n          (2)提供一些列：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat, xml,json默认读写支持\r\n      --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:annotation-driven</span>/&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- 2.静态资源默认servlet配置\r\n          (1)加入对静态资源的处理：js,gif,png\r\n          (2)允许使用"/"做整体映射\r\n       --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/css/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/css/"</span>/&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/images/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/images/"</span>/&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/view/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/view/"</span>/&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/js/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/js/"</span>/&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:resources</span> <span class="hljs-attribute">mapping</span>=<span class="hljs-value">"/fonts/**"</span> <span class="hljs-attribute">location</span>=<span class="hljs-value">"/static/fonts/"</span>/&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:default-servlet-handler</span>/&gt;</span>\r\n\r\n      <span class="hljs-comment">&lt;!-- 访问拦截  --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">mvc:interceptors</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">mvc:interceptor</span>&gt;</span>\r\n              <span class="hljs-tag">&lt;<span class="hljs-title">mvc:mapping</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/**/**"</span>/&gt;</span>\r\n              <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"cn.acheng1314.intercepter.LoginHandlerInterceptor"</span>/&gt;</span>\r\n          <span class="hljs-tag">&lt;/<span class="hljs-title">mvc:interceptor</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">mvc:interceptors</span>&gt;</span>\r\n\r\n      <span class="hljs-comment">&lt;!-- 3.配置jsp 显示ViewResolver --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"viewClass"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"prefix"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"/WEB-INF/jsp/"</span>/&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"suffix"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">".jsp"</span>/&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"multipartResolver"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">property</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"maxUploadSize"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"10000000"</span>/&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">bean</span>&gt;</span>\r\n\r\n      <span class="hljs-comment">&lt;!-- 4.扫描web相关的bean --&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-title">context:component-scan</span> <span class="hljs-attribute">base-package</span>=<span class="hljs-value">"cn.acheng1314.mvc"</span>&gt;</span>\r\n          <span class="hljs-comment">&lt;!-- 制定扫包规则 ,只扫描使用@Controller注解的JAVA类 --&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-title">context:include-filter</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"annotation"</span> <span class="hljs-attribute">expression</span>=<span class="hljs-value">"org.springframework.stereotype.Controller"</span>/&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-title">context:component-scan</span>&gt;</span>\r\n\r\n  <span class="hljs-tag">&lt;/<span class="hljs-title">beans</span>&gt;</span></code></pre>\r\n上面的Spring的配置文件我们完成后，我们需要把对应的其他文件配置好，如jdbc、mapper、mybatis等的配置文件，以及开发、测试的代码和资源文件的存放目录等等。这些在我们的第一期就能看到了，这里不再赘述。\r\n\r\n关于项目框架验证，我们需要在搭建完成后，打开日志调试来看信息，有这几点原则：\r\n<ul>\r\n 	<li>数据库链接正常\r\n<ul>\r\n 	<li>数据库驱动、数据库服务</li>\r\n 	<li>数据库配置文件</li>\r\n 	<li>数据库测试</li>\r\n</ul>\r\n</li>\r\n 	<li>网页资源访问正常\r\n<ul>\r\n 	<li>静态html、js、css、font、image、MP3等</li>\r\n 	<li>动态的接口</li>\r\n 	<li>动态页面如：jsp</li>\r\n</ul>\r\n</li>\r\n 	<li>提示信息正常\r\n<ul>\r\n 	<li>异常输出</li>\r\n 	<li>log输出</li>\r\n</ul>\r\n</li>\r\n 	<li>等等···</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n具体的检测我们在第二期里面提到过，这里我们也就跳过吧，毕竟主角还在后面。\r\n\r\n项目需求分析，本身来说也不是我们作为程序员应该考虑的，毕竟涉及到的东西很多，这里我么略过，我们在以后的开发中再提。\r\n\r\n起始这里我最想说的额就是前面开发的细节，也就是我们当中用到的知识点。按照我们开发的思路来说，我们先从Dao层来实现，来一起看看前面用到的知识点。\r\n\r\n首先我们需要一个基类的Dao接口，同时我们需要用泛型来解耦，告诉程序我们这里需要的什么样的对象来存入数据库，同时某些对象特有的方法那么就在该对象的自身的接口中实现。我们的基类Dao层如下：\r\n<pre class="hljs java"><code class="java"><span class="hljs-comment">/**\r\n * 通过接口编程\r\n *\r\n * <span class="hljs-doctag">@param</span> &lt;T&gt; 泛型用于解耦，同时避免写重复代码\r\n */</span>\r\n<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Dao</span>&lt;<span class="hljs-title">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Serializable</span>&gt; </span>{\r\n    <span class="hljs-comment">/**\r\n     * 添加某个对象\r\n     *\r\n     * <span class="hljs-doctag">@param</span> t 待添加的对象\r\n     * <span class="hljs-doctag">@return</span> 返回受影响的行数\r\n     */</span>\r\n    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(T t)</span></span>;\r\n\r\n    <span class="hljs-comment">/**\r\n     * 删除某个对象，在企业开发中，我们一般不做物理删除，只是添加某个字段对其数据进行可用控制\r\n     *\r\n     * <span class="hljs-doctag">@param</span> t 待删除对象\r\n     * <span class="hljs-doctag">@return</span> 返回受影响的条数\r\n     */</span>\r\n    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">del</span><span class="hljs-params">(T t)</span></span>;\r\n\r\n    <span class="hljs-comment">/**\r\n     * 更新某个对象\r\n     *\r\n     * <span class="hljs-doctag">@param</span> t 待更新对象\r\n     * <span class="hljs-doctag">@return</span> 返回受影响的条数\r\n     */</span>\r\n    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(T t)</span></span>;\r\n\r\n    <span class="hljs-comment">/**\r\n     * 通过ID查找一个对象\r\n     *\r\n     * <span class="hljs-doctag">@param</span> Id 待查询的对象的ID\r\n     * <span class="hljs-doctag">@return</span> 返回该ID对应的对象\r\n     */</span>\r\n    <span class="hljs-function">T <span class="hljs-title">findOneById</span><span class="hljs-params">(Serializable Id)</span></span>;\r\n\r\n    <span class="hljs-comment">/**\r\n     * 查找对象集合\r\n     *\r\n     * <span class="hljs-doctag">@return</span> 返回对象集合\r\n     */</span>\r\n    <span class="hljs-function">List&lt;T&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;\r\n}</code></pre>\r\n这里我们需要重点说一下多参数的Dao方法和返回List的Dao方法，话不多说，直接上代码：\r\n<pre class="hljs cs"><code class="cs"><span class="hljs-comment">//Dao层中，多参数的方法如何让Mybatis响应？</span>\r\n    <span class="hljs-comment">/**\r\n     * 分页查询\r\n     * @param offset    起始位置\r\n     * @param limit     每页数量\r\n     * @return\r\n     */</span>\r\n    <span class="hljs-function">List&lt;UserActionLog&gt; <span class="hljs-title">findAll</span>(<span class="hljs-params">@Param(<span class="hljs-string">"offset"</span></span>) <span class="hljs-keyword">int</span> offset, @<span class="hljs-title">Param</span>(<span class="hljs-params"><span class="hljs-string">"limit"</span></span>) <span class="hljs-keyword">int</span> limit)</span>;\r\n<span class="hljs-comment">//从上面我们可以看到，我们方法参数的前面都加上了注解@Param()，同时在注解中填写了对应的名字，这是为何？请看下面的Mybatis的xml中的内容：</span>\r\n\r\n    &lt;<span class="hljs-keyword">select</span> id=<span class="hljs-string">"findAll"</span> resultType=<span class="hljs-string">"cn.acheng1314.domain.UserActionLog"</span> &gt;\r\n        SELECT\r\n            *\r\n        FROM\r\n            `user_action_log`\r\n        ORDER BY\r\n            `id`\r\n        DESC\r\n        LIMIT <span class="hljs-preprocessor">#{offset}, #{limit}</span>\r\n    &lt;/<span class="hljs-keyword">select</span>&gt;\r\n<span class="hljs-comment">//在上面的Mybatis的xml中的内容看来，我们是需要拿到上面参数对应的注解名字。</span>\r\n<span class="hljs-comment">//同时，我在xml文件中的select语句的id为findAll也和Dao中的方法相对应，resultType返回数据类型设定为UserActionLog。</span>\r\n<span class="hljs-comment">//通过这样简单的设定就可以实现列表查找了。</span>\r\n\r\n<span class="hljs-comment">//我们接着看看下面的Dao层的代码：</span>\r\n<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">update</span>(<span class="hljs-params">User user</span>)</span>;\r\n\r\n<span class="hljs-comment">//上面的是在UserDao里复制出来的，它对应的mapper为UserDao.xml，对应的方法为：</span>\r\n    &lt;!-- 更新用户信息 --&gt;\r\n    &lt;update id=<span class="hljs-string">"update"</span> parameterType=<span class="hljs-string">"User"</span>&gt;\r\n        UPDATE\r\n        `user`\r\n        SET\r\n        `name`=<span class="hljs-preprocessor">#{name}, `age`=#{age}, `sex`=#{sex}, `duty`=#{duty}, `cell_number`=#{cellNumber}, `photo_url`=#{photoUrl}</span>\r\n        WHERE\r\n        `login_id`=<span class="hljs-preprocessor">#{loginId};</span>\r\n    &lt;/update&gt;\r\n<span class="hljs-comment">//注意我前面提到过mapper中的id必须和方法名一样的，“#{字段名}”这种格式表示：</span>\r\n<span class="hljs-comment">//①如果接口的方法中传递的是对象，则表示该字段为对象的某一个属性</span>\r\n<span class="hljs-comment">//②如果接口的方法中传递的是一个或者多个参数，则该字段对应为接口中参数的注解，如上面的findAll</span></code></pre>\r\nService层基本没啥好复习的，毕竟现在是直接调用Dao层。 Service层作为web应用的数据驱动层，我们需要在当中加入事务管理、考虑在Dao层中使用存储过程等设计来使我们程序执行更加高效。一般来说在java web中，我们后端开发长提的是面向接口编程，同理我们需要通过泛型解耦然后继承和实现BaseService接口。我们要使框架自动加载我们的Service我们需要做到以下几点：\r\n<ul>\r\n 	<li>在Service的实现上面使用@Service("xxxService")注解</li>\r\n 	<li>在Dao层调用的地方打上注解@Autowired</li>\r\n 	<li>在controller里面调用Service这里同样需要在定义的地方注解@Autowired</li>\r\n</ul>\r\n起始我们应该重点强调下Controller层，毕竟我们web服务的动态资源都是从Controller层这里出来的，好的闲话不说，直接从代码走起：\r\n<pre class="hljs java"><code class="java"><span class="hljs-annotation">@Controller</span> <span class="hljs-comment">//表明这个是Controller，只要这个类放在Spring配置文件指定的Controller路径中就能自动装载</span>\r\n<span class="hljs-annotation">@RequestMapping</span>(<span class="hljs-string">"/actionLog"</span>)   <span class="hljs-comment">//域名后面跟的最外层地址</span>\r\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActionLogController</span> </span>{\r\n    <span class="hljs-annotation">@Autowired</span>\r\n    ActionLogService actionLogService;  <span class="hljs-comment">//自动注入ActionLogService</span>\r\n\r\n    <span class="hljs-comment">/**\r\n     * 分页查找行为日志，其实druid里面已经包含了行为日志\r\n     *\r\n     * <span class="hljs-doctag">@param</span> pageNum  页码\r\n     * <span class="hljs-doctag">@param</span> pageSize 每一页的条数\r\n     * <span class="hljs-doctag">@return</span>\r\n     */</span>\r\n    <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/findLogList"</span>\r\n            , produces = <span class="hljs-string">"application/json; charset=utf-8"</span>) <span class="hljs-comment">//这里访问地址的形式是：http://xxx.cn/actionLog/findLogList，响应请求头的ContentType表明响应是json数据，字符编码为utf8</span>\r\n    <span class="hljs-annotation">@ResponseBody</span>   <span class="hljs-comment">//表明这个方法直接返回的是响应体的内容</span>\r\n    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">findLog</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageNum, <span class="hljs-keyword">int</span> pageSize)</span> </span>{  \r\n        <span class="hljs-comment">//···代码省略</span>\r\n        <span class="hljs-keyword">return</span> json数据;\r\n    }\r\n<span class="hljs-comment">//关于请求的参数说明：</span>\r\n    <span class="hljs-comment">//①当请求的解析方法中有基本数据类型的参数(无论个数)时候，mvc框架会自动把请求数据存储为名称相同的变量的值</span>\r\n        <span class="hljs-comment">//比如说上面我们的访问为：http://域名/actionLog/findLogList?pageNum=10&amp;pageSize=10</span>\r\n    <span class="hljs-comment">//②当请求的解析方法中有封装数据类型的参数(无论个数)时候，mvc框架会自动根据请求数据的名字查找封装数据的对应字段并且自动存值，且无论该数据使用了几次。</span>\r\n        <span class="hljs-comment">// 比如说我网页登陆的时候有两个用户体系，但是他们是通过用户名关联在一起的，那么如下：</span>\r\n\r\n        <span class="hljs-comment">//请求为：http:acheng1314.cn/user/login?userId=acheng&amp;pwd=123456</span>\r\n\r\n        <span class="hljs-comment">//请求的解析方法是:</span>\r\n        <span class="hljs-annotation">@RequestMapping</span>(value = <span class="hljs-string">"/login"</span>\r\n            , produces = <span class="hljs-string">"application/json; charset=utf-8"</span>)\r\n        <span class="hljs-annotation">@ResponseBody</span>   <span class="hljs-comment">//表明这个方法直接返回的是响应体的内容</span>\r\n        <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">findLog</span><span class="hljs-params">(User user, Person person)</span> </span>{  \r\n            <span class="hljs-comment">//···代码省略</span>\r\n            System.out.printf(<span class="hljs-string">"log:\\t"</span>+user.toString());\r\n            System.out.printf(<span class="hljs-string">"log:\\t"</span>+person.toString());\r\n            <span class="hljs-keyword">return</span> json数据;\r\n        }\r\n            <span class="hljs-comment">//我们可以看到输出的日志为：</span>\r\n            User{<span class="hljs-string">"userId=acheng, pwd=123456, xxx=xxx···"</span>}\r\n            Person{<span class="hljs-string">"userId=acheng, pwd=123456, xxx=xxx···"</span>}\r\n        <span class="hljs-comment">//所以当你后端接收这里无论你又多少实体，但是只要包含对应的字段，那么就会自动赋值。</span>\r\n}</code></pre>\r\n在Controller里面我们要注意的是：\r\n<ul>\r\n 	<li>@RequestMapping 注解在类上</li>\r\n 	<li>@RequestMapping 注解在方法上</li>\r\n 	<li>方法里的参数前面的@RequestParam注解</li>\r\n 	<li>URI模板完成RESTful风格的站点和API → 下一季会详细介绍\r\n\r\n<hr />\r\n\r\n关于web只有大概下面几点：</li>\r\n 	<li>减少每个页面的请求数。</li>\r\n 	<li>js方法整合到页面，工具js封装成工具。</li>\r\n 	<li>js方法一般写在页面头部</li>\r\n 	<li>web页面除非整体刷新，其他情况考虑异步请求。</li>\r\n 	<li>页面图片资源整合到一起，然后根据位置取图片</li>\r\n 	<li>web页面良好体验可以考虑组件引入</li>\r\n 	<li>页面需要大量重用的地方可以考虑模板完成\r\n\r\n<hr />\r\n\r\n其实很多东西这个总结都没详细的说出来，毕竟开发细节的东西都不是三言两语说的明白的，但是完全不慌，即将开始第二季《完整的博客后端+Android客户端+分模块开发+七牛云存储+微信支付宝整合》正在蕴量，小伙伴们请鼓励我一下。</li>\r\n</ul>\r\n希望喜欢我的这个系列的读者，可以点击喜欢和收藏。谢谢。\r\n\r\n本期项目包里面有福利，后端请求兼容Form表单提交、json数据post接收，请大家自行查找。拜拜，下期见。', '[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）', '', 'inherit', 'closed', 'closed', '', '282-revision-v1', '', '', '2016-11-16 00:51:13', '2016-11-15 16:51:13', '', 282, 'http://acheng1314.cn/?p=283', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(284, 1, '2016-11-16 01:30:04', '0000-00-00 00:00:00', ' ', '', '', 'draft', 'closed', 'closed', '', '', '', '', '2016-11-16 01:30:04', '0000-00-00 00:00:00', '', 0, 'http://acheng1314.cn/?p=284', 0, 'nav_menu_item', '', 0),
(286, 1, '2016-11-22 18:51:37', '2016-11-22 10:51:37', '<div class="entry-content post-content">\r\n<h3 id="mvp">MVP</h3>\r\n<h2 id="-">简介</h2>\r\nMVP是模型（Model）、视图（View）、主持人（Presenter）的缩写，分别代表项目中3个不同的模块。如图所示：\r\n\r\n<figure><img class="medium-zoom-image" src="http://ac-myg6wstv.clouddn.com/d17552f4de00c0660ae5" />\r\n<figcaption>image</figcaption></figure>\r\n<ul>\r\n 	<li>View 对应于Activity、Fragment，负责界面的绘制以及与用户交互</li>\r\n 	<li>Model 依然是业务逻辑和实体模型</li>\r\n 	<li>Presenter 负责完成View于Model间的交互\r\n<h2 id="-">设计前思考：</h2>\r\n</li>\r\n 	<li>首先在我们常用的MVC模式中，Activity承载了太多，做了不只是视图层的事情，而程序开发中<strong>最重要的 Context 一般也是在视图层才拥有的</strong>，所以我们需要把<strong>Context</strong>保持在视图中。</li>\r\n 	<li>MVP相对于MVC，MVP中是依赖<strong>Presenter</strong>这个接口任务调度器来实现任务调度，则视图层中所有需要进行数据交互的，都需要将数据交给<strong>Presenter</strong>，而<strong>Presenter</strong>将调用<strong>Model</strong>来加载数据。</li>\r\n 	<li>在传统的MVC中，我常用 initView()、initData()、initEvent()、doOther() 这几个方法来实现数据流程加载、界面交互实现。现在我们需要拆分出来，Activity从BaseActivity中实现。</li>\r\n</ul>\r\n经过这样的构思，我们可以先实践一下，我们让View来实现Model的接口，View来调用presenter，presenter利用面向接口编程的思想来调用接口实现对View的操作。实例如下：\r\n<pre><code class="hljs javascript">\r\n<span class="hljs-keyword">import</span> android.content.Context;\r\n<span class="hljs-keyword">import</span> android.os.Bundle;\r\n<span class="hljs-keyword">import</span> android.support.v7.app.AppCompatActivity;\r\n\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.mvp.model.BaseViewController;\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.mvp.presenter.BasePresenter;\r\n\r\n\r\n<span class="hljs-comment">/**\r\n * Created by pc859107393 on 2016/6/28.\r\n */</span>\r\npublic abstract <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseActivity</span>&lt;<span class="hljs-title">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BasePresenter</span>, <span class="hljs-title">M</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseViewController</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>{\r\n\r\n    public <span class="hljs-built_in">String</span> TAG;  <span class="hljs-comment">//当前Activity的标记</span>\r\n\r\n    protected T mPresenter;     <span class="hljs-comment">//主持人角色</span>\r\n\r\n    protected abstract T initPresenter();    <span class="hljs-comment">//获取到主持人</span>\r\n\r\n\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> onCreate(Bundle savedInstanceState) {\r\n        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);\r\n        TAG = <span class="hljs-built_in">String</span>.format(<span class="hljs-string">"%s::%s"</span>, getPackageName(), getLocalClassName());\r\n\r\n\r\n        mPresenter = initPresenter();    <span class="hljs-comment">//初始化Presenter，提供主持人，拥有主持人后才能提交界面数据给presenter</span>\r\n\r\n        setContentView(setLayoutId());\r\n\r\n        initView();\r\n\r\n        mPresenter.initData();\r\n\r\n        initEvent();\r\n\r\n        doOther();\r\n    }\r\n\r\n    protected <span class="hljs-keyword">void</span> doOther() {\r\n\r\n    }\r\n\r\n    public Context getContext() {\r\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;\r\n    }\r\n\r\n    protected abstract <span class="hljs-keyword">void</span> initEvent();\r\n\r\n\r\n    protected abstract <span class="hljs-keyword">void</span> initView();\r\n\r\n    protected abstract int setLayoutId();\r\n\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> onResume() {\r\n        <span class="hljs-keyword">super</span>.onResume();\r\n        <span class="hljs-comment">//如果presenter为空的时候，我们需要重新初始化presenter</span>\r\n        <span class="hljs-keyword">if</span> (mPresenter == <span class="hljs-literal">null</span>) {\r\n            mPresenter = initPresenter();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> onPause() {\r\n        <span class="hljs-keyword">super</span>.onPause();\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> onBackPressed() {   <span class="hljs-comment">//返回按钮点击事件</span>\r\n        <span class="hljs-comment">//当Activity中的 进度对话框正在旋转的时候（数据正在加载，网络延迟高，数据难以加载）,关闭 进度对话框 ， 然后可以手动执行重新加载</span>\r\n\r\n        <span class="hljs-keyword">super</span>.onBackPressed();\r\n    }\r\n\r\n    <span class="hljs-comment">/**\r\n     * 恢复界面后,我们需要判断我们的presenter是不是存在,不存在则重置presenter\r\n     *\r\n     * @param savedInstanceState\r\n     */</span>\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> onRestoreInstanceState(Bundle savedInstanceState) {\r\n        <span class="hljs-keyword">super</span>.onRestoreInstanceState(savedInstanceState);\r\n        <span class="hljs-keyword">if</span> (mPresenter == <span class="hljs-literal">null</span>)\r\n            mPresenter = initPresenter();\r\n    }\r\n\r\n    <span class="hljs-comment">/**\r\n     * onDestroy中销毁presenter\r\n     */</span>\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> onDestroy() {\r\n        <span class="hljs-keyword">super</span>.onDestroy();\r\n        mPresenter = <span class="hljs-literal">null</span>;\r\n    }\r\n\r\n}</code></pre>\r\n既然我们的Activity已经设定好了BaseActivity，我们需要接着完成BasePresenter，如下：\r\n<pre><code class="hljs javascript"><span class="hljs-keyword">import</span> com.acheng.achengutils.mvp.model.BaseViewController;\r\n\r\n<span class="hljs-comment">/**\r\n * Created by acheng on 2016/7/14.\r\n */</span>\r\npublic abstract <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BasePresenter</span>&lt;<span class="hljs-title">D</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseViewController</span>&gt; </span>{\r\n\r\n\r\n    public D model;\r\n\r\n    <span class="hljs-comment">/**\r\n     * 在子类的构造函数中，设定参数为model，这时候可以presenter调用接口来实现对界面的操作。\r\n     */</span>\r\n    public BasePresenter(D model) {\r\n        <span class="hljs-keyword">this</span>.model = model;\r\n    }\r\n\r\n    public abstract <span class="hljs-keyword">void</span> initData();\r\n\r\n\r\n}</code></pre>\r\n关于我这个Presenter的设计，我想说的是我们需要将各层解耦，那么我的presenter就不应该持有Android程序流转的必然因子，如Context、Bundle、Intent、View等，如果我们需要实现对界面的操作，必须通过调用我们设定好的Model来实现，关于BaseModel更加简单了，直接是一个空的接口文件，如下：\r\n<pre><code class="hljs javascript">\r\npublic interface BaseViewController {\r\n    <span class="hljs-comment">//这里面添加实现类需要实现的方法即可</span>\r\n}</code></pre>\r\n<h2 id="-">设计后的思考</h2>\r\n<ul>\r\n 	<li>presenter作为主持人,应该随着视图的关闭而关闭,所以我们需要在Activity和Fragment的关闭的时候,注销相应的presenter</li>\r\n 	<li>在应用程序被销毁的时候,我们重启了程序,但是这时应用的状态如果不恢复到前面的状态那么我们需要把对应的presenter重建</li>\r\n 	<li>在应用恢复后,如果想保持刚才的状态,那么我们需要在被销毁前把视图的状态保存,并且恢复对应的状态</li>\r\n</ul>\r\n说了这么多，我们直接手底下见真章：\r\n<pre><code class="hljs javascript">\r\n<span class="hljs-keyword">import</span> android.Manifest;\r\n<span class="hljs-keyword">import</span> android.annotation.TargetApi;\r\n<span class="hljs-keyword">import</span> android.content.DialogInterface;\r\n<span class="hljs-keyword">import</span> android.content.Intent;\r\n<span class="hljs-keyword">import</span> android.content.pm.PackageManager;\r\n<span class="hljs-keyword">import</span> android.net.Uri;\r\n<span class="hljs-keyword">import</span> android.os.Build;\r\n<span class="hljs-keyword">import</span> android.provider.Settings;\r\n<span class="hljs-keyword">import</span> android.support.v7.app.AlertDialog;\r\n<span class="hljs-keyword">import</span> android.view.View;\r\n<span class="hljs-keyword">import</span> android.widget.TextView;\r\n\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.mvp.view.BaseActivity;\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.utils.SPHelper;\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.widgets.AppUpdateDialog;\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.widgets.MustDoThingDailog;\r\n\r\n<span class="hljs-keyword">import</span> java.util.ArrayList;\r\n<span class="hljs-keyword">import</span> java.util.HashMap;\r\n<span class="hljs-keyword">import</span> java.util.List;\r\n<span class="hljs-keyword">import</span> java.util.Map;\r\n\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.MyApplication;\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.R;\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.bean.LoginBean;\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.view.activity.presenter.LoginActivityPresenter;\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.view.activity.viewcontroller.LoginActivityViewController;\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.widgets.MyProgressDialog;\r\n\r\n<span class="hljs-comment">/**\r\n * Created by pc859107393 on 2016/9/12 0012.\r\n */</span>\r\npublic <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseActivity</span>&lt;<span class="hljs-title">LoginActivityPresenter</span>, <span class="hljs-title">LoginActivityViewController</span>&gt; <span class="hljs-title">implements</span> <span class="hljs-title">LoginActivityViewController</span> </span>{\r\n\r\n    private View mBt_login;\r\n    private TextView mEt_username;  <span class="hljs-comment">//用户名</span>\r\n    private TextView mEt_password;  <span class="hljs-comment">//密码s</span>\r\n\r\n\r\n    final private int REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS = <span class="hljs-number">124</span>;\r\n    private AppUpdateDialog appPermission;  <span class="hljs-comment">//权限申请对话框</span>\r\n    private MyProgressDialog myProgressDialog;  <span class="hljs-comment">//进度对话框</span>\r\n\r\n    @Override\r\n    protected LoginActivityPresenter initPresenter() {\r\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> LoginActivityPresenter(<span class="hljs-keyword">this</span>);    <span class="hljs-comment">//实例化LoginActivity的Presenter</span>\r\n    }\r\n\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> initEvent() {\r\n        mBt_login.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() {\r\n            @Override\r\n            public <span class="hljs-keyword">void</span> onClick(View v) {\r\n                MyApplication.getInstance().outLog(TAG, <span class="hljs-string">"MDZZ"</span>);    <span class="hljs-comment">//日志输出</span>\r\n                <span class="hljs-comment">//调用Presenter的登录的网络请求，将用户名和密码传递过去</span>\r\n                mPresenter.doLogin(mEt_username.getText().toString(), mEt_password.getText().toString()); \r\n\r\n\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> initView() {\r\n        MyApplication.getInstance().addActivity(<span class="hljs-keyword">this</span>);  <span class="hljs-comment">//将Activity加入堆栈管理</span>\r\n        mEt_username = (TextView) findViewById(R.id.mEt_username);\r\n        mEt_password = (TextView) findViewById(R.id.mEt_password);\r\n        mBt_login = findViewById(R.id.mBt_login);\r\n    }\r\n\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> doOther() {\r\n        <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\r\n            List&lt;<span class="hljs-built_in">String</span>&gt; permissionsNeeded = <span class="hljs-keyword">new</span> ArrayList&lt;<span class="hljs-built_in">String</span>&gt;();\r\n\r\n            final List&lt;<span class="hljs-built_in">String</span>&gt; permissionsList = <span class="hljs-keyword">new</span> ArrayList&lt;<span class="hljs-built_in">String</span>&gt;();\r\n            <span class="hljs-keyword">if</span> (!addPermission(permissionsList, Manifest.permission.WRITE_EXTERNAL_STORAGE))\r\n                permissionsNeeded.add(<span class="hljs-string">"手机存储空间"</span>);\r\n            <span class="hljs-keyword">if</span> (!addPermission(permissionsList, Manifest.permission.READ_PHONE_STATE))\r\n                permissionsNeeded.add(<span class="hljs-string">"获取手机状态"</span>);\r\n            <span class="hljs-keyword">if</span> (!addPermission(permissionsList, Manifest.permission.CAMERA))\r\n                permissionsNeeded.add(<span class="hljs-string">"手机相机"</span>);\r\n            <span class="hljs-keyword">if</span> (!addPermission(permissionsList, Manifest.permission.ACCESS_COARSE_LOCATION))\r\n                permissionsNeeded.add(<span class="hljs-string">"手机位置"</span>);\r\n<span class="hljs-comment">//            if (!addPermission(permissionsList, Manifest.permission.WRITE_SETTINGS))</span>\r\n<span class="hljs-comment">//                permissionsNeeded.add("手机设置");</span>\r\n\r\n            <span class="hljs-keyword">if</span> (permissionsList.size() &gt; <span class="hljs-number">0</span>) {\r\n                <span class="hljs-keyword">if</span> (permissionsNeeded.size() &gt; <span class="hljs-number">0</span>) { <span class="hljs-comment">//待申请的权限列表</span>\r\n                    <span class="hljs-comment">// Need Rationale</span>\r\n                    <span class="hljs-built_in">String</span> message = <span class="hljs-string">"你必须允许本APP使用："</span> + permissionsNeeded.get(<span class="hljs-number">0</span>);\r\n                    <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">1</span>; i &lt; permissionsNeeded.size(); i++)\r\n                        message = message + <span class="hljs-string">", "</span> + permissionsNeeded.get(i);\r\n                    showMessageOKCancel(message,\r\n                            <span class="hljs-keyword">new</span> DialogInterface.OnClickListener() {\r\n                                @TargetApi(Build.VERSION_CODES.M)\r\n                                @Override\r\n                                public <span class="hljs-keyword">void</span> onClick(DialogInterface dialog, int which) {\r\n                                    requestPermissions(permissionsList.toArray(<span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>[permissionsList.size()]),\r\n                                            REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);\r\n                                }\r\n                            });\r\n                    <span class="hljs-keyword">return</span>;\r\n                }\r\n                requestPermissions(permissionsList.toArray(<span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>[permissionsList.size()]),\r\n                        REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);\r\n            }\r\n        }\r\n        <span class="hljs-keyword">super</span>.doOther();\r\n    }\r\n\r\n    private <span class="hljs-keyword">void</span> showMessageOKCancel(<span class="hljs-built_in">String</span> message, DialogInterface.OnClickListener okListener) {\r\n        <span class="hljs-keyword">new</span> AlertDialog.Builder(<span class="hljs-keyword">this</span>)\r\n                .setMessage(message)\r\n                .setPositiveButton(<span class="hljs-string">"允许"</span>, okListener)\r\n                .setNegativeButton(<span class="hljs-string">"拒绝"</span>, <span class="hljs-literal">null</span>)\r\n                .create()\r\n                .show();\r\n    }\r\n\r\n    private boolean addPermission(List&lt;<span class="hljs-built_in">String</span>&gt; permissionsList, <span class="hljs-built_in">String</span> permission) {\r\n        <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\r\n            <span class="hljs-keyword">if</span> (checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {\r\n                permissionsList.add(permission);\r\n                <span class="hljs-keyword">if</span> (!shouldShowRequestPermissionRationale(permission))\r\n                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;\r\n            }\r\n        }\r\n        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> onRequestPermissionsResult(int requestCode, <span class="hljs-built_in">String</span>[] permissions, int[] grantResults) {\r\n        <span class="hljs-keyword">switch</span> (requestCode) {\r\n            <span class="hljs-keyword">case</span> REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS: {\r\n                <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, Integer&gt; perms = <span class="hljs-keyword">new</span> HashMap&lt;<span class="hljs-built_in">String</span>, Integer&gt;();\r\n                <span class="hljs-comment">// Initial</span>\r\n                perms.put(Manifest.permission.WRITE_EXTERNAL_STORAGE, PackageManager.PERMISSION_GRANTED);\r\n                perms.put(Manifest.permission.READ_PHONE_STATE, PackageManager.PERMISSION_GRANTED);\r\n                perms.put(Manifest.permission.CAMERA, PackageManager.PERMISSION_GRANTED);\r\n                perms.put(Manifest.permission.ACCESS_COARSE_LOCATION, PackageManager.PERMISSION_GRANTED);\r\n                <span class="hljs-comment">// Fill with results</span>\r\n                <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; permissions.length; i++)\r\n                    perms.put(permissions[i], grantResults[i]);\r\n                <span class="hljs-comment">// Check for ACCESS_FINE_LOCATION</span>\r\n                <span class="hljs-keyword">if</span> (perms.get(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED\r\n                        &amp;&amp; perms.get(Manifest.permission.READ_PHONE_STATE) == PackageManager.PERMISSION_GRANTED\r\n                        &amp;&amp; perms.get(Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED\r\n                        &amp;&amp; perms.get(Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\r\n                    <span class="hljs-comment">//经过用户授权，获得所有权限</span>\r\n                    <span class="hljs-keyword">if</span> (appPermission != <span class="hljs-literal">null</span>) {\r\n                        appPermission = <span class="hljs-literal">null</span>;\r\n                    }\r\n                    <span class="hljs-comment">// All Permissions Granted</span>\r\n                } <span class="hljs-keyword">else</span> {    <span class="hljs-comment">//未得到用户授权</span>\r\n                    <span class="hljs-comment">// Permission Denied</span>\r\n                    appPermission = <span class="hljs-keyword">new</span> AppUpdateDialog(AppUpdateDialog.IMPORTANT, <span class="hljs-string">"一些权限未被允许，请在设置中授权!"</span>, getContext(), <span class="hljs-keyword">new</span> AppUpdateDialog.NeedDoThing() {\r\n                        @Override\r\n                        public <span class="hljs-keyword">void</span> mustDoThing() {\r\n                            Uri packageURI = Uri.parse(<span class="hljs-string">"package:"</span> + getPackageName());\r\n                            Intent intent = <span class="hljs-keyword">new</span> Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS, packageURI);\r\n                            startActivity(intent);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            <span class="hljs-keyword">break</span>;\r\n            <span class="hljs-keyword">default</span>:\r\n                <span class="hljs-keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> onResume() {\r\n        <span class="hljs-keyword">super</span>.onResume();\r\n        doOther();\r\n    }\r\n\r\n    @Override\r\n    protected int setLayoutId() {\r\n        <span class="hljs-keyword">return</span> R.layout.activity_login;\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> showDailog(<span class="hljs-built_in">String</span> msg) {\r\n        <span class="hljs-keyword">new</span> MustDoThingDailog(<span class="hljs-string">"提示"</span>, msg, getContext(), <span class="hljs-keyword">new</span> MustDoThingDailog.NeedDoThing() {\r\n            @Override\r\n            public <span class="hljs-keyword">void</span> mustDoThings() {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> showProgressD() {\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == myProgressDialog)\r\n            myProgressDialog = <span class="hljs-keyword">new</span> MyProgressDialog(<span class="hljs-string">"登陆"</span>, <span class="hljs-string">"正在登录···"</span>, getContext());\r\n        <span class="hljs-keyword">else</span>\r\n            myProgressDialog.show();\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> disProgressD() {\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != myProgressDialog)\r\n            myProgressDialog.dismiss();\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> openHome(LoginBean bean) {\r\n\r\n        SPHelper.setString(getContext(), getContext().getString(R.string.user), getContext().getString(R.string.username), mEt_username.getText().toString());\r\n        SPHelper.setString(getContext(), getContext().getString(R.string.user), getContext().getString(R.string.password), mEt_password.getText().toString());\r\n        SPHelper.setString(getContext(), getContext().getString(R.string.user), getContext().getString(R.string.userId), bean.getResult().getUserId());\r\n        SPHelper.setString(getContext(), getContext().getString(R.string.user), getContext().getString(R.string.token), bean.getResult().getToken());\r\n\r\n        startActivity(<span class="hljs-keyword">new</span> Intent(getContext(), HomeActivity.class));\r\n\r\n        finish();\r\n    }\r\n}</code></pre>\r\n其实上面我们当中可以看到我们前台界面拿到用户数据后，调用presenter的doLogin方法，把用户名和密码传递过去，然后我们在Presenter中请求网络然后再通过调用接口实现数据回传。如下：\r\n<pre><code class="hljs javascript"><span class="hljs-keyword">import</span> com.acheng.achengutils.gsonutil.GsonUtils;\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.mvp.presenter.BasePresenter;\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.utils.CipherUtils;\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.utils.StringUtils;\r\n<span class="hljs-keyword">import</span> com.kymjs.rxvolley.RxVolley;\r\n<span class="hljs-keyword">import</span> com.kymjs.rxvolley.client.HttpCallback;\r\n<span class="hljs-keyword">import</span> com.kymjs.rxvolley.client.HttpParams;\r\n<span class="hljs-keyword">import</span> com.kymjs.rxvolley.http.VolleyError;\r\n\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.MyApplication;\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.bean.LoginBean;\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.hostApi.MyApi;\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.view.activity.viewcontroller.LoginActivityViewController;\r\n\r\n<span class="hljs-comment">/**\r\n * Created by pc859107393 on 2016/9/12 0012.\r\n */</span>\r\npublic <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginActivityPresenter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BasePresenter</span>&lt;<span class="hljs-title">LoginActivityViewController</span>&gt; </span>{\r\n    <span class="hljs-comment">/**\r\n     * 在子类的构造函数中，设定参数为model，这时候可以presenter调用接口来实现对界面的操作。\r\n     *\r\n     * @param model\r\n     */</span>\r\n    public LoginActivityPresenter(LoginActivityViewController model) {\r\n        <span class="hljs-keyword">super</span>(model);\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> initData() {\r\n\r\n    }\r\n\r\n    public <span class="hljs-keyword">void</span> doLogin(<span class="hljs-built_in">String</span> name, <span class="hljs-built_in">String</span> pwd) {\r\n        <span class="hljs-comment">//用户名和密码不能为空</span>\r\n        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(name) || StringUtils.isEmpty(pwd)) {\r\n            model.showDailog(<span class="hljs-string">"用户名或密码不能为空！"</span>); <span class="hljs-comment">//调用model的错误提示对话框</span>\r\n            <span class="hljs-keyword">return</span>;\r\n        }\r\n\r\n        <span class="hljs-comment">//密码MD5加密</span>\r\n        pwd = CipherUtils.small32md5(pwd);\r\n        HttpParams params = <span class="hljs-keyword">new</span> HttpParams();\r\n        params.put(<span class="hljs-string">"userName"</span>, name);\r\n        params.put(<span class="hljs-string">"passWord"</span>, pwd);\r\n        RxVolley.post(MyApi.LoginApi, params, <span class="hljs-keyword">new</span> HttpCallback() {\r\n            @Override\r\n            public <span class="hljs-keyword">void</span> onSuccess(<span class="hljs-built_in">String</span> t) {\r\n                <span class="hljs-keyword">super</span>.onSuccess(t);\r\n                <span class="hljs-comment">//数据不为空再进行数据处理</span>\r\n                <span class="hljs-keyword">try</span> {\r\n                    <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != t) {\r\n                        MyApplication.getInstance().outLog(<span class="hljs-string">"输出"</span>, t);\r\n                        LoginBean bean = <span class="hljs-keyword">new</span> GsonUtils().toBean(t, LoginBean.class);\r\n                        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != bean) {\r\n                            <span class="hljs-keyword">if</span> (bean.getCode() == <span class="hljs-number">0</span>) {\r\n                                <span class="hljs-comment">//请求成功</span>\r\n                                model.openHome(bean);\r\n                            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bean.getCode() == <span class="hljs-number">1</span>) {\r\n                                model.showDailog(<span class="hljs-string">"登录失败,帐户不存在"</span>);\r\n                            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bean.getCode() == <span class="hljs-number">2</span>) {\r\n                                model.showDailog(<span class="hljs-string">"登录失败,密码错误"</span>);\r\n                            } <span class="hljs-keyword">else</span> {\r\n                                model.showDailog(<span class="hljs-string">"登录失败,其他未知错误"</span>);\r\n                            }\r\n                        }\r\n                    }\r\n                } <span class="hljs-keyword">catch</span> (Exception e) {\r\n                    e.printStackTrace();\r\n                    model.showDailog(<span class="hljs-string">"登录失败,其他未知错误"</span>);\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public <span class="hljs-keyword">void</span> onFailure(VolleyError error) {\r\n                <span class="hljs-keyword">super</span>.onFailure(error);\r\n                model.showDailog(<span class="hljs-string">"登录失败,其他未知错误"</span>);\r\n            }\r\n\r\n            @Override\r\n            public <span class="hljs-keyword">void</span> onFinish() {\r\n                <span class="hljs-keyword">super</span>.onFinish();\r\n                model.disProgressD();   <span class="hljs-comment">//model的关闭对话框的接口</span>\r\n            }\r\n\r\n            @Override\r\n            public <span class="hljs-keyword">void</span> onPreStart() {\r\n                <span class="hljs-keyword">super</span>.onPreStart();\r\n                model.showProgressD();  <span class="hljs-comment">//model的进度对话框</span>\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n}</code></pre>\r\n我们上面可以看到我们现在只要把请求网络的数据传递上去就可以完成单元测试了，这样子我们就达到了我们数据流转的单元测试的标准。\r\n\r\n既然我们都看到了Presenter对model的调用，那么我们直接贴上model再对比Activity就能明白了我们是怎么完成这个设计的。\r\n<pre><code class="hljs javascript">public interface LoginActivityViewController extends BaseViewController {\r\n    <span class="hljs-comment">/**\r\n     * 显示信息提示对话框\r\n     * @param msg   message\r\n     */</span>\r\n    <span class="hljs-keyword">void</span> showDailog(<span class="hljs-built_in">String</span> msg);\r\n\r\n    <span class="hljs-comment">/**\r\n     * 显示进度对话框\r\n     */</span>\r\n    <span class="hljs-keyword">void</span> showProgressD();\r\n\r\n    <span class="hljs-comment">/**\r\n     * 关闭对话框\r\n     */</span>\r\n    <span class="hljs-keyword">void</span> disProgressD();\r\n\r\n    <span class="hljs-comment">/**\r\n     * 登陆成功跳转到其他界面\r\n     * @param bean\r\n     */</span>\r\n    <span class="hljs-keyword">void</span> openHome(LoginBean bean);\r\n}</code></pre>\r\n我们看到这里，很多哥们可能又会不明白，为什么我们能控制界面呢？如下：\r\n<pre><code class="hljs javascript"><span class="hljs-comment">//我们在程序中，presenter直接调用的model，但是model是被View实现了的。</span>\r\npublic <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseActivity</span>&lt;<span class="hljs-title">LoginActivityPresenter</span>, <span class="hljs-title">LoginActivityViewController</span>&gt; <span class="hljs-title">implements</span> <span class="hljs-title">LoginActivityViewController</span> </span>{\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> showDailog(<span class="hljs-built_in">String</span> msg) {\r\n        <span class="hljs-comment">//实现了model的显示对话框的方法</span>\r\n        <span class="hljs-keyword">new</span> MustDoThingDailog(<span class="hljs-string">"提示"</span>, msg, getContext(), <span class="hljs-keyword">new</span> MustDoThingDailog.NeedDoThing() {\r\n            @Override\r\n            public <span class="hljs-keyword">void</span> mustDoThings() {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> showProgressD() {\r\n        <span class="hljs-comment">//这是显示进度对话框的，实现了model的方法</span>\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> disProgressD() {\r\n        <span class="hljs-comment">//这是实现了moel的关闭进度对话框的方法</span>\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> openHome(LoginBean bean) {\r\n\r\n        <span class="hljs-comment">//实现了model的打开其他页面的方法</span>\r\n    }\r\n}</code></pre>\r\n所以我们的MVP执行的步骤其实就是：用户执行操作 -&gt; 调用presenter(完成独立的数据处理) -&gt; 调用model的方法控制界面 -&gt; 展示给用户\r\n\r\n<hr />\r\n\r\n然后应该又有哥们会问我，为什么你的基类中会有&lt;&gt;这种括号括起来的东西，恩恩这个是泛型，主要是用来说明他们是哪一类的东西，通过泛型来解耦就可以在基类中整合更多的东西。具体的要我来说明的话，我只能说“就不！！！”，我需要任性一回。关于MVP更好的介绍可以看下github的项目<a href="https://github.com/kymjs/TheMVP" target="_blank">TheMvp</a>，这个是我的偶像<a href="http://www.kymjs.com/" target="_blank">@张涛</a>写的哟。\r\n<h2 id="-">总结</h2>\r\n<ul>\r\n 	<li>在mvp架构中,我们需要在基类中拿到每个界面对应的presenter和model,则我们需要让程序知道每个对应的presenter和model.</li>\r\n 	<li>为了减少不必要的代码开销,我们需要把每个activity和Fragment的公共方法抽取出来,写入基类中.</li>\r\n 	<li>在基类中,我们需要将具体的presenter和model解耦,则需要泛型进行类型转换来解除耦合.</li>\r\n 	<li>泛型解除耦合后,我们需要在每个具体的view中来持有presenter和实现model层的接口.并且通过每个view关联的presenter调用model的某个方法来控制view.</li>\r\n</ul>\r\n</div>\r\n<div class="post-tags tags cloud"></div>', 'Android-MVP架构', '', 'publish', 'open', 'open', '', 'android-mvp%e6%9e%b6%e6%9e%84', '', '', '2016-11-23 03:19:44', '2016-11-22 19:19:44', '', 0, 'http://acheng1314.cn/?p=286', 0, 'post', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(287, 1, '2016-11-22 18:51:37', '2016-11-22 10:51:37', '<div class="entry-content post-content">\r\n<h3 id="mvp">MVP</h3>\r\n<h2 id="-">简介</h2>\r\nMVP是模型（Model）、视图（View）、主持人（Presenter）的缩写，分别代表项目中3个不同的模块。如图所示：\r\n\r\n<figure><img class="medium-zoom-image" src="http://ac-myg6wstv.clouddn.com/d17552f4de00c0660ae5" /><figcaption>image</figcaption></figure>\r\n<ul>\r\n 	<li>View 对应于Activity、Fragment，负责界面的绘制以及与用户交互</li>\r\n 	<li>Model 依然是业务逻辑和实体模型</li>\r\n 	<li>Presenter 负责完成View于Model间的交互\r\n<h2 id="-">设计前思考：</h2>\r\n</li>\r\n 	<li>首先在我们常用的MVC模式中，Activity承载了太多，做了不只是视图层的事情，而程序开发中<strong>最重要的 Context 一般也是在视图层才拥有的</strong>，所以我们需要把<strong>Context</strong>保持在视图中。</li>\r\n 	<li>MVP相对于MVC，MVP中是依赖<strong>Presenter</strong>这个接口任务调度器来实现任务调度，则视图层中所有需要进行数据交互的，都需要将数据交给<strong>Presenter</strong>，而<strong>Presenter</strong>将调用<strong>Model</strong>来加载数据。</li>\r\n 	<li>在传统的MVC中，我常用 initView()、initData()、initEvent()、doOther() 这几个方法来实现数据流程加载、界面交互实现。现在我们需要拆分出来，Activity从BaseActivity中实现。</li>\r\n</ul>\r\n经过这样的构思，我们可以先实践一下，我们让View来实现Model的接口，View来调用presenter，presenter利用面向接口编程的思想来调用接口实现对View的操作。实例如下：\r\n<pre><code class="hljs javascript">\r\n<span class="hljs-keyword">import</span> android.content.Context;\r\n<span class="hljs-keyword">import</span> android.os.Bundle;\r\n<span class="hljs-keyword">import</span> android.support.v7.app.AppCompatActivity;\r\n\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.mvp.model.BaseViewController;\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.mvp.presenter.BasePresenter;\r\n\r\n\r\n<span class="hljs-comment">/**\r\n * Created by pc859107393 on 2016/6/28.\r\n */</span>\r\npublic abstract <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseActivity</span>&lt;<span class="hljs-title">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BasePresenter</span>, <span class="hljs-title">M</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseViewController</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>{\r\n\r\n    public <span class="hljs-built_in">String</span> TAG;  <span class="hljs-comment">//当前Activity的标记</span>\r\n\r\n    protected T mPresenter;     <span class="hljs-comment">//主持人角色</span>\r\n\r\n    protected abstract T initPresenter();    <span class="hljs-comment">//获取到主持人</span>\r\n\r\n\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> onCreate(Bundle savedInstanceState) {\r\n        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);\r\n        TAG = <span class="hljs-built_in">String</span>.format(<span class="hljs-string">"%s::%s"</span>, getPackageName(), getLocalClassName());\r\n\r\n\r\n        mPresenter = initPresenter();    <span class="hljs-comment">//初始化Presenter，提供主持人，拥有主持人后才能提交界面数据给presenter</span>\r\n\r\n        setContentView(setLayoutId());\r\n\r\n        initView();\r\n\r\n        mPresenter.initData();\r\n\r\n        initEvent();\r\n\r\n        doOther();\r\n    }\r\n\r\n    protected <span class="hljs-keyword">void</span> doOther() {\r\n\r\n    }\r\n\r\n    public Context getContext() {\r\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;\r\n    }\r\n\r\n    protected abstract <span class="hljs-keyword">void</span> initEvent();\r\n\r\n\r\n    protected abstract <span class="hljs-keyword">void</span> initView();\r\n\r\n    protected abstract int setLayoutId();\r\n\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> onResume() {\r\n        <span class="hljs-keyword">super</span>.onResume();\r\n        <span class="hljs-comment">//如果presenter为空的时候，我们需要重新初始化presenter</span>\r\n        <span class="hljs-keyword">if</span> (mPresenter == <span class="hljs-literal">null</span>) {\r\n            mPresenter = initPresenter();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> onPause() {\r\n        <span class="hljs-keyword">super</span>.onPause();\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> onBackPressed() {   <span class="hljs-comment">//返回按钮点击事件</span>\r\n        <span class="hljs-comment">//当Activity中的 进度对话框正在旋转的时候（数据正在加载，网络延迟高，数据难以加载）,关闭 进度对话框 ， 然后可以手动执行重新加载</span>\r\n\r\n        <span class="hljs-keyword">super</span>.onBackPressed();\r\n    }\r\n\r\n    <span class="hljs-comment">/**\r\n     * 恢复界面后,我们需要判断我们的presenter是不是存在,不存在则重置presenter\r\n     *\r\n     * @param savedInstanceState\r\n     */</span>\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> onRestoreInstanceState(Bundle savedInstanceState) {\r\n        <span class="hljs-keyword">super</span>.onRestoreInstanceState(savedInstanceState);\r\n        <span class="hljs-keyword">if</span> (mPresenter == <span class="hljs-literal">null</span>)\r\n            mPresenter = initPresenter();\r\n    }\r\n\r\n    <span class="hljs-comment">/**\r\n     * onDestroy中销毁presenter\r\n     */</span>\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> onDestroy() {\r\n        <span class="hljs-keyword">super</span>.onDestroy();\r\n        mPresenter = <span class="hljs-literal">null</span>;\r\n    }\r\n\r\n}</code></pre>\r\n既然我们的Activity已经设定好了BaseActivity，我们需要接着完成BasePresenter，如下：\r\n<pre><code class="hljs javascript"><span class="hljs-keyword">import</span> com.acheng.achengutils.mvp.model.BaseViewController;\r\n\r\n<span class="hljs-comment">/**\r\n * Created by acheng on 2016/7/14.\r\n */</span>\r\npublic abstract <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BasePresenter</span>&lt;<span class="hljs-title">D</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseViewController</span>&gt; </span>{\r\n\r\n\r\n    public D model;\r\n\r\n    <span class="hljs-comment">/**\r\n     * 在子类的构造函数中，设定参数为model，这时候可以presenter调用接口来实现对界面的操作。\r\n     */</span>\r\n    public BasePresenter(D model) {\r\n        <span class="hljs-keyword">this</span>.model = model;\r\n    }\r\n\r\n    public abstract <span class="hljs-keyword">void</span> initData();\r\n\r\n\r\n}</code></pre>\r\n关于我这个Presenter的设计，我想说的是我们需要将各层解耦，那么我的presenter就不应该持有Android程序流转的必然因子，如Context、Bundle、Intent、View等，如果我们需要实现对界面的操作，必须通过调用我们设定好的Model来实现，关于BaseModel更加简单了，直接是一个空的接口文件，如下：\r\n<pre><code class="hljs javascript">\r\npublic interface BaseViewController {\r\n    <span class="hljs-comment">//这里面添加实现类需要实现的方法即可</span>\r\n}</code></pre>\r\n<h2 id="-">设计后的思考</h2>\r\n<ul>\r\n 	<li>presenter作为主持人,应该随着视图的关闭而关闭,所以我们需要在Activity和Fragment的关闭的时候,注销相应的presenter</li>\r\n 	<li>在应用程序被销毁的时候,我们重启了程序,但是这时应用的状态如果不恢复到前面的状态那么我们需要把对应的presenter重建</li>\r\n 	<li>在应用恢复后,如果想保持刚才的状态,那么我们需要在被销毁前把视图的状态保存,并且恢复对应的状态</li>\r\n</ul>\r\n说了这么多，我们直接手底下见真章：\r\n<pre><code class="hljs javascript">\r\n<span class="hljs-keyword">import</span> android.Manifest;\r\n<span class="hljs-keyword">import</span> android.annotation.TargetApi;\r\n<span class="hljs-keyword">import</span> android.content.DialogInterface;\r\n<span class="hljs-keyword">import</span> android.content.Intent;\r\n<span class="hljs-keyword">import</span> android.content.pm.PackageManager;\r\n<span class="hljs-keyword">import</span> android.net.Uri;\r\n<span class="hljs-keyword">import</span> android.os.Build;\r\n<span class="hljs-keyword">import</span> android.provider.Settings;\r\n<span class="hljs-keyword">import</span> android.support.v7.app.AlertDialog;\r\n<span class="hljs-keyword">import</span> android.view.View;\r\n<span class="hljs-keyword">import</span> android.widget.TextView;\r\n\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.mvp.view.BaseActivity;\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.utils.SPHelper;\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.widgets.AppUpdateDialog;\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.widgets.MustDoThingDailog;\r\n\r\n<span class="hljs-keyword">import</span> java.util.ArrayList;\r\n<span class="hljs-keyword">import</span> java.util.HashMap;\r\n<span class="hljs-keyword">import</span> java.util.List;\r\n<span class="hljs-keyword">import</span> java.util.Map;\r\n\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.MyApplication;\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.R;\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.bean.LoginBean;\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.view.activity.presenter.LoginActivityPresenter;\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.view.activity.viewcontroller.LoginActivityViewController;\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.widgets.MyProgressDialog;\r\n\r\n<span class="hljs-comment">/**\r\n * Created by pc859107393 on 2016/9/12 0012.\r\n */</span>\r\npublic <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseActivity</span>&lt;<span class="hljs-title">LoginActivityPresenter</span>, <span class="hljs-title">LoginActivityViewController</span>&gt; <span class="hljs-title">implements</span> <span class="hljs-title">LoginActivityViewController</span> </span>{\r\n\r\n    private View mBt_login;\r\n    private TextView mEt_username;  <span class="hljs-comment">//用户名</span>\r\n    private TextView mEt_password;  <span class="hljs-comment">//密码s</span>\r\n\r\n\r\n    final private int REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS = <span class="hljs-number">124</span>;\r\n    private AppUpdateDialog appPermission;  <span class="hljs-comment">//权限申请对话框</span>\r\n    private MyProgressDialog myProgressDialog;  <span class="hljs-comment">//进度对话框</span>\r\n\r\n    @Override\r\n    protected LoginActivityPresenter initPresenter() {\r\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> LoginActivityPresenter(<span class="hljs-keyword">this</span>);    <span class="hljs-comment">//实例化LoginActivity的Presenter</span>\r\n    }\r\n\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> initEvent() {\r\n        mBt_login.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() {\r\n            @Override\r\n            public <span class="hljs-keyword">void</span> onClick(View v) {\r\n                MyApplication.getInstance().outLog(TAG, <span class="hljs-string">"MDZZ"</span>);    <span class="hljs-comment">//日志输出</span>\r\n                <span class="hljs-comment">//调用Presenter的登录的网络请求，将用户名和密码传递过去</span>\r\n                mPresenter.doLogin(mEt_username.getText().toString(), mEt_password.getText().toString()); \r\n\r\n\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> initView() {\r\n        MyApplication.getInstance().addActivity(<span class="hljs-keyword">this</span>);  <span class="hljs-comment">//将Activity加入堆栈管理</span>\r\n        mEt_username = (TextView) findViewById(R.id.mEt_username);\r\n        mEt_password = (TextView) findViewById(R.id.mEt_password);\r\n        mBt_login = findViewById(R.id.mBt_login);\r\n    }\r\n\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> doOther() {\r\n        <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\r\n            List&lt;<span class="hljs-built_in">String</span>&gt; permissionsNeeded = <span class="hljs-keyword">new</span> ArrayList&lt;<span class="hljs-built_in">String</span>&gt;();\r\n\r\n            final List&lt;<span class="hljs-built_in">String</span>&gt; permissionsList = <span class="hljs-keyword">new</span> ArrayList&lt;<span class="hljs-built_in">String</span>&gt;();\r\n            <span class="hljs-keyword">if</span> (!addPermission(permissionsList, Manifest.permission.WRITE_EXTERNAL_STORAGE))\r\n                permissionsNeeded.add(<span class="hljs-string">"手机存储空间"</span>);\r\n            <span class="hljs-keyword">if</span> (!addPermission(permissionsList, Manifest.permission.READ_PHONE_STATE))\r\n                permissionsNeeded.add(<span class="hljs-string">"获取手机状态"</span>);\r\n            <span class="hljs-keyword">if</span> (!addPermission(permissionsList, Manifest.permission.CAMERA))\r\n                permissionsNeeded.add(<span class="hljs-string">"手机相机"</span>);\r\n            <span class="hljs-keyword">if</span> (!addPermission(permissionsList, Manifest.permission.ACCESS_COARSE_LOCATION))\r\n                permissionsNeeded.add(<span class="hljs-string">"手机位置"</span>);\r\n<span class="hljs-comment">//            if (!addPermission(permissionsList, Manifest.permission.WRITE_SETTINGS))</span>\r\n<span class="hljs-comment">//                permissionsNeeded.add("手机设置");</span>\r\n\r\n            <span class="hljs-keyword">if</span> (permissionsList.size() &gt; <span class="hljs-number">0</span>) {\r\n                <span class="hljs-keyword">if</span> (permissionsNeeded.size() &gt; <span class="hljs-number">0</span>) { <span class="hljs-comment">//待申请的权限列表</span>\r\n                    <span class="hljs-comment">// Need Rationale</span>\r\n                    <span class="hljs-built_in">String</span> message = <span class="hljs-string">"你必须允许本APP使用："</span> + permissionsNeeded.get(<span class="hljs-number">0</span>);\r\n                    <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">1</span>; i &lt; permissionsNeeded.size(); i++)\r\n                        message = message + <span class="hljs-string">", "</span> + permissionsNeeded.get(i);\r\n                    showMessageOKCancel(message,\r\n                            <span class="hljs-keyword">new</span> DialogInterface.OnClickListener() {\r\n                                @TargetApi(Build.VERSION_CODES.M)\r\n                                @Override\r\n                                public <span class="hljs-keyword">void</span> onClick(DialogInterface dialog, int which) {\r\n                                    requestPermissions(permissionsList.toArray(<span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>[permissionsList.size()]),\r\n                                            REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);\r\n                                }\r\n                            });\r\n                    <span class="hljs-keyword">return</span>;\r\n                }\r\n                requestPermissions(permissionsList.toArray(<span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>[permissionsList.size()]),\r\n                        REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);\r\n            }\r\n        }\r\n        <span class="hljs-keyword">super</span>.doOther();\r\n    }\r\n\r\n    private <span class="hljs-keyword">void</span> showMessageOKCancel(<span class="hljs-built_in">String</span> message, DialogInterface.OnClickListener okListener) {\r\n        <span class="hljs-keyword">new</span> AlertDialog.Builder(<span class="hljs-keyword">this</span>)\r\n                .setMessage(message)\r\n                .setPositiveButton(<span class="hljs-string">"允许"</span>, okListener)\r\n                .setNegativeButton(<span class="hljs-string">"拒绝"</span>, <span class="hljs-literal">null</span>)\r\n                .create()\r\n                .show();\r\n    }\r\n\r\n    private boolean addPermission(List&lt;<span class="hljs-built_in">String</span>&gt; permissionsList, <span class="hljs-built_in">String</span> permission) {\r\n        <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\r\n            <span class="hljs-keyword">if</span> (checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {\r\n                permissionsList.add(permission);\r\n                <span class="hljs-keyword">if</span> (!shouldShowRequestPermissionRationale(permission))\r\n                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;\r\n            }\r\n        }\r\n        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> onRequestPermissionsResult(int requestCode, <span class="hljs-built_in">String</span>[] permissions, int[] grantResults) {\r\n        <span class="hljs-keyword">switch</span> (requestCode) {\r\n            <span class="hljs-keyword">case</span> REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS: {\r\n                <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, Integer&gt; perms = <span class="hljs-keyword">new</span> HashMap&lt;<span class="hljs-built_in">String</span>, Integer&gt;();\r\n                <span class="hljs-comment">// Initial</span>\r\n                perms.put(Manifest.permission.WRITE_EXTERNAL_STORAGE, PackageManager.PERMISSION_GRANTED);\r\n                perms.put(Manifest.permission.READ_PHONE_STATE, PackageManager.PERMISSION_GRANTED);\r\n                perms.put(Manifest.permission.CAMERA, PackageManager.PERMISSION_GRANTED);\r\n                perms.put(Manifest.permission.ACCESS_COARSE_LOCATION, PackageManager.PERMISSION_GRANTED);\r\n                <span class="hljs-comment">// Fill with results</span>\r\n                <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; permissions.length; i++)\r\n                    perms.put(permissions[i], grantResults[i]);\r\n                <span class="hljs-comment">// Check for ACCESS_FINE_LOCATION</span>\r\n                <span class="hljs-keyword">if</span> (perms.get(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED\r\n                        &amp;&amp; perms.get(Manifest.permission.READ_PHONE_STATE) == PackageManager.PERMISSION_GRANTED\r\n                        &amp;&amp; perms.get(Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED\r\n                        &amp;&amp; perms.get(Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\r\n                    <span class="hljs-comment">//经过用户授权，获得所有权限</span>\r\n                    <span class="hljs-keyword">if</span> (appPermission != <span class="hljs-literal">null</span>) {\r\n                        appPermission = <span class="hljs-literal">null</span>;\r\n                    }\r\n                    <span class="hljs-comment">// All Permissions Granted</span>\r\n                } <span class="hljs-keyword">else</span> {    <span class="hljs-comment">//未得到用户授权</span>\r\n                    <span class="hljs-comment">// Permission Denied</span>\r\n                    appPermission = <span class="hljs-keyword">new</span> AppUpdateDialog(AppUpdateDialog.IMPORTANT, <span class="hljs-string">"一些权限未被允许，请在设置中授权!"</span>, getContext(), <span class="hljs-keyword">new</span> AppUpdateDialog.NeedDoThing() {\r\n                        @Override\r\n                        public <span class="hljs-keyword">void</span> mustDoThing() {\r\n                            Uri packageURI = Uri.parse(<span class="hljs-string">"package:"</span> + getPackageName());\r\n                            Intent intent = <span class="hljs-keyword">new</span> Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS, packageURI);\r\n                            startActivity(intent);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            <span class="hljs-keyword">break</span>;\r\n            <span class="hljs-keyword">default</span>:\r\n                <span class="hljs-keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> onResume() {\r\n        <span class="hljs-keyword">super</span>.onResume();\r\n        doOther();\r\n    }\r\n\r\n    @Override\r\n    protected int setLayoutId() {\r\n        <span class="hljs-keyword">return</span> R.layout.activity_login;\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> showDailog(<span class="hljs-built_in">String</span> msg) {\r\n        <span class="hljs-keyword">new</span> MustDoThingDailog(<span class="hljs-string">"提示"</span>, msg, getContext(), <span class="hljs-keyword">new</span> MustDoThingDailog.NeedDoThing() {\r\n            @Override\r\n            public <span class="hljs-keyword">void</span> mustDoThings() {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> showProgressD() {\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == myProgressDialog)\r\n            myProgressDialog = <span class="hljs-keyword">new</span> MyProgressDialog(<span class="hljs-string">"登陆"</span>, <span class="hljs-string">"正在登录···"</span>, getContext());\r\n        <span class="hljs-keyword">else</span>\r\n            myProgressDialog.show();\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> disProgressD() {\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != myProgressDialog)\r\n            myProgressDialog.dismiss();\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> openHome(LoginBean bean) {\r\n\r\n        SPHelper.setString(getContext(), getContext().getString(R.string.user), getContext().getString(R.string.username), mEt_username.getText().toString());\r\n        SPHelper.setString(getContext(), getContext().getString(R.string.user), getContext().getString(R.string.password), mEt_password.getText().toString());\r\n        SPHelper.setString(getContext(), getContext().getString(R.string.user), getContext().getString(R.string.userId), bean.getResult().getUserId());\r\n        SPHelper.setString(getContext(), getContext().getString(R.string.user), getContext().getString(R.string.token), bean.getResult().getToken());\r\n\r\n        startActivity(<span class="hljs-keyword">new</span> Intent(getContext(), HomeActivity.class));\r\n\r\n        finish();\r\n    }\r\n}</code></pre>\r\n其实上面我们当中可以看到我们前台界面拿到用户数据后，调用presenter的doLogin方法，把用户名和密码传递过去，然后我们在Presenter中请求网络然后再通过调用接口实现数据回传。如下：\r\n<pre><code class="hljs javascript"><span class="hljs-keyword">import</span> com.acheng.achengutils.gsonutil.GsonUtils;\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.mvp.presenter.BasePresenter;\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.utils.CipherUtils;\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.utils.StringUtils;\r\n<span class="hljs-keyword">import</span> com.kymjs.rxvolley.RxVolley;\r\n<span class="hljs-keyword">import</span> com.kymjs.rxvolley.client.HttpCallback;\r\n<span class="hljs-keyword">import</span> com.kymjs.rxvolley.client.HttpParams;\r\n<span class="hljs-keyword">import</span> com.kymjs.rxvolley.http.VolleyError;\r\n\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.MyApplication;\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.bean.LoginBean;\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.hostApi.MyApi;\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.view.activity.viewcontroller.LoginActivityViewController;\r\n\r\n<span class="hljs-comment">/**\r\n * Created by pc859107393 on 2016/9/12 0012.\r\n */</span>\r\npublic <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginActivityPresenter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BasePresenter</span>&lt;<span class="hljs-title">LoginActivityViewController</span>&gt; </span>{\r\n    <span class="hljs-comment">/**\r\n     * 在子类的构造函数中，设定参数为model，这时候可以presenter调用接口来实现对界面的操作。\r\n     *\r\n     * @param model\r\n     */</span>\r\n    public LoginActivityPresenter(LoginActivityViewController model) {\r\n        <span class="hljs-keyword">super</span>(model);\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> initData() {\r\n\r\n    }\r\n\r\n    public <span class="hljs-keyword">void</span> doLogin(<span class="hljs-built_in">String</span> name, <span class="hljs-built_in">String</span> pwd) {\r\n        <span class="hljs-comment">//用户名和密码不能为空</span>\r\n        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(name) || StringUtils.isEmpty(pwd)) {\r\n            model.showDailog(<span class="hljs-string">"用户名或密码不能为空！"</span>); <span class="hljs-comment">//调用model的错误提示对话框</span>\r\n            <span class="hljs-keyword">return</span>;\r\n        }\r\n\r\n        <span class="hljs-comment">//密码MD5加密</span>\r\n        pwd = CipherUtils.small32md5(pwd);\r\n        HttpParams params = <span class="hljs-keyword">new</span> HttpParams();\r\n        params.put(<span class="hljs-string">"userName"</span>, name);\r\n        params.put(<span class="hljs-string">"passWord"</span>, pwd);\r\n        RxVolley.post(MyApi.LoginApi, params, <span class="hljs-keyword">new</span> HttpCallback() {\r\n            @Override\r\n            public <span class="hljs-keyword">void</span> onSuccess(<span class="hljs-built_in">String</span> t) {\r\n                <span class="hljs-keyword">super</span>.onSuccess(t);\r\n                <span class="hljs-comment">//数据不为空再进行数据处理</span>\r\n                <span class="hljs-keyword">try</span> {\r\n                    <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != t) {\r\n                        MyApplication.getInstance().outLog(<span class="hljs-string">"输出"</span>, t);\r\n                        LoginBean bean = <span class="hljs-keyword">new</span> GsonUtils().toBean(t, LoginBean.class);\r\n                        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != bean) {\r\n                            <span class="hljs-keyword">if</span> (bean.getCode() == <span class="hljs-number">0</span>) {\r\n                                <span class="hljs-comment">//请求成功</span>\r\n                                model.openHome(bean);\r\n                            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bean.getCode() == <span class="hljs-number">1</span>) {\r\n                                model.showDailog(<span class="hljs-string">"登录失败,帐户不存在"</span>);\r\n                            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bean.getCode() == <span class="hljs-number">2</span>) {\r\n                                model.showDailog(<span class="hljs-string">"登录失败,密码错误"</span>);\r\n                            } <span class="hljs-keyword">else</span> {\r\n                                model.showDailog(<span class="hljs-string">"登录失败,其他未知错误"</span>);\r\n                            }\r\n                        }\r\n                    }\r\n                } <span class="hljs-keyword">catch</span> (Exception e) {\r\n                    e.printStackTrace();\r\n                    model.showDailog(<span class="hljs-string">"登录失败,其他未知错误"</span>);\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public <span class="hljs-keyword">void</span> onFailure(VolleyError error) {\r\n                <span class="hljs-keyword">super</span>.onFailure(error);\r\n                model.showDailog(<span class="hljs-string">"登录失败,其他未知错误"</span>);\r\n            }\r\n\r\n            @Override\r\n            public <span class="hljs-keyword">void</span> onFinish() {\r\n                <span class="hljs-keyword">super</span>.onFinish();\r\n                model.disProgressD();   <span class="hljs-comment">//model的关闭对话框的接口</span>\r\n            }\r\n\r\n            @Override\r\n            public <span class="hljs-keyword">void</span> onPreStart() {\r\n                <span class="hljs-keyword">super</span>.onPreStart();\r\n                model.showProgressD();  <span class="hljs-comment">//model的进度对话框</span>\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n}</code></pre>\r\n我们上面可以看到我们现在只要把请求网络的数据传递上去就可以完成单元测试了，这样子我们就达到了我们数据流转的单元测试的标准。\r\n\r\n既然我们都看到了Presenter对model的调用，那么我们直接贴上model再对比Activity就能明白了我们是怎么完成这个设计的。\r\n<pre><code class="hljs javascript">public interface LoginActivityViewController extends BaseViewController {\r\n    <span class="hljs-comment">/**\r\n     * 显示信息提示对话框\r\n     * @param msg   message\r\n     */</span>\r\n    <span class="hljs-keyword">void</span> showDailog(<span class="hljs-built_in">String</span> msg);\r\n\r\n    <span class="hljs-comment">/**\r\n     * 显示进度对话框\r\n     */</span>\r\n    <span class="hljs-keyword">void</span> showProgressD();\r\n\r\n    <span class="hljs-comment">/**\r\n     * 关闭对话框\r\n     */</span>\r\n    <span class="hljs-keyword">void</span> disProgressD();\r\n\r\n    <span class="hljs-comment">/**\r\n     * 登陆成功跳转到其他界面\r\n     * @param bean\r\n     */</span>\r\n    <span class="hljs-keyword">void</span> openHome(LoginBean bean);\r\n}</code></pre>\r\n我们看到这里，很多哥们可能又会不明白，为什么我们能控制界面呢？如下：\r\n<pre><code class="hljs javascript"><span class="hljs-comment">//我们在程序中，presenter直接调用的model，但是model是被View实现了的。</span>\r\npublic <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseActivity</span>&lt;<span class="hljs-title">LoginActivityPresenter</span>, <span class="hljs-title">LoginActivityViewController</span>&gt; <span class="hljs-title">implements</span> <span class="hljs-title">LoginActivityViewController</span> </span>{\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> showDailog(<span class="hljs-built_in">String</span> msg) {\r\n        <span class="hljs-comment">//实现了model的显示对话框的方法</span>\r\n        <span class="hljs-keyword">new</span> MustDoThingDailog(<span class="hljs-string">"提示"</span>, msg, getContext(), <span class="hljs-keyword">new</span> MustDoThingDailog.NeedDoThing() {\r\n            @Override\r\n            public <span class="hljs-keyword">void</span> mustDoThings() {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> showProgressD() {\r\n        <span class="hljs-comment">//这是显示进度对话框的，实现了model的方法</span>\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> disProgressD() {\r\n        <span class="hljs-comment">//这是实现了moel的关闭进度对话框的方法</span>\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> openHome(LoginBean bean) {\r\n\r\n        <span class="hljs-comment">//实现了model的打开其他页面的方法</span>\r\n    }\r\n}</code></pre>\r\n所以我们的MVP执行的步骤其实就是：用户执行操作 -&gt; 调用presenter(完成独立的数据处理) -&gt; 调用model的方法控制界面 -&gt; 展示给用户\r\n\r\n<hr />\r\n\r\n然后应该又有哥们会问我，为什么你的基类中会有&lt;&gt;这种括号括起来的东西，恩恩这个是泛型，主要是用来说明他们是哪一类的东西，通过泛型来解耦就可以在基类中整合更多的东西。具体的要我来说明的话，我只能说“就不！！！”，我需要任性一回。关于MVP更好的介绍可以看下github的项目<a href="https://github.com/kymjs/TheMVP" target="_blank">TheMvp</a>，这个是我的偶像<a href="http://www.kymjs.com/" target="_blank">@张涛</a>写的哟。\r\n<h2 id="-">总结</h2>\r\n<ul>\r\n 	<li>在mvp架构中,我们需要在基类中拿到每个界面对应的presenter和model,则我们需要让程序知道每个对应的presenter和model.</li>\r\n 	<li>为了减少不必要的代码开销,我们需要把每个activity和Fragment的公共方法抽取出来,写入基类中.</li>\r\n 	<li>在基类中,我们需要将具体的presenter和model解耦,则需要泛型进行类型转换来解除耦合.</li>\r\n 	<li>泛型解除耦合后,我们需要在每个具体的view中来持有presenter和实现model层的接口.并且通过每个view关联的presenter调用model的某个方法来控制view.</li>\r\n</ul>\r\n</div>\r\n<div class="post-tags tags cloud">\r\n<div class="tag"></div>\r\n</div>', 'Android-MVP架构', '', 'inherit', 'closed', 'closed', '', '286-revision-v1', '', '', '2016-11-22 18:51:37', '2016-11-22 10:51:37', '', 286, 'http://acheng1314.cn/?p=287', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(288, 1, '2016-11-23 03:19:44', '2016-11-22 19:19:44', '<div class="entry-content post-content">\r\n<h3 id="mvp">MVP</h3>\r\n<h2 id="-">简介</h2>\r\nMVP是模型（Model）、视图（View）、主持人（Presenter）的缩写，分别代表项目中3个不同的模块。如图所示：\r\n\r\n<figure><img class="medium-zoom-image" src="http://ac-myg6wstv.clouddn.com/d17552f4de00c0660ae5" />\r\n<figcaption>image</figcaption></figure>\r\n<ul>\r\n 	<li>View 对应于Activity、Fragment，负责界面的绘制以及与用户交互</li>\r\n 	<li>Model 依然是业务逻辑和实体模型</li>\r\n 	<li>Presenter 负责完成View于Model间的交互\r\n<h2 id="-">设计前思考：</h2>\r\n</li>\r\n 	<li>首先在我们常用的MVC模式中，Activity承载了太多，做了不只是视图层的事情，而程序开发中<strong>最重要的 Context 一般也是在视图层才拥有的</strong>，所以我们需要把<strong>Context</strong>保持在视图中。</li>\r\n 	<li>MVP相对于MVC，MVP中是依赖<strong>Presenter</strong>这个接口任务调度器来实现任务调度，则视图层中所有需要进行数据交互的，都需要将数据交给<strong>Presenter</strong>，而<strong>Presenter</strong>将调用<strong>Model</strong>来加载数据。</li>\r\n 	<li>在传统的MVC中，我常用 initView()、initData()、initEvent()、doOther() 这几个方法来实现数据流程加载、界面交互实现。现在我们需要拆分出来，Activity从BaseActivity中实现。</li>\r\n</ul>\r\n经过这样的构思，我们可以先实践一下，我们让View来实现Model的接口，View来调用presenter，presenter利用面向接口编程的思想来调用接口实现对View的操作。实例如下：\r\n<pre><code class="hljs javascript">\r\n<span class="hljs-keyword">import</span> android.content.Context;\r\n<span class="hljs-keyword">import</span> android.os.Bundle;\r\n<span class="hljs-keyword">import</span> android.support.v7.app.AppCompatActivity;\r\n\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.mvp.model.BaseViewController;\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.mvp.presenter.BasePresenter;\r\n\r\n\r\n<span class="hljs-comment">/**\r\n * Created by pc859107393 on 2016/6/28.\r\n */</span>\r\npublic abstract <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseActivity</span>&lt;<span class="hljs-title">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BasePresenter</span>, <span class="hljs-title">M</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseViewController</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>{\r\n\r\n    public <span class="hljs-built_in">String</span> TAG;  <span class="hljs-comment">//当前Activity的标记</span>\r\n\r\n    protected T mPresenter;     <span class="hljs-comment">//主持人角色</span>\r\n\r\n    protected abstract T initPresenter();    <span class="hljs-comment">//获取到主持人</span>\r\n\r\n\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> onCreate(Bundle savedInstanceState) {\r\n        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);\r\n        TAG = <span class="hljs-built_in">String</span>.format(<span class="hljs-string">"%s::%s"</span>, getPackageName(), getLocalClassName());\r\n\r\n\r\n        mPresenter = initPresenter();    <span class="hljs-comment">//初始化Presenter，提供主持人，拥有主持人后才能提交界面数据给presenter</span>\r\n\r\n        setContentView(setLayoutId());\r\n\r\n        initView();\r\n\r\n        mPresenter.initData();\r\n\r\n        initEvent();\r\n\r\n        doOther();\r\n    }\r\n\r\n    protected <span class="hljs-keyword">void</span> doOther() {\r\n\r\n    }\r\n\r\n    public Context getContext() {\r\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;\r\n    }\r\n\r\n    protected abstract <span class="hljs-keyword">void</span> initEvent();\r\n\r\n\r\n    protected abstract <span class="hljs-keyword">void</span> initView();\r\n\r\n    protected abstract int setLayoutId();\r\n\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> onResume() {\r\n        <span class="hljs-keyword">super</span>.onResume();\r\n        <span class="hljs-comment">//如果presenter为空的时候，我们需要重新初始化presenter</span>\r\n        <span class="hljs-keyword">if</span> (mPresenter == <span class="hljs-literal">null</span>) {\r\n            mPresenter = initPresenter();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> onPause() {\r\n        <span class="hljs-keyword">super</span>.onPause();\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> onBackPressed() {   <span class="hljs-comment">//返回按钮点击事件</span>\r\n        <span class="hljs-comment">//当Activity中的 进度对话框正在旋转的时候（数据正在加载，网络延迟高，数据难以加载）,关闭 进度对话框 ， 然后可以手动执行重新加载</span>\r\n\r\n        <span class="hljs-keyword">super</span>.onBackPressed();\r\n    }\r\n\r\n    <span class="hljs-comment">/**\r\n     * 恢复界面后,我们需要判断我们的presenter是不是存在,不存在则重置presenter\r\n     *\r\n     * @param savedInstanceState\r\n     */</span>\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> onRestoreInstanceState(Bundle savedInstanceState) {\r\n        <span class="hljs-keyword">super</span>.onRestoreInstanceState(savedInstanceState);\r\n        <span class="hljs-keyword">if</span> (mPresenter == <span class="hljs-literal">null</span>)\r\n            mPresenter = initPresenter();\r\n    }\r\n\r\n    <span class="hljs-comment">/**\r\n     * onDestroy中销毁presenter\r\n     */</span>\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> onDestroy() {\r\n        <span class="hljs-keyword">super</span>.onDestroy();\r\n        mPresenter = <span class="hljs-literal">null</span>;\r\n    }\r\n\r\n}</code></pre>\r\n既然我们的Activity已经设定好了BaseActivity，我们需要接着完成BasePresenter，如下：\r\n<pre><code class="hljs javascript"><span class="hljs-keyword">import</span> com.acheng.achengutils.mvp.model.BaseViewController;\r\n\r\n<span class="hljs-comment">/**\r\n * Created by acheng on 2016/7/14.\r\n */</span>\r\npublic abstract <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BasePresenter</span>&lt;<span class="hljs-title">D</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseViewController</span>&gt; </span>{\r\n\r\n\r\n    public D model;\r\n\r\n    <span class="hljs-comment">/**\r\n     * 在子类的构造函数中，设定参数为model，这时候可以presenter调用接口来实现对界面的操作。\r\n     */</span>\r\n    public BasePresenter(D model) {\r\n        <span class="hljs-keyword">this</span>.model = model;\r\n    }\r\n\r\n    public abstract <span class="hljs-keyword">void</span> initData();\r\n\r\n\r\n}</code></pre>\r\n关于我这个Presenter的设计，我想说的是我们需要将各层解耦，那么我的presenter就不应该持有Android程序流转的必然因子，如Context、Bundle、Intent、View等，如果我们需要实现对界面的操作，必须通过调用我们设定好的Model来实现，关于BaseModel更加简单了，直接是一个空的接口文件，如下：\r\n<pre><code class="hljs javascript">\r\npublic interface BaseViewController {\r\n    <span class="hljs-comment">//这里面添加实现类需要实现的方法即可</span>\r\n}</code></pre>\r\n<h2 id="-">设计后的思考</h2>\r\n<ul>\r\n 	<li>presenter作为主持人,应该随着视图的关闭而关闭,所以我们需要在Activity和Fragment的关闭的时候,注销相应的presenter</li>\r\n 	<li>在应用程序被销毁的时候,我们重启了程序,但是这时应用的状态如果不恢复到前面的状态那么我们需要把对应的presenter重建</li>\r\n 	<li>在应用恢复后,如果想保持刚才的状态,那么我们需要在被销毁前把视图的状态保存,并且恢复对应的状态</li>\r\n</ul>\r\n说了这么多，我们直接手底下见真章：\r\n<pre><code class="hljs javascript">\r\n<span class="hljs-keyword">import</span> android.Manifest;\r\n<span class="hljs-keyword">import</span> android.annotation.TargetApi;\r\n<span class="hljs-keyword">import</span> android.content.DialogInterface;\r\n<span class="hljs-keyword">import</span> android.content.Intent;\r\n<span class="hljs-keyword">import</span> android.content.pm.PackageManager;\r\n<span class="hljs-keyword">import</span> android.net.Uri;\r\n<span class="hljs-keyword">import</span> android.os.Build;\r\n<span class="hljs-keyword">import</span> android.provider.Settings;\r\n<span class="hljs-keyword">import</span> android.support.v7.app.AlertDialog;\r\n<span class="hljs-keyword">import</span> android.view.View;\r\n<span class="hljs-keyword">import</span> android.widget.TextView;\r\n\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.mvp.view.BaseActivity;\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.utils.SPHelper;\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.widgets.AppUpdateDialog;\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.widgets.MustDoThingDailog;\r\n\r\n<span class="hljs-keyword">import</span> java.util.ArrayList;\r\n<span class="hljs-keyword">import</span> java.util.HashMap;\r\n<span class="hljs-keyword">import</span> java.util.List;\r\n<span class="hljs-keyword">import</span> java.util.Map;\r\n\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.MyApplication;\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.R;\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.bean.LoginBean;\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.view.activity.presenter.LoginActivityPresenter;\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.view.activity.viewcontroller.LoginActivityViewController;\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.widgets.MyProgressDialog;\r\n\r\n<span class="hljs-comment">/**\r\n * Created by pc859107393 on 2016/9/12 0012.\r\n */</span>\r\npublic <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseActivity</span>&lt;<span class="hljs-title">LoginActivityPresenter</span>, <span class="hljs-title">LoginActivityViewController</span>&gt; <span class="hljs-title">implements</span> <span class="hljs-title">LoginActivityViewController</span> </span>{\r\n\r\n    private View mBt_login;\r\n    private TextView mEt_username;  <span class="hljs-comment">//用户名</span>\r\n    private TextView mEt_password;  <span class="hljs-comment">//密码s</span>\r\n\r\n\r\n    final private int REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS = <span class="hljs-number">124</span>;\r\n    private AppUpdateDialog appPermission;  <span class="hljs-comment">//权限申请对话框</span>\r\n    private MyProgressDialog myProgressDialog;  <span class="hljs-comment">//进度对话框</span>\r\n\r\n    @Override\r\n    protected LoginActivityPresenter initPresenter() {\r\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> LoginActivityPresenter(<span class="hljs-keyword">this</span>);    <span class="hljs-comment">//实例化LoginActivity的Presenter</span>\r\n    }\r\n\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> initEvent() {\r\n        mBt_login.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() {\r\n            @Override\r\n            public <span class="hljs-keyword">void</span> onClick(View v) {\r\n                MyApplication.getInstance().outLog(TAG, <span class="hljs-string">"MDZZ"</span>);    <span class="hljs-comment">//日志输出</span>\r\n                <span class="hljs-comment">//调用Presenter的登录的网络请求，将用户名和密码传递过去</span>\r\n                mPresenter.doLogin(mEt_username.getText().toString(), mEt_password.getText().toString()); \r\n\r\n\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> initView() {\r\n        MyApplication.getInstance().addActivity(<span class="hljs-keyword">this</span>);  <span class="hljs-comment">//将Activity加入堆栈管理</span>\r\n        mEt_username = (TextView) findViewById(R.id.mEt_username);\r\n        mEt_password = (TextView) findViewById(R.id.mEt_password);\r\n        mBt_login = findViewById(R.id.mBt_login);\r\n    }\r\n\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> doOther() {\r\n        <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\r\n            List&lt;<span class="hljs-built_in">String</span>&gt; permissionsNeeded = <span class="hljs-keyword">new</span> ArrayList&lt;<span class="hljs-built_in">String</span>&gt;();\r\n\r\n            final List&lt;<span class="hljs-built_in">String</span>&gt; permissionsList = <span class="hljs-keyword">new</span> ArrayList&lt;<span class="hljs-built_in">String</span>&gt;();\r\n            <span class="hljs-keyword">if</span> (!addPermission(permissionsList, Manifest.permission.WRITE_EXTERNAL_STORAGE))\r\n                permissionsNeeded.add(<span class="hljs-string">"手机存储空间"</span>);\r\n            <span class="hljs-keyword">if</span> (!addPermission(permissionsList, Manifest.permission.READ_PHONE_STATE))\r\n                permissionsNeeded.add(<span class="hljs-string">"获取手机状态"</span>);\r\n            <span class="hljs-keyword">if</span> (!addPermission(permissionsList, Manifest.permission.CAMERA))\r\n                permissionsNeeded.add(<span class="hljs-string">"手机相机"</span>);\r\n            <span class="hljs-keyword">if</span> (!addPermission(permissionsList, Manifest.permission.ACCESS_COARSE_LOCATION))\r\n                permissionsNeeded.add(<span class="hljs-string">"手机位置"</span>);\r\n<span class="hljs-comment">//            if (!addPermission(permissionsList, Manifest.permission.WRITE_SETTINGS))</span>\r\n<span class="hljs-comment">//                permissionsNeeded.add("手机设置");</span>\r\n\r\n            <span class="hljs-keyword">if</span> (permissionsList.size() &gt; <span class="hljs-number">0</span>) {\r\n                <span class="hljs-keyword">if</span> (permissionsNeeded.size() &gt; <span class="hljs-number">0</span>) { <span class="hljs-comment">//待申请的权限列表</span>\r\n                    <span class="hljs-comment">// Need Rationale</span>\r\n                    <span class="hljs-built_in">String</span> message = <span class="hljs-string">"你必须允许本APP使用："</span> + permissionsNeeded.get(<span class="hljs-number">0</span>);\r\n                    <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">1</span>; i &lt; permissionsNeeded.size(); i++)\r\n                        message = message + <span class="hljs-string">", "</span> + permissionsNeeded.get(i);\r\n                    showMessageOKCancel(message,\r\n                            <span class="hljs-keyword">new</span> DialogInterface.OnClickListener() {\r\n                                @TargetApi(Build.VERSION_CODES.M)\r\n                                @Override\r\n                                public <span class="hljs-keyword">void</span> onClick(DialogInterface dialog, int which) {\r\n                                    requestPermissions(permissionsList.toArray(<span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>[permissionsList.size()]),\r\n                                            REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);\r\n                                }\r\n                            });\r\n                    <span class="hljs-keyword">return</span>;\r\n                }\r\n                requestPermissions(permissionsList.toArray(<span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>[permissionsList.size()]),\r\n                        REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);\r\n            }\r\n        }\r\n        <span class="hljs-keyword">super</span>.doOther();\r\n    }\r\n\r\n    private <span class="hljs-keyword">void</span> showMessageOKCancel(<span class="hljs-built_in">String</span> message, DialogInterface.OnClickListener okListener) {\r\n        <span class="hljs-keyword">new</span> AlertDialog.Builder(<span class="hljs-keyword">this</span>)\r\n                .setMessage(message)\r\n                .setPositiveButton(<span class="hljs-string">"允许"</span>, okListener)\r\n                .setNegativeButton(<span class="hljs-string">"拒绝"</span>, <span class="hljs-literal">null</span>)\r\n                .create()\r\n                .show();\r\n    }\r\n\r\n    private boolean addPermission(List&lt;<span class="hljs-built_in">String</span>&gt; permissionsList, <span class="hljs-built_in">String</span> permission) {\r\n        <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\r\n            <span class="hljs-keyword">if</span> (checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {\r\n                permissionsList.add(permission);\r\n                <span class="hljs-keyword">if</span> (!shouldShowRequestPermissionRationale(permission))\r\n                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;\r\n            }\r\n        }\r\n        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> onRequestPermissionsResult(int requestCode, <span class="hljs-built_in">String</span>[] permissions, int[] grantResults) {\r\n        <span class="hljs-keyword">switch</span> (requestCode) {\r\n            <span class="hljs-keyword">case</span> REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS: {\r\n                <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, Integer&gt; perms = <span class="hljs-keyword">new</span> HashMap&lt;<span class="hljs-built_in">String</span>, Integer&gt;();\r\n                <span class="hljs-comment">// Initial</span>\r\n                perms.put(Manifest.permission.WRITE_EXTERNAL_STORAGE, PackageManager.PERMISSION_GRANTED);\r\n                perms.put(Manifest.permission.READ_PHONE_STATE, PackageManager.PERMISSION_GRANTED);\r\n                perms.put(Manifest.permission.CAMERA, PackageManager.PERMISSION_GRANTED);\r\n                perms.put(Manifest.permission.ACCESS_COARSE_LOCATION, PackageManager.PERMISSION_GRANTED);\r\n                <span class="hljs-comment">// Fill with results</span>\r\n                <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; permissions.length; i++)\r\n                    perms.put(permissions[i], grantResults[i]);\r\n                <span class="hljs-comment">// Check for ACCESS_FINE_LOCATION</span>\r\n                <span class="hljs-keyword">if</span> (perms.get(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED\r\n                        &amp;&amp; perms.get(Manifest.permission.READ_PHONE_STATE) == PackageManager.PERMISSION_GRANTED\r\n                        &amp;&amp; perms.get(Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED\r\n                        &amp;&amp; perms.get(Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\r\n                    <span class="hljs-comment">//经过用户授权，获得所有权限</span>\r\n                    <span class="hljs-keyword">if</span> (appPermission != <span class="hljs-literal">null</span>) {\r\n                        appPermission = <span class="hljs-literal">null</span>;\r\n                    }\r\n                    <span class="hljs-comment">// All Permissions Granted</span>\r\n                } <span class="hljs-keyword">else</span> {    <span class="hljs-comment">//未得到用户授权</span>\r\n                    <span class="hljs-comment">// Permission Denied</span>\r\n                    appPermission = <span class="hljs-keyword">new</span> AppUpdateDialog(AppUpdateDialog.IMPORTANT, <span class="hljs-string">"一些权限未被允许，请在设置中授权!"</span>, getContext(), <span class="hljs-keyword">new</span> AppUpdateDialog.NeedDoThing() {\r\n                        @Override\r\n                        public <span class="hljs-keyword">void</span> mustDoThing() {\r\n                            Uri packageURI = Uri.parse(<span class="hljs-string">"package:"</span> + getPackageName());\r\n                            Intent intent = <span class="hljs-keyword">new</span> Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS, packageURI);\r\n                            startActivity(intent);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            <span class="hljs-keyword">break</span>;\r\n            <span class="hljs-keyword">default</span>:\r\n                <span class="hljs-keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected <span class="hljs-keyword">void</span> onResume() {\r\n        <span class="hljs-keyword">super</span>.onResume();\r\n        doOther();\r\n    }\r\n\r\n    @Override\r\n    protected int setLayoutId() {\r\n        <span class="hljs-keyword">return</span> R.layout.activity_login;\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> showDailog(<span class="hljs-built_in">String</span> msg) {\r\n        <span class="hljs-keyword">new</span> MustDoThingDailog(<span class="hljs-string">"提示"</span>, msg, getContext(), <span class="hljs-keyword">new</span> MustDoThingDailog.NeedDoThing() {\r\n            @Override\r\n            public <span class="hljs-keyword">void</span> mustDoThings() {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> showProgressD() {\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == myProgressDialog)\r\n            myProgressDialog = <span class="hljs-keyword">new</span> MyProgressDialog(<span class="hljs-string">"登陆"</span>, <span class="hljs-string">"正在登录···"</span>, getContext());\r\n        <span class="hljs-keyword">else</span>\r\n            myProgressDialog.show();\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> disProgressD() {\r\n        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != myProgressDialog)\r\n            myProgressDialog.dismiss();\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> openHome(LoginBean bean) {\r\n\r\n        SPHelper.setString(getContext(), getContext().getString(R.string.user), getContext().getString(R.string.username), mEt_username.getText().toString());\r\n        SPHelper.setString(getContext(), getContext().getString(R.string.user), getContext().getString(R.string.password), mEt_password.getText().toString());\r\n        SPHelper.setString(getContext(), getContext().getString(R.string.user), getContext().getString(R.string.userId), bean.getResult().getUserId());\r\n        SPHelper.setString(getContext(), getContext().getString(R.string.user), getContext().getString(R.string.token), bean.getResult().getToken());\r\n\r\n        startActivity(<span class="hljs-keyword">new</span> Intent(getContext(), HomeActivity.class));\r\n\r\n        finish();\r\n    }\r\n}</code></pre>\r\n其实上面我们当中可以看到我们前台界面拿到用户数据后，调用presenter的doLogin方法，把用户名和密码传递过去，然后我们在Presenter中请求网络然后再通过调用接口实现数据回传。如下：\r\n<pre><code class="hljs javascript"><span class="hljs-keyword">import</span> com.acheng.achengutils.gsonutil.GsonUtils;\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.mvp.presenter.BasePresenter;\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.utils.CipherUtils;\r\n<span class="hljs-keyword">import</span> com.acheng.achengutils.utils.StringUtils;\r\n<span class="hljs-keyword">import</span> com.kymjs.rxvolley.RxVolley;\r\n<span class="hljs-keyword">import</span> com.kymjs.rxvolley.client.HttpCallback;\r\n<span class="hljs-keyword">import</span> com.kymjs.rxvolley.client.HttpParams;\r\n<span class="hljs-keyword">import</span> com.kymjs.rxvolley.http.VolleyError;\r\n\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.MyApplication;\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.bean.LoginBean;\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.hostApi.MyApi;\r\n<span class="hljs-keyword">import</span> acheng1314.cn.a3dbuild.view.activity.viewcontroller.LoginActivityViewController;\r\n\r\n<span class="hljs-comment">/**\r\n * Created by pc859107393 on 2016/9/12 0012.\r\n */</span>\r\npublic <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginActivityPresenter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BasePresenter</span>&lt;<span class="hljs-title">LoginActivityViewController</span>&gt; </span>{\r\n    <span class="hljs-comment">/**\r\n     * 在子类的构造函数中，设定参数为model，这时候可以presenter调用接口来实现对界面的操作。\r\n     *\r\n     * @param model\r\n     */</span>\r\n    public LoginActivityPresenter(LoginActivityViewController model) {\r\n        <span class="hljs-keyword">super</span>(model);\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> initData() {\r\n\r\n    }\r\n\r\n    public <span class="hljs-keyword">void</span> doLogin(<span class="hljs-built_in">String</span> name, <span class="hljs-built_in">String</span> pwd) {\r\n        <span class="hljs-comment">//用户名和密码不能为空</span>\r\n        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(name) || StringUtils.isEmpty(pwd)) {\r\n            model.showDailog(<span class="hljs-string">"用户名或密码不能为空！"</span>); <span class="hljs-comment">//调用model的错误提示对话框</span>\r\n            <span class="hljs-keyword">return</span>;\r\n        }\r\n\r\n        <span class="hljs-comment">//密码MD5加密</span>\r\n        pwd = CipherUtils.small32md5(pwd);\r\n        HttpParams params = <span class="hljs-keyword">new</span> HttpParams();\r\n        params.put(<span class="hljs-string">"userName"</span>, name);\r\n        params.put(<span class="hljs-string">"passWord"</span>, pwd);\r\n        RxVolley.post(MyApi.LoginApi, params, <span class="hljs-keyword">new</span> HttpCallback() {\r\n            @Override\r\n            public <span class="hljs-keyword">void</span> onSuccess(<span class="hljs-built_in">String</span> t) {\r\n                <span class="hljs-keyword">super</span>.onSuccess(t);\r\n                <span class="hljs-comment">//数据不为空再进行数据处理</span>\r\n                <span class="hljs-keyword">try</span> {\r\n                    <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != t) {\r\n                        MyApplication.getInstance().outLog(<span class="hljs-string">"输出"</span>, t);\r\n                        LoginBean bean = <span class="hljs-keyword">new</span> GsonUtils().toBean(t, LoginBean.class);\r\n                        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != bean) {\r\n                            <span class="hljs-keyword">if</span> (bean.getCode() == <span class="hljs-number">0</span>) {\r\n                                <span class="hljs-comment">//请求成功</span>\r\n                                model.openHome(bean);\r\n                            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bean.getCode() == <span class="hljs-number">1</span>) {\r\n                                model.showDailog(<span class="hljs-string">"登录失败,帐户不存在"</span>);\r\n                            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bean.getCode() == <span class="hljs-number">2</span>) {\r\n                                model.showDailog(<span class="hljs-string">"登录失败,密码错误"</span>);\r\n                            } <span class="hljs-keyword">else</span> {\r\n                                model.showDailog(<span class="hljs-string">"登录失败,其他未知错误"</span>);\r\n                            }\r\n                        }\r\n                    }\r\n                } <span class="hljs-keyword">catch</span> (Exception e) {\r\n                    e.printStackTrace();\r\n                    model.showDailog(<span class="hljs-string">"登录失败,其他未知错误"</span>);\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public <span class="hljs-keyword">void</span> onFailure(VolleyError error) {\r\n                <span class="hljs-keyword">super</span>.onFailure(error);\r\n                model.showDailog(<span class="hljs-string">"登录失败,其他未知错误"</span>);\r\n            }\r\n\r\n            @Override\r\n            public <span class="hljs-keyword">void</span> onFinish() {\r\n                <span class="hljs-keyword">super</span>.onFinish();\r\n                model.disProgressD();   <span class="hljs-comment">//model的关闭对话框的接口</span>\r\n            }\r\n\r\n            @Override\r\n            public <span class="hljs-keyword">void</span> onPreStart() {\r\n                <span class="hljs-keyword">super</span>.onPreStart();\r\n                model.showProgressD();  <span class="hljs-comment">//model的进度对话框</span>\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n}</code></pre>\r\n我们上面可以看到我们现在只要把请求网络的数据传递上去就可以完成单元测试了，这样子我们就达到了我们数据流转的单元测试的标准。\r\n\r\n既然我们都看到了Presenter对model的调用，那么我们直接贴上model再对比Activity就能明白了我们是怎么完成这个设计的。\r\n<pre><code class="hljs javascript">public interface LoginActivityViewController extends BaseViewController {\r\n    <span class="hljs-comment">/**\r\n     * 显示信息提示对话框\r\n     * @param msg   message\r\n     */</span>\r\n    <span class="hljs-keyword">void</span> showDailog(<span class="hljs-built_in">String</span> msg);\r\n\r\n    <span class="hljs-comment">/**\r\n     * 显示进度对话框\r\n     */</span>\r\n    <span class="hljs-keyword">void</span> showProgressD();\r\n\r\n    <span class="hljs-comment">/**\r\n     * 关闭对话框\r\n     */</span>\r\n    <span class="hljs-keyword">void</span> disProgressD();\r\n\r\n    <span class="hljs-comment">/**\r\n     * 登陆成功跳转到其他界面\r\n     * @param bean\r\n     */</span>\r\n    <span class="hljs-keyword">void</span> openHome(LoginBean bean);\r\n}</code></pre>\r\n我们看到这里，很多哥们可能又会不明白，为什么我们能控制界面呢？如下：\r\n<pre><code class="hljs javascript"><span class="hljs-comment">//我们在程序中，presenter直接调用的model，但是model是被View实现了的。</span>\r\npublic <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseActivity</span>&lt;<span class="hljs-title">LoginActivityPresenter</span>, <span class="hljs-title">LoginActivityViewController</span>&gt; <span class="hljs-title">implements</span> <span class="hljs-title">LoginActivityViewController</span> </span>{\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> showDailog(<span class="hljs-built_in">String</span> msg) {\r\n        <span class="hljs-comment">//实现了model的显示对话框的方法</span>\r\n        <span class="hljs-keyword">new</span> MustDoThingDailog(<span class="hljs-string">"提示"</span>, msg, getContext(), <span class="hljs-keyword">new</span> MustDoThingDailog.NeedDoThing() {\r\n            @Override\r\n            public <span class="hljs-keyword">void</span> mustDoThings() {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> showProgressD() {\r\n        <span class="hljs-comment">//这是显示进度对话框的，实现了model的方法</span>\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> disProgressD() {\r\n        <span class="hljs-comment">//这是实现了moel的关闭进度对话框的方法</span>\r\n    }\r\n\r\n    @Override\r\n    public <span class="hljs-keyword">void</span> openHome(LoginBean bean) {\r\n\r\n        <span class="hljs-comment">//实现了model的打开其他页面的方法</span>\r\n    }\r\n}</code></pre>\r\n所以我们的MVP执行的步骤其实就是：用户执行操作 -&gt; 调用presenter(完成独立的数据处理) -&gt; 调用model的方法控制界面 -&gt; 展示给用户\r\n\r\n<hr />\r\n\r\n然后应该又有哥们会问我，为什么你的基类中会有&lt;&gt;这种括号括起来的东西，恩恩这个是泛型，主要是用来说明他们是哪一类的东西，通过泛型来解耦就可以在基类中整合更多的东西。具体的要我来说明的话，我只能说“就不！！！”，我需要任性一回。关于MVP更好的介绍可以看下github的项目<a href="https://github.com/kymjs/TheMVP" target="_blank">TheMvp</a>，这个是我的偶像<a href="http://www.kymjs.com/" target="_blank">@张涛</a>写的哟。\r\n<h2 id="-">总结</h2>\r\n<ul>\r\n 	<li>在mvp架构中,我们需要在基类中拿到每个界面对应的presenter和model,则我们需要让程序知道每个对应的presenter和model.</li>\r\n 	<li>为了减少不必要的代码开销,我们需要把每个activity和Fragment的公共方法抽取出来,写入基类中.</li>\r\n 	<li>在基类中,我们需要将具体的presenter和model解耦,则需要泛型进行类型转换来解除耦合.</li>\r\n 	<li>泛型解除耦合后,我们需要在每个具体的view中来持有presenter和实现model层的接口.并且通过每个view关联的presenter调用model的某个方法来控制view.</li>\r\n</ul>\r\n</div>\r\n<div class="post-tags tags cloud"></div>', 'Android-MVP架构', '', 'inherit', 'closed', 'closed', '', '286-revision-v1', '', '', '2016-11-23 03:19:44', '2016-11-22 19:19:44', '', 286, 'http://acheng1314.cn/?p=288', 0, 'revision', '', 0),
(289, 1, '2016-11-27 12:59:51', '2016-11-27 04:59:51', '', '【生活感言】第一次跳槽总结', '', 'inherit', 'closed', 'closed', '', '58-revision-v1', '', '', '2016-11-27 12:59:51', '2016-11-27 04:59:51', '', 58, 'http://acheng1314.cn/?p=289', 0, 'revision', '', 0),
(290, 1, '2016-11-28 01:57:26', '2016-11-27 17:57:26', '', '%e6%88%91%e7%9a%84%e5%8d%9a%e5%ae%a2%e7%ac%ac%e4%b8%80%e7%ab%a0%e7%ac%ac%e4%b8%80%e5%9b%be', '', 'inherit', 'open', 'closed', '', '%e6%88%91%e7%9a%84%e5%8d%9a%e5%ae%a2%e7%ac%ac%e4%b8%80%e7%ab%a0%e7%ac%ac%e4%b8%80%e5%9b%be', '', '', '2016-11-28 01:57:26', '2016-11-27 17:57:26', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/11/我的博客第一章第一图.png', 0, 'attachment', 'image/png', 0),
(291, 1, '2016-11-28 12:52:06', '2016-11-28 04:52:06', '', '%e6%88%91%e7%9a%84%e5%8d%9a%e5%ae%a2%e7%ac%ac%e4%b8%80%e7%ab%a0%e7%ac%ac%e4%ba%8c%e5%9b%be%e6%b3%9b%e5%9e%8b%e6%8e%a5%e5%8f%a3%e7%9a%84%e5%ae%9e%e7%8e%b0%e5%92%8c%e6%8e%a5%e5%8f%a3%e7%bb%a7%e6%89%bf', '', 'inherit', 'open', 'closed', '', '%e6%88%91%e7%9a%84%e5%8d%9a%e5%ae%a2%e7%ac%ac%e4%b8%80%e7%ab%a0%e7%ac%ac%e4%ba%8c%e5%9b%be%e6%b3%9b%e5%9e%8b%e6%8e%a5%e5%8f%a3%e7%9a%84%e5%ae%9e%e7%8e%b0%e5%92%8c%e6%8e%a5%e5%8f%a3%e7%bb%a7%e6%89%bf', '', '', '2016-11-28 12:52:06', '2016-11-28 04:52:06', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/11/我的博客第一章第二图泛型接口的实现和接口继承.png', 0, 'attachment', 'image/png', 0),
(292, 1, '2016-11-28 12:52:52', '2016-11-28 04:52:52', '', '%e6%88%91%e7%9a%84%e5%8d%9a%e5%ae%a2%e7%ac%ac%e4%b8%80%e7%ab%a0%e7%ac%ac%e4%b8%89%e5%9b%bejavabean%e5%ae%9e%e7%8e%b0serializable%e6%8e%a5%e5%8f%a3', '', 'inherit', 'open', 'closed', '', '%e6%88%91%e7%9a%84%e5%8d%9a%e5%ae%a2%e7%ac%ac%e4%b8%80%e7%ab%a0%e7%ac%ac%e4%b8%89%e5%9b%bejavabean%e5%ae%9e%e7%8e%b0serializable%e6%8e%a5%e5%8f%a3', '', '', '2016-11-28 12:52:52', '2016-11-28 04:52:52', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/11/我的博客第一章第三图javaBean实现Serializable接口.png', 0, 'attachment', 'image/png', 0),
(293, 1, '2016-11-28 13:14:12', '2016-11-28 05:14:12', '', '%e6%88%91%e7%9a%84%e5%8d%9a%e5%ae%a2%e7%ac%ac%e4%b8%80%e7%ab%a0%e7%ac%ac%e5%9b%9b%e5%9b%be%e5%8d%9a%e5%ae%a2%e7%b3%bb%e7%bb%9f%e6%95%b4%e4%bd%93%e7%bb%93%e6%9e%84%e5%9b%be', '', 'inherit', 'open', 'closed', '', '%e6%88%91%e7%9a%84%e5%8d%9a%e5%ae%a2%e7%ac%ac%e4%b8%80%e7%ab%a0%e7%ac%ac%e5%9b%9b%e5%9b%be%e5%8d%9a%e5%ae%a2%e7%b3%bb%e7%bb%9f%e6%95%b4%e4%bd%93%e7%bb%93%e6%9e%84%e5%9b%be', '', '', '2016-11-28 13:14:12', '2016-11-28 05:14:12', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/11/我的博客第一章第四图博客系统整体结构图.png', 0, 'attachment', 'image/png', 0),
(295, 1, '2016-11-30 21:01:30', '2016-11-30 13:01:30', '', '%e6%88%91%e7%9a%84%e5%8d%9a%e5%ae%a2%e7%ac%ac%e4%ba%8c%e7%ab%a0%e6%96%87%e7%ab%a0%e7%b3%bb%e7%bb%9f%e6%80%9d%e7%bb%b4%e5%af%bc%e5%9b%be', '', 'inherit', 'open', 'closed', '', '%e6%88%91%e7%9a%84%e5%8d%9a%e5%ae%a2%e7%ac%ac%e4%ba%8c%e7%ab%a0%e6%96%87%e7%ab%a0%e7%b3%bb%e7%bb%9f%e6%80%9d%e7%bb%b4%e5%af%bc%e5%9b%be', '', '', '2016-11-30 21:01:30', '2016-11-30 13:01:30', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/11/我的博客第二章文章系统思维导图.png', 0, 'attachment', 'image/png', 0),
(296, 1, '2016-11-30 22:01:23', '2016-11-30 14:01:23', '', '%e6%88%91%e7%9a%84%e5%8d%9a%e5%ae%a2%e7%ac%ac%e4%ba%8c%e7%ab%a0%e6%96%87%e7%ab%a0%e9%98%85%e8%af%bb-%e5%8f%91%e5%b8%83%e6%b5%81%e7%a8%8b%e5%9b%be', '', 'inherit', 'open', 'closed', '', '%e6%88%91%e7%9a%84%e5%8d%9a%e5%ae%a2%e7%ac%ac%e4%ba%8c%e7%ab%a0%e6%96%87%e7%ab%a0%e9%98%85%e8%af%bb-%e5%8f%91%e5%b8%83%e6%b5%81%e7%a8%8b%e5%9b%be', '', '', '2016-11-30 22:01:23', '2016-11-30 14:01:23', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/11/我的博客第二章文章阅读-发布流程图.png', 0, 'attachment', 'image/png', 0),
(297, 1, '2016-12-03 04:48:04', '2016-12-02 20:48:04', '', '%e6%88%91%e7%9a%84%e5%8d%9a%e5%ae%a2%e7%ac%ac%e4%ba%8c%e7%ab%a0%e6%96%87%e7%ab%a0%e7%b3%bb%e7%bb%9f-%e6%95%b0%e6%8d%ae%e6%b5%81%e5%9b%be', '', 'inherit', 'open', 'closed', '', '%e6%88%91%e7%9a%84%e5%8d%9a%e5%ae%a2%e7%ac%ac%e4%ba%8c%e7%ab%a0%e6%96%87%e7%ab%a0%e7%b3%bb%e7%bb%9f-%e6%95%b0%e6%8d%ae%e6%b5%81%e5%9b%be', '', '', '2016-12-03 04:48:04', '2016-12-02 20:48:04', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/12/我的博客第二章文章系统-数据流图.png', 0, 'attachment', 'image/png', 0),
(298, 1, '2016-12-05 01:59:09', '2016-12-04 17:59:09', '', '%e6%88%91%e7%9a%84%e5%8d%9a%e5%ae%a2%e7%ac%ac%e4%ba%8c%e7%ab%a0%e6%96%87%e7%ab%a0%e7%b3%bb%e7%bb%9f-%e5%8d%9a%e5%ae%a2%e6%a0%b7%e5%9b%be', '', 'inherit', 'open', 'closed', '', '%e6%88%91%e7%9a%84%e5%8d%9a%e5%ae%a2%e7%ac%ac%e4%ba%8c%e7%ab%a0%e6%96%87%e7%ab%a0%e7%b3%bb%e7%bb%9f-%e5%8d%9a%e5%ae%a2%e6%a0%b7%e5%9b%be', '', '', '2016-12-05 01:59:09', '2016-12-04 17:59:09', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/12/我的博客第二章文章系统-博客样图.png', 0, 'attachment', 'image/png', 0),
(299, 1, '2016-12-05 13:48:57', '2016-12-05 05:48:57', '', '%e6%88%91%e7%9a%84%e5%8d%9a%e5%ae%a2%e7%ac%ac%e4%ba%8c%e7%ab%a0%e6%96%87%e7%ab%a0%e7%b3%bb%e7%bb%9f-wordpress%e6%95%b0%e6%8d%ae%e5%ba%93%e6%a8%a1%e5%9e%8b', '', 'inherit', 'open', 'closed', '', '%e6%88%91%e7%9a%84%e5%8d%9a%e5%ae%a2%e7%ac%ac%e4%ba%8c%e7%ab%a0%e6%96%87%e7%ab%a0%e7%b3%bb%e7%bb%9f-wordpress%e6%95%b0%e6%8d%ae%e5%ba%93%e6%a8%a1%e5%9e%8b', '', '', '2016-12-05 13:48:57', '2016-12-05 05:48:57', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/12/我的博客第二章文章系统-wordpress数据库模型.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(300, 1, '2016-12-07 11:34:02', '2016-12-07 03:34:02', '<p data-source-line="1">转眼到了博客系统第二章了。这一张我们主要介绍文章系统。毕竟博客系统的核心就是文章的发布和阅读。闲话不多说，老规矩走起来。</p>\r\n\r\n<h4 data-source-line="3">工具</h4>\r\n<ul data-source-line="4">\r\n 	<li>IDE为<strong>idea16</strong></li>\r\n 	<li>JDK环境为<strong>1.8</strong></li>\r\n 	<li>gradle构建，版本：2.14.1</li>\r\n 	<li>Mysql版本为<strong>5.5.27</strong></li>\r\n 	<li>Tomcat版本为<strong>7.0.52</strong></li>\r\n 	<li>流程图绘制（xmind）</li>\r\n 	<li>建模分析软件<strong>PowerDesigner16.5</strong></li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<blockquote data-source-line="13">思维导图</blockquote>\r\n<p data-source-line="15">按照前面我们<strong>第二季第一章</strong>阐述的，我们需要先了解我们这个文章系统的整个功能模块组合，也就是我们的思维导图，只有这样才能实现整体功能的架设。下面如图所示：</p>\r\n<img class="border medium-zoom-image" src="https://dn-mhke0kuv.qbox.me/478117c7b52e744e7f5c.png" />\r\n<p data-source-line="19">其实在上面的系统中，我已经把前端用户的文章查阅功能排除掉的。为什么我这里会单独排掉前端的查阅呢？前端的文章查阅功能基本在后端的所有文章中已经有体现相应功能。大概功能如下：</p>\r\n\r\n<ul data-source-line="20">\r\n 	<li>前端文章查阅\r\n<ul>\r\n 	<li>文章列表</li>\r\n 	<li>文章归档</li>\r\n 	<li>文章分类</li>\r\n 	<li>文章详情</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<blockquote data-source-line="26">流程图</blockquote>\r\n<img class="border medium-zoom-image" src="https://dn-mhke0kuv.qbox.me/0187b50c1393ccf92e60.png" />\r\n<p data-source-line="30">在上面的流程图中，我们可以看到我们清楚的把业务流程描述出来了。可能很多哥们会说我们有其他不一样的方式，或者类似的方式但是实现比现在的强势，这个无可否认。但是我认为这个是别人项目中存在且我使用的很符合个人习惯的东西。好的东西要学习，不友好的东西我们需要自己改进。</p>\r\n<p data-source-line="32">首先我们访问站点的方式只有访问主页，然后才会有web应用的展示，也就是说我们网站的首页是我们web应用的总入口。</p>\r\n<p data-source-line="34">而我们主页的功能也是需要围绕我们的中心——博客来制作，这样才能达到我们建设这个后端的目的。所以首页元素需要有以下方面：</p>\r\n\r\n<ul data-source-line="36">\r\n 	<li>文章列表</li>\r\n 	<li>文章归类</li>\r\n 	<li>作者介绍</li>\r\n 	<li>热门文章</li>\r\n 	<li>最高评论</li>\r\n 	<li>最近动态</li>\r\n 	<li>联系信息（二维码）</li>\r\n 	<li>标签导航</li>\r\n 	<li>等···</li>\r\n</ul>\r\n<blockquote data-source-line="47">数据流图</blockquote>\r\n<img class="border medium-zoom-image" src="https://dn-mhke0kuv.qbox.me/65a4913a5ee2b910fefa.png" />\r\n<p data-source-line="51">为什么我们需要数据流图，我们不是为了软件工程二故意做这个数据流图。而是数据流图能清晰的表明我们这些流程中需要哪些关键的东西，能在一定程度上反应业务逻辑。所以我们做这个还是有意义。在上面我们可以看到在我们程序流转的过程中，我们需要知道具体的文章ID才能进行详情查看操作，所以我们在拿到列表的时候就需要把文章ID拿到，同时文章归档的依据信息，也需要拿到，大概需要哪些简单的东西，具体跟下面首页的json数据相关。具体的首页预想效果如下图：</p>\r\n<img class="border medium-zoom-image" src="https://dn-mhke0kuv.qbox.me/1e558cac82409e330fbf.png" />\r\n<p data-source-line="55">当然具体的<a href="https://www.vtrois.com/">原作者的博客请看这里</a>。原作者的导航栏在右边，个人喜好，所以改到左边。根据这一张图，我们也能看到大概的功能如下：</p>\r\n\r\n<ul data-source-line="57">\r\n 	<li>博客文章列表展示</li>\r\n 	<li>作者信息展示</li>\r\n 	<li>最新、热点、随机文章</li>\r\n 	<li>*日期归档导航</li>\r\n 	<li>标签导航</li>\r\n</ul>\r\n<blockquote data-source-line="63">数据来源</blockquote>\r\n<p data-source-line="65">按照第二季开发标准来说，前端页面展示的数据都是尽量从服务器接口获得，将前后端解耦。所以按照通用接口标准来说，我们首页数据需要JSON的标准数据。分析可得，我们的json格式大概如下：</p>\r\n\r\n<pre data-source-line="67"><code>{"code":1,\r\n    "msg":"success",\r\n    "data":{\r\n        "posts":[\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"},\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"}\r\n        ],\r\n        "totalNum":20,\r\n        "author":{},\r\n        "newPosts":[\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"},\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"}\r\n        ],\r\n        "hotPosts":[\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"},\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"}\r\n        ],\r\n        "randomPosts":[\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"},\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"}\r\n        ],\r\n        "tag":{},\r\n        "date":{}\r\n    }\r\n}</code></pre>\r\n<p data-source-line="127">可能一些朋友看到这里就会迷糊了，你的json数据的实体类型怎么来的呢？其实我们一开始就提过我们的数据库是wordpress的数据库，也就是数据内容是来自我的个人博客系统上面的数据库。所以我们需要看看wrodpress的博客系统上面文章表的结构和内容才能推测是表中字段及其分布各有什么意义。具体的数据库表结构如下：</p>\r\n\r\n<pre data-source-line="129"><code>DROP TABLE IF EXISTS `wp_posts`;\r\nCREATE TABLE `wp_posts` (\r\n  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,\r\n  `post_author` bigint(20) unsigned NOT NULL DEFAULT ''0'' COMMENT ''作者ID'',\r\n  `post_date` datetime NOT NULL DEFAULT ''0000-00-00 00:00:00'' COMMENT ''文章创建时间'',\r\n  `post_date_gmt` datetime NOT NULL DEFAULT ''0000-00-00 00:00:00'' COMMENT ''文章最近修改时间'',\r\n  `post_content` longtext COLLATE utf8mb4_unicode_ci NOT NULL COMMENT ''文章内容'',\r\n  `post_title` text COLLATE utf8mb4_unicode_ci NOT NULL COMMENT ''文章标题'',\r\n  `post_excerpt` text COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `post_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT ''publish'' COMMENT ''文章状态'',\r\n  `comment_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT ''open'' COMMENT ''评论状态'',\r\n  `ping_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT ''open'' COMMENT ''ping状态'',\r\n  `post_password` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '''' COMMENT ''文章密码'',\r\n  `post_name` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '''' COMMENT ''文章名字'',\r\n  `to_ping` text COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `pinged` text COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `post_modified` datetime NOT NULL DEFAULT ''0000-00-00 00:00:00'',\r\n  `post_modified_gmt` datetime NOT NULL DEFAULT ''0000-00-00 00:00:00'',\r\n  `post_content_filtered` longtext COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `post_parent` bigint(20) unsigned NOT NULL DEFAULT ''0'',\r\n  `guid` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '''',\r\n  `menu_order` int(11) NOT NULL DEFAULT ''0'',\r\n  `post_type` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT ''post'' COMMENT ''文章类型'',\r\n  `post_mime_type` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '''' COMMENT ''文件类型'',\r\n  `comment_count` bigint(20) NOT NULL DEFAULT ''0'' COMMENT ''评论数'',\r\n  PRIMARY KEY (`ID`),\r\n  KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),\r\n  KEY `post_parent` (`post_parent`),\r\n  KEY `post_author` (`post_author`),\r\n  KEY `post_name` (`post_name`(191))\r\n) ENGINE=InnoDB AUTO_INCREMENT=289 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;</code></pre>\r\n<p data-source-line="162">从上面的文章信息表中我们可以看到这一张表只是用来存储所有的文章的基本信息，但是文章的一些其他信息都是没有的，比如说：</p>\r\n\r\n<ul data-source-line="164">\r\n 	<li>评论</li>\r\n 	<li>特色图片</li>\r\n 	<li>文章归档</li>\r\n 	<li>等···</li>\r\n</ul>\r\n<p data-source-line="169">一般来说，我们的常规思路是需要将这些信息关联在一起的，而且这个思路也是没错的。但是可能有的实现我们并没有较好的设计思想，所以我们可以简单的把数据库逆向到模型。所以闲话不多说，直接在有wrodpress环境的电脑上面链接数据库，打开wordpress数据库，选择逆向到模型。那么，数据库逆向模型如下所示：</p>\r\n<img class="border medium-zoom-image" src="https://dn-mhke0kuv.qbox.me/299873a5da57bb32578d.png" />\r\n<p data-source-line="173">从上面的数据库模型中我们可以看出维持wordpress中心的有几张表，如下：</p>\r\n\r\n<ul data-source-line="175">\r\n 	<li>wp_posts 文章基础信息表</li>\r\n 	<li>wp_postmeta 文章扩展数据表</li>\r\n 	<li>wp_comments 评论基本表</li>\r\n 	<li>wp_commentmeta 评论扩展表</li>\r\n 	<li>wp_links 链接表</li>\r\n 	<li>wp_options 设置信息表</li>\r\n 	<li>wp_users 用户信息表</li>\r\n 	<li>wp_usermeta 用户信息扩展表</li>\r\n</ul>\r\n<p data-source-line="184">为什么我说上面这几张表是核心表呢？首先我们可以看到这几张表都是存储了博客系统的一些基本的东西。接着我们可以看到这些各个表中一些关联的表都是有彼此的键对应其他表的主键，所以看到这里大家可能也就心里有数。</p>\r\n<p data-source-line="186">所以上面我们的json信息中的实体类型该怎么设定也就是很明显的，必须对应数据库字段嘛。既然都这样了，那我们是不是也可以进一步猜想出其他的json内容呢？</p>\r\n\r\n<blockquote data-source-line="188">日期归档</blockquote>\r\n<p data-source-line="190">文章按照日期归档相信很多人都看到过，大概样子就是一个下拉列表中显示年月日后面加上数量，大概样子如下（节约流量，不上图）：</p>\r\n\r\n<ul data-source-line="191">\r\n 	<li>请选择日期 ↓\r\n<ul>\r\n 	<li>所有</li>\r\n 	<li>2016年11月12日（2）</li>\r\n 	<li>2016年11月15日（1）</li>\r\n 	<li>2016年10月28日（3）</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p data-source-line="197">我们要把这样的效果做出来，其实可以直接把文章信息传递给前台让前端完成。但是数据量过多的时候，网络传输也就相对吃力，所以我们还是直接后端处理，将网络传输的数据最精简。</p>\r\n<p data-source-line="199">那么我们简单的首页集合的数据应该如下所示了：</p>\r\n\r\n<pre data-source-line="201"><code>{"code":1,\r\n    "msg":"success",\r\n    "data":{\r\n        "posts":[\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"},\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"}\r\n        ],\r\n        "totalNum":20,\r\n        "author":{},\r\n        "newPosts":[\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"},\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"}\r\n        ],\r\n        "hotPosts":[\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"},\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"}\r\n        ],\r\n        "randomPosts":[\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"},\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"}\r\n        ],\r\n        "tag":{},\r\n        "date": [\r\n            {\r\n                "date": "2016-11-22",\r\n                "idList": [\r\n                    "286"\r\n                ]\r\n            },\r\n            {\r\n                "date": "2016-5-19",\r\n                "idList": [\r\n                    "192",\r\n                    "191"\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n}</code></pre>\r\n<p data-source-line="274">这里应该有朋友可能会问，为啥你的date（根据日期归档）的json数据这么奇怪呢？</p>\r\n<p data-source-line="276">其实我们最直接的可以看到，在上面的日期归档的json中，日期可以很直观的看出来，同时idList中把文章ID也是展示出来的，所以我们根据ID和日期都还是可以互相参考的，同时ID的数量可以让我们明白每个日期有多少篇文章。</p>\r\n<p data-source-line="278">既然我们在上面把基本的首页框架数据归类，写出的json接口，同时通过逆向开发的思路等把项目我们需要使用的一些模型图完成了，这样接下来就是具体编码的事情。 具体的编码问题，且听下回分解。</p>\r\n\r\n\r\n<hr />\r\n\r\n<blockquote data-source-line="281">福利：用户密码算法</blockquote>\r\n<p data-source-line="283">核心算法：SHA-256</p>\r\n<p data-source-line="285">步骤：</p>\r\n\r\n<ul data-source-line="287">\r\n 	<li>注册用户\r\n<ul>\r\n 	<li>客户端进行16位MD5小写加密</li>\r\n</ul>\r\n</li>\r\n 	<li>生成随机的salt</li>\r\n 	<li>将密码和salt进行SHA-256加密</li>\r\n 	<li>数据库存入用户信息和对应的salt</li>\r\n</ul>\r\n\r\n<hr />\r\n<p data-source-line="295">这一期，我们把文章系统一些做了基础的分析，下一期我们需要完成wordpress数据库内容分析和文章系统模块开发，和文章的撰写相关的东西。其实经过上一季的一些东西我们能明白，项目开发中的一些基本思想，但是可能我们最终目的是倚赖wordpress的博客。所以在实际开发中，我们可以参考别人的完成并加以列用。</p>', '[手把手教程][第二季]java 后端博客系统文章系统——No1', '', 'publish', 'open', 'open', '', '%e6%89%8b%e6%8a%8a%e6%89%8b%e6%95%99%e7%a8%8b%e7%ac%ac%e4%ba%8c%e5%ad%a3java-%e5%90%8e%e7%ab%af%e5%8d%9a%e5%ae%a2%e7%b3%bb%e7%bb%9f%e6%96%87%e7%ab%a0%e7%b3%bb%e7%bb%9f-no1', '', '', '2016-12-07 11:34:02', '2016-12-07 03:34:02', '', 0, 'http://acheng1314.cn/?p=300', 0, 'post', '', 0),
(301, 1, '2016-12-07 11:34:02', '2016-12-07 03:34:02', '<p data-source-line="1">转眼到了博客系统第二章了。这一张我们主要介绍文章系统。毕竟博客系统的核心就是文章的发布和阅读。闲话不多说，老规矩走起来。</p>\r\n\r\n<h4 data-source-line="3">工具</h4>\r\n<ul data-source-line="4">\r\n 	<li>IDE为<strong>idea16</strong></li>\r\n 	<li>JDK环境为<strong>1.8</strong></li>\r\n 	<li>gradle构建，版本：2.14.1</li>\r\n 	<li>Mysql版本为<strong>5.5.27</strong></li>\r\n 	<li>Tomcat版本为<strong>7.0.52</strong></li>\r\n 	<li>流程图绘制（xmind）</li>\r\n 	<li>建模分析软件<strong>PowerDesigner16.5</strong></li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<blockquote data-source-line="13">思维导图</blockquote>\r\n<p data-source-line="15">按照前面我们<strong>第二季第一章</strong>阐述的，我们需要先了解我们这个文章系统的整个功能模块组合，也就是我们的思维导图，只有这样才能实现整体功能的架设。下面如图所示：</p>\r\n<img class="border medium-zoom-image" src="https://dn-mhke0kuv.qbox.me/478117c7b52e744e7f5c.png" />\r\n<p data-source-line="19">其实在上面的系统中，我已经把前端用户的文章查阅功能排除掉的。为什么我这里会单独排掉前端的查阅呢？前端的文章查阅功能基本在后端的所有文章中已经有体现相应功能。大概功能如下：</p>\r\n\r\n<ul data-source-line="20">\r\n 	<li>前端文章查阅\r\n<ul>\r\n 	<li>文章列表</li>\r\n 	<li>文章归档</li>\r\n 	<li>文章分类</li>\r\n 	<li>文章详情</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<blockquote data-source-line="26">流程图</blockquote>\r\n<img class="border medium-zoom-image" src="https://dn-mhke0kuv.qbox.me/0187b50c1393ccf92e60.png" />\r\n<p data-source-line="30">在上面的流程图中，我们可以看到我们清楚的把业务流程描述出来了。可能很多哥们会说我们有其他不一样的方式，或者类似的方式但是实现比现在的强势，这个无可否认。但是我认为这个是别人项目中存在且我使用的很符合个人习惯的东西。好的东西要学习，不友好的东西我们需要自己改进。</p>\r\n<p data-source-line="32">首先我们访问站点的方式只有访问主页，然后才会有web应用的展示，也就是说我们网站的首页是我们web应用的总入口。</p>\r\n<p data-source-line="34">而我们主页的功能也是需要围绕我们的中心——博客来制作，这样才能达到我们建设这个后端的目的。所以首页元素需要有以下方面：</p>\r\n\r\n<ul data-source-line="36">\r\n 	<li>文章列表</li>\r\n 	<li>文章归类</li>\r\n 	<li>作者介绍</li>\r\n 	<li>热门文章</li>\r\n 	<li>最高评论</li>\r\n 	<li>最近动态</li>\r\n 	<li>联系信息（二维码）</li>\r\n 	<li>标签导航</li>\r\n 	<li>等···</li>\r\n</ul>\r\n<blockquote data-source-line="47">数据流图</blockquote>\r\n<img class="border medium-zoom-image" src="https://dn-mhke0kuv.qbox.me/65a4913a5ee2b910fefa.png" />\r\n<p data-source-line="51">为什么我们需要数据流图，我们不是为了软件工程二故意做这个数据流图。而是数据流图能清晰的表明我们这些流程中需要哪些关键的东西，能在一定程度上反应业务逻辑。所以我们做这个还是有意义。在上面我们可以看到在我们程序流转的过程中，我们需要知道具体的文章ID才能进行详情查看操作，所以我们在拿到列表的时候就需要把文章ID拿到，同时文章归档的依据信息，也需要拿到，大概需要哪些简单的东西，具体跟下面首页的json数据相关。具体的首页预想效果如下图：</p>\r\n<img class="border medium-zoom-image" src="https://dn-mhke0kuv.qbox.me/1e558cac82409e330fbf.png" />\r\n<p data-source-line="55">当然具体的<a href="https://www.vtrois.com/">原作者的博客请看这里</a>。原作者的导航栏在右边，个人喜好，所以改到左边。根据这一张图，我们也能看到大概的功能如下：</p>\r\n\r\n<ul data-source-line="57">\r\n 	<li>博客文章列表展示</li>\r\n 	<li>作者信息展示</li>\r\n 	<li>最新、热点、随机文章</li>\r\n 	<li>*日期归档导航</li>\r\n 	<li>标签导航</li>\r\n</ul>\r\n<blockquote data-source-line="63">数据来源</blockquote>\r\n<p data-source-line="65">按照第二季开发标准来说，前端页面展示的数据都是尽量从服务器接口获得，将前后端解耦。所以按照通用接口标准来说，我们首页数据需要JSON的标准数据。分析可得，我们的json格式大概如下：</p>\r\n\r\n<pre data-source-line="67"><code>{"code":1,\r\n    "msg":"success",\r\n    "data":{\r\n        "posts":[\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"},\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"}\r\n        ],\r\n        "totalNum":20,\r\n        "author":{},\r\n        "newPosts":[\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"},\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"}\r\n        ],\r\n        "hotPosts":[\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"},\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"}\r\n        ],\r\n        "randomPosts":[\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"},\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"}\r\n        ],\r\n        "tag":{},\r\n        "date":{}\r\n    }\r\n}</code></pre>\r\n<p data-source-line="127">可能一些朋友看到这里就会迷糊了，你的json数据的实体类型怎么来的呢？其实我们一开始就提过我们的数据库是wordpress的数据库，也就是数据内容是来自我的个人博客系统上面的数据库。所以我们需要看看wrodpress的博客系统上面文章表的结构和内容才能推测是表中字段及其分布各有什么意义。具体的数据库表结构如下：</p>\r\n\r\n<pre data-source-line="129"><code>DROP TABLE IF EXISTS `wp_posts`;\r\nCREATE TABLE `wp_posts` (\r\n  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,\r\n  `post_author` bigint(20) unsigned NOT NULL DEFAULT ''0'' COMMENT ''作者ID'',\r\n  `post_date` datetime NOT NULL DEFAULT ''0000-00-00 00:00:00'' COMMENT ''文章创建时间'',\r\n  `post_date_gmt` datetime NOT NULL DEFAULT ''0000-00-00 00:00:00'' COMMENT ''文章最近修改时间'',\r\n  `post_content` longtext COLLATE utf8mb4_unicode_ci NOT NULL COMMENT ''文章内容'',\r\n  `post_title` text COLLATE utf8mb4_unicode_ci NOT NULL COMMENT ''文章标题'',\r\n  `post_excerpt` text COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `post_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT ''publish'' COMMENT ''文章状态'',\r\n  `comment_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT ''open'' COMMENT ''评论状态'',\r\n  `ping_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT ''open'' COMMENT ''ping状态'',\r\n  `post_password` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '''' COMMENT ''文章密码'',\r\n  `post_name` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '''' COMMENT ''文章名字'',\r\n  `to_ping` text COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `pinged` text COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `post_modified` datetime NOT NULL DEFAULT ''0000-00-00 00:00:00'',\r\n  `post_modified_gmt` datetime NOT NULL DEFAULT ''0000-00-00 00:00:00'',\r\n  `post_content_filtered` longtext COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `post_parent` bigint(20) unsigned NOT NULL DEFAULT ''0'',\r\n  `guid` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '''',\r\n  `menu_order` int(11) NOT NULL DEFAULT ''0'',\r\n  `post_type` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT ''post'' COMMENT ''文章类型'',\r\n  `post_mime_type` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '''' COMMENT ''文件类型'',\r\n  `comment_count` bigint(20) NOT NULL DEFAULT ''0'' COMMENT ''评论数'',\r\n  PRIMARY KEY (`ID`),\r\n  KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),\r\n  KEY `post_parent` (`post_parent`),\r\n  KEY `post_author` (`post_author`),\r\n  KEY `post_name` (`post_name`(191))\r\n) ENGINE=InnoDB AUTO_INCREMENT=289 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;</code></pre>\r\n<p data-source-line="162">从上面的文章信息表中我们可以看到这一张表只是用来存储所有的文章的基本信息，但是文章的一些其他信息都是没有的，比如说：</p>\r\n\r\n<ul data-source-line="164">\r\n 	<li>评论</li>\r\n 	<li>特色图片</li>\r\n 	<li>文章归档</li>\r\n 	<li>等···</li>\r\n</ul>\r\n<p data-source-line="169">一般来说，我们的常规思路是需要将这些信息关联在一起的，而且这个思路也是没错的。但是可能有的实现我们并没有较好的设计思想，所以我们可以简单的把数据库逆向到模型。所以闲话不多说，直接在有wrodpress环境的电脑上面链接数据库，打开wordpress数据库，选择逆向到模型。那么，数据库逆向模型如下所示：</p>\r\n<img class="border medium-zoom-image" src="https://dn-mhke0kuv.qbox.me/299873a5da57bb32578d.png" />\r\n<p data-source-line="173">从上面的数据库模型中我们可以看出维持wordpress中心的有几张表，如下：</p>\r\n\r\n<ul data-source-line="175">\r\n 	<li>wp_posts 文章基础信息表</li>\r\n 	<li>wp_postmeta 文章扩展数据表</li>\r\n 	<li>wp_comments 评论基本表</li>\r\n 	<li>wp_commentmeta 评论扩展表</li>\r\n 	<li>wp_links 链接表</li>\r\n 	<li>wp_options 设置信息表</li>\r\n 	<li>wp_users 用户信息表</li>\r\n 	<li>wp_usermeta 用户信息扩展表</li>\r\n</ul>\r\n<p data-source-line="184">为什么我说上面这几张表是核心表呢？首先我们可以看到这几张表都是存储了博客系统的一些基本的东西。接着我们可以看到这些各个表中一些关联的表都是有彼此的键对应其他表的主键，所以看到这里大家可能也就心里有数。</p>\r\n<p data-source-line="186">所以上面我们的json信息中的实体类型该怎么设定也就是很明显的，必须对应数据库字段嘛。既然都这样了，那我们是不是也可以进一步猜想出其他的json内容呢？</p>\r\n\r\n<blockquote data-source-line="188">日期归档</blockquote>\r\n<p data-source-line="190">文章按照日期归档相信很多人都看到过，大概样子就是一个下拉列表中显示年月日后面加上数量，大概样子如下（节约流量，不上图）：</p>\r\n\r\n<ul data-source-line="191">\r\n 	<li>请选择日期 ↓\r\n<ul>\r\n 	<li>所有</li>\r\n 	<li>2016年11月12日（2）</li>\r\n 	<li>2016年11月15日（1）</li>\r\n 	<li>2016年10月28日（3）</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p data-source-line="197">我们要把这样的效果做出来，其实可以直接把文章信息传递给前台让前端完成。但是数据量过多的时候，网络传输也就相对吃力，所以我们还是直接后端处理，将网络传输的数据最精简。</p>\r\n<p data-source-line="199">那么我们简单的首页集合的数据应该如下所示了：</p>\r\n\r\n<pre data-source-line="201"><code>{"code":1,\r\n    "msg":"success",\r\n    "data":{\r\n        "posts":[\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"},\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"}\r\n        ],\r\n        "totalNum":20,\r\n        "author":{},\r\n        "newPosts":[\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"},\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"}\r\n        ],\r\n        "hotPosts":[\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"},\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"}\r\n        ],\r\n        "randomPosts":[\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"},\r\n            {\r\n            "id": "282",\r\n            "postDate": "Nov 16, 2016 12:51:13 AM",\r\n            "postContent": "文章内容",\r\n            "postTitle": "[手把手教程][JavaWeb]优雅的SpringMvc+Mybatis应用（八）"}\r\n        ],\r\n        "tag":{},\r\n        "date": [\r\n            {\r\n                "date": "2016-11-22",\r\n                "idList": [\r\n                    "286"\r\n                ]\r\n            },\r\n            {\r\n                "date": "2016-5-19",\r\n                "idList": [\r\n                    "192",\r\n                    "191"\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n}</code></pre>\r\n<p data-source-line="274">这里应该有朋友可能会问，为啥你的date（根据日期归档）的json数据这么奇怪呢？</p>\r\n<p data-source-line="276">其实我们最直接的可以看到，在上面的日期归档的json中，日期可以很直观的看出来，同时idList中把文章ID也是展示出来的，所以我们根据ID和日期都还是可以互相参考的，同时ID的数量可以让我们明白每个日期有多少篇文章。</p>\r\n<p data-source-line="278">既然我们在上面把基本的首页框架数据归类，写出的json接口，同时通过逆向开发的思路等把项目我们需要使用的一些模型图完成了，这样接下来就是具体编码的事情。 具体的编码问题，且听下回分解。</p>\r\n\r\n\r\n<hr />\r\n\r\n<blockquote data-source-line="281">福利：用户密码算法</blockquote>\r\n<p data-source-line="283">核心算法：SHA-256</p>\r\n<p data-source-line="285">步骤：</p>\r\n\r\n<ul data-source-line="287">\r\n 	<li>注册用户\r\n<ul>\r\n 	<li>客户端进行16位MD5小写加密</li>\r\n</ul>\r\n</li>\r\n 	<li>生成随机的salt</li>\r\n 	<li>将密码和salt进行SHA-256加密</li>\r\n 	<li>数据库存入用户信息和对应的salt</li>\r\n</ul>\r\n\r\n<hr />\r\n<p data-source-line="295">这一期，我们把文章系统一些做了基础的分析，下一期我们需要完成wordpress数据库内容分析和文章系统模块开发，和文章的撰写相关的东西。其实经过上一季的一些东西我们能明白，项目开发中的一些基本思想，但是可能我们最终目的是倚赖wordpress的博客。所以在实际开发中，我们可以参考别人的完成并加以列用。</p>', '[手把手教程][第二季]java 后端博客系统文章系统——No1', '', 'inherit', 'closed', 'closed', '', '300-revision-v1', '', '', '2016-12-07 11:34:02', '2016-12-07 03:34:02', '', 300, 'http://acheng1314.cn/?p=301', 0, 'revision', '', 0),
(302, 1, '2016-12-08 17:43:13', '0000-00-00 00:00:00', '', '自动草稿', '', 'auto-draft', 'open', 'open', '', '', '', '', '2016-12-08 17:43:13', '0000-00-00 00:00:00', '', 0, 'http://acheng1314.cn/?p=302', 0, 'post', '', 0),
(303, 1, '2016-12-11 00:06:27', '2016-12-10 16:06:27', '', '%e6%88%91%e7%9a%84%e5%8d%9a%e5%ae%a2%e7%ac%ac%e4%b8%89%e7%ab%a0%e6%96%87%e7%ab%a0%e7%b3%bb%e7%bb%9f-%e6%95%b0%e6%8d%ae%e5%ba%93%e6%88%aa%e5%9b%be%e7%89%87%e6%ae%b5', '', 'inherit', 'open', 'closed', '', '%e6%88%91%e7%9a%84%e5%8d%9a%e5%ae%a2%e7%ac%ac%e4%b8%89%e7%ab%a0%e6%96%87%e7%ab%a0%e7%b3%bb%e7%bb%9f-%e6%95%b0%e6%8d%ae%e5%ba%93%e6%88%aa%e5%9b%be%e7%89%87%e6%ae%b5', '', '', '2016-12-11 00:06:27', '2016-12-10 16:06:27', '', 0, 'http://acheng1314.cn/wp-content/uploads/2016/12/我的博客第三章文章系统-数据库截图片段.png', 0, 'attachment', 'image/png', 0);

--
-- Indexes for dumped tables
--

--
-- Indexes for table `wp_posts`
--
ALTER TABLE `wp_posts`
  ADD PRIMARY KEY (`ID`), ADD KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`), ADD KEY `post_parent` (`post_parent`), ADD KEY `post_author` (`post_author`), ADD KEY `post_name` (`post_name`(191));

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `wp_posts`
--
ALTER TABLE `wp_posts`
  MODIFY `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=304;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;